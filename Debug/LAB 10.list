
LAB 10.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000af30  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000864  0800b0d0  0800b0d0  0001b0d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b934  0800b934  000201f0  2**0
                  CONTENTS
  4 .ARM          00000008  0800b934  0800b934  0001b934  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b93c  0800b93c  000201f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b93c  0800b93c  0001b93c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b940  0800b940  0001b940  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f0  20000000  0800b944  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002cc  200001f0  0800bb34  000201f0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200004bc  0800bb34  000204bc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011968  00000000  00000000  00020220  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002627  00000000  00000000  00031b88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001028  00000000  00000000  000341b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f10  00000000  00000000  000351d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001852c  00000000  00000000  000360e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000102e6  00000000  00000000  0004e614  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009586f  00000000  00000000  0005e8fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000f4169  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000059b8  00000000  00000000  000f41bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001f0 	.word	0x200001f0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800b0b8 	.word	0x0800b0b8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001f4 	.word	0x200001f4
 80001dc:	0800b0b8 	.word	0x0800b0b8

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b9a4 	b.w	8000ff8 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f83c 	bl	8000d34 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_d2lz>:
 8000cc8:	b538      	push	{r3, r4, r5, lr}
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2300      	movs	r3, #0
 8000cce:	4604      	mov	r4, r0
 8000cd0:	460d      	mov	r5, r1
 8000cd2:	f7ff ff0b 	bl	8000aec <__aeabi_dcmplt>
 8000cd6:	b928      	cbnz	r0, 8000ce4 <__aeabi_d2lz+0x1c>
 8000cd8:	4620      	mov	r0, r4
 8000cda:	4629      	mov	r1, r5
 8000cdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ce0:	f000 b80a 	b.w	8000cf8 <__aeabi_d2ulz>
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cea:	f000 f805 	bl	8000cf8 <__aeabi_d2ulz>
 8000cee:	4240      	negs	r0, r0
 8000cf0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf4:	bd38      	pop	{r3, r4, r5, pc}
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_d2ulz>:
 8000cf8:	b5d0      	push	{r4, r6, r7, lr}
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	; (8000d2c <__aeabi_d2ulz+0x34>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	4606      	mov	r6, r0
 8000d00:	460f      	mov	r7, r1
 8000d02:	f7ff fc81 	bl	8000608 <__aeabi_dmul>
 8000d06:	f7ff ff57 	bl	8000bb8 <__aeabi_d2uiz>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	f7ff fc02 	bl	8000514 <__aeabi_ui2d>
 8000d10:	4b07      	ldr	r3, [pc, #28]	; (8000d30 <__aeabi_d2ulz+0x38>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	f7ff fc78 	bl	8000608 <__aeabi_dmul>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	4630      	mov	r0, r6
 8000d1e:	4639      	mov	r1, r7
 8000d20:	f7ff faba 	bl	8000298 <__aeabi_dsub>
 8000d24:	f7ff ff48 	bl	8000bb8 <__aeabi_d2uiz>
 8000d28:	4621      	mov	r1, r4
 8000d2a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d2c:	3df00000 	.word	0x3df00000
 8000d30:	41f00000 	.word	0x41f00000

08000d34 <__udivmoddi4>:
 8000d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d38:	9d08      	ldr	r5, [sp, #32]
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	468c      	mov	ip, r1
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	f040 8083 	bne.w	8000e4a <__udivmoddi4+0x116>
 8000d44:	428a      	cmp	r2, r1
 8000d46:	4617      	mov	r7, r2
 8000d48:	d947      	bls.n	8000dda <__udivmoddi4+0xa6>
 8000d4a:	fab2 f282 	clz	r2, r2
 8000d4e:	b142      	cbz	r2, 8000d62 <__udivmoddi4+0x2e>
 8000d50:	f1c2 0020 	rsb	r0, r2, #32
 8000d54:	fa24 f000 	lsr.w	r0, r4, r0
 8000d58:	4091      	lsls	r1, r2
 8000d5a:	4097      	lsls	r7, r2
 8000d5c:	ea40 0c01 	orr.w	ip, r0, r1
 8000d60:	4094      	lsls	r4, r2
 8000d62:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d66:	0c23      	lsrs	r3, r4, #16
 8000d68:	fbbc f6f8 	udiv	r6, ip, r8
 8000d6c:	fa1f fe87 	uxth.w	lr, r7
 8000d70:	fb08 c116 	mls	r1, r8, r6, ip
 8000d74:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d78:	fb06 f10e 	mul.w	r1, r6, lr
 8000d7c:	4299      	cmp	r1, r3
 8000d7e:	d909      	bls.n	8000d94 <__udivmoddi4+0x60>
 8000d80:	18fb      	adds	r3, r7, r3
 8000d82:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d86:	f080 8119 	bcs.w	8000fbc <__udivmoddi4+0x288>
 8000d8a:	4299      	cmp	r1, r3
 8000d8c:	f240 8116 	bls.w	8000fbc <__udivmoddi4+0x288>
 8000d90:	3e02      	subs	r6, #2
 8000d92:	443b      	add	r3, r7
 8000d94:	1a5b      	subs	r3, r3, r1
 8000d96:	b2a4      	uxth	r4, r4
 8000d98:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d9c:	fb08 3310 	mls	r3, r8, r0, r3
 8000da0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000da4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000da8:	45a6      	cmp	lr, r4
 8000daa:	d909      	bls.n	8000dc0 <__udivmoddi4+0x8c>
 8000dac:	193c      	adds	r4, r7, r4
 8000dae:	f100 33ff 	add.w	r3, r0, #4294967295
 8000db2:	f080 8105 	bcs.w	8000fc0 <__udivmoddi4+0x28c>
 8000db6:	45a6      	cmp	lr, r4
 8000db8:	f240 8102 	bls.w	8000fc0 <__udivmoddi4+0x28c>
 8000dbc:	3802      	subs	r0, #2
 8000dbe:	443c      	add	r4, r7
 8000dc0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dc4:	eba4 040e 	sub.w	r4, r4, lr
 8000dc8:	2600      	movs	r6, #0
 8000dca:	b11d      	cbz	r5, 8000dd4 <__udivmoddi4+0xa0>
 8000dcc:	40d4      	lsrs	r4, r2
 8000dce:	2300      	movs	r3, #0
 8000dd0:	e9c5 4300 	strd	r4, r3, [r5]
 8000dd4:	4631      	mov	r1, r6
 8000dd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dda:	b902      	cbnz	r2, 8000dde <__udivmoddi4+0xaa>
 8000ddc:	deff      	udf	#255	; 0xff
 8000dde:	fab2 f282 	clz	r2, r2
 8000de2:	2a00      	cmp	r2, #0
 8000de4:	d150      	bne.n	8000e88 <__udivmoddi4+0x154>
 8000de6:	1bcb      	subs	r3, r1, r7
 8000de8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dec:	fa1f f887 	uxth.w	r8, r7
 8000df0:	2601      	movs	r6, #1
 8000df2:	fbb3 fcfe 	udiv	ip, r3, lr
 8000df6:	0c21      	lsrs	r1, r4, #16
 8000df8:	fb0e 331c 	mls	r3, lr, ip, r3
 8000dfc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e00:	fb08 f30c 	mul.w	r3, r8, ip
 8000e04:	428b      	cmp	r3, r1
 8000e06:	d907      	bls.n	8000e18 <__udivmoddi4+0xe4>
 8000e08:	1879      	adds	r1, r7, r1
 8000e0a:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e0e:	d202      	bcs.n	8000e16 <__udivmoddi4+0xe2>
 8000e10:	428b      	cmp	r3, r1
 8000e12:	f200 80e9 	bhi.w	8000fe8 <__udivmoddi4+0x2b4>
 8000e16:	4684      	mov	ip, r0
 8000e18:	1ac9      	subs	r1, r1, r3
 8000e1a:	b2a3      	uxth	r3, r4
 8000e1c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e20:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e24:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e28:	fb08 f800 	mul.w	r8, r8, r0
 8000e2c:	45a0      	cmp	r8, r4
 8000e2e:	d907      	bls.n	8000e40 <__udivmoddi4+0x10c>
 8000e30:	193c      	adds	r4, r7, r4
 8000e32:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e36:	d202      	bcs.n	8000e3e <__udivmoddi4+0x10a>
 8000e38:	45a0      	cmp	r8, r4
 8000e3a:	f200 80d9 	bhi.w	8000ff0 <__udivmoddi4+0x2bc>
 8000e3e:	4618      	mov	r0, r3
 8000e40:	eba4 0408 	sub.w	r4, r4, r8
 8000e44:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e48:	e7bf      	b.n	8000dca <__udivmoddi4+0x96>
 8000e4a:	428b      	cmp	r3, r1
 8000e4c:	d909      	bls.n	8000e62 <__udivmoddi4+0x12e>
 8000e4e:	2d00      	cmp	r5, #0
 8000e50:	f000 80b1 	beq.w	8000fb6 <__udivmoddi4+0x282>
 8000e54:	2600      	movs	r6, #0
 8000e56:	e9c5 0100 	strd	r0, r1, [r5]
 8000e5a:	4630      	mov	r0, r6
 8000e5c:	4631      	mov	r1, r6
 8000e5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e62:	fab3 f683 	clz	r6, r3
 8000e66:	2e00      	cmp	r6, #0
 8000e68:	d14a      	bne.n	8000f00 <__udivmoddi4+0x1cc>
 8000e6a:	428b      	cmp	r3, r1
 8000e6c:	d302      	bcc.n	8000e74 <__udivmoddi4+0x140>
 8000e6e:	4282      	cmp	r2, r0
 8000e70:	f200 80b8 	bhi.w	8000fe4 <__udivmoddi4+0x2b0>
 8000e74:	1a84      	subs	r4, r0, r2
 8000e76:	eb61 0103 	sbc.w	r1, r1, r3
 8000e7a:	2001      	movs	r0, #1
 8000e7c:	468c      	mov	ip, r1
 8000e7e:	2d00      	cmp	r5, #0
 8000e80:	d0a8      	beq.n	8000dd4 <__udivmoddi4+0xa0>
 8000e82:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e86:	e7a5      	b.n	8000dd4 <__udivmoddi4+0xa0>
 8000e88:	f1c2 0320 	rsb	r3, r2, #32
 8000e8c:	fa20 f603 	lsr.w	r6, r0, r3
 8000e90:	4097      	lsls	r7, r2
 8000e92:	fa01 f002 	lsl.w	r0, r1, r2
 8000e96:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e9a:	40d9      	lsrs	r1, r3
 8000e9c:	4330      	orrs	r0, r6
 8000e9e:	0c03      	lsrs	r3, r0, #16
 8000ea0:	fbb1 f6fe 	udiv	r6, r1, lr
 8000ea4:	fa1f f887 	uxth.w	r8, r7
 8000ea8:	fb0e 1116 	mls	r1, lr, r6, r1
 8000eac:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eb0:	fb06 f108 	mul.w	r1, r6, r8
 8000eb4:	4299      	cmp	r1, r3
 8000eb6:	fa04 f402 	lsl.w	r4, r4, r2
 8000eba:	d909      	bls.n	8000ed0 <__udivmoddi4+0x19c>
 8000ebc:	18fb      	adds	r3, r7, r3
 8000ebe:	f106 3cff 	add.w	ip, r6, #4294967295
 8000ec2:	f080 808d 	bcs.w	8000fe0 <__udivmoddi4+0x2ac>
 8000ec6:	4299      	cmp	r1, r3
 8000ec8:	f240 808a 	bls.w	8000fe0 <__udivmoddi4+0x2ac>
 8000ecc:	3e02      	subs	r6, #2
 8000ece:	443b      	add	r3, r7
 8000ed0:	1a5b      	subs	r3, r3, r1
 8000ed2:	b281      	uxth	r1, r0
 8000ed4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ed8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000edc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ee0:	fb00 f308 	mul.w	r3, r0, r8
 8000ee4:	428b      	cmp	r3, r1
 8000ee6:	d907      	bls.n	8000ef8 <__udivmoddi4+0x1c4>
 8000ee8:	1879      	adds	r1, r7, r1
 8000eea:	f100 3cff 	add.w	ip, r0, #4294967295
 8000eee:	d273      	bcs.n	8000fd8 <__udivmoddi4+0x2a4>
 8000ef0:	428b      	cmp	r3, r1
 8000ef2:	d971      	bls.n	8000fd8 <__udivmoddi4+0x2a4>
 8000ef4:	3802      	subs	r0, #2
 8000ef6:	4439      	add	r1, r7
 8000ef8:	1acb      	subs	r3, r1, r3
 8000efa:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000efe:	e778      	b.n	8000df2 <__udivmoddi4+0xbe>
 8000f00:	f1c6 0c20 	rsb	ip, r6, #32
 8000f04:	fa03 f406 	lsl.w	r4, r3, r6
 8000f08:	fa22 f30c 	lsr.w	r3, r2, ip
 8000f0c:	431c      	orrs	r4, r3
 8000f0e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f12:	fa01 f306 	lsl.w	r3, r1, r6
 8000f16:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f1a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f1e:	431f      	orrs	r7, r3
 8000f20:	0c3b      	lsrs	r3, r7, #16
 8000f22:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f26:	fa1f f884 	uxth.w	r8, r4
 8000f2a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f2e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f32:	fb09 fa08 	mul.w	sl, r9, r8
 8000f36:	458a      	cmp	sl, r1
 8000f38:	fa02 f206 	lsl.w	r2, r2, r6
 8000f3c:	fa00 f306 	lsl.w	r3, r0, r6
 8000f40:	d908      	bls.n	8000f54 <__udivmoddi4+0x220>
 8000f42:	1861      	adds	r1, r4, r1
 8000f44:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f48:	d248      	bcs.n	8000fdc <__udivmoddi4+0x2a8>
 8000f4a:	458a      	cmp	sl, r1
 8000f4c:	d946      	bls.n	8000fdc <__udivmoddi4+0x2a8>
 8000f4e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f52:	4421      	add	r1, r4
 8000f54:	eba1 010a 	sub.w	r1, r1, sl
 8000f58:	b2bf      	uxth	r7, r7
 8000f5a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f5e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f62:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f66:	fb00 f808 	mul.w	r8, r0, r8
 8000f6a:	45b8      	cmp	r8, r7
 8000f6c:	d907      	bls.n	8000f7e <__udivmoddi4+0x24a>
 8000f6e:	19e7      	adds	r7, r4, r7
 8000f70:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f74:	d22e      	bcs.n	8000fd4 <__udivmoddi4+0x2a0>
 8000f76:	45b8      	cmp	r8, r7
 8000f78:	d92c      	bls.n	8000fd4 <__udivmoddi4+0x2a0>
 8000f7a:	3802      	subs	r0, #2
 8000f7c:	4427      	add	r7, r4
 8000f7e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f82:	eba7 0708 	sub.w	r7, r7, r8
 8000f86:	fba0 8902 	umull	r8, r9, r0, r2
 8000f8a:	454f      	cmp	r7, r9
 8000f8c:	46c6      	mov	lr, r8
 8000f8e:	4649      	mov	r1, r9
 8000f90:	d31a      	bcc.n	8000fc8 <__udivmoddi4+0x294>
 8000f92:	d017      	beq.n	8000fc4 <__udivmoddi4+0x290>
 8000f94:	b15d      	cbz	r5, 8000fae <__udivmoddi4+0x27a>
 8000f96:	ebb3 020e 	subs.w	r2, r3, lr
 8000f9a:	eb67 0701 	sbc.w	r7, r7, r1
 8000f9e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000fa2:	40f2      	lsrs	r2, r6
 8000fa4:	ea4c 0202 	orr.w	r2, ip, r2
 8000fa8:	40f7      	lsrs	r7, r6
 8000faa:	e9c5 2700 	strd	r2, r7, [r5]
 8000fae:	2600      	movs	r6, #0
 8000fb0:	4631      	mov	r1, r6
 8000fb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fb6:	462e      	mov	r6, r5
 8000fb8:	4628      	mov	r0, r5
 8000fba:	e70b      	b.n	8000dd4 <__udivmoddi4+0xa0>
 8000fbc:	4606      	mov	r6, r0
 8000fbe:	e6e9      	b.n	8000d94 <__udivmoddi4+0x60>
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	e6fd      	b.n	8000dc0 <__udivmoddi4+0x8c>
 8000fc4:	4543      	cmp	r3, r8
 8000fc6:	d2e5      	bcs.n	8000f94 <__udivmoddi4+0x260>
 8000fc8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000fcc:	eb69 0104 	sbc.w	r1, r9, r4
 8000fd0:	3801      	subs	r0, #1
 8000fd2:	e7df      	b.n	8000f94 <__udivmoddi4+0x260>
 8000fd4:	4608      	mov	r0, r1
 8000fd6:	e7d2      	b.n	8000f7e <__udivmoddi4+0x24a>
 8000fd8:	4660      	mov	r0, ip
 8000fda:	e78d      	b.n	8000ef8 <__udivmoddi4+0x1c4>
 8000fdc:	4681      	mov	r9, r0
 8000fde:	e7b9      	b.n	8000f54 <__udivmoddi4+0x220>
 8000fe0:	4666      	mov	r6, ip
 8000fe2:	e775      	b.n	8000ed0 <__udivmoddi4+0x19c>
 8000fe4:	4630      	mov	r0, r6
 8000fe6:	e74a      	b.n	8000e7e <__udivmoddi4+0x14a>
 8000fe8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fec:	4439      	add	r1, r7
 8000fee:	e713      	b.n	8000e18 <__udivmoddi4+0xe4>
 8000ff0:	3802      	subs	r0, #2
 8000ff2:	443c      	add	r4, r7
 8000ff4:	e724      	b.n	8000e40 <__udivmoddi4+0x10c>
 8000ff6:	bf00      	nop

08000ff8 <__aeabi_idiv0>:
 8000ff8:	4770      	bx	lr
 8000ffa:	bf00      	nop
 8000ffc:	0000      	movs	r0, r0
	...

08001000 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8001000:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001004:	b0d8      	sub	sp, #352	; 0x160
 8001006:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001008:	f001 fe0a 	bl	8002c20 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800100c:	f001 f822 	bl	8002054 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001010:	f001 f9b4 	bl	800237c <MX_GPIO_Init>
	MX_DMA_Init();
 8001014:	f001 f992 	bl	800233c <MX_DMA_Init>
	MX_ADC1_Init();
 8001018:	f001 f884 	bl	8002124 <MX_ADC1_Init>
	MX_TIM3_Init();
 800101c:	f001 f8f4 	bl	8002208 <MX_TIM3_Init>
	MX_SPI3_Init();
 8001020:	f001 f8ba 	bl	8002198 <MX_SPI3_Init>
	MX_TIM11_Init();
 8001024:	f001 f93c 	bl	80022a0 <MX_TIM11_Init>
	MX_USART2_UART_Init();
 8001028:	f001 f95e 	bl	80022e8 <MX_USART2_UART_Init>
	/* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start(&htim3);
 800102c:	48c8      	ldr	r0, [pc, #800]	; (8001350 <main+0x350>)
 800102e:	f004 f8ba 	bl	80051a6 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start_IT(&htim11);
 8001032:	48c8      	ldr	r0, [pc, #800]	; (8001354 <main+0x354>)
 8001034:	f004 f8db 	bl	80051ee <HAL_TIM_Base_Start_IT>
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) ADCin, 5);
 8001038:	2205      	movs	r2, #5
 800103a:	49c7      	ldr	r1, [pc, #796]	; (8001358 <main+0x358>)
 800103c:	48c7      	ldr	r0, [pc, #796]	; (800135c <main+0x35c>)
 800103e:	f001 ffe5 	bl	800300c <HAL_ADC_Start_DMA>

	HAL_GPIO_WritePin(LOAD_GPIO_Port, LOAD_Pin, GPIO_PIN_RESET);
 8001042:	2200      	movs	r2, #0
 8001044:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001048:	48c5      	ldr	r0, [pc, #788]	; (8001360 <main+0x360>)
 800104a:	f003 f8a3 	bl	8004194 <HAL_GPIO_WritePin>

		 // UARTReceiveAndResponsePolling();


		 /*Method 2 Interrupt Mode*/
		HAL_UART_Receive_IT(&huart2, (uint8_t*) RxDataBuffer, 32);
 800104e:	2220      	movs	r2, #32
 8001050:	49c4      	ldr	r1, [pc, #784]	; (8001364 <main+0x364>)
 8001052:	48c5      	ldr	r0, [pc, #788]	; (8001368 <main+0x368>)
 8001054:	f004 fd66 	bl	8005b24 <HAL_UART_Receive_IT>

		/*Method 2 W/ 1 Char Received*/

		//read character
		int8_t inputchar = UARTReceiveIT();
 8001058:	f001 faa0 	bl	800259c <UARTReceiveIT>
 800105c:	4603      	mov	r3, r0
 800105e:	f887 315f 	strb.w	r3, [r7, #351]	; 0x15f
		//	  	  		{
		//	  	  			sprintf(TxDataBuffer, "ReceivedChar:[%c]\r\n", inputchar);
		//	  	  			HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
		//	  	  		}
		static uint64_t timestamp = 0;
		switch (CurrentMode) {
 8001062:	4bc2      	ldr	r3, [pc, #776]	; (800136c <main+0x36c>)
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	2b1e      	cmp	r3, #30
 8001068:	f200 808a 	bhi.w	8001180 <main+0x180>
 800106c:	e044      	b.n	80010f8 <main+0xf8>
 800106e:	3b28      	subs	r3, #40	; 0x28
 8001070:	2b1e      	cmp	r3, #30
 8001072:	f200 8681 	bhi.w	8001d78 <main+0xd78>
 8001076:	a201      	add	r2, pc, #4	; (adr r2, 800107c <main+0x7c>)
 8001078:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800107c:	080015ed 	.word	0x080015ed
 8001080:	08001d79 	.word	0x08001d79
 8001084:	08001d79 	.word	0x08001d79
 8001088:	08001d79 	.word	0x08001d79
 800108c:	08001d79 	.word	0x08001d79
 8001090:	08001d79 	.word	0x08001d79
 8001094:	08001d79 	.word	0x08001d79
 8001098:	08001d79 	.word	0x08001d79
 800109c:	08001d79 	.word	0x08001d79
 80010a0:	08001d79 	.word	0x08001d79
 80010a4:	08001679 	.word	0x08001679
 80010a8:	08001d79 	.word	0x08001d79
 80010ac:	08001d79 	.word	0x08001d79
 80010b0:	08001d79 	.word	0x08001d79
 80010b4:	08001d79 	.word	0x08001d79
 80010b8:	08001d79 	.word	0x08001d79
 80010bc:	08001d79 	.word	0x08001d79
 80010c0:	08001d79 	.word	0x08001d79
 80010c4:	08001d79 	.word	0x08001d79
 80010c8:	08001d79 	.word	0x08001d79
 80010cc:	0800198f 	.word	0x0800198f
 80010d0:	08001d79 	.word	0x08001d79
 80010d4:	08001d79 	.word	0x08001d79
 80010d8:	08001d79 	.word	0x08001d79
 80010dc:	08001d79 	.word	0x08001d79
 80010e0:	08001d79 	.word	0x08001d79
 80010e4:	08001d79 	.word	0x08001d79
 80010e8:	08001d79 	.word	0x08001d79
 80010ec:	08001d79 	.word	0x08001d79
 80010f0:	08001d79 	.word	0x08001d79
 80010f4:	08001a11 	.word	0x08001a11
 80010f8:	2b1e      	cmp	r3, #30
 80010fa:	f200 863d 	bhi.w	8001d78 <main+0xd78>
 80010fe:	a201      	add	r2, pc, #4	; (adr r2, 8001104 <main+0x104>)
 8001100:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001104:	08001191 	.word	0x08001191
 8001108:	08001d79 	.word	0x08001d79
 800110c:	08001d79 	.word	0x08001d79
 8001110:	08001d79 	.word	0x08001d79
 8001114:	08001d79 	.word	0x08001d79
 8001118:	08001d79 	.word	0x08001d79
 800111c:	08001d79 	.word	0x08001d79
 8001120:	08001d79 	.word	0x08001d79
 8001124:	08001d79 	.word	0x08001d79
 8001128:	08001d79 	.word	0x08001d79
 800112c:	080011c9 	.word	0x080011c9
 8001130:	08001d79 	.word	0x08001d79
 8001134:	08001d79 	.word	0x08001d79
 8001138:	08001d79 	.word	0x08001d79
 800113c:	08001d79 	.word	0x08001d79
 8001140:	08001d79 	.word	0x08001d79
 8001144:	08001d79 	.word	0x08001d79
 8001148:	08001d79 	.word	0x08001d79
 800114c:	08001d79 	.word	0x08001d79
 8001150:	08001d79 	.word	0x08001d79
 8001154:	08001235 	.word	0x08001235
 8001158:	08001d79 	.word	0x08001d79
 800115c:	08001d79 	.word	0x08001d79
 8001160:	08001d79 	.word	0x08001d79
 8001164:	08001d79 	.word	0x08001d79
 8001168:	08001d79 	.word	0x08001d79
 800116c:	08001d79 	.word	0x08001d79
 8001170:	08001d79 	.word	0x08001d79
 8001174:	08001d79 	.word	0x08001d79
 8001178:	08001d79 	.word	0x08001d79
 800117c:	0800126d 	.word	0x0800126d
 8001180:	2b46      	cmp	r3, #70	; 0x46
 8001182:	f200 85f9 	bhi.w	8001d78 <main+0xd78>
 8001186:	2b28      	cmp	r3, #40	; 0x28
 8001188:	f4bf af71 	bcs.w	800106e <main+0x6e>
 800118c:	f000 bdf4 	b.w	8001d78 <main+0xd78>
		case Mode_MainMenu:	//MainMENU
		{
			char temp[] = "\r\n---FUNCTION GENERATOR---\r\n"
 8001190:	f107 0308 	add.w	r3, r7, #8
 8001194:	4a76      	ldr	r2, [pc, #472]	; (8001370 <main+0x370>)
 8001196:	4618      	mov	r0, r3
 8001198:	4611      	mov	r1, r2
 800119a:	2362      	movs	r3, #98	; 0x62
 800119c:	461a      	mov	r2, r3
 800119e:	f005 fb5d 	bl	800685c <memcpy>
					"---------------\r\n"
					"1 >> Saw Tooth\r\n"
					"2 >> Sine Wave\r\n"
					"3 >> Square Wave\r\n\r\n";
			HAL_UART_Transmit(&huart2, (uint8_t*) temp, strlen(temp), 1000);
 80011a2:	f107 0308 	add.w	r3, r7, #8
 80011a6:	4618      	mov	r0, r3
 80011a8:	f7ff f81a 	bl	80001e0 <strlen>
 80011ac:	4603      	mov	r3, r0
 80011ae:	b29a      	uxth	r2, r3
 80011b0:	f107 0108 	add.w	r1, r7, #8
 80011b4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011b8:	486b      	ldr	r0, [pc, #428]	; (8001368 <main+0x368>)
 80011ba:	f004 fc1a 	bl	80059f2 <HAL_UART_Transmit>

			CurrentMode = Mode_MainMenuWait;
 80011be:	4b6b      	ldr	r3, [pc, #428]	; (800136c <main+0x36c>)
 80011c0:	220a      	movs	r2, #10
 80011c2:	601a      	str	r2, [r3, #0]
			break;
 80011c4:	f000 bdd8 	b.w	8001d78 <main+0xd78>
		}

		case Mode_MainMenuWait:
			switch (inputchar) {
 80011c8:	f997 315f 	ldrsb.w	r3, [r7, #351]	; 0x15f
 80011cc:	2b33      	cmp	r3, #51	; 0x33
 80011ce:	d012      	beq.n	80011f6 <main+0x1f6>
 80011d0:	2b33      	cmp	r3, #51	; 0x33
 80011d2:	dc14      	bgt.n	80011fe <main+0x1fe>
 80011d4:	2b32      	cmp	r3, #50	; 0x32
 80011d6:	d00a      	beq.n	80011ee <main+0x1ee>
 80011d8:	2b32      	cmp	r3, #50	; 0x32
 80011da:	dc10      	bgt.n	80011fe <main+0x1fe>
 80011dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011e0:	d025      	beq.n	800122e <main+0x22e>
 80011e2:	2b31      	cmp	r3, #49	; 0x31
 80011e4:	d10b      	bne.n	80011fe <main+0x1fe>
			case -1:	//no input
				break;

			case '1':	//saw tooth
			{
				CurrentMode = Mode_SawTooth;
 80011e6:	4b61      	ldr	r3, [pc, #388]	; (800136c <main+0x36c>)
 80011e8:	2214      	movs	r2, #20
 80011ea:	601a      	str	r2, [r3, #0]
				break;
 80011ec:	e020      	b.n	8001230 <main+0x230>
			}

			case '2': //sinewave
			{
				CurrentMode = Mode_SineWave;
 80011ee:	4b5f      	ldr	r3, [pc, #380]	; (800136c <main+0x36c>)
 80011f0:	2228      	movs	r2, #40	; 0x28
 80011f2:	601a      	str	r2, [r3, #0]
				break;
 80011f4:	e01c      	b.n	8001230 <main+0x230>
			}

			case '3': //squarewave
			{
				CurrentMode = Mode_SquareWave;
 80011f6:	4b5d      	ldr	r3, [pc, #372]	; (800136c <main+0x36c>)
 80011f8:	223c      	movs	r2, #60	; 0x3c
 80011fa:	601a      	str	r2, [r3, #0]
				break;
 80011fc:	e018      	b.n	8001230 <main+0x230>
			}

			default: {
				char temp[] = "!!!ERROR!!!\r\n";
 80011fe:	4b5d      	ldr	r3, [pc, #372]	; (8001374 <main+0x374>)
 8001200:	f507 74a2 	add.w	r4, r7, #324	; 0x144
 8001204:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001206:	c407      	stmia	r4!, {r0, r1, r2}
 8001208:	8023      	strh	r3, [r4, #0]
				HAL_UART_Transmit(&huart2, (uint8_t*) temp, strlen(temp), 1000);
 800120a:	f507 73a2 	add.w	r3, r7, #324	; 0x144
 800120e:	4618      	mov	r0, r3
 8001210:	f7fe ffe6 	bl	80001e0 <strlen>
 8001214:	4603      	mov	r3, r0
 8001216:	b29a      	uxth	r2, r3
 8001218:	f507 71a2 	add.w	r1, r7, #324	; 0x144
 800121c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001220:	4851      	ldr	r0, [pc, #324]	; (8001368 <main+0x368>)
 8001222:	f004 fbe6 	bl	80059f2 <HAL_UART_Transmit>
				CurrentMode = Mode_MainMenu;
 8001226:	4b51      	ldr	r3, [pc, #324]	; (800136c <main+0x36c>)
 8001228:	2200      	movs	r2, #0
 800122a:	601a      	str	r2, [r3, #0]
				break;
 800122c:	e000      	b.n	8001230 <main+0x230>
				break;
 800122e:	bf00      	nop
			}
			}
			break;
 8001230:	f000 bda2 	b.w	8001d78 <main+0xd78>

		case Mode_SawTooth:	//SawTooth
		{
			char temp[] = "-------------------\r\n"
 8001234:	f107 0308 	add.w	r3, r7, #8
 8001238:	4a4f      	ldr	r2, [pc, #316]	; (8001378 <main+0x378>)
 800123a:	4618      	mov	r0, r3
 800123c:	4611      	mov	r1, r2
 800123e:	23fe      	movs	r3, #254	; 0xfe
 8001240:	461a      	mov	r2, r3
 8001242:	f005 fb0b 	bl	800685c <memcpy>
					"g : Set V_Low +0.1V\r\n"
					"h : Set V_Low -0.1V\r\n"
					"j : Slope DOWN\r\n"
					"k : Slope UP\r\n"
					"x : back\r\n";
			HAL_UART_Transmit(&huart2, (uint8_t*) temp, strlen(temp), 1000);
 8001246:	f107 0308 	add.w	r3, r7, #8
 800124a:	4618      	mov	r0, r3
 800124c:	f7fe ffc8 	bl	80001e0 <strlen>
 8001250:	4603      	mov	r3, r0
 8001252:	b29a      	uxth	r2, r3
 8001254:	f107 0108 	add.w	r1, r7, #8
 8001258:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800125c:	4842      	ldr	r0, [pc, #264]	; (8001368 <main+0x368>)
 800125e:	f004 fbc8 	bl	80059f2 <HAL_UART_Transmit>
			CurrentMode = Mode_SawTooth_Wait;
 8001262:	4b42      	ldr	r3, [pc, #264]	; (800136c <main+0x36c>)
 8001264:	221e      	movs	r2, #30
 8001266:	601a      	str	r2, [r3, #0]
			break;
 8001268:	f000 bd86 	b.w	8001d78 <main+0xd78>
		}

		case Mode_SawTooth_Wait:		//default 5 Hz >> range 0 - 10 Hz
			switch (inputchar) {
 800126c:	f997 315f 	ldrsb.w	r3, [r7, #351]	; 0x15f
 8001270:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001274:	f000 81b8 	beq.w	80015e8 <main+0x5e8>
 8001278:	f1b3 3fff 	cmp.w	r3, #4294967295
 800127c:	f2c0 819a 	blt.w	80015b4 <main+0x5b4>
 8001280:	2b78      	cmp	r3, #120	; 0x78
 8001282:	f300 8197 	bgt.w	80015b4 <main+0x5b4>
 8001286:	2b61      	cmp	r3, #97	; 0x61
 8001288:	f2c0 8194 	blt.w	80015b4 <main+0x5b4>
 800128c:	3b61      	subs	r3, #97	; 0x61
 800128e:	2b17      	cmp	r3, #23
 8001290:	f200 8190 	bhi.w	80015b4 <main+0x5b4>
 8001294:	a201      	add	r2, pc, #4	; (adr r2, 800129c <main+0x29c>)
 8001296:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800129a:	bf00      	nop
 800129c:	080012fd 	.word	0x080012fd
 80012a0:	080015b5 	.word	0x080015b5
 80012a4:	080015b5 	.word	0x080015b5
 80012a8:	080013cb 	.word	0x080013cb
 80012ac:	080015b5 	.word	0x080015b5
 80012b0:	0800142f 	.word	0x0800142f
 80012b4:	08001493 	.word	0x08001493
 80012b8:	080014f7 	.word	0x080014f7
 80012bc:	080015b5 	.word	0x080015b5
 80012c0:	08001553 	.word	0x08001553
 80012c4:	08001581 	.word	0x08001581
 80012c8:	080015b5 	.word	0x080015b5
 80012cc:	080015b5 	.word	0x080015b5
 80012d0:	080015b5 	.word	0x080015b5
 80012d4:	080015b5 	.word	0x080015b5
 80012d8:	080015b5 	.word	0x080015b5
 80012dc:	080015b5 	.word	0x080015b5
 80012e0:	080015b5 	.word	0x080015b5
 80012e4:	08001385 	.word	0x08001385
 80012e8:	080015b5 	.word	0x080015b5
 80012ec:	080015b5 	.word	0x080015b5
 80012f0:	080015b5 	.word	0x080015b5
 80012f4:	080015b5 	.word	0x080015b5
 80012f8:	080015ad 	.word	0x080015ad

			case -1:	//no input
				break;

			case 'a':	//increase frequency
				Frequency += 0.1;
 80012fc:	4b1f      	ldr	r3, [pc, #124]	; (800137c <main+0x37c>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	4618      	mov	r0, r3
 8001302:	f7ff f929 	bl	8000558 <__aeabi_f2d>
 8001306:	a310      	add	r3, pc, #64	; (adr r3, 8001348 <main+0x348>)
 8001308:	e9d3 2300 	ldrd	r2, r3, [r3]
 800130c:	f7fe ffc6 	bl	800029c <__adddf3>
 8001310:	4602      	mov	r2, r0
 8001312:	460b      	mov	r3, r1
 8001314:	4610      	mov	r0, r2
 8001316:	4619      	mov	r1, r3
 8001318:	f7ff fc6e 	bl	8000bf8 <__aeabi_d2f>
 800131c:	4603      	mov	r3, r0
 800131e:	4a17      	ldr	r2, [pc, #92]	; (800137c <main+0x37c>)
 8001320:	6013      	str	r3, [r2, #0]
				if (Frequency >= 10) {
 8001322:	4b16      	ldr	r3, [pc, #88]	; (800137c <main+0x37c>)
 8001324:	edd3 7a00 	vldr	s15, [r3]
 8001328:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800132c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001330:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001334:	db02      	blt.n	800133c <main+0x33c>
					Frequency = 10;
 8001336:	4b11      	ldr	r3, [pc, #68]	; (800137c <main+0x37c>)
 8001338:	4a11      	ldr	r2, [pc, #68]	; (8001380 <main+0x380>)
 800133a:	601a      	str	r2, [r3, #0]
				}
				CurrentMode = Mode_SawTooth;
 800133c:	4b0b      	ldr	r3, [pc, #44]	; (800136c <main+0x36c>)
 800133e:	2214      	movs	r2, #20
 8001340:	601a      	str	r2, [r3, #0]
				break;
 8001342:	e152      	b.n	80015ea <main+0x5ea>
 8001344:	f3af 8000 	nop.w
 8001348:	9999999a 	.word	0x9999999a
 800134c:	3fb99999 	.word	0x3fb99999
 8001350:	200002e8 	.word	0x200002e8
 8001354:	200003c8 	.word	0x200003c8
 8001358:	2000020c 	.word	0x2000020c
 800135c:	20000380 	.word	0x20000380
 8001360:	40020000 	.word	0x40020000
 8001364:	2000024c 	.word	0x2000024c
 8001368:	20000468 	.word	0x20000468
 800136c:	20000224 	.word	0x20000224
 8001370:	0800b0f0 	.word	0x0800b0f0
 8001374:	0800b154 	.word	0x0800b154
 8001378:	0800b164 	.word	0x0800b164
 800137c:	20000004 	.word	0x20000004
 8001380:	41200000 	.word	0x41200000

			case 's':	//decrease frequency
				Frequency -= 0.1;
 8001384:	4bae      	ldr	r3, [pc, #696]	; (8001640 <main+0x640>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	4618      	mov	r0, r3
 800138a:	f7ff f8e5 	bl	8000558 <__aeabi_f2d>
 800138e:	a3a6      	add	r3, pc, #664	; (adr r3, 8001628 <main+0x628>)
 8001390:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001394:	f7fe ff80 	bl	8000298 <__aeabi_dsub>
 8001398:	4602      	mov	r2, r0
 800139a:	460b      	mov	r3, r1
 800139c:	4610      	mov	r0, r2
 800139e:	4619      	mov	r1, r3
 80013a0:	f7ff fc2a 	bl	8000bf8 <__aeabi_d2f>
 80013a4:	4603      	mov	r3, r0
 80013a6:	4aa6      	ldr	r2, [pc, #664]	; (8001640 <main+0x640>)
 80013a8:	6013      	str	r3, [r2, #0]
				if (Frequency <= 0) {
 80013aa:	4ba5      	ldr	r3, [pc, #660]	; (8001640 <main+0x640>)
 80013ac:	edd3 7a00 	vldr	s15, [r3]
 80013b0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80013b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013b8:	d803      	bhi.n	80013c2 <main+0x3c2>
					Frequency = 0;
 80013ba:	4ba1      	ldr	r3, [pc, #644]	; (8001640 <main+0x640>)
 80013bc:	f04f 0200 	mov.w	r2, #0
 80013c0:	601a      	str	r2, [r3, #0]
				}
				CurrentMode = Mode_SawTooth;
 80013c2:	4ba0      	ldr	r3, [pc, #640]	; (8001644 <main+0x644>)
 80013c4:	2214      	movs	r2, #20
 80013c6:	601a      	str	r2, [r3, #0]
				break;
 80013c8:	e10f      	b.n	80015ea <main+0x5ea>

			case 'd':	// Set V_High +0.1V
				MaxV += 0.1;
 80013ca:	4b9f      	ldr	r3, [pc, #636]	; (8001648 <main+0x648>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	4618      	mov	r0, r3
 80013d0:	f7ff f8c2 	bl	8000558 <__aeabi_f2d>
 80013d4:	a394      	add	r3, pc, #592	; (adr r3, 8001628 <main+0x628>)
 80013d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013da:	f7fe ff5f 	bl	800029c <__adddf3>
 80013de:	4602      	mov	r2, r0
 80013e0:	460b      	mov	r3, r1
 80013e2:	4610      	mov	r0, r2
 80013e4:	4619      	mov	r1, r3
 80013e6:	f7ff fc07 	bl	8000bf8 <__aeabi_d2f>
 80013ea:	4603      	mov	r3, r0
 80013ec:	4a96      	ldr	r2, [pc, #600]	; (8001648 <main+0x648>)
 80013ee:	6013      	str	r3, [r2, #0]
				if (MaxV >= 3.3 && MaxV > MinV) {
 80013f0:	4b95      	ldr	r3, [pc, #596]	; (8001648 <main+0x648>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	4618      	mov	r0, r3
 80013f6:	f7ff f8af 	bl	8000558 <__aeabi_f2d>
 80013fa:	a38d      	add	r3, pc, #564	; (adr r3, 8001630 <main+0x630>)
 80013fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001400:	f7ff fb88 	bl	8000b14 <__aeabi_dcmpge>
 8001404:	4603      	mov	r3, r0
 8001406:	2b00      	cmp	r3, #0
 8001408:	d00d      	beq.n	8001426 <main+0x426>
 800140a:	4b8f      	ldr	r3, [pc, #572]	; (8001648 <main+0x648>)
 800140c:	ed93 7a00 	vldr	s14, [r3]
 8001410:	4b8e      	ldr	r3, [pc, #568]	; (800164c <main+0x64c>)
 8001412:	edd3 7a00 	vldr	s15, [r3]
 8001416:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800141a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800141e:	dd02      	ble.n	8001426 <main+0x426>
					MaxV = 3.3;
 8001420:	4b89      	ldr	r3, [pc, #548]	; (8001648 <main+0x648>)
 8001422:	4a8b      	ldr	r2, [pc, #556]	; (8001650 <main+0x650>)
 8001424:	601a      	str	r2, [r3, #0]
				}
				CurrentMode = Mode_SawTooth;
 8001426:	4b87      	ldr	r3, [pc, #540]	; (8001644 <main+0x644>)
 8001428:	2214      	movs	r2, #20
 800142a:	601a      	str	r2, [r3, #0]
				break;
 800142c:	e0dd      	b.n	80015ea <main+0x5ea>

			case 'f':	// Set V_High -0.1V
				MaxV -= 0.1;
 800142e:	4b86      	ldr	r3, [pc, #536]	; (8001648 <main+0x648>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	4618      	mov	r0, r3
 8001434:	f7ff f890 	bl	8000558 <__aeabi_f2d>
 8001438:	a37b      	add	r3, pc, #492	; (adr r3, 8001628 <main+0x628>)
 800143a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800143e:	f7fe ff2b 	bl	8000298 <__aeabi_dsub>
 8001442:	4602      	mov	r2, r0
 8001444:	460b      	mov	r3, r1
 8001446:	4610      	mov	r0, r2
 8001448:	4619      	mov	r1, r3
 800144a:	f7ff fbd5 	bl	8000bf8 <__aeabi_d2f>
 800144e:	4603      	mov	r3, r0
 8001450:	4a7d      	ldr	r2, [pc, #500]	; (8001648 <main+0x648>)
 8001452:	6013      	str	r3, [r2, #0]
				if (MaxV <= 0.1 && MaxV > MinV) {
 8001454:	4b7c      	ldr	r3, [pc, #496]	; (8001648 <main+0x648>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	4618      	mov	r0, r3
 800145a:	f7ff f87d 	bl	8000558 <__aeabi_f2d>
 800145e:	a372      	add	r3, pc, #456	; (adr r3, 8001628 <main+0x628>)
 8001460:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001464:	f7ff fb4c 	bl	8000b00 <__aeabi_dcmple>
 8001468:	4603      	mov	r3, r0
 800146a:	2b00      	cmp	r3, #0
 800146c:	d00d      	beq.n	800148a <main+0x48a>
 800146e:	4b76      	ldr	r3, [pc, #472]	; (8001648 <main+0x648>)
 8001470:	ed93 7a00 	vldr	s14, [r3]
 8001474:	4b75      	ldr	r3, [pc, #468]	; (800164c <main+0x64c>)
 8001476:	edd3 7a00 	vldr	s15, [r3]
 800147a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800147e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001482:	dd02      	ble.n	800148a <main+0x48a>
					MaxV = 0.1;
 8001484:	4b70      	ldr	r3, [pc, #448]	; (8001648 <main+0x648>)
 8001486:	4a73      	ldr	r2, [pc, #460]	; (8001654 <main+0x654>)
 8001488:	601a      	str	r2, [r3, #0]
				}
				CurrentMode = Mode_SawTooth;
 800148a:	4b6e      	ldr	r3, [pc, #440]	; (8001644 <main+0x644>)
 800148c:	2214      	movs	r2, #20
 800148e:	601a      	str	r2, [r3, #0]
				break;
 8001490:	e0ab      	b.n	80015ea <main+0x5ea>

			case 'g':	// Set V_Low +0.1V
				MinV += 0.1;
 8001492:	4b6e      	ldr	r3, [pc, #440]	; (800164c <main+0x64c>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	4618      	mov	r0, r3
 8001498:	f7ff f85e 	bl	8000558 <__aeabi_f2d>
 800149c:	a362      	add	r3, pc, #392	; (adr r3, 8001628 <main+0x628>)
 800149e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014a2:	f7fe fefb 	bl	800029c <__adddf3>
 80014a6:	4602      	mov	r2, r0
 80014a8:	460b      	mov	r3, r1
 80014aa:	4610      	mov	r0, r2
 80014ac:	4619      	mov	r1, r3
 80014ae:	f7ff fba3 	bl	8000bf8 <__aeabi_d2f>
 80014b2:	4603      	mov	r3, r0
 80014b4:	4a65      	ldr	r2, [pc, #404]	; (800164c <main+0x64c>)
 80014b6:	6013      	str	r3, [r2, #0]
				if (MinV >= 3.2 && MaxV > MinV) {
 80014b8:	4b64      	ldr	r3, [pc, #400]	; (800164c <main+0x64c>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	4618      	mov	r0, r3
 80014be:	f7ff f84b 	bl	8000558 <__aeabi_f2d>
 80014c2:	a35d      	add	r3, pc, #372	; (adr r3, 8001638 <main+0x638>)
 80014c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014c8:	f7ff fb24 	bl	8000b14 <__aeabi_dcmpge>
 80014cc:	4603      	mov	r3, r0
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d00d      	beq.n	80014ee <main+0x4ee>
 80014d2:	4b5d      	ldr	r3, [pc, #372]	; (8001648 <main+0x648>)
 80014d4:	ed93 7a00 	vldr	s14, [r3]
 80014d8:	4b5c      	ldr	r3, [pc, #368]	; (800164c <main+0x64c>)
 80014da:	edd3 7a00 	vldr	s15, [r3]
 80014de:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80014e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014e6:	dd02      	ble.n	80014ee <main+0x4ee>
					MinV = 3.2;
 80014e8:	4b58      	ldr	r3, [pc, #352]	; (800164c <main+0x64c>)
 80014ea:	4a5b      	ldr	r2, [pc, #364]	; (8001658 <main+0x658>)
 80014ec:	601a      	str	r2, [r3, #0]
				}
				CurrentMode = Mode_SawTooth;
 80014ee:	4b55      	ldr	r3, [pc, #340]	; (8001644 <main+0x644>)
 80014f0:	2214      	movs	r2, #20
 80014f2:	601a      	str	r2, [r3, #0]
				break;
 80014f4:	e079      	b.n	80015ea <main+0x5ea>

			case 'h':	// Set V_Low -0.1V
				MinV -= 0.1;
 80014f6:	4b55      	ldr	r3, [pc, #340]	; (800164c <main+0x64c>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	4618      	mov	r0, r3
 80014fc:	f7ff f82c 	bl	8000558 <__aeabi_f2d>
 8001500:	a349      	add	r3, pc, #292	; (adr r3, 8001628 <main+0x628>)
 8001502:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001506:	f7fe fec7 	bl	8000298 <__aeabi_dsub>
 800150a:	4602      	mov	r2, r0
 800150c:	460b      	mov	r3, r1
 800150e:	4610      	mov	r0, r2
 8001510:	4619      	mov	r1, r3
 8001512:	f7ff fb71 	bl	8000bf8 <__aeabi_d2f>
 8001516:	4603      	mov	r3, r0
 8001518:	4a4c      	ldr	r2, [pc, #304]	; (800164c <main+0x64c>)
 800151a:	6013      	str	r3, [r2, #0]
				if (MinV <= 0 && MaxV > MinV) {
 800151c:	4b4b      	ldr	r3, [pc, #300]	; (800164c <main+0x64c>)
 800151e:	edd3 7a00 	vldr	s15, [r3]
 8001522:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001526:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800152a:	d80e      	bhi.n	800154a <main+0x54a>
 800152c:	4b46      	ldr	r3, [pc, #280]	; (8001648 <main+0x648>)
 800152e:	ed93 7a00 	vldr	s14, [r3]
 8001532:	4b46      	ldr	r3, [pc, #280]	; (800164c <main+0x64c>)
 8001534:	edd3 7a00 	vldr	s15, [r3]
 8001538:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800153c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001540:	dd03      	ble.n	800154a <main+0x54a>
					MinV = 0;
 8001542:	4b42      	ldr	r3, [pc, #264]	; (800164c <main+0x64c>)
 8001544:	f04f 0200 	mov.w	r2, #0
 8001548:	601a      	str	r2, [r3, #0]
				}
				CurrentMode = Mode_SawTooth;
 800154a:	4b3e      	ldr	r3, [pc, #248]	; (8001644 <main+0x644>)
 800154c:	2214      	movs	r2, #20
 800154e:	601a      	str	r2, [r3, #0]
				break;
 8001550:	e04b      	b.n	80015ea <main+0x5ea>

			case 'j':	//Slop DOWN
				Slope = -1;
 8001552:	4b42      	ldr	r3, [pc, #264]	; (800165c <main+0x65c>)
 8001554:	f04f 32ff 	mov.w	r2, #4294967295
 8001558:	601a      	str	r2, [r3, #0]
				sprintf(temp, "\r\nSLOPE DOWN\r\n");
 800155a:	4941      	ldr	r1, [pc, #260]	; (8001660 <main+0x660>)
 800155c:	4841      	ldr	r0, [pc, #260]	; (8001664 <main+0x664>)
 800155e:	f006 f813 	bl	8007588 <siprintf>
				HAL_UART_Transmit(&huart2, (uint8_t*) temp, strlen(temp), 1000);
 8001562:	4840      	ldr	r0, [pc, #256]	; (8001664 <main+0x664>)
 8001564:	f7fe fe3c 	bl	80001e0 <strlen>
 8001568:	4603      	mov	r3, r0
 800156a:	b29a      	uxth	r2, r3
 800156c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001570:	493c      	ldr	r1, [pc, #240]	; (8001664 <main+0x664>)
 8001572:	483d      	ldr	r0, [pc, #244]	; (8001668 <main+0x668>)
 8001574:	f004 fa3d 	bl	80059f2 <HAL_UART_Transmit>
				CurrentMode = Mode_SawTooth;
 8001578:	4b32      	ldr	r3, [pc, #200]	; (8001644 <main+0x644>)
 800157a:	2214      	movs	r2, #20
 800157c:	601a      	str	r2, [r3, #0]
				break;
 800157e:	e034      	b.n	80015ea <main+0x5ea>

			case 'k':	//Slop UP
				Slope = 1;
 8001580:	4b36      	ldr	r3, [pc, #216]	; (800165c <main+0x65c>)
 8001582:	2201      	movs	r2, #1
 8001584:	601a      	str	r2, [r3, #0]
				sprintf(temp, "\r\nSLOPE UP\r\n");
 8001586:	4939      	ldr	r1, [pc, #228]	; (800166c <main+0x66c>)
 8001588:	4836      	ldr	r0, [pc, #216]	; (8001664 <main+0x664>)
 800158a:	f005 fffd 	bl	8007588 <siprintf>
				HAL_UART_Transmit(&huart2, (uint8_t*) temp, strlen(temp), 1000);
 800158e:	4835      	ldr	r0, [pc, #212]	; (8001664 <main+0x664>)
 8001590:	f7fe fe26 	bl	80001e0 <strlen>
 8001594:	4603      	mov	r3, r0
 8001596:	b29a      	uxth	r2, r3
 8001598:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800159c:	4931      	ldr	r1, [pc, #196]	; (8001664 <main+0x664>)
 800159e:	4832      	ldr	r0, [pc, #200]	; (8001668 <main+0x668>)
 80015a0:	f004 fa27 	bl	80059f2 <HAL_UART_Transmit>
				CurrentMode = Mode_SawTooth;
 80015a4:	4b27      	ldr	r3, [pc, #156]	; (8001644 <main+0x644>)
 80015a6:	2214      	movs	r2, #20
 80015a8:	601a      	str	r2, [r3, #0]
				break;
 80015aa:	e01e      	b.n	80015ea <main+0x5ea>

			case 'x':	//back
				CurrentMode = Mode_MainMenu;
 80015ac:	4b25      	ldr	r3, [pc, #148]	; (8001644 <main+0x644>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	601a      	str	r2, [r3, #0]
				break;
 80015b2:	e01a      	b.n	80015ea <main+0x5ea>

			default:	//error
			{
				char temp[] = "\r\n\r\n!!!ERROR!!!\r\n\r\n";
 80015b4:	4b2e      	ldr	r3, [pc, #184]	; (8001670 <main+0x670>)
 80015b6:	f507 7498 	add.w	r4, r7, #304	; 0x130
 80015ba:	461d      	mov	r5, r3
 80015bc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80015be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80015c0:	682b      	ldr	r3, [r5, #0]
 80015c2:	6023      	str	r3, [r4, #0]
				HAL_UART_Transmit(&huart2, (uint8_t*) temp, strlen(temp), 1000);
 80015c4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80015c8:	4618      	mov	r0, r3
 80015ca:	f7fe fe09 	bl	80001e0 <strlen>
 80015ce:	4603      	mov	r3, r0
 80015d0:	b29a      	uxth	r2, r3
 80015d2:	f507 7198 	add.w	r1, r7, #304	; 0x130
 80015d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015da:	4823      	ldr	r0, [pc, #140]	; (8001668 <main+0x668>)
 80015dc:	f004 fa09 	bl	80059f2 <HAL_UART_Transmit>
				CurrentMode = Mode_MainMenu;
 80015e0:	4b18      	ldr	r3, [pc, #96]	; (8001644 <main+0x644>)
 80015e2:	2200      	movs	r2, #0
 80015e4:	601a      	str	r2, [r3, #0]
				break;
 80015e6:	e000      	b.n	80015ea <main+0x5ea>
				break;
 80015e8:	bf00      	nop
			}
			}
			break;
 80015ea:	e3c5      	b.n	8001d78 <main+0xd78>

		case Mode_SineWave:	//SineWave
		{
			char temp[] = "-------------------\r\n"
 80015ec:	f107 0308 	add.w	r3, r7, #8
 80015f0:	4a20      	ldr	r2, [pc, #128]	; (8001674 <main+0x674>)
 80015f2:	4618      	mov	r0, r3
 80015f4:	4611      	mov	r1, r2
 80015f6:	23e0      	movs	r3, #224	; 0xe0
 80015f8:	461a      	mov	r2, r3
 80015fa:	f005 f92f 	bl	800685c <memcpy>
					"d : Set V_High +0.1V\r\n"
					"f : Set V_High -0.1V\r\n"
					"g : Set V_Low +0.1V\r\n"
					"h : Set V_Low -0.1V\r\n"
					"x : back\r\n";
			HAL_UART_Transmit(&huart2, (uint8_t*) temp, strlen(temp), 1000);
 80015fe:	f107 0308 	add.w	r3, r7, #8
 8001602:	4618      	mov	r0, r3
 8001604:	f7fe fdec 	bl	80001e0 <strlen>
 8001608:	4603      	mov	r3, r0
 800160a:	b29a      	uxth	r2, r3
 800160c:	f107 0108 	add.w	r1, r7, #8
 8001610:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001614:	4814      	ldr	r0, [pc, #80]	; (8001668 <main+0x668>)
 8001616:	f004 f9ec 	bl	80059f2 <HAL_UART_Transmit>
			CurrentMode = Mode_SineWave_Wait;
 800161a:	4b0a      	ldr	r3, [pc, #40]	; (8001644 <main+0x644>)
 800161c:	2232      	movs	r2, #50	; 0x32
 800161e:	601a      	str	r2, [r3, #0]
			break;
 8001620:	e3aa      	b.n	8001d78 <main+0xd78>
 8001622:	bf00      	nop
 8001624:	f3af 8000 	nop.w
 8001628:	9999999a 	.word	0x9999999a
 800162c:	3fb99999 	.word	0x3fb99999
 8001630:	66666666 	.word	0x66666666
 8001634:	400a6666 	.word	0x400a6666
 8001638:	9999999a 	.word	0x9999999a
 800163c:	40099999 	.word	0x40099999
 8001640:	20000004 	.word	0x20000004
 8001644:	20000224 	.word	0x20000224
 8001648:	20000008 	.word	0x20000008
 800164c:	20000228 	.word	0x20000228
 8001650:	40533333 	.word	0x40533333
 8001654:	3dcccccd 	.word	0x3dcccccd
 8001658:	404ccccd 	.word	0x404ccccd
 800165c:	2000000c 	.word	0x2000000c
 8001660:	0800b0d0 	.word	0x0800b0d0
 8001664:	2000026c 	.word	0x2000026c
 8001668:	20000468 	.word	0x20000468
 800166c:	0800b0e0 	.word	0x0800b0e0
 8001670:	0800b264 	.word	0x0800b264
 8001674:	0800b278 	.word	0x0800b278
		}

		case Mode_SineWave_Wait:		//default 5 Hz >> range 0 - 10 Hz
			switch (inputchar) {
 8001678:	f997 315f 	ldrsb.w	r3, [r7, #351]	; 0x15f
 800167c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001680:	d040      	beq.n	8001704 <main+0x704>
 8001682:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001686:	f2c0 8166 	blt.w	8001956 <main+0x956>
 800168a:	2b78      	cmp	r3, #120	; 0x78
 800168c:	f300 8163 	bgt.w	8001956 <main+0x956>
 8001690:	2b61      	cmp	r3, #97	; 0x61
 8001692:	f2c0 8160 	blt.w	8001956 <main+0x956>
 8001696:	3b61      	subs	r3, #97	; 0x61
 8001698:	2b17      	cmp	r3, #23
 800169a:	f200 815c 	bhi.w	8001956 <main+0x956>
 800169e:	a201      	add	r2, pc, #4	; (adr r2, 80016a4 <main+0x6a4>)
 80016a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016a4:	08001739 	.word	0x08001739
 80016a8:	08001957 	.word	0x08001957
 80016ac:	08001957 	.word	0x08001957
 80016b0:	080017c7 	.word	0x080017c7
 80016b4:	08001957 	.word	0x08001957
 80016b8:	0800182b 	.word	0x0800182b
 80016bc:	0800188f 	.word	0x0800188f
 80016c0:	080018f3 	.word	0x080018f3
 80016c4:	08001957 	.word	0x08001957
 80016c8:	08001957 	.word	0x08001957
 80016cc:	08001957 	.word	0x08001957
 80016d0:	08001957 	.word	0x08001957
 80016d4:	08001957 	.word	0x08001957
 80016d8:	08001957 	.word	0x08001957
 80016dc:	08001957 	.word	0x08001957
 80016e0:	08001957 	.word	0x08001957
 80016e4:	08001957 	.word	0x08001957
 80016e8:	08001957 	.word	0x08001957
 80016ec:	08001781 	.word	0x08001781
 80016f0:	08001957 	.word	0x08001957
 80016f4:	08001957 	.word	0x08001957
 80016f8:	08001957 	.word	0x08001957
 80016fc:	08001957 	.word	0x08001957
 8001700:	0800194f 	.word	0x0800194f

			case -1:	//no input
				if (micros() - timestamp > 1000) {
 8001704:	f000 ff30 	bl	8002568 <micros>
 8001708:	4bb5      	ldr	r3, [pc, #724]	; (80019e0 <main+0x9e0>)
 800170a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800170e:	ebb0 0802 	subs.w	r8, r0, r2
 8001712:	eb61 0903 	sbc.w	r9, r1, r3
 8001716:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800171a:	f04f 0300 	mov.w	r3, #0
 800171e:	454b      	cmp	r3, r9
 8001720:	bf08      	it	eq
 8001722:	4542      	cmpeq	r2, r8
 8001724:	f080 8131 	bcs.w	800198a <main+0x98a>
					timestamp = micros();
 8001728:	f000 ff1e 	bl	8002568 <micros>
 800172c:	4602      	mov	r2, r0
 800172e:	460b      	mov	r3, r1
 8001730:	49ab      	ldr	r1, [pc, #684]	; (80019e0 <main+0x9e0>)
 8001732:	e9c1 2300 	strd	r2, r3, [r1]
//												{
//													dataOut -= ((MaxV - MinV)*4096/3.3 - (MaxV*4096/3.3));
//													dataOut %= 4096*(MaxV-MinV);
//												}
				}
				break;
 8001736:	e128      	b.n	800198a <main+0x98a>

			case 'a':	//increase frequency
				Frequency += 0.1;
 8001738:	4baa      	ldr	r3, [pc, #680]	; (80019e4 <main+0x9e4>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	4618      	mov	r0, r3
 800173e:	f7fe ff0b 	bl	8000558 <__aeabi_f2d>
 8001742:	a3a1      	add	r3, pc, #644	; (adr r3, 80019c8 <main+0x9c8>)
 8001744:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001748:	f7fe fda8 	bl	800029c <__adddf3>
 800174c:	4602      	mov	r2, r0
 800174e:	460b      	mov	r3, r1
 8001750:	4610      	mov	r0, r2
 8001752:	4619      	mov	r1, r3
 8001754:	f7ff fa50 	bl	8000bf8 <__aeabi_d2f>
 8001758:	4603      	mov	r3, r0
 800175a:	4aa2      	ldr	r2, [pc, #648]	; (80019e4 <main+0x9e4>)
 800175c:	6013      	str	r3, [r2, #0]
				if (Frequency >= 10) {
 800175e:	4ba1      	ldr	r3, [pc, #644]	; (80019e4 <main+0x9e4>)
 8001760:	edd3 7a00 	vldr	s15, [r3]
 8001764:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001768:	eef4 7ac7 	vcmpe.f32	s15, s14
 800176c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001770:	db02      	blt.n	8001778 <main+0x778>
					Frequency = 10;
 8001772:	4b9c      	ldr	r3, [pc, #624]	; (80019e4 <main+0x9e4>)
 8001774:	4a9c      	ldr	r2, [pc, #624]	; (80019e8 <main+0x9e8>)
 8001776:	601a      	str	r2, [r3, #0]
				}
				CurrentMode = Mode_SineWave;
 8001778:	4b9c      	ldr	r3, [pc, #624]	; (80019ec <main+0x9ec>)
 800177a:	2228      	movs	r2, #40	; 0x28
 800177c:	601a      	str	r2, [r3, #0]
				break;
 800177e:	e105      	b.n	800198c <main+0x98c>

			case 's':	//decrease frequency
				Frequency -= 0.1;
 8001780:	4b98      	ldr	r3, [pc, #608]	; (80019e4 <main+0x9e4>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	4618      	mov	r0, r3
 8001786:	f7fe fee7 	bl	8000558 <__aeabi_f2d>
 800178a:	a38f      	add	r3, pc, #572	; (adr r3, 80019c8 <main+0x9c8>)
 800178c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001790:	f7fe fd82 	bl	8000298 <__aeabi_dsub>
 8001794:	4602      	mov	r2, r0
 8001796:	460b      	mov	r3, r1
 8001798:	4610      	mov	r0, r2
 800179a:	4619      	mov	r1, r3
 800179c:	f7ff fa2c 	bl	8000bf8 <__aeabi_d2f>
 80017a0:	4603      	mov	r3, r0
 80017a2:	4a90      	ldr	r2, [pc, #576]	; (80019e4 <main+0x9e4>)
 80017a4:	6013      	str	r3, [r2, #0]
				if (Frequency <= 0) {
 80017a6:	4b8f      	ldr	r3, [pc, #572]	; (80019e4 <main+0x9e4>)
 80017a8:	edd3 7a00 	vldr	s15, [r3]
 80017ac:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80017b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017b4:	d803      	bhi.n	80017be <main+0x7be>
					Frequency = 0;
 80017b6:	4b8b      	ldr	r3, [pc, #556]	; (80019e4 <main+0x9e4>)
 80017b8:	f04f 0200 	mov.w	r2, #0
 80017bc:	601a      	str	r2, [r3, #0]
				}
				CurrentMode = Mode_SineWave;
 80017be:	4b8b      	ldr	r3, [pc, #556]	; (80019ec <main+0x9ec>)
 80017c0:	2228      	movs	r2, #40	; 0x28
 80017c2:	601a      	str	r2, [r3, #0]
				break;
 80017c4:	e0e2      	b.n	800198c <main+0x98c>

			case 'd':	// Set V_High +0.1V
				MaxV += 0.1;
 80017c6:	4b8a      	ldr	r3, [pc, #552]	; (80019f0 <main+0x9f0>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	4618      	mov	r0, r3
 80017cc:	f7fe fec4 	bl	8000558 <__aeabi_f2d>
 80017d0:	a37d      	add	r3, pc, #500	; (adr r3, 80019c8 <main+0x9c8>)
 80017d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017d6:	f7fe fd61 	bl	800029c <__adddf3>
 80017da:	4602      	mov	r2, r0
 80017dc:	460b      	mov	r3, r1
 80017de:	4610      	mov	r0, r2
 80017e0:	4619      	mov	r1, r3
 80017e2:	f7ff fa09 	bl	8000bf8 <__aeabi_d2f>
 80017e6:	4603      	mov	r3, r0
 80017e8:	4a81      	ldr	r2, [pc, #516]	; (80019f0 <main+0x9f0>)
 80017ea:	6013      	str	r3, [r2, #0]
				if (MaxV >= 3.3 && MaxV > MinV) {
 80017ec:	4b80      	ldr	r3, [pc, #512]	; (80019f0 <main+0x9f0>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	4618      	mov	r0, r3
 80017f2:	f7fe feb1 	bl	8000558 <__aeabi_f2d>
 80017f6:	a376      	add	r3, pc, #472	; (adr r3, 80019d0 <main+0x9d0>)
 80017f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017fc:	f7ff f98a 	bl	8000b14 <__aeabi_dcmpge>
 8001800:	4603      	mov	r3, r0
 8001802:	2b00      	cmp	r3, #0
 8001804:	d00d      	beq.n	8001822 <main+0x822>
 8001806:	4b7a      	ldr	r3, [pc, #488]	; (80019f0 <main+0x9f0>)
 8001808:	ed93 7a00 	vldr	s14, [r3]
 800180c:	4b79      	ldr	r3, [pc, #484]	; (80019f4 <main+0x9f4>)
 800180e:	edd3 7a00 	vldr	s15, [r3]
 8001812:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001816:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800181a:	dd02      	ble.n	8001822 <main+0x822>
					MaxV = 3.3;
 800181c:	4b74      	ldr	r3, [pc, #464]	; (80019f0 <main+0x9f0>)
 800181e:	4a76      	ldr	r2, [pc, #472]	; (80019f8 <main+0x9f8>)
 8001820:	601a      	str	r2, [r3, #0]
				}
				CurrentMode = Mode_SineWave;
 8001822:	4b72      	ldr	r3, [pc, #456]	; (80019ec <main+0x9ec>)
 8001824:	2228      	movs	r2, #40	; 0x28
 8001826:	601a      	str	r2, [r3, #0]
				break;
 8001828:	e0b0      	b.n	800198c <main+0x98c>

			case 'f':	// Set V_High -0.1V
				MaxV -= 0.1;
 800182a:	4b71      	ldr	r3, [pc, #452]	; (80019f0 <main+0x9f0>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	4618      	mov	r0, r3
 8001830:	f7fe fe92 	bl	8000558 <__aeabi_f2d>
 8001834:	a364      	add	r3, pc, #400	; (adr r3, 80019c8 <main+0x9c8>)
 8001836:	e9d3 2300 	ldrd	r2, r3, [r3]
 800183a:	f7fe fd2d 	bl	8000298 <__aeabi_dsub>
 800183e:	4602      	mov	r2, r0
 8001840:	460b      	mov	r3, r1
 8001842:	4610      	mov	r0, r2
 8001844:	4619      	mov	r1, r3
 8001846:	f7ff f9d7 	bl	8000bf8 <__aeabi_d2f>
 800184a:	4603      	mov	r3, r0
 800184c:	4a68      	ldr	r2, [pc, #416]	; (80019f0 <main+0x9f0>)
 800184e:	6013      	str	r3, [r2, #0]
				if (MaxV <= 0.1 && MaxV > MinV) {
 8001850:	4b67      	ldr	r3, [pc, #412]	; (80019f0 <main+0x9f0>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	4618      	mov	r0, r3
 8001856:	f7fe fe7f 	bl	8000558 <__aeabi_f2d>
 800185a:	a35b      	add	r3, pc, #364	; (adr r3, 80019c8 <main+0x9c8>)
 800185c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001860:	f7ff f94e 	bl	8000b00 <__aeabi_dcmple>
 8001864:	4603      	mov	r3, r0
 8001866:	2b00      	cmp	r3, #0
 8001868:	d00d      	beq.n	8001886 <main+0x886>
 800186a:	4b61      	ldr	r3, [pc, #388]	; (80019f0 <main+0x9f0>)
 800186c:	ed93 7a00 	vldr	s14, [r3]
 8001870:	4b60      	ldr	r3, [pc, #384]	; (80019f4 <main+0x9f4>)
 8001872:	edd3 7a00 	vldr	s15, [r3]
 8001876:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800187a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800187e:	dd02      	ble.n	8001886 <main+0x886>
					MaxV = 0.1;
 8001880:	4b5b      	ldr	r3, [pc, #364]	; (80019f0 <main+0x9f0>)
 8001882:	4a5e      	ldr	r2, [pc, #376]	; (80019fc <main+0x9fc>)
 8001884:	601a      	str	r2, [r3, #0]
				}
				CurrentMode = Mode_SineWave;
 8001886:	4b59      	ldr	r3, [pc, #356]	; (80019ec <main+0x9ec>)
 8001888:	2228      	movs	r2, #40	; 0x28
 800188a:	601a      	str	r2, [r3, #0]
				break;
 800188c:	e07e      	b.n	800198c <main+0x98c>

			case 'g':	// Set V_Low +0.1V
				MinV += 0.1;
 800188e:	4b59      	ldr	r3, [pc, #356]	; (80019f4 <main+0x9f4>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	4618      	mov	r0, r3
 8001894:	f7fe fe60 	bl	8000558 <__aeabi_f2d>
 8001898:	a34b      	add	r3, pc, #300	; (adr r3, 80019c8 <main+0x9c8>)
 800189a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800189e:	f7fe fcfd 	bl	800029c <__adddf3>
 80018a2:	4602      	mov	r2, r0
 80018a4:	460b      	mov	r3, r1
 80018a6:	4610      	mov	r0, r2
 80018a8:	4619      	mov	r1, r3
 80018aa:	f7ff f9a5 	bl	8000bf8 <__aeabi_d2f>
 80018ae:	4603      	mov	r3, r0
 80018b0:	4a50      	ldr	r2, [pc, #320]	; (80019f4 <main+0x9f4>)
 80018b2:	6013      	str	r3, [r2, #0]
				if (MinV >= 3.2 && MaxV > MinV) {
 80018b4:	4b4f      	ldr	r3, [pc, #316]	; (80019f4 <main+0x9f4>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	4618      	mov	r0, r3
 80018ba:	f7fe fe4d 	bl	8000558 <__aeabi_f2d>
 80018be:	a346      	add	r3, pc, #280	; (adr r3, 80019d8 <main+0x9d8>)
 80018c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018c4:	f7ff f926 	bl	8000b14 <__aeabi_dcmpge>
 80018c8:	4603      	mov	r3, r0
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d00d      	beq.n	80018ea <main+0x8ea>
 80018ce:	4b48      	ldr	r3, [pc, #288]	; (80019f0 <main+0x9f0>)
 80018d0:	ed93 7a00 	vldr	s14, [r3]
 80018d4:	4b47      	ldr	r3, [pc, #284]	; (80019f4 <main+0x9f4>)
 80018d6:	edd3 7a00 	vldr	s15, [r3]
 80018da:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80018de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018e2:	dd02      	ble.n	80018ea <main+0x8ea>
					MinV = 3.2;
 80018e4:	4b43      	ldr	r3, [pc, #268]	; (80019f4 <main+0x9f4>)
 80018e6:	4a46      	ldr	r2, [pc, #280]	; (8001a00 <main+0xa00>)
 80018e8:	601a      	str	r2, [r3, #0]
				}
				CurrentMode = Mode_SineWave;
 80018ea:	4b40      	ldr	r3, [pc, #256]	; (80019ec <main+0x9ec>)
 80018ec:	2228      	movs	r2, #40	; 0x28
 80018ee:	601a      	str	r2, [r3, #0]
				break;
 80018f0:	e04c      	b.n	800198c <main+0x98c>

			case 'h':	// Set V_Low -0.1V
				MinV -= 0.1;
 80018f2:	4b40      	ldr	r3, [pc, #256]	; (80019f4 <main+0x9f4>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	4618      	mov	r0, r3
 80018f8:	f7fe fe2e 	bl	8000558 <__aeabi_f2d>
 80018fc:	a332      	add	r3, pc, #200	; (adr r3, 80019c8 <main+0x9c8>)
 80018fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001902:	f7fe fcc9 	bl	8000298 <__aeabi_dsub>
 8001906:	4602      	mov	r2, r0
 8001908:	460b      	mov	r3, r1
 800190a:	4610      	mov	r0, r2
 800190c:	4619      	mov	r1, r3
 800190e:	f7ff f973 	bl	8000bf8 <__aeabi_d2f>
 8001912:	4603      	mov	r3, r0
 8001914:	4a37      	ldr	r2, [pc, #220]	; (80019f4 <main+0x9f4>)
 8001916:	6013      	str	r3, [r2, #0]
				if (MinV <= 0 && MaxV > MinV) {
 8001918:	4b36      	ldr	r3, [pc, #216]	; (80019f4 <main+0x9f4>)
 800191a:	edd3 7a00 	vldr	s15, [r3]
 800191e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001922:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001926:	d80e      	bhi.n	8001946 <main+0x946>
 8001928:	4b31      	ldr	r3, [pc, #196]	; (80019f0 <main+0x9f0>)
 800192a:	ed93 7a00 	vldr	s14, [r3]
 800192e:	4b31      	ldr	r3, [pc, #196]	; (80019f4 <main+0x9f4>)
 8001930:	edd3 7a00 	vldr	s15, [r3]
 8001934:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001938:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800193c:	dd03      	ble.n	8001946 <main+0x946>
					MinV = 0;
 800193e:	4b2d      	ldr	r3, [pc, #180]	; (80019f4 <main+0x9f4>)
 8001940:	f04f 0200 	mov.w	r2, #0
 8001944:	601a      	str	r2, [r3, #0]
				}
				CurrentMode = Mode_SineWave;
 8001946:	4b29      	ldr	r3, [pc, #164]	; (80019ec <main+0x9ec>)
 8001948:	2228      	movs	r2, #40	; 0x28
 800194a:	601a      	str	r2, [r3, #0]
				break;
 800194c:	e01e      	b.n	800198c <main+0x98c>

			case 'x':	//back
				CurrentMode = Mode_MainMenu;
 800194e:	4b27      	ldr	r3, [pc, #156]	; (80019ec <main+0x9ec>)
 8001950:	2200      	movs	r2, #0
 8001952:	601a      	str	r2, [r3, #0]
				break;
 8001954:	e01a      	b.n	800198c <main+0x98c>

			default:	//error
			{
				char temp[] = "\r\n\r\n!!!ERROR!!!\r\n\r\n";
 8001956:	4b2b      	ldr	r3, [pc, #172]	; (8001a04 <main+0xa04>)
 8001958:	f507 748e 	add.w	r4, r7, #284	; 0x11c
 800195c:	461d      	mov	r5, r3
 800195e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001960:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001962:	682b      	ldr	r3, [r5, #0]
 8001964:	6023      	str	r3, [r4, #0]
				HAL_UART_Transmit(&huart2, (uint8_t*) temp, strlen(temp), 1000);
 8001966:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 800196a:	4618      	mov	r0, r3
 800196c:	f7fe fc38 	bl	80001e0 <strlen>
 8001970:	4603      	mov	r3, r0
 8001972:	b29a      	uxth	r2, r3
 8001974:	f507 718e 	add.w	r1, r7, #284	; 0x11c
 8001978:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800197c:	4822      	ldr	r0, [pc, #136]	; (8001a08 <main+0xa08>)
 800197e:	f004 f838 	bl	80059f2 <HAL_UART_Transmit>
				CurrentMode = Mode_MainMenu;
 8001982:	4b1a      	ldr	r3, [pc, #104]	; (80019ec <main+0x9ec>)
 8001984:	2200      	movs	r2, #0
 8001986:	601a      	str	r2, [r3, #0]
				break;
 8001988:	e000      	b.n	800198c <main+0x98c>
				break;
 800198a:	bf00      	nop
			}
			}
			break;
 800198c:	e1f4      	b.n	8001d78 <main+0xd78>

		case Mode_SquareWave:	//SquareWave
		{
			char temp[] = "-------------------\r\n"
 800198e:	f107 0308 	add.w	r3, r7, #8
 8001992:	4a1e      	ldr	r2, [pc, #120]	; (8001a0c <main+0xa0c>)
 8001994:	4618      	mov	r0, r3
 8001996:	4611      	mov	r1, r2
 8001998:	23f6      	movs	r3, #246	; 0xf6
 800199a:	461a      	mov	r2, r3
 800199c:	f004 ff5e 	bl	800685c <memcpy>
					"f : Set V_High -0.1V\r\n"
					"g : Set V_Low +0.1V\r\n"
					"h : Set V_Low -0.1V\r\n"
					"j : Set Duty Cycle\r\n"
					"x : back\r\n";
			HAL_UART_Transmit(&huart2, (uint8_t*) temp, strlen(temp), 1000);
 80019a0:	f107 0308 	add.w	r3, r7, #8
 80019a4:	4618      	mov	r0, r3
 80019a6:	f7fe fc1b 	bl	80001e0 <strlen>
 80019aa:	4603      	mov	r3, r0
 80019ac:	b29a      	uxth	r2, r3
 80019ae:	f107 0108 	add.w	r1, r7, #8
 80019b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019b6:	4814      	ldr	r0, [pc, #80]	; (8001a08 <main+0xa08>)
 80019b8:	f004 f81b 	bl	80059f2 <HAL_UART_Transmit>
			CurrentMode = Mode_SquareWave_Wait;
 80019bc:	4b0b      	ldr	r3, [pc, #44]	; (80019ec <main+0x9ec>)
 80019be:	2246      	movs	r2, #70	; 0x46
 80019c0:	601a      	str	r2, [r3, #0]
			break;
 80019c2:	e1d9      	b.n	8001d78 <main+0xd78>
 80019c4:	f3af 8000 	nop.w
 80019c8:	9999999a 	.word	0x9999999a
 80019cc:	3fb99999 	.word	0x3fb99999
 80019d0:	66666666 	.word	0x66666666
 80019d4:	400a6666 	.word	0x400a6666
 80019d8:	9999999a 	.word	0x9999999a
 80019dc:	40099999 	.word	0x40099999
 80019e0:	200002d0 	.word	0x200002d0
 80019e4:	20000004 	.word	0x20000004
 80019e8:	41200000 	.word	0x41200000
 80019ec:	20000224 	.word	0x20000224
 80019f0:	20000008 	.word	0x20000008
 80019f4:	20000228 	.word	0x20000228
 80019f8:	40533333 	.word	0x40533333
 80019fc:	3dcccccd 	.word	0x3dcccccd
 8001a00:	404ccccd 	.word	0x404ccccd
 8001a04:	0800b264 	.word	0x0800b264
 8001a08:	20000468 	.word	0x20000468
 8001a0c:	0800b358 	.word	0x0800b358
		}

		case Mode_SquareWave_Wait:		//default 5 Hz >> range 0 - 10 Hz
			switch (inputchar) {
 8001a10:	f997 315f 	ldrsb.w	r3, [r7, #351]	; 0x15f
 8001a14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a18:	d040      	beq.n	8001a9c <main+0xa9c>
 8001a1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a1e:	f2c0 816a 	blt.w	8001cf6 <main+0xcf6>
 8001a22:	2b78      	cmp	r3, #120	; 0x78
 8001a24:	f300 8167 	bgt.w	8001cf6 <main+0xcf6>
 8001a28:	2b61      	cmp	r3, #97	; 0x61
 8001a2a:	f2c0 8164 	blt.w	8001cf6 <main+0xcf6>
 8001a2e:	3b61      	subs	r3, #97	; 0x61
 8001a30:	2b17      	cmp	r3, #23
 8001a32:	f200 8160 	bhi.w	8001cf6 <main+0xcf6>
 8001a36:	a201      	add	r2, pc, #4	; (adr r2, 8001a3c <main+0xa3c>)
 8001a38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a3c:	08001ad1 	.word	0x08001ad1
 8001a40:	08001cf7 	.word	0x08001cf7
 8001a44:	08001cf7 	.word	0x08001cf7
 8001a48:	08001b5f 	.word	0x08001b5f
 8001a4c:	08001cf7 	.word	0x08001cf7
 8001a50:	08001bc3 	.word	0x08001bc3
 8001a54:	08001c27 	.word	0x08001c27
 8001a58:	08001c8b 	.word	0x08001c8b
 8001a5c:	08001cf7 	.word	0x08001cf7
 8001a60:	08001ce7 	.word	0x08001ce7
 8001a64:	08001cf7 	.word	0x08001cf7
 8001a68:	08001cf7 	.word	0x08001cf7
 8001a6c:	08001cf7 	.word	0x08001cf7
 8001a70:	08001cf7 	.word	0x08001cf7
 8001a74:	08001cf7 	.word	0x08001cf7
 8001a78:	08001cf7 	.word	0x08001cf7
 8001a7c:	08001cf7 	.word	0x08001cf7
 8001a80:	08001cf7 	.word	0x08001cf7
 8001a84:	08001b19 	.word	0x08001b19
 8001a88:	08001cf7 	.word	0x08001cf7
 8001a8c:	08001cf7 	.word	0x08001cf7
 8001a90:	08001cf7 	.word	0x08001cf7
 8001a94:	08001cf7 	.word	0x08001cf7
 8001a98:	08001cef 	.word	0x08001cef

			case -1:	//no input
				if (micros() - timestamp > 1000) {
 8001a9c:	f000 fd64 	bl	8002568 <micros>
 8001aa0:	4ba9      	ldr	r3, [pc, #676]	; (8001d48 <main+0xd48>)
 8001aa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001aa6:	ebb0 0a02 	subs.w	sl, r0, r2
 8001aaa:	eb61 0b03 	sbc.w	fp, r1, r3
 8001aae:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001ab2:	f04f 0300 	mov.w	r3, #0
 8001ab6:	455b      	cmp	r3, fp
 8001ab8:	bf08      	it	eq
 8001aba:	4552      	cmpeq	r2, sl
 8001abc:	f080 815a 	bcs.w	8001d74 <main+0xd74>
					timestamp = micros();
 8001ac0:	f000 fd52 	bl	8002568 <micros>
 8001ac4:	4602      	mov	r2, r0
 8001ac6:	460b      	mov	r3, r1
 8001ac8:	499f      	ldr	r1, [pc, #636]	; (8001d48 <main+0xd48>)
 8001aca:	e9c1 2300 	strd	r2, r3, [r1]
//													{
//														dataOut -= ((MaxV - MinV)*4096/3.3 - (MaxV*4096/3.3));
//														dataOut %= 4096*(MaxV-MinV);
//													}
				}
				break;
 8001ace:	e151      	b.n	8001d74 <main+0xd74>

			case 'a':	//increase frequency
				Frequency += 0.1;
 8001ad0:	4b9e      	ldr	r3, [pc, #632]	; (8001d4c <main+0xd4c>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	f7fe fd3f 	bl	8000558 <__aeabi_f2d>
 8001ada:	a395      	add	r3, pc, #596	; (adr r3, 8001d30 <main+0xd30>)
 8001adc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ae0:	f7fe fbdc 	bl	800029c <__adddf3>
 8001ae4:	4602      	mov	r2, r0
 8001ae6:	460b      	mov	r3, r1
 8001ae8:	4610      	mov	r0, r2
 8001aea:	4619      	mov	r1, r3
 8001aec:	f7ff f884 	bl	8000bf8 <__aeabi_d2f>
 8001af0:	4603      	mov	r3, r0
 8001af2:	4a96      	ldr	r2, [pc, #600]	; (8001d4c <main+0xd4c>)
 8001af4:	6013      	str	r3, [r2, #0]
				if (Frequency >= 10) {
 8001af6:	4b95      	ldr	r3, [pc, #596]	; (8001d4c <main+0xd4c>)
 8001af8:	edd3 7a00 	vldr	s15, [r3]
 8001afc:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001b00:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b08:	db02      	blt.n	8001b10 <main+0xb10>
					Frequency = 10;
 8001b0a:	4b90      	ldr	r3, [pc, #576]	; (8001d4c <main+0xd4c>)
 8001b0c:	4a90      	ldr	r2, [pc, #576]	; (8001d50 <main+0xd50>)
 8001b0e:	601a      	str	r2, [r3, #0]
				}
				CurrentMode = Mode_SquareWave;
 8001b10:	4b90      	ldr	r3, [pc, #576]	; (8001d54 <main+0xd54>)
 8001b12:	223c      	movs	r2, #60	; 0x3c
 8001b14:	601a      	str	r2, [r3, #0]
				break;
 8001b16:	e12e      	b.n	8001d76 <main+0xd76>

			case 's':	//decrease frequency
				Frequency -= 0.1;
 8001b18:	4b8c      	ldr	r3, [pc, #560]	; (8001d4c <main+0xd4c>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	f7fe fd1b 	bl	8000558 <__aeabi_f2d>
 8001b22:	a383      	add	r3, pc, #524	; (adr r3, 8001d30 <main+0xd30>)
 8001b24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b28:	f7fe fbb6 	bl	8000298 <__aeabi_dsub>
 8001b2c:	4602      	mov	r2, r0
 8001b2e:	460b      	mov	r3, r1
 8001b30:	4610      	mov	r0, r2
 8001b32:	4619      	mov	r1, r3
 8001b34:	f7ff f860 	bl	8000bf8 <__aeabi_d2f>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	4a84      	ldr	r2, [pc, #528]	; (8001d4c <main+0xd4c>)
 8001b3c:	6013      	str	r3, [r2, #0]
				if (Frequency <= 0) {
 8001b3e:	4b83      	ldr	r3, [pc, #524]	; (8001d4c <main+0xd4c>)
 8001b40:	edd3 7a00 	vldr	s15, [r3]
 8001b44:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001b48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b4c:	d803      	bhi.n	8001b56 <main+0xb56>
					Frequency = 0;
 8001b4e:	4b7f      	ldr	r3, [pc, #508]	; (8001d4c <main+0xd4c>)
 8001b50:	f04f 0200 	mov.w	r2, #0
 8001b54:	601a      	str	r2, [r3, #0]
				}
				CurrentMode = Mode_SquareWave;
 8001b56:	4b7f      	ldr	r3, [pc, #508]	; (8001d54 <main+0xd54>)
 8001b58:	223c      	movs	r2, #60	; 0x3c
 8001b5a:	601a      	str	r2, [r3, #0]
				break;
 8001b5c:	e10b      	b.n	8001d76 <main+0xd76>

			case 'd':	// Set V_High +0.1V
				MaxV += 0.1;
 8001b5e:	4b7e      	ldr	r3, [pc, #504]	; (8001d58 <main+0xd58>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	4618      	mov	r0, r3
 8001b64:	f7fe fcf8 	bl	8000558 <__aeabi_f2d>
 8001b68:	a371      	add	r3, pc, #452	; (adr r3, 8001d30 <main+0xd30>)
 8001b6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b6e:	f7fe fb95 	bl	800029c <__adddf3>
 8001b72:	4602      	mov	r2, r0
 8001b74:	460b      	mov	r3, r1
 8001b76:	4610      	mov	r0, r2
 8001b78:	4619      	mov	r1, r3
 8001b7a:	f7ff f83d 	bl	8000bf8 <__aeabi_d2f>
 8001b7e:	4603      	mov	r3, r0
 8001b80:	4a75      	ldr	r2, [pc, #468]	; (8001d58 <main+0xd58>)
 8001b82:	6013      	str	r3, [r2, #0]
				if (MaxV >= 3.3 && MaxV > MinV) {
 8001b84:	4b74      	ldr	r3, [pc, #464]	; (8001d58 <main+0xd58>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	4618      	mov	r0, r3
 8001b8a:	f7fe fce5 	bl	8000558 <__aeabi_f2d>
 8001b8e:	a36a      	add	r3, pc, #424	; (adr r3, 8001d38 <main+0xd38>)
 8001b90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b94:	f7fe ffbe 	bl	8000b14 <__aeabi_dcmpge>
 8001b98:	4603      	mov	r3, r0
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d00d      	beq.n	8001bba <main+0xbba>
 8001b9e:	4b6e      	ldr	r3, [pc, #440]	; (8001d58 <main+0xd58>)
 8001ba0:	ed93 7a00 	vldr	s14, [r3]
 8001ba4:	4b6d      	ldr	r3, [pc, #436]	; (8001d5c <main+0xd5c>)
 8001ba6:	edd3 7a00 	vldr	s15, [r3]
 8001baa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001bae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bb2:	dd02      	ble.n	8001bba <main+0xbba>
					MaxV = 3.3;
 8001bb4:	4b68      	ldr	r3, [pc, #416]	; (8001d58 <main+0xd58>)
 8001bb6:	4a6a      	ldr	r2, [pc, #424]	; (8001d60 <main+0xd60>)
 8001bb8:	601a      	str	r2, [r3, #0]
				}
				CurrentMode = Mode_SquareWave;
 8001bba:	4b66      	ldr	r3, [pc, #408]	; (8001d54 <main+0xd54>)
 8001bbc:	223c      	movs	r2, #60	; 0x3c
 8001bbe:	601a      	str	r2, [r3, #0]
				break;
 8001bc0:	e0d9      	b.n	8001d76 <main+0xd76>

			case 'f':	// Set V_High -0.1V
				MaxV -= 0.1;
 8001bc2:	4b65      	ldr	r3, [pc, #404]	; (8001d58 <main+0xd58>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	f7fe fcc6 	bl	8000558 <__aeabi_f2d>
 8001bcc:	a358      	add	r3, pc, #352	; (adr r3, 8001d30 <main+0xd30>)
 8001bce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bd2:	f7fe fb61 	bl	8000298 <__aeabi_dsub>
 8001bd6:	4602      	mov	r2, r0
 8001bd8:	460b      	mov	r3, r1
 8001bda:	4610      	mov	r0, r2
 8001bdc:	4619      	mov	r1, r3
 8001bde:	f7ff f80b 	bl	8000bf8 <__aeabi_d2f>
 8001be2:	4603      	mov	r3, r0
 8001be4:	4a5c      	ldr	r2, [pc, #368]	; (8001d58 <main+0xd58>)
 8001be6:	6013      	str	r3, [r2, #0]
				if (MaxV <= 0.1 && MaxV > MinV) {
 8001be8:	4b5b      	ldr	r3, [pc, #364]	; (8001d58 <main+0xd58>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	4618      	mov	r0, r3
 8001bee:	f7fe fcb3 	bl	8000558 <__aeabi_f2d>
 8001bf2:	a34f      	add	r3, pc, #316	; (adr r3, 8001d30 <main+0xd30>)
 8001bf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bf8:	f7fe ff82 	bl	8000b00 <__aeabi_dcmple>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d00d      	beq.n	8001c1e <main+0xc1e>
 8001c02:	4b55      	ldr	r3, [pc, #340]	; (8001d58 <main+0xd58>)
 8001c04:	ed93 7a00 	vldr	s14, [r3]
 8001c08:	4b54      	ldr	r3, [pc, #336]	; (8001d5c <main+0xd5c>)
 8001c0a:	edd3 7a00 	vldr	s15, [r3]
 8001c0e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001c12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c16:	dd02      	ble.n	8001c1e <main+0xc1e>
					MaxV = 0.1;
 8001c18:	4b4f      	ldr	r3, [pc, #316]	; (8001d58 <main+0xd58>)
 8001c1a:	4a52      	ldr	r2, [pc, #328]	; (8001d64 <main+0xd64>)
 8001c1c:	601a      	str	r2, [r3, #0]
				}
				CurrentMode = Mode_SquareWave;
 8001c1e:	4b4d      	ldr	r3, [pc, #308]	; (8001d54 <main+0xd54>)
 8001c20:	223c      	movs	r2, #60	; 0x3c
 8001c22:	601a      	str	r2, [r3, #0]
				break;
 8001c24:	e0a7      	b.n	8001d76 <main+0xd76>

			case 'g':	// Set V_Low +0.1V
				MinV += 0.1;
 8001c26:	4b4d      	ldr	r3, [pc, #308]	; (8001d5c <main+0xd5c>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	f7fe fc94 	bl	8000558 <__aeabi_f2d>
 8001c30:	a33f      	add	r3, pc, #252	; (adr r3, 8001d30 <main+0xd30>)
 8001c32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c36:	f7fe fb31 	bl	800029c <__adddf3>
 8001c3a:	4602      	mov	r2, r0
 8001c3c:	460b      	mov	r3, r1
 8001c3e:	4610      	mov	r0, r2
 8001c40:	4619      	mov	r1, r3
 8001c42:	f7fe ffd9 	bl	8000bf8 <__aeabi_d2f>
 8001c46:	4603      	mov	r3, r0
 8001c48:	4a44      	ldr	r2, [pc, #272]	; (8001d5c <main+0xd5c>)
 8001c4a:	6013      	str	r3, [r2, #0]
				if (MinV >= 3.2 && MaxV > MinV) {
 8001c4c:	4b43      	ldr	r3, [pc, #268]	; (8001d5c <main+0xd5c>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	4618      	mov	r0, r3
 8001c52:	f7fe fc81 	bl	8000558 <__aeabi_f2d>
 8001c56:	a33a      	add	r3, pc, #232	; (adr r3, 8001d40 <main+0xd40>)
 8001c58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c5c:	f7fe ff5a 	bl	8000b14 <__aeabi_dcmpge>
 8001c60:	4603      	mov	r3, r0
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d00d      	beq.n	8001c82 <main+0xc82>
 8001c66:	4b3c      	ldr	r3, [pc, #240]	; (8001d58 <main+0xd58>)
 8001c68:	ed93 7a00 	vldr	s14, [r3]
 8001c6c:	4b3b      	ldr	r3, [pc, #236]	; (8001d5c <main+0xd5c>)
 8001c6e:	edd3 7a00 	vldr	s15, [r3]
 8001c72:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001c76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c7a:	dd02      	ble.n	8001c82 <main+0xc82>
					MinV = 3.2;
 8001c7c:	4b37      	ldr	r3, [pc, #220]	; (8001d5c <main+0xd5c>)
 8001c7e:	4a3a      	ldr	r2, [pc, #232]	; (8001d68 <main+0xd68>)
 8001c80:	601a      	str	r2, [r3, #0]
				}
				CurrentMode = Mode_SquareWave;
 8001c82:	4b34      	ldr	r3, [pc, #208]	; (8001d54 <main+0xd54>)
 8001c84:	223c      	movs	r2, #60	; 0x3c
 8001c86:	601a      	str	r2, [r3, #0]
				break;
 8001c88:	e075      	b.n	8001d76 <main+0xd76>

			case 'h':	// Set V_Low -0.1V
				MinV -= 0.1;
 8001c8a:	4b34      	ldr	r3, [pc, #208]	; (8001d5c <main+0xd5c>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	4618      	mov	r0, r3
 8001c90:	f7fe fc62 	bl	8000558 <__aeabi_f2d>
 8001c94:	a326      	add	r3, pc, #152	; (adr r3, 8001d30 <main+0xd30>)
 8001c96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c9a:	f7fe fafd 	bl	8000298 <__aeabi_dsub>
 8001c9e:	4602      	mov	r2, r0
 8001ca0:	460b      	mov	r3, r1
 8001ca2:	4610      	mov	r0, r2
 8001ca4:	4619      	mov	r1, r3
 8001ca6:	f7fe ffa7 	bl	8000bf8 <__aeabi_d2f>
 8001caa:	4603      	mov	r3, r0
 8001cac:	4a2b      	ldr	r2, [pc, #172]	; (8001d5c <main+0xd5c>)
 8001cae:	6013      	str	r3, [r2, #0]
				if (MinV <= 0 && MaxV > MinV) {
 8001cb0:	4b2a      	ldr	r3, [pc, #168]	; (8001d5c <main+0xd5c>)
 8001cb2:	edd3 7a00 	vldr	s15, [r3]
 8001cb6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001cba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cbe:	d80e      	bhi.n	8001cde <main+0xcde>
 8001cc0:	4b25      	ldr	r3, [pc, #148]	; (8001d58 <main+0xd58>)
 8001cc2:	ed93 7a00 	vldr	s14, [r3]
 8001cc6:	4b25      	ldr	r3, [pc, #148]	; (8001d5c <main+0xd5c>)
 8001cc8:	edd3 7a00 	vldr	s15, [r3]
 8001ccc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001cd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cd4:	dd03      	ble.n	8001cde <main+0xcde>
					MinV = 0;
 8001cd6:	4b21      	ldr	r3, [pc, #132]	; (8001d5c <main+0xd5c>)
 8001cd8:	f04f 0200 	mov.w	r2, #0
 8001cdc:	601a      	str	r2, [r3, #0]
				}
				CurrentMode = Mode_SquareWave;
 8001cde:	4b1d      	ldr	r3, [pc, #116]	; (8001d54 <main+0xd54>)
 8001ce0:	223c      	movs	r2, #60	; 0x3c
 8001ce2:	601a      	str	r2, [r3, #0]
				break;
 8001ce4:	e047      	b.n	8001d76 <main+0xd76>

			case 'j': // Set Duty Cycle
				CurrentMode = Mode_SquareWave;
 8001ce6:	4b1b      	ldr	r3, [pc, #108]	; (8001d54 <main+0xd54>)
 8001ce8:	223c      	movs	r2, #60	; 0x3c
 8001cea:	601a      	str	r2, [r3, #0]
				break;
 8001cec:	e043      	b.n	8001d76 <main+0xd76>

			case 'x':	//back
				CurrentMode = Mode_MainMenu;
 8001cee:	4b19      	ldr	r3, [pc, #100]	; (8001d54 <main+0xd54>)
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	601a      	str	r2, [r3, #0]
				break;
 8001cf4:	e03f      	b.n	8001d76 <main+0xd76>

			default:	//error
			{
				char temp[] = "\r\n\r\n!!!ERROR!!!\r\n\r\n";
 8001cf6:	4b1d      	ldr	r3, [pc, #116]	; (8001d6c <main+0xd6c>)
 8001cf8:	f507 7484 	add.w	r4, r7, #264	; 0x108
 8001cfc:	461d      	mov	r5, r3
 8001cfe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d00:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001d02:	682b      	ldr	r3, [r5, #0]
 8001d04:	6023      	str	r3, [r4, #0]
				HAL_UART_Transmit(&huart2, (uint8_t*) temp, strlen(temp), 1000);
 8001d06:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	f7fe fa68 	bl	80001e0 <strlen>
 8001d10:	4603      	mov	r3, r0
 8001d12:	b29a      	uxth	r2, r3
 8001d14:	f507 7184 	add.w	r1, r7, #264	; 0x108
 8001d18:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d1c:	4814      	ldr	r0, [pc, #80]	; (8001d70 <main+0xd70>)
 8001d1e:	f003 fe68 	bl	80059f2 <HAL_UART_Transmit>
				CurrentMode = Mode_MainMenu;
 8001d22:	4b0c      	ldr	r3, [pc, #48]	; (8001d54 <main+0xd54>)
 8001d24:	2200      	movs	r2, #0
 8001d26:	601a      	str	r2, [r3, #0]
				break;
 8001d28:	e025      	b.n	8001d76 <main+0xd76>
 8001d2a:	bf00      	nop
 8001d2c:	f3af 8000 	nop.w
 8001d30:	9999999a 	.word	0x9999999a
 8001d34:	3fb99999 	.word	0x3fb99999
 8001d38:	66666666 	.word	0x66666666
 8001d3c:	400a6666 	.word	0x400a6666
 8001d40:	9999999a 	.word	0x9999999a
 8001d44:	40099999 	.word	0x40099999
 8001d48:	200002d0 	.word	0x200002d0
 8001d4c:	20000004 	.word	0x20000004
 8001d50:	41200000 	.word	0x41200000
 8001d54:	20000224 	.word	0x20000224
 8001d58:	20000008 	.word	0x20000008
 8001d5c:	20000228 	.word	0x20000228
 8001d60:	40533333 	.word	0x40533333
 8001d64:	3dcccccd 	.word	0x3dcccccd
 8001d68:	404ccccd 	.word	0x404ccccd
 8001d6c:	0800b264 	.word	0x0800b264
 8001d70:	20000468 	.word	0x20000468
				break;
 8001d74:	bf00      	nop
			}
			}
			break;
 8001d76:	bf00      	nop
		}
		if (CurrentMode == Mode_SawTooth_Wait)
 8001d78:	4bab      	ldr	r3, [pc, #684]	; (8002028 <main+0x1028>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	2b1e      	cmp	r3, #30
 8001d7e:	f47f a966 	bne.w	800104e <main+0x4e>
		{
			if (micros() - timestamp > 1000)
 8001d82:	f000 fbf1 	bl	8002568 <micros>
 8001d86:	4ba9      	ldr	r3, [pc, #676]	; (800202c <main+0x102c>)
 8001d88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d8c:	1a84      	subs	r4, r0, r2
 8001d8e:	603c      	str	r4, [r7, #0]
 8001d90:	eb61 0303 	sbc.w	r3, r1, r3
 8001d94:	607b      	str	r3, [r7, #4]
 8001d96:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001d9a:	f04f 0300 	mov.w	r3, #0
 8001d9e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001da2:	428b      	cmp	r3, r1
 8001da4:	bf08      	it	eq
 8001da6:	4282      	cmpeq	r2, r0
 8001da8:	f080 8116 	bcs.w	8001fd8 <main+0xfd8>
			{
				timestamp = micros();
 8001dac:	f000 fbdc 	bl	8002568 <micros>
 8001db0:	4602      	mov	r2, r0
 8001db2:	460b      	mov	r3, r1
 8001db4:	499d      	ldr	r1, [pc, #628]	; (800202c <main+0x102c>)
 8001db6:	e9c1 2300 	strd	r2, r3, [r1]
				if (Slope == 1)		//slope UP (min>>max)
 8001dba:	4b9d      	ldr	r3, [pc, #628]	; (8002030 <main+0x1030>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	2b01      	cmp	r3, #1
 8001dc0:	d168      	bne.n	8001e94 <main+0xe94>
					{
					// ( amplitude * frequency * time % amplitude ) + initial >> V_low
					// amplitude = (high - low) *4096/3.3
					dataOut = (MaxV - MinV) * (4096.0 / 3.3) * Frequency * (timestamp / 1000000.0);
 8001dc2:	4b9c      	ldr	r3, [pc, #624]	; (8002034 <main+0x1034>)
 8001dc4:	ed93 7a00 	vldr	s14, [r3]
 8001dc8:	4b9b      	ldr	r3, [pc, #620]	; (8002038 <main+0x1038>)
 8001dca:	edd3 7a00 	vldr	s15, [r3]
 8001dce:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001dd2:	ee17 0a90 	vmov	r0, s15
 8001dd6:	f7fe fbbf 	bl	8000558 <__aeabi_f2d>
 8001dda:	a38d      	add	r3, pc, #564	; (adr r3, 8002010 <main+0x1010>)
 8001ddc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001de0:	f7fe fc12 	bl	8000608 <__aeabi_dmul>
 8001de4:	4602      	mov	r2, r0
 8001de6:	460b      	mov	r3, r1
 8001de8:	4614      	mov	r4, r2
 8001dea:	461d      	mov	r5, r3
 8001dec:	4b93      	ldr	r3, [pc, #588]	; (800203c <main+0x103c>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	4618      	mov	r0, r3
 8001df2:	f7fe fbb1 	bl	8000558 <__aeabi_f2d>
 8001df6:	4602      	mov	r2, r0
 8001df8:	460b      	mov	r3, r1
 8001dfa:	4620      	mov	r0, r4
 8001dfc:	4629      	mov	r1, r5
 8001dfe:	f7fe fc03 	bl	8000608 <__aeabi_dmul>
 8001e02:	4602      	mov	r2, r0
 8001e04:	460b      	mov	r3, r1
 8001e06:	4614      	mov	r4, r2
 8001e08:	461d      	mov	r5, r3
 8001e0a:	4b88      	ldr	r3, [pc, #544]	; (800202c <main+0x102c>)
 8001e0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e10:	4610      	mov	r0, r2
 8001e12:	4619      	mov	r1, r3
 8001e14:	f7fe fbc2 	bl	800059c <__aeabi_ul2d>
 8001e18:	a37f      	add	r3, pc, #508	; (adr r3, 8002018 <main+0x1018>)
 8001e1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e1e:	f7fe fd1d 	bl	800085c <__aeabi_ddiv>
 8001e22:	4602      	mov	r2, r0
 8001e24:	460b      	mov	r3, r1
 8001e26:	4620      	mov	r0, r4
 8001e28:	4629      	mov	r1, r5
 8001e2a:	f7fe fbed 	bl	8000608 <__aeabi_dmul>
 8001e2e:	4602      	mov	r2, r0
 8001e30:	460b      	mov	r3, r1
 8001e32:	4610      	mov	r0, r2
 8001e34:	4619      	mov	r1, r3
 8001e36:	f7fe febf 	bl	8000bb8 <__aeabi_d2uiz>
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	b29a      	uxth	r2, r3
 8001e3e:	4b80      	ldr	r3, [pc, #512]	; (8002040 <main+0x1040>)
 8001e40:	801a      	strh	r2, [r3, #0]
					int range = ((MaxV - MinV) * (4096.0 / 3.3));
 8001e42:	4b7c      	ldr	r3, [pc, #496]	; (8002034 <main+0x1034>)
 8001e44:	ed93 7a00 	vldr	s14, [r3]
 8001e48:	4b7b      	ldr	r3, [pc, #492]	; (8002038 <main+0x1038>)
 8001e4a:	edd3 7a00 	vldr	s15, [r3]
 8001e4e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e52:	ee17 0a90 	vmov	r0, s15
 8001e56:	f7fe fb7f 	bl	8000558 <__aeabi_f2d>
 8001e5a:	a36d      	add	r3, pc, #436	; (adr r3, 8002010 <main+0x1010>)
 8001e5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e60:	f7fe fbd2 	bl	8000608 <__aeabi_dmul>
 8001e64:	4602      	mov	r2, r0
 8001e66:	460b      	mov	r3, r1
 8001e68:	4610      	mov	r0, r2
 8001e6a:	4619      	mov	r1, r3
 8001e6c:	f7fe fe7c 	bl	8000b68 <__aeabi_d2iz>
 8001e70:	4603      	mov	r3, r0
 8001e72:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
					dataOut %= range;
 8001e76:	4b72      	ldr	r3, [pc, #456]	; (8002040 <main+0x1040>)
 8001e78:	881b      	ldrh	r3, [r3, #0]
 8001e7a:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 8001e7e:	fb93 f2f2 	sdiv	r2, r3, r2
 8001e82:	f8d7 1154 	ldr.w	r1, [r7, #340]	; 0x154
 8001e86:	fb01 f202 	mul.w	r2, r1, r2
 8001e8a:	1a9b      	subs	r3, r3, r2
 8001e8c:	b29a      	uxth	r2, r3
 8001e8e:	4b6c      	ldr	r3, [pc, #432]	; (8002040 <main+0x1040>)
 8001e90:	801a      	strh	r2, [r3, #0]
 8001e92:	e0a1      	b.n	8001fd8 <main+0xfd8>
//					dataOut += (MinV * 4096.0 / 3.3);
					}
				else if (Slope == -1)	//slope DOWN (max>>min)
 8001e94:	4b66      	ldr	r3, [pc, #408]	; (8002030 <main+0x1030>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e9c:	f040 809c 	bne.w	8001fd8 <main+0xfd8>
					{
					// ( amplitude * frequency * time % amplitude ) + initial >> V_low + V_high
					dataOut = -1 * (MaxV - MinV) * (4096.0 / 3.3) * Frequency * (timestamp / 1000000.0);
 8001ea0:	4b64      	ldr	r3, [pc, #400]	; (8002034 <main+0x1034>)
 8001ea2:	ed93 7a00 	vldr	s14, [r3]
 8001ea6:	4b64      	ldr	r3, [pc, #400]	; (8002038 <main+0x1038>)
 8001ea8:	edd3 7a00 	vldr	s15, [r3]
 8001eac:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001eb0:	eef1 7a67 	vneg.f32	s15, s15
 8001eb4:	ee17 3a90 	vmov	r3, s15
 8001eb8:	4618      	mov	r0, r3
 8001eba:	f7fe fb4d 	bl	8000558 <__aeabi_f2d>
 8001ebe:	a354      	add	r3, pc, #336	; (adr r3, 8002010 <main+0x1010>)
 8001ec0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ec4:	f7fe fba0 	bl	8000608 <__aeabi_dmul>
 8001ec8:	4602      	mov	r2, r0
 8001eca:	460b      	mov	r3, r1
 8001ecc:	4614      	mov	r4, r2
 8001ece:	461d      	mov	r5, r3
 8001ed0:	4b5a      	ldr	r3, [pc, #360]	; (800203c <main+0x103c>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	f7fe fb3f 	bl	8000558 <__aeabi_f2d>
 8001eda:	4602      	mov	r2, r0
 8001edc:	460b      	mov	r3, r1
 8001ede:	4620      	mov	r0, r4
 8001ee0:	4629      	mov	r1, r5
 8001ee2:	f7fe fb91 	bl	8000608 <__aeabi_dmul>
 8001ee6:	4602      	mov	r2, r0
 8001ee8:	460b      	mov	r3, r1
 8001eea:	4614      	mov	r4, r2
 8001eec:	461d      	mov	r5, r3
 8001eee:	4b4f      	ldr	r3, [pc, #316]	; (800202c <main+0x102c>)
 8001ef0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ef4:	4610      	mov	r0, r2
 8001ef6:	4619      	mov	r1, r3
 8001ef8:	f7fe fb50 	bl	800059c <__aeabi_ul2d>
 8001efc:	a346      	add	r3, pc, #280	; (adr r3, 8002018 <main+0x1018>)
 8001efe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f02:	f7fe fcab 	bl	800085c <__aeabi_ddiv>
 8001f06:	4602      	mov	r2, r0
 8001f08:	460b      	mov	r3, r1
 8001f0a:	4620      	mov	r0, r4
 8001f0c:	4629      	mov	r1, r5
 8001f0e:	f7fe fb7b 	bl	8000608 <__aeabi_dmul>
 8001f12:	4602      	mov	r2, r0
 8001f14:	460b      	mov	r3, r1
 8001f16:	4610      	mov	r0, r2
 8001f18:	4619      	mov	r1, r3
 8001f1a:	f7fe fe4d 	bl	8000bb8 <__aeabi_d2uiz>
 8001f1e:	4603      	mov	r3, r0
 8001f20:	b29a      	uxth	r2, r3
 8001f22:	4b47      	ldr	r3, [pc, #284]	; (8002040 <main+0x1040>)
 8001f24:	801a      	strh	r2, [r3, #0]
					int range = ((MinV - MaxV) * (4096.0 / 3.3));
 8001f26:	4b44      	ldr	r3, [pc, #272]	; (8002038 <main+0x1038>)
 8001f28:	ed93 7a00 	vldr	s14, [r3]
 8001f2c:	4b41      	ldr	r3, [pc, #260]	; (8002034 <main+0x1034>)
 8001f2e:	edd3 7a00 	vldr	s15, [r3]
 8001f32:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f36:	ee17 0a90 	vmov	r0, s15
 8001f3a:	f7fe fb0d 	bl	8000558 <__aeabi_f2d>
 8001f3e:	a334      	add	r3, pc, #208	; (adr r3, 8002010 <main+0x1010>)
 8001f40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f44:	f7fe fb60 	bl	8000608 <__aeabi_dmul>
 8001f48:	4602      	mov	r2, r0
 8001f4a:	460b      	mov	r3, r1
 8001f4c:	4610      	mov	r0, r2
 8001f4e:	4619      	mov	r1, r3
 8001f50:	f7fe fe0a 	bl	8000b68 <__aeabi_d2iz>
 8001f54:	4603      	mov	r3, r0
 8001f56:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
					dataOut %= range;
 8001f5a:	4b39      	ldr	r3, [pc, #228]	; (8002040 <main+0x1040>)
 8001f5c:	881b      	ldrh	r3, [r3, #0]
 8001f5e:	f8d7 2158 	ldr.w	r2, [r7, #344]	; 0x158
 8001f62:	fb93 f2f2 	sdiv	r2, r3, r2
 8001f66:	f8d7 1158 	ldr.w	r1, [r7, #344]	; 0x158
 8001f6a:	fb01 f202 	mul.w	r2, r1, r2
 8001f6e:	1a9b      	subs	r3, r3, r2
 8001f70:	b29a      	uxth	r2, r3
 8001f72:	4b33      	ldr	r3, [pc, #204]	; (8002040 <main+0x1040>)
 8001f74:	801a      	strh	r2, [r3, #0]
					dataOut += ((MaxV + MinV) * 4096.0 / 3.3);
 8001f76:	4b32      	ldr	r3, [pc, #200]	; (8002040 <main+0x1040>)
 8001f78:	881b      	ldrh	r3, [r3, #0]
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	f7fe fada 	bl	8000534 <__aeabi_i2d>
 8001f80:	4604      	mov	r4, r0
 8001f82:	460d      	mov	r5, r1
 8001f84:	4b2b      	ldr	r3, [pc, #172]	; (8002034 <main+0x1034>)
 8001f86:	ed93 7a00 	vldr	s14, [r3]
 8001f8a:	4b2b      	ldr	r3, [pc, #172]	; (8002038 <main+0x1038>)
 8001f8c:	edd3 7a00 	vldr	s15, [r3]
 8001f90:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f94:	ee17 0a90 	vmov	r0, s15
 8001f98:	f7fe fade 	bl	8000558 <__aeabi_f2d>
 8001f9c:	f04f 0200 	mov.w	r2, #0
 8001fa0:	4b28      	ldr	r3, [pc, #160]	; (8002044 <main+0x1044>)
 8001fa2:	f7fe fb31 	bl	8000608 <__aeabi_dmul>
 8001fa6:	4602      	mov	r2, r0
 8001fa8:	460b      	mov	r3, r1
 8001faa:	4610      	mov	r0, r2
 8001fac:	4619      	mov	r1, r3
 8001fae:	a31c      	add	r3, pc, #112	; (adr r3, 8002020 <main+0x1020>)
 8001fb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fb4:	f7fe fc52 	bl	800085c <__aeabi_ddiv>
 8001fb8:	4602      	mov	r2, r0
 8001fba:	460b      	mov	r3, r1
 8001fbc:	4620      	mov	r0, r4
 8001fbe:	4629      	mov	r1, r5
 8001fc0:	f7fe f96c 	bl	800029c <__adddf3>
 8001fc4:	4602      	mov	r2, r0
 8001fc6:	460b      	mov	r3, r1
 8001fc8:	4610      	mov	r0, r2
 8001fca:	4619      	mov	r1, r3
 8001fcc:	f7fe fdf4 	bl	8000bb8 <__aeabi_d2uiz>
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	b29a      	uxth	r2, r3
 8001fd4:	4b1a      	ldr	r3, [pc, #104]	; (8002040 <main+0x1040>)
 8001fd6:	801a      	strh	r2, [r3, #0]
					}
			}
			if (hspi3.State == HAL_SPI_STATE_READY
 8001fd8:	4b1b      	ldr	r3, [pc, #108]	; (8002048 <main+0x1048>)
 8001fda:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001fde:	b2db      	uxtb	r3, r3
 8001fe0:	2b01      	cmp	r3, #1
 8001fe2:	f47f a834 	bne.w	800104e <main+0x4e>
					&& HAL_GPIO_ReadPin(SPI_SS_GPIO_Port, SPI_SS_Pin)
 8001fe6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001fea:	4818      	ldr	r0, [pc, #96]	; (800204c <main+0x104c>)
 8001fec:	f002 f8ba 	bl	8004164 <HAL_GPIO_ReadPin>
 8001ff0:	4603      	mov	r3, r0
 8001ff2:	2b01      	cmp	r3, #1
 8001ff4:	f47f a82b 	bne.w	800104e <main+0x4e>
							== GPIO_PIN_SET) {
				MCP4922SetOutput(DACConfig, dataOut);
 8001ff8:	4b15      	ldr	r3, [pc, #84]	; (8002050 <main+0x1050>)
 8001ffa:	781b      	ldrb	r3, [r3, #0]
 8001ffc:	4a10      	ldr	r2, [pc, #64]	; (8002040 <main+0x1040>)
 8001ffe:	8812      	ldrh	r2, [r2, #0]
 8002000:	4611      	mov	r1, r2
 8002002:	4618      	mov	r0, r3
 8002004:	f000 fa56 	bl	80024b4 <MCP4922SetOutput>
	while (1) {
 8002008:	f7ff b821 	b.w	800104e <main+0x4e>
 800200c:	f3af 8000 	nop.w
 8002010:	364d9365 	.word	0x364d9365
 8002014:	409364d9 	.word	0x409364d9
 8002018:	00000000 	.word	0x00000000
 800201c:	412e8480 	.word	0x412e8480
 8002020:	66666666 	.word	0x66666666
 8002024:	400a6666 	.word	0x400a6666
 8002028:	20000224 	.word	0x20000224
 800202c:	200002d0 	.word	0x200002d0
 8002030:	2000000c 	.word	0x2000000c
 8002034:	20000008 	.word	0x20000008
 8002038:	20000228 	.word	0x20000228
 800203c:	20000004 	.word	0x20000004
 8002040:	20000220 	.word	0x20000220
 8002044:	40b00000 	.word	0x40b00000
 8002048:	20000328 	.word	0x20000328
 800204c:	40020400 	.word	0x40020400
 8002050:	20000000 	.word	0x20000000

08002054 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8002054:	b580      	push	{r7, lr}
 8002056:	b094      	sub	sp, #80	; 0x50
 8002058:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800205a:	f107 0320 	add.w	r3, r7, #32
 800205e:	2230      	movs	r2, #48	; 0x30
 8002060:	2100      	movs	r1, #0
 8002062:	4618      	mov	r0, r3
 8002064:	f004 fc08 	bl	8006878 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8002068:	f107 030c 	add.w	r3, r7, #12
 800206c:	2200      	movs	r2, #0
 800206e:	601a      	str	r2, [r3, #0]
 8002070:	605a      	str	r2, [r3, #4]
 8002072:	609a      	str	r2, [r3, #8]
 8002074:	60da      	str	r2, [r3, #12]
 8002076:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8002078:	2300      	movs	r3, #0
 800207a:	60bb      	str	r3, [r7, #8]
 800207c:	4b27      	ldr	r3, [pc, #156]	; (800211c <SystemClock_Config+0xc8>)
 800207e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002080:	4a26      	ldr	r2, [pc, #152]	; (800211c <SystemClock_Config+0xc8>)
 8002082:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002086:	6413      	str	r3, [r2, #64]	; 0x40
 8002088:	4b24      	ldr	r3, [pc, #144]	; (800211c <SystemClock_Config+0xc8>)
 800208a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800208c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002090:	60bb      	str	r3, [r7, #8]
 8002092:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002094:	2300      	movs	r3, #0
 8002096:	607b      	str	r3, [r7, #4]
 8002098:	4b21      	ldr	r3, [pc, #132]	; (8002120 <SystemClock_Config+0xcc>)
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	4a20      	ldr	r2, [pc, #128]	; (8002120 <SystemClock_Config+0xcc>)
 800209e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80020a2:	6013      	str	r3, [r2, #0]
 80020a4:	4b1e      	ldr	r3, [pc, #120]	; (8002120 <SystemClock_Config+0xcc>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80020ac:	607b      	str	r3, [r7, #4]
 80020ae:	687b      	ldr	r3, [r7, #4]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80020b0:	2302      	movs	r3, #2
 80020b2:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80020b4:	2301      	movs	r3, #1
 80020b6:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80020b8:	2310      	movs	r3, #16
 80020ba:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80020bc:	2302      	movs	r3, #2
 80020be:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80020c0:	2300      	movs	r3, #0
 80020c2:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 8;
 80020c4:	2308      	movs	r3, #8
 80020c6:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 100;
 80020c8:	2364      	movs	r3, #100	; 0x64
 80020ca:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80020cc:	2302      	movs	r3, #2
 80020ce:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 80020d0:	2304      	movs	r3, #4
 80020d2:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80020d4:	f107 0320 	add.w	r3, r7, #32
 80020d8:	4618      	mov	r0, r3
 80020da:	f002 f875 	bl	80041c8 <HAL_RCC_OscConfig>
 80020de:	4603      	mov	r3, r0
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d001      	beq.n	80020e8 <SystemClock_Config+0x94>
		Error_Handler();
 80020e4:	f000 faae 	bl	8002644 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80020e8:	230f      	movs	r3, #15
 80020ea:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80020ec:	2302      	movs	r3, #2
 80020ee:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80020f0:	2300      	movs	r3, #0
 80020f2:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80020f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80020f8:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80020fa:	2300      	movs	r3, #0
 80020fc:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK) {
 80020fe:	f107 030c 	add.w	r3, r7, #12
 8002102:	2103      	movs	r1, #3
 8002104:	4618      	mov	r0, r3
 8002106:	f002 facf 	bl	80046a8 <HAL_RCC_ClockConfig>
 800210a:	4603      	mov	r3, r0
 800210c:	2b00      	cmp	r3, #0
 800210e:	d001      	beq.n	8002114 <SystemClock_Config+0xc0>
		Error_Handler();
 8002110:	f000 fa98 	bl	8002644 <Error_Handler>
	}
}
 8002114:	bf00      	nop
 8002116:	3750      	adds	r7, #80	; 0x50
 8002118:	46bd      	mov	sp, r7
 800211a:	bd80      	pop	{r7, pc}
 800211c:	40023800 	.word	0x40023800
 8002120:	40007000 	.word	0x40007000

08002124 <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 8002124:	b580      	push	{r7, lr}
 8002126:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN ADC1_Init 1 */

	/* USER CODE END ADC1_Init 1 */
	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc1.Instance = ADC1;
 8002128:	4b19      	ldr	r3, [pc, #100]	; (8002190 <MX_ADC1_Init+0x6c>)
 800212a:	4a1a      	ldr	r2, [pc, #104]	; (8002194 <MX_ADC1_Init+0x70>)
 800212c:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800212e:	4b18      	ldr	r3, [pc, #96]	; (8002190 <MX_ADC1_Init+0x6c>)
 8002130:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002134:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002136:	4b16      	ldr	r3, [pc, #88]	; (8002190 <MX_ADC1_Init+0x6c>)
 8002138:	2200      	movs	r2, #0
 800213a:	609a      	str	r2, [r3, #8]
	hadc1.Init.ScanConvMode = DISABLE;
 800213c:	4b14      	ldr	r3, [pc, #80]	; (8002190 <MX_ADC1_Init+0x6c>)
 800213e:	2200      	movs	r2, #0
 8002140:	611a      	str	r2, [r3, #16]
	hadc1.Init.ContinuousConvMode = DISABLE;
 8002142:	4b13      	ldr	r3, [pc, #76]	; (8002190 <MX_ADC1_Init+0x6c>)
 8002144:	2200      	movs	r2, #0
 8002146:	761a      	strb	r2, [r3, #24]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002148:	4b11      	ldr	r3, [pc, #68]	; (8002190 <MX_ADC1_Init+0x6c>)
 800214a:	2200      	movs	r2, #0
 800214c:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8002150:	4b0f      	ldr	r3, [pc, #60]	; (8002190 <MX_ADC1_Init+0x6c>)
 8002152:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002156:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 8002158:	4b0d      	ldr	r3, [pc, #52]	; (8002190 <MX_ADC1_Init+0x6c>)
 800215a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800215e:	629a      	str	r2, [r3, #40]	; 0x28
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002160:	4b0b      	ldr	r3, [pc, #44]	; (8002190 <MX_ADC1_Init+0x6c>)
 8002162:	2200      	movs	r2, #0
 8002164:	60da      	str	r2, [r3, #12]
	hadc1.Init.NbrOfConversion = 1;
 8002166:	4b0a      	ldr	r3, [pc, #40]	; (8002190 <MX_ADC1_Init+0x6c>)
 8002168:	2201      	movs	r2, #1
 800216a:	61da      	str	r2, [r3, #28]
	hadc1.Init.DMAContinuousRequests = ENABLE;
 800216c:	4b08      	ldr	r3, [pc, #32]	; (8002190 <MX_ADC1_Init+0x6c>)
 800216e:	2201      	movs	r2, #1
 8002170:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002174:	4b06      	ldr	r3, [pc, #24]	; (8002190 <MX_ADC1_Init+0x6c>)
 8002176:	2201      	movs	r2, #1
 8002178:	615a      	str	r2, [r3, #20]
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 800217a:	4805      	ldr	r0, [pc, #20]	; (8002190 <MX_ADC1_Init+0x6c>)
 800217c:	f000 fdc2 	bl	8002d04 <HAL_ADC_Init>
 8002180:	4603      	mov	r3, r0
 8002182:	2b00      	cmp	r3, #0
 8002184:	d001      	beq.n	800218a <MX_ADC1_Init+0x66>
		Error_Handler();
 8002186:	f000 fa5d 	bl	8002644 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 800218a:	bf00      	nop
 800218c:	bd80      	pop	{r7, pc}
 800218e:	bf00      	nop
 8002190:	20000380 	.word	0x20000380
 8002194:	40012000 	.word	0x40012000

08002198 <MX_SPI3_Init>:
/**
 * @brief SPI3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI3_Init(void) {
 8002198:	b580      	push	{r7, lr}
 800219a:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI3_Init 1 */

	/* USER CODE END SPI3_Init 1 */
	/* SPI3 parameter configuration*/
	hspi3.Instance = SPI3;
 800219c:	4b18      	ldr	r3, [pc, #96]	; (8002200 <MX_SPI3_Init+0x68>)
 800219e:	4a19      	ldr	r2, [pc, #100]	; (8002204 <MX_SPI3_Init+0x6c>)
 80021a0:	601a      	str	r2, [r3, #0]
	hspi3.Init.Mode = SPI_MODE_MASTER;
 80021a2:	4b17      	ldr	r3, [pc, #92]	; (8002200 <MX_SPI3_Init+0x68>)
 80021a4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80021a8:	605a      	str	r2, [r3, #4]
	hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80021aa:	4b15      	ldr	r3, [pc, #84]	; (8002200 <MX_SPI3_Init+0x68>)
 80021ac:	2200      	movs	r2, #0
 80021ae:	609a      	str	r2, [r3, #8]
	hspi3.Init.DataSize = SPI_DATASIZE_16BIT;
 80021b0:	4b13      	ldr	r3, [pc, #76]	; (8002200 <MX_SPI3_Init+0x68>)
 80021b2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80021b6:	60da      	str	r2, [r3, #12]
	hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80021b8:	4b11      	ldr	r3, [pc, #68]	; (8002200 <MX_SPI3_Init+0x68>)
 80021ba:	2200      	movs	r2, #0
 80021bc:	611a      	str	r2, [r3, #16]
	hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80021be:	4b10      	ldr	r3, [pc, #64]	; (8002200 <MX_SPI3_Init+0x68>)
 80021c0:	2200      	movs	r2, #0
 80021c2:	615a      	str	r2, [r3, #20]
	hspi3.Init.NSS = SPI_NSS_SOFT;
 80021c4:	4b0e      	ldr	r3, [pc, #56]	; (8002200 <MX_SPI3_Init+0x68>)
 80021c6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80021ca:	619a      	str	r2, [r3, #24]
	hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80021cc:	4b0c      	ldr	r3, [pc, #48]	; (8002200 <MX_SPI3_Init+0x68>)
 80021ce:	2208      	movs	r2, #8
 80021d0:	61da      	str	r2, [r3, #28]
	hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80021d2:	4b0b      	ldr	r3, [pc, #44]	; (8002200 <MX_SPI3_Init+0x68>)
 80021d4:	2200      	movs	r2, #0
 80021d6:	621a      	str	r2, [r3, #32]
	hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80021d8:	4b09      	ldr	r3, [pc, #36]	; (8002200 <MX_SPI3_Init+0x68>)
 80021da:	2200      	movs	r2, #0
 80021dc:	625a      	str	r2, [r3, #36]	; 0x24
	hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80021de:	4b08      	ldr	r3, [pc, #32]	; (8002200 <MX_SPI3_Init+0x68>)
 80021e0:	2200      	movs	r2, #0
 80021e2:	629a      	str	r2, [r3, #40]	; 0x28
	hspi3.Init.CRCPolynomial = 10;
 80021e4:	4b06      	ldr	r3, [pc, #24]	; (8002200 <MX_SPI3_Init+0x68>)
 80021e6:	220a      	movs	r2, #10
 80021e8:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi3) != HAL_OK) {
 80021ea:	4805      	ldr	r0, [pc, #20]	; (8002200 <MX_SPI3_Init+0x68>)
 80021ec:	f002 fc58 	bl	8004aa0 <HAL_SPI_Init>
 80021f0:	4603      	mov	r3, r0
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d001      	beq.n	80021fa <MX_SPI3_Init+0x62>
		Error_Handler();
 80021f6:	f000 fa25 	bl	8002644 <Error_Handler>
	}
	/* USER CODE BEGIN SPI3_Init 2 */

	/* USER CODE END SPI3_Init 2 */

}
 80021fa:	bf00      	nop
 80021fc:	bd80      	pop	{r7, pc}
 80021fe:	bf00      	nop
 8002200:	20000328 	.word	0x20000328
 8002204:	40003c00 	.word	0x40003c00

08002208 <MX_TIM3_Init>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 8002208:	b580      	push	{r7, lr}
 800220a:	b086      	sub	sp, #24
 800220c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 800220e:	f107 0308 	add.w	r3, r7, #8
 8002212:	2200      	movs	r2, #0
 8002214:	601a      	str	r2, [r3, #0]
 8002216:	605a      	str	r2, [r3, #4]
 8002218:	609a      	str	r2, [r3, #8]
 800221a:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 800221c:	463b      	mov	r3, r7
 800221e:	2200      	movs	r2, #0
 8002220:	601a      	str	r2, [r3, #0]
 8002222:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 8002224:	4b1c      	ldr	r3, [pc, #112]	; (8002298 <MX_TIM3_Init+0x90>)
 8002226:	4a1d      	ldr	r2, [pc, #116]	; (800229c <MX_TIM3_Init+0x94>)
 8002228:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 99;
 800222a:	4b1b      	ldr	r3, [pc, #108]	; (8002298 <MX_TIM3_Init+0x90>)
 800222c:	2263      	movs	r2, #99	; 0x63
 800222e:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002230:	4b19      	ldr	r3, [pc, #100]	; (8002298 <MX_TIM3_Init+0x90>)
 8002232:	2200      	movs	r2, #0
 8002234:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 100;
 8002236:	4b18      	ldr	r3, [pc, #96]	; (8002298 <MX_TIM3_Init+0x90>)
 8002238:	2264      	movs	r2, #100	; 0x64
 800223a:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800223c:	4b16      	ldr	r3, [pc, #88]	; (8002298 <MX_TIM3_Init+0x90>)
 800223e:	2200      	movs	r2, #0
 8002240:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002242:	4b15      	ldr	r3, [pc, #84]	; (8002298 <MX_TIM3_Init+0x90>)
 8002244:	2200      	movs	r2, #0
 8002246:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK) {
 8002248:	4813      	ldr	r0, [pc, #76]	; (8002298 <MX_TIM3_Init+0x90>)
 800224a:	f002 ff81 	bl	8005150 <HAL_TIM_Base_Init>
 800224e:	4603      	mov	r3, r0
 8002250:	2b00      	cmp	r3, #0
 8002252:	d001      	beq.n	8002258 <MX_TIM3_Init+0x50>
		Error_Handler();
 8002254:	f000 f9f6 	bl	8002644 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002258:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800225c:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK) {
 800225e:	f107 0308 	add.w	r3, r7, #8
 8002262:	4619      	mov	r1, r3
 8002264:	480c      	ldr	r0, [pc, #48]	; (8002298 <MX_TIM3_Init+0x90>)
 8002266:	f003 f8ee 	bl	8005446 <HAL_TIM_ConfigClockSource>
 800226a:	4603      	mov	r3, r0
 800226c:	2b00      	cmp	r3, #0
 800226e:	d001      	beq.n	8002274 <MX_TIM3_Init+0x6c>
		Error_Handler();
 8002270:	f000 f9e8 	bl	8002644 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002274:	2320      	movs	r3, #32
 8002276:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002278:	2300      	movs	r3, #0
 800227a:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 800227c:	463b      	mov	r3, r7
 800227e:	4619      	mov	r1, r3
 8002280:	4805      	ldr	r0, [pc, #20]	; (8002298 <MX_TIM3_Init+0x90>)
 8002282:	f003 fae7 	bl	8005854 <HAL_TIMEx_MasterConfigSynchronization>
 8002286:	4603      	mov	r3, r0
 8002288:	2b00      	cmp	r3, #0
 800228a:	d001      	beq.n	8002290 <MX_TIM3_Init+0x88>
			!= HAL_OK) {
		Error_Handler();
 800228c:	f000 f9da 	bl	8002644 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */

}
 8002290:	bf00      	nop
 8002292:	3718      	adds	r7, #24
 8002294:	46bd      	mov	sp, r7
 8002296:	bd80      	pop	{r7, pc}
 8002298:	200002e8 	.word	0x200002e8
 800229c:	40000400 	.word	0x40000400

080022a0 <MX_TIM11_Init>:
/**
 * @brief TIM11 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM11_Init(void) {
 80022a0:	b580      	push	{r7, lr}
 80022a2:	af00      	add	r7, sp, #0
	/* USER CODE END TIM11_Init 0 */

	/* USER CODE BEGIN TIM11_Init 1 */

	/* USER CODE END TIM11_Init 1 */
	htim11.Instance = TIM11;
 80022a4:	4b0e      	ldr	r3, [pc, #56]	; (80022e0 <MX_TIM11_Init+0x40>)
 80022a6:	4a0f      	ldr	r2, [pc, #60]	; (80022e4 <MX_TIM11_Init+0x44>)
 80022a8:	601a      	str	r2, [r3, #0]
	htim11.Init.Prescaler = 99;
 80022aa:	4b0d      	ldr	r3, [pc, #52]	; (80022e0 <MX_TIM11_Init+0x40>)
 80022ac:	2263      	movs	r2, #99	; 0x63
 80022ae:	605a      	str	r2, [r3, #4]
	htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022b0:	4b0b      	ldr	r3, [pc, #44]	; (80022e0 <MX_TIM11_Init+0x40>)
 80022b2:	2200      	movs	r2, #0
 80022b4:	609a      	str	r2, [r3, #8]
	htim11.Init.Period = 65535;
 80022b6:	4b0a      	ldr	r3, [pc, #40]	; (80022e0 <MX_TIM11_Init+0x40>)
 80022b8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80022bc:	60da      	str	r2, [r3, #12]
	htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80022be:	4b08      	ldr	r3, [pc, #32]	; (80022e0 <MX_TIM11_Init+0x40>)
 80022c0:	2200      	movs	r2, #0
 80022c2:	611a      	str	r2, [r3, #16]
	htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80022c4:	4b06      	ldr	r3, [pc, #24]	; (80022e0 <MX_TIM11_Init+0x40>)
 80022c6:	2200      	movs	r2, #0
 80022c8:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim11) != HAL_OK) {
 80022ca:	4805      	ldr	r0, [pc, #20]	; (80022e0 <MX_TIM11_Init+0x40>)
 80022cc:	f002 ff40 	bl	8005150 <HAL_TIM_Base_Init>
 80022d0:	4603      	mov	r3, r0
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d001      	beq.n	80022da <MX_TIM11_Init+0x3a>
		Error_Handler();
 80022d6:	f000 f9b5 	bl	8002644 <Error_Handler>
	}
	/* USER CODE BEGIN TIM11_Init 2 */

	/* USER CODE END TIM11_Init 2 */

}
 80022da:	bf00      	nop
 80022dc:	bd80      	pop	{r7, pc}
 80022de:	bf00      	nop
 80022e0:	200003c8 	.word	0x200003c8
 80022e4:	40014800 	.word	0x40014800

080022e8 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 80022e8:	b580      	push	{r7, lr}
 80022ea:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 80022ec:	4b11      	ldr	r3, [pc, #68]	; (8002334 <MX_USART2_UART_Init+0x4c>)
 80022ee:	4a12      	ldr	r2, [pc, #72]	; (8002338 <MX_USART2_UART_Init+0x50>)
 80022f0:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 80022f2:	4b10      	ldr	r3, [pc, #64]	; (8002334 <MX_USART2_UART_Init+0x4c>)
 80022f4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80022f8:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80022fa:	4b0e      	ldr	r3, [pc, #56]	; (8002334 <MX_USART2_UART_Init+0x4c>)
 80022fc:	2200      	movs	r2, #0
 80022fe:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8002300:	4b0c      	ldr	r3, [pc, #48]	; (8002334 <MX_USART2_UART_Init+0x4c>)
 8002302:	2200      	movs	r2, #0
 8002304:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8002306:	4b0b      	ldr	r3, [pc, #44]	; (8002334 <MX_USART2_UART_Init+0x4c>)
 8002308:	2200      	movs	r2, #0
 800230a:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 800230c:	4b09      	ldr	r3, [pc, #36]	; (8002334 <MX_USART2_UART_Init+0x4c>)
 800230e:	220c      	movs	r2, #12
 8002310:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002312:	4b08      	ldr	r3, [pc, #32]	; (8002334 <MX_USART2_UART_Init+0x4c>)
 8002314:	2200      	movs	r2, #0
 8002316:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002318:	4b06      	ldr	r3, [pc, #24]	; (8002334 <MX_USART2_UART_Init+0x4c>)
 800231a:	2200      	movs	r2, #0
 800231c:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 800231e:	4805      	ldr	r0, [pc, #20]	; (8002334 <MX_USART2_UART_Init+0x4c>)
 8002320:	f003 fb1a 	bl	8005958 <HAL_UART_Init>
 8002324:	4603      	mov	r3, r0
 8002326:	2b00      	cmp	r3, #0
 8002328:	d001      	beq.n	800232e <MX_USART2_UART_Init+0x46>
		Error_Handler();
 800232a:	f000 f98b 	bl	8002644 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 800232e:	bf00      	nop
 8002330:	bd80      	pop	{r7, pc}
 8002332:	bf00      	nop
 8002334:	20000468 	.word	0x20000468
 8002338:	40004400 	.word	0x40004400

0800233c <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 800233c:	b580      	push	{r7, lr}
 800233e:	b082      	sub	sp, #8
 8002340:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA2_CLK_ENABLE();
 8002342:	2300      	movs	r3, #0
 8002344:	607b      	str	r3, [r7, #4]
 8002346:	4b0c      	ldr	r3, [pc, #48]	; (8002378 <MX_DMA_Init+0x3c>)
 8002348:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800234a:	4a0b      	ldr	r2, [pc, #44]	; (8002378 <MX_DMA_Init+0x3c>)
 800234c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002350:	6313      	str	r3, [r2, #48]	; 0x30
 8002352:	4b09      	ldr	r3, [pc, #36]	; (8002378 <MX_DMA_Init+0x3c>)
 8002354:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002356:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800235a:	607b      	str	r3, [r7, #4]
 800235c:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA2_Stream0_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800235e:	2200      	movs	r2, #0
 8002360:	2100      	movs	r1, #0
 8002362:	2038      	movs	r0, #56	; 0x38
 8002364:	f001 f9b1 	bl	80036ca <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8002368:	2038      	movs	r0, #56	; 0x38
 800236a:	f001 f9ca 	bl	8003702 <HAL_NVIC_EnableIRQ>

}
 800236e:	bf00      	nop
 8002370:	3708      	adds	r7, #8
 8002372:	46bd      	mov	sp, r7
 8002374:	bd80      	pop	{r7, pc}
 8002376:	bf00      	nop
 8002378:	40023800 	.word	0x40023800

0800237c <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 800237c:	b580      	push	{r7, lr}
 800237e:	b08a      	sub	sp, #40	; 0x28
 8002380:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8002382:	f107 0314 	add.w	r3, r7, #20
 8002386:	2200      	movs	r2, #0
 8002388:	601a      	str	r2, [r3, #0]
 800238a:	605a      	str	r2, [r3, #4]
 800238c:	609a      	str	r2, [r3, #8]
 800238e:	60da      	str	r2, [r3, #12]
 8002390:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8002392:	2300      	movs	r3, #0
 8002394:	613b      	str	r3, [r7, #16]
 8002396:	4b42      	ldr	r3, [pc, #264]	; (80024a0 <MX_GPIO_Init+0x124>)
 8002398:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800239a:	4a41      	ldr	r2, [pc, #260]	; (80024a0 <MX_GPIO_Init+0x124>)
 800239c:	f043 0304 	orr.w	r3, r3, #4
 80023a0:	6313      	str	r3, [r2, #48]	; 0x30
 80023a2:	4b3f      	ldr	r3, [pc, #252]	; (80024a0 <MX_GPIO_Init+0x124>)
 80023a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023a6:	f003 0304 	and.w	r3, r3, #4
 80023aa:	613b      	str	r3, [r7, #16]
 80023ac:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 80023ae:	2300      	movs	r3, #0
 80023b0:	60fb      	str	r3, [r7, #12]
 80023b2:	4b3b      	ldr	r3, [pc, #236]	; (80024a0 <MX_GPIO_Init+0x124>)
 80023b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023b6:	4a3a      	ldr	r2, [pc, #232]	; (80024a0 <MX_GPIO_Init+0x124>)
 80023b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80023bc:	6313      	str	r3, [r2, #48]	; 0x30
 80023be:	4b38      	ldr	r3, [pc, #224]	; (80024a0 <MX_GPIO_Init+0x124>)
 80023c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023c6:	60fb      	str	r3, [r7, #12]
 80023c8:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80023ca:	2300      	movs	r3, #0
 80023cc:	60bb      	str	r3, [r7, #8]
 80023ce:	4b34      	ldr	r3, [pc, #208]	; (80024a0 <MX_GPIO_Init+0x124>)
 80023d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023d2:	4a33      	ldr	r2, [pc, #204]	; (80024a0 <MX_GPIO_Init+0x124>)
 80023d4:	f043 0301 	orr.w	r3, r3, #1
 80023d8:	6313      	str	r3, [r2, #48]	; 0x30
 80023da:	4b31      	ldr	r3, [pc, #196]	; (80024a0 <MX_GPIO_Init+0x124>)
 80023dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023de:	f003 0301 	and.w	r3, r3, #1
 80023e2:	60bb      	str	r3, [r7, #8]
 80023e4:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80023e6:	2300      	movs	r3, #0
 80023e8:	607b      	str	r3, [r7, #4]
 80023ea:	4b2d      	ldr	r3, [pc, #180]	; (80024a0 <MX_GPIO_Init+0x124>)
 80023ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ee:	4a2c      	ldr	r2, [pc, #176]	; (80024a0 <MX_GPIO_Init+0x124>)
 80023f0:	f043 0302 	orr.w	r3, r3, #2
 80023f4:	6313      	str	r3, [r2, #48]	; 0x30
 80023f6:	4b2a      	ldr	r3, [pc, #168]	; (80024a0 <MX_GPIO_Init+0x124>)
 80023f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023fa:	f003 0302 	and.w	r3, r3, #2
 80023fe:	607b      	str	r3, [r7, #4]
 8002400:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, LD2_Pin | LOAD_Pin, GPIO_PIN_RESET);
 8002402:	2200      	movs	r2, #0
 8002404:	f44f 7108 	mov.w	r1, #544	; 0x220
 8002408:	4826      	ldr	r0, [pc, #152]	; (80024a4 <MX_GPIO_Init+0x128>)
 800240a:	f001 fec3 	bl	8004194 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(SPI_SS_GPIO_Port, SPI_SS_Pin, GPIO_PIN_SET);
 800240e:	2201      	movs	r2, #1
 8002410:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002414:	4824      	ldr	r0, [pc, #144]	; (80024a8 <MX_GPIO_Init+0x12c>)
 8002416:	f001 febd 	bl	8004194 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(SHDN_GPIO_Port, SHDN_Pin, GPIO_PIN_SET);
 800241a:	2201      	movs	r2, #1
 800241c:	2180      	movs	r1, #128	; 0x80
 800241e:	4823      	ldr	r0, [pc, #140]	; (80024ac <MX_GPIO_Init+0x130>)
 8002420:	f001 feb8 	bl	8004194 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 8002424:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002428:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800242a:	4b21      	ldr	r3, [pc, #132]	; (80024b0 <MX_GPIO_Init+0x134>)
 800242c:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800242e:	2300      	movs	r3, #0
 8002430:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002432:	f107 0314 	add.w	r3, r7, #20
 8002436:	4619      	mov	r1, r3
 8002438:	481c      	ldr	r0, [pc, #112]	; (80024ac <MX_GPIO_Init+0x130>)
 800243a:	f001 fd0f 	bl	8003e5c <HAL_GPIO_Init>

	/*Configure GPIO pins : LD2_Pin LOAD_Pin */
	GPIO_InitStruct.Pin = LD2_Pin | LOAD_Pin;
 800243e:	f44f 7308 	mov.w	r3, #544	; 0x220
 8002442:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002444:	2301      	movs	r3, #1
 8002446:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002448:	2300      	movs	r3, #0
 800244a:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800244c:	2300      	movs	r3, #0
 800244e:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002450:	f107 0314 	add.w	r3, r7, #20
 8002454:	4619      	mov	r1, r3
 8002456:	4813      	ldr	r0, [pc, #76]	; (80024a4 <MX_GPIO_Init+0x128>)
 8002458:	f001 fd00 	bl	8003e5c <HAL_GPIO_Init>

	/*Configure GPIO pin : SPI_SS_Pin */
	GPIO_InitStruct.Pin = SPI_SS_Pin;
 800245c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002460:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002462:	2301      	movs	r3, #1
 8002464:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002466:	2300      	movs	r3, #0
 8002468:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800246a:	2300      	movs	r3, #0
 800246c:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(SPI_SS_GPIO_Port, &GPIO_InitStruct);
 800246e:	f107 0314 	add.w	r3, r7, #20
 8002472:	4619      	mov	r1, r3
 8002474:	480c      	ldr	r0, [pc, #48]	; (80024a8 <MX_GPIO_Init+0x12c>)
 8002476:	f001 fcf1 	bl	8003e5c <HAL_GPIO_Init>

	/*Configure GPIO pin : SHDN_Pin */
	GPIO_InitStruct.Pin = SHDN_Pin;
 800247a:	2380      	movs	r3, #128	; 0x80
 800247c:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800247e:	2301      	movs	r3, #1
 8002480:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002482:	2300      	movs	r3, #0
 8002484:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002486:	2300      	movs	r3, #0
 8002488:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(SHDN_GPIO_Port, &GPIO_InitStruct);
 800248a:	f107 0314 	add.w	r3, r7, #20
 800248e:	4619      	mov	r1, r3
 8002490:	4806      	ldr	r0, [pc, #24]	; (80024ac <MX_GPIO_Init+0x130>)
 8002492:	f001 fce3 	bl	8003e5c <HAL_GPIO_Init>

}
 8002496:	bf00      	nop
 8002498:	3728      	adds	r7, #40	; 0x28
 800249a:	46bd      	mov	sp, r7
 800249c:	bd80      	pop	{r7, pc}
 800249e:	bf00      	nop
 80024a0:	40023800 	.word	0x40023800
 80024a4:	40020000 	.word	0x40020000
 80024a8:	40020400 	.word	0x40020400
 80024ac:	40020800 	.word	0x40020800
 80024b0:	10210000 	.word	0x10210000

080024b4 <MCP4922SetOutput>:

/* USER CODE BEGIN 4 */
void MCP4922SetOutput(uint8_t Config, uint16_t DACOutput) {
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b084      	sub	sp, #16
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	4603      	mov	r3, r0
 80024bc:	460a      	mov	r2, r1
 80024be:	71fb      	strb	r3, [r7, #7]
 80024c0:	4613      	mov	r3, r2
 80024c2:	80bb      	strh	r3, [r7, #4]
	uint32_t OutputPacket = (DACOutput & 0x0fff) | ((Config & 0xf) << 12);
 80024c4:	88bb      	ldrh	r3, [r7, #4]
 80024c6:	f3c3 020b 	ubfx	r2, r3, #0, #12
 80024ca:	79fb      	ldrb	r3, [r7, #7]
 80024cc:	031b      	lsls	r3, r3, #12
 80024ce:	b29b      	uxth	r3, r3
 80024d0:	4313      	orrs	r3, r2
 80024d2:	60fb      	str	r3, [r7, #12]
	//outputpacket >> config 4 bits + DACOutput (data) 12 bits

	HAL_GPIO_WritePin(SPI_SS_GPIO_Port, SPI_SS_Pin, GPIO_PIN_RESET);
 80024d4:	2200      	movs	r2, #0
 80024d6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80024da:	4807      	ldr	r0, [pc, #28]	; (80024f8 <MCP4922SetOutput+0x44>)
 80024dc:	f001 fe5a 	bl	8004194 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit_IT(&hspi3, &OutputPacket, 1);//size 1 >> 1 outputpacket => 16 bits
 80024e0:	f107 030c 	add.w	r3, r7, #12
 80024e4:	2201      	movs	r2, #1
 80024e6:	4619      	mov	r1, r3
 80024e8:	4804      	ldr	r0, [pc, #16]	; (80024fc <MCP4922SetOutput+0x48>)
 80024ea:	f002 fb3d 	bl	8004b68 <HAL_SPI_Transmit_IT>
}
 80024ee:	bf00      	nop
 80024f0:	3710      	adds	r7, #16
 80024f2:	46bd      	mov	sp, r7
 80024f4:	bd80      	pop	{r7, pc}
 80024f6:	bf00      	nop
 80024f8:	40020400 	.word	0x40020400
 80024fc:	20000328 	.word	0x20000328

08002500 <HAL_SPI_TxCpltCallback>:

void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) {
 8002500:	b580      	push	{r7, lr}
 8002502:	b082      	sub	sp, #8
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
	if (hspi == &hspi3) {
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	4a06      	ldr	r2, [pc, #24]	; (8002524 <HAL_SPI_TxCpltCallback+0x24>)
 800250c:	4293      	cmp	r3, r2
 800250e:	d105      	bne.n	800251c <HAL_SPI_TxCpltCallback+0x1c>
		//transmit complete >> slave select turn to HIGH to tell that it's complete (every rounds)
		HAL_GPIO_WritePin(SPI_SS_GPIO_Port, SPI_SS_Pin, GPIO_PIN_SET);
 8002510:	2201      	movs	r2, #1
 8002512:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002516:	4804      	ldr	r0, [pc, #16]	; (8002528 <HAL_SPI_TxCpltCallback+0x28>)
 8002518:	f001 fe3c 	bl	8004194 <HAL_GPIO_WritePin>
	}
}
 800251c:	bf00      	nop
 800251e:	3708      	adds	r7, #8
 8002520:	46bd      	mov	sp, r7
 8002522:	bd80      	pop	{r7, pc}
 8002524:	20000328 	.word	0x20000328
 8002528:	40020400 	.word	0x40020400

0800252c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 800252c:	b4b0      	push	{r4, r5, r7}
 800252e:	b083      	sub	sp, #12
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
	if (htim == &htim11) {
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	4a0a      	ldr	r2, [pc, #40]	; (8002560 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8002538:	4293      	cmp	r3, r2
 800253a:	d10c      	bne.n	8002556 <HAL_TIM_PeriodElapsedCallback+0x2a>
		_micro += 65535;
 800253c:	4b09      	ldr	r3, [pc, #36]	; (8002564 <HAL_TIM_PeriodElapsedCallback+0x38>)
 800253e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002542:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002546:	f04f 0100 	mov.w	r1, #0
 800254a:	1814      	adds	r4, r2, r0
 800254c:	eb43 0501 	adc.w	r5, r3, r1
 8002550:	4b04      	ldr	r3, [pc, #16]	; (8002564 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8002552:	e9c3 4500 	strd	r4, r5, [r3]
	}
}
 8002556:	bf00      	nop
 8002558:	370c      	adds	r7, #12
 800255a:	46bd      	mov	sp, r7
 800255c:	bcb0      	pop	{r4, r5, r7}
 800255e:	4770      	bx	lr
 8002560:	200003c8 	.word	0x200003c8
 8002564:	20000218 	.word	0x20000218

08002568 <micros>:

inline uint64_t micros() {
 8002568:	b4b0      	push	{r4, r5, r7}
 800256a:	af00      	add	r7, sp, #0
	return htim11.Instance->CNT + _micro;
 800256c:	4b09      	ldr	r3, [pc, #36]	; (8002594 <micros+0x2c>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002572:	4618      	mov	r0, r3
 8002574:	f04f 0100 	mov.w	r1, #0
 8002578:	4b07      	ldr	r3, [pc, #28]	; (8002598 <micros+0x30>)
 800257a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800257e:	1884      	adds	r4, r0, r2
 8002580:	eb41 0503 	adc.w	r5, r1, r3
 8002584:	4622      	mov	r2, r4
 8002586:	462b      	mov	r3, r5
}
 8002588:	4610      	mov	r0, r2
 800258a:	4619      	mov	r1, r3
 800258c:	46bd      	mov	sp, r7
 800258e:	bcb0      	pop	{r4, r5, r7}
 8002590:	4770      	bx	lr
 8002592:	bf00      	nop
 8002594:	200003c8 	.word	0x200003c8
 8002598:	20000218 	.word	0x20000218

0800259c <UARTReceiveIT>:
	HAL_UART_Transmit(&huart2, (uint8_t*) TxDataBuffer, strlen(TxDataBuffer),
			1000);

}

int16_t UARTReceiveIT() {
 800259c:	b480      	push	{r7}
 800259e:	b083      	sub	sp, #12
 80025a0:	af00      	add	r7, sp, #0
	static uint32_t dataPos = 0;
	int16_t data = -1;
 80025a2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80025a6:	80fb      	strh	r3, [r7, #6]
	if (huart2.RxXferSize - huart2.RxXferCount != dataPos) {
 80025a8:	4b11      	ldr	r3, [pc, #68]	; (80025f0 <UARTReceiveIT+0x54>)
 80025aa:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80025ac:	461a      	mov	r2, r3
 80025ae:	4b10      	ldr	r3, [pc, #64]	; (80025f0 <UARTReceiveIT+0x54>)
 80025b0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80025b2:	b29b      	uxth	r3, r3
 80025b4:	1ad3      	subs	r3, r2, r3
 80025b6:	4a0f      	ldr	r2, [pc, #60]	; (80025f4 <UARTReceiveIT+0x58>)
 80025b8:	6812      	ldr	r2, [r2, #0]
 80025ba:	4293      	cmp	r3, r2
 80025bc:	d010      	beq.n	80025e0 <UARTReceiveIT+0x44>
		data = RxDataBuffer[dataPos];
 80025be:	4b0d      	ldr	r3, [pc, #52]	; (80025f4 <UARTReceiveIT+0x58>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	4a0d      	ldr	r2, [pc, #52]	; (80025f8 <UARTReceiveIT+0x5c>)
 80025c4:	5cd3      	ldrb	r3, [r2, r3]
 80025c6:	80fb      	strh	r3, [r7, #6]
		dataPos = (dataPos + 1) % huart2.RxXferSize;
 80025c8:	4b0a      	ldr	r3, [pc, #40]	; (80025f4 <UARTReceiveIT+0x58>)
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	3301      	adds	r3, #1
 80025ce:	4a08      	ldr	r2, [pc, #32]	; (80025f0 <UARTReceiveIT+0x54>)
 80025d0:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
 80025d2:	fbb3 f1f2 	udiv	r1, r3, r2
 80025d6:	fb02 f201 	mul.w	r2, r2, r1
 80025da:	1a9b      	subs	r3, r3, r2
 80025dc:	4a05      	ldr	r2, [pc, #20]	; (80025f4 <UARTReceiveIT+0x58>)
 80025de:	6013      	str	r3, [r2, #0]
	}
	return data;
 80025e0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 80025e4:	4618      	mov	r0, r3
 80025e6:	370c      	adds	r7, #12
 80025e8:	46bd      	mov	sp, r7
 80025ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ee:	4770      	bx	lr
 80025f0:	20000468 	.word	0x20000468
 80025f4:	200002d8 	.word	0x200002d8
 80025f8:	2000024c 	.word	0x2000024c

080025fc <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80025fc:	b590      	push	{r4, r7, lr}
 80025fe:	b083      	sub	sp, #12
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
	sprintf(TxDataBuffer, "Received:[%s]\r\n", RxDataBuffer);
 8002604:	4a0b      	ldr	r2, [pc, #44]	; (8002634 <HAL_UART_RxCpltCallback+0x38>)
 8002606:	490c      	ldr	r1, [pc, #48]	; (8002638 <HAL_UART_RxCpltCallback+0x3c>)
 8002608:	480c      	ldr	r0, [pc, #48]	; (800263c <HAL_UART_RxCpltCallback+0x40>)
 800260a:	f004 ffbd 	bl	8007588 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t) TxDataBuffer, strlen(TxDataBuffer),
 800260e:	4b0b      	ldr	r3, [pc, #44]	; (800263c <HAL_UART_RxCpltCallback+0x40>)
 8002610:	b2db      	uxtb	r3, r3
 8002612:	461c      	mov	r4, r3
 8002614:	4809      	ldr	r0, [pc, #36]	; (800263c <HAL_UART_RxCpltCallback+0x40>)
 8002616:	f7fd fde3 	bl	80001e0 <strlen>
 800261a:	4603      	mov	r3, r0
 800261c:	b29a      	uxth	r2, r3
 800261e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002622:	4621      	mov	r1, r4
 8002624:	4806      	ldr	r0, [pc, #24]	; (8002640 <HAL_UART_RxCpltCallback+0x44>)
 8002626:	f003 f9e4 	bl	80059f2 <HAL_UART_Transmit>
			1000);
}
 800262a:	bf00      	nop
 800262c:	370c      	adds	r7, #12
 800262e:	46bd      	mov	sp, r7
 8002630:	bd90      	pop	{r4, r7, pc}
 8002632:	bf00      	nop
 8002634:	2000024c 	.word	0x2000024c
 8002638:	0800b450 	.word	0x0800b450
 800263c:	2000022c 	.word	0x2000022c
 8002640:	20000468 	.word	0x20000468

08002644 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8002644:	b480      	push	{r7}
 8002646:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002648:	b672      	cpsid	i
}
 800264a:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800264c:	e7fe      	b.n	800264c <Error_Handler+0x8>
	...

08002650 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b082      	sub	sp, #8
 8002654:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002656:	2300      	movs	r3, #0
 8002658:	607b      	str	r3, [r7, #4]
 800265a:	4b10      	ldr	r3, [pc, #64]	; (800269c <HAL_MspInit+0x4c>)
 800265c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800265e:	4a0f      	ldr	r2, [pc, #60]	; (800269c <HAL_MspInit+0x4c>)
 8002660:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002664:	6453      	str	r3, [r2, #68]	; 0x44
 8002666:	4b0d      	ldr	r3, [pc, #52]	; (800269c <HAL_MspInit+0x4c>)
 8002668:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800266a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800266e:	607b      	str	r3, [r7, #4]
 8002670:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002672:	2300      	movs	r3, #0
 8002674:	603b      	str	r3, [r7, #0]
 8002676:	4b09      	ldr	r3, [pc, #36]	; (800269c <HAL_MspInit+0x4c>)
 8002678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800267a:	4a08      	ldr	r2, [pc, #32]	; (800269c <HAL_MspInit+0x4c>)
 800267c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002680:	6413      	str	r3, [r2, #64]	; 0x40
 8002682:	4b06      	ldr	r3, [pc, #24]	; (800269c <HAL_MspInit+0x4c>)
 8002684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002686:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800268a:	603b      	str	r3, [r7, #0]
 800268c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800268e:	2007      	movs	r0, #7
 8002690:	f001 f810 	bl	80036b4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002694:	bf00      	nop
 8002696:	3708      	adds	r7, #8
 8002698:	46bd      	mov	sp, r7
 800269a:	bd80      	pop	{r7, pc}
 800269c:	40023800 	.word	0x40023800

080026a0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b08a      	sub	sp, #40	; 0x28
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026a8:	f107 0314 	add.w	r3, r7, #20
 80026ac:	2200      	movs	r2, #0
 80026ae:	601a      	str	r2, [r3, #0]
 80026b0:	605a      	str	r2, [r3, #4]
 80026b2:	609a      	str	r2, [r3, #8]
 80026b4:	60da      	str	r2, [r3, #12]
 80026b6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	4a33      	ldr	r2, [pc, #204]	; (800278c <HAL_ADC_MspInit+0xec>)
 80026be:	4293      	cmp	r3, r2
 80026c0:	d15f      	bne.n	8002782 <HAL_ADC_MspInit+0xe2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80026c2:	2300      	movs	r3, #0
 80026c4:	613b      	str	r3, [r7, #16]
 80026c6:	4b32      	ldr	r3, [pc, #200]	; (8002790 <HAL_ADC_MspInit+0xf0>)
 80026c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026ca:	4a31      	ldr	r2, [pc, #196]	; (8002790 <HAL_ADC_MspInit+0xf0>)
 80026cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026d0:	6453      	str	r3, [r2, #68]	; 0x44
 80026d2:	4b2f      	ldr	r3, [pc, #188]	; (8002790 <HAL_ADC_MspInit+0xf0>)
 80026d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026da:	613b      	str	r3, [r7, #16]
 80026dc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026de:	2300      	movs	r3, #0
 80026e0:	60fb      	str	r3, [r7, #12]
 80026e2:	4b2b      	ldr	r3, [pc, #172]	; (8002790 <HAL_ADC_MspInit+0xf0>)
 80026e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026e6:	4a2a      	ldr	r2, [pc, #168]	; (8002790 <HAL_ADC_MspInit+0xf0>)
 80026e8:	f043 0301 	orr.w	r3, r3, #1
 80026ec:	6313      	str	r3, [r2, #48]	; 0x30
 80026ee:	4b28      	ldr	r3, [pc, #160]	; (8002790 <HAL_ADC_MspInit+0xf0>)
 80026f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026f2:	f003 0301 	and.w	r3, r3, #1
 80026f6:	60fb      	str	r3, [r7, #12]
 80026f8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80026fa:	2301      	movs	r3, #1
 80026fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80026fe:	2303      	movs	r3, #3
 8002700:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002702:	2300      	movs	r3, #0
 8002704:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002706:	f107 0314 	add.w	r3, r7, #20
 800270a:	4619      	mov	r1, r3
 800270c:	4821      	ldr	r0, [pc, #132]	; (8002794 <HAL_ADC_MspInit+0xf4>)
 800270e:	f001 fba5 	bl	8003e5c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8002712:	4b21      	ldr	r3, [pc, #132]	; (8002798 <HAL_ADC_MspInit+0xf8>)
 8002714:	4a21      	ldr	r2, [pc, #132]	; (800279c <HAL_ADC_MspInit+0xfc>)
 8002716:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8002718:	4b1f      	ldr	r3, [pc, #124]	; (8002798 <HAL_ADC_MspInit+0xf8>)
 800271a:	2200      	movs	r2, #0
 800271c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800271e:	4b1e      	ldr	r3, [pc, #120]	; (8002798 <HAL_ADC_MspInit+0xf8>)
 8002720:	2200      	movs	r2, #0
 8002722:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002724:	4b1c      	ldr	r3, [pc, #112]	; (8002798 <HAL_ADC_MspInit+0xf8>)
 8002726:	2200      	movs	r2, #0
 8002728:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800272a:	4b1b      	ldr	r3, [pc, #108]	; (8002798 <HAL_ADC_MspInit+0xf8>)
 800272c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002730:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002732:	4b19      	ldr	r3, [pc, #100]	; (8002798 <HAL_ADC_MspInit+0xf8>)
 8002734:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002738:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800273a:	4b17      	ldr	r3, [pc, #92]	; (8002798 <HAL_ADC_MspInit+0xf8>)
 800273c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002740:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002742:	4b15      	ldr	r3, [pc, #84]	; (8002798 <HAL_ADC_MspInit+0xf8>)
 8002744:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002748:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800274a:	4b13      	ldr	r3, [pc, #76]	; (8002798 <HAL_ADC_MspInit+0xf8>)
 800274c:	2200      	movs	r2, #0
 800274e:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002750:	4b11      	ldr	r3, [pc, #68]	; (8002798 <HAL_ADC_MspInit+0xf8>)
 8002752:	2200      	movs	r2, #0
 8002754:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002756:	4810      	ldr	r0, [pc, #64]	; (8002798 <HAL_ADC_MspInit+0xf8>)
 8002758:	f000 ffee 	bl	8003738 <HAL_DMA_Init>
 800275c:	4603      	mov	r3, r0
 800275e:	2b00      	cmp	r3, #0
 8002760:	d001      	beq.n	8002766 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8002762:	f7ff ff6f 	bl	8002644 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	4a0b      	ldr	r2, [pc, #44]	; (8002798 <HAL_ADC_MspInit+0xf8>)
 800276a:	639a      	str	r2, [r3, #56]	; 0x38
 800276c:	4a0a      	ldr	r2, [pc, #40]	; (8002798 <HAL_ADC_MspInit+0xf8>)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 6);
 8002772:	2206      	movs	r2, #6
 8002774:	2100      	movs	r1, #0
 8002776:	2012      	movs	r0, #18
 8002778:	f000 ffa7 	bl	80036ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 800277c:	2012      	movs	r0, #18
 800277e:	f000 ffc0 	bl	8003702 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002782:	bf00      	nop
 8002784:	3728      	adds	r7, #40	; 0x28
 8002786:	46bd      	mov	sp, r7
 8002788:	bd80      	pop	{r7, pc}
 800278a:	bf00      	nop
 800278c:	40012000 	.word	0x40012000
 8002790:	40023800 	.word	0x40023800
 8002794:	40020000 	.word	0x40020000
 8002798:	20000408 	.word	0x20000408
 800279c:	40026410 	.word	0x40026410

080027a0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b08a      	sub	sp, #40	; 0x28
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027a8:	f107 0314 	add.w	r3, r7, #20
 80027ac:	2200      	movs	r2, #0
 80027ae:	601a      	str	r2, [r3, #0]
 80027b0:	605a      	str	r2, [r3, #4]
 80027b2:	609a      	str	r2, [r3, #8]
 80027b4:	60da      	str	r2, [r3, #12]
 80027b6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	4a1d      	ldr	r2, [pc, #116]	; (8002834 <HAL_SPI_MspInit+0x94>)
 80027be:	4293      	cmp	r3, r2
 80027c0:	d133      	bne.n	800282a <HAL_SPI_MspInit+0x8a>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80027c2:	2300      	movs	r3, #0
 80027c4:	613b      	str	r3, [r7, #16]
 80027c6:	4b1c      	ldr	r3, [pc, #112]	; (8002838 <HAL_SPI_MspInit+0x98>)
 80027c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ca:	4a1b      	ldr	r2, [pc, #108]	; (8002838 <HAL_SPI_MspInit+0x98>)
 80027cc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80027d0:	6413      	str	r3, [r2, #64]	; 0x40
 80027d2:	4b19      	ldr	r3, [pc, #100]	; (8002838 <HAL_SPI_MspInit+0x98>)
 80027d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027d6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80027da:	613b      	str	r3, [r7, #16]
 80027dc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80027de:	2300      	movs	r3, #0
 80027e0:	60fb      	str	r3, [r7, #12]
 80027e2:	4b15      	ldr	r3, [pc, #84]	; (8002838 <HAL_SPI_MspInit+0x98>)
 80027e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027e6:	4a14      	ldr	r2, [pc, #80]	; (8002838 <HAL_SPI_MspInit+0x98>)
 80027e8:	f043 0302 	orr.w	r3, r3, #2
 80027ec:	6313      	str	r3, [r2, #48]	; 0x30
 80027ee:	4b12      	ldr	r3, [pc, #72]	; (8002838 <HAL_SPI_MspInit+0x98>)
 80027f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027f2:	f003 0302 	and.w	r3, r3, #2
 80027f6:	60fb      	str	r3, [r7, #12]
 80027f8:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PB3     ------> SPI3_SCK
    PB4     ------> SPI3_MISO
    PB5     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 80027fa:	2338      	movs	r3, #56	; 0x38
 80027fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027fe:	2302      	movs	r3, #2
 8002800:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002802:	2300      	movs	r3, #0
 8002804:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002806:	2303      	movs	r3, #3
 8002808:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800280a:	2306      	movs	r3, #6
 800280c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800280e:	f107 0314 	add.w	r3, r7, #20
 8002812:	4619      	mov	r1, r3
 8002814:	4809      	ldr	r0, [pc, #36]	; (800283c <HAL_SPI_MspInit+0x9c>)
 8002816:	f001 fb21 	bl	8003e5c <HAL_GPIO_Init>

    /* SPI3 interrupt Init */
    HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 800281a:	2200      	movs	r2, #0
 800281c:	2100      	movs	r1, #0
 800281e:	2033      	movs	r0, #51	; 0x33
 8002820:	f000 ff53 	bl	80036ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 8002824:	2033      	movs	r0, #51	; 0x33
 8002826:	f000 ff6c 	bl	8003702 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 800282a:	bf00      	nop
 800282c:	3728      	adds	r7, #40	; 0x28
 800282e:	46bd      	mov	sp, r7
 8002830:	bd80      	pop	{r7, pc}
 8002832:	bf00      	nop
 8002834:	40003c00 	.word	0x40003c00
 8002838:	40023800 	.word	0x40023800
 800283c:	40020400 	.word	0x40020400

08002840 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	b084      	sub	sp, #16
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	4a18      	ldr	r2, [pc, #96]	; (80028b0 <HAL_TIM_Base_MspInit+0x70>)
 800284e:	4293      	cmp	r3, r2
 8002850:	d10e      	bne.n	8002870 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002852:	2300      	movs	r3, #0
 8002854:	60fb      	str	r3, [r7, #12]
 8002856:	4b17      	ldr	r3, [pc, #92]	; (80028b4 <HAL_TIM_Base_MspInit+0x74>)
 8002858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800285a:	4a16      	ldr	r2, [pc, #88]	; (80028b4 <HAL_TIM_Base_MspInit+0x74>)
 800285c:	f043 0302 	orr.w	r3, r3, #2
 8002860:	6413      	str	r3, [r2, #64]	; 0x40
 8002862:	4b14      	ldr	r3, [pc, #80]	; (80028b4 <HAL_TIM_Base_MspInit+0x74>)
 8002864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002866:	f003 0302 	and.w	r3, r3, #2
 800286a:	60fb      	str	r3, [r7, #12]
 800286c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 800286e:	e01a      	b.n	80028a6 <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM11)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	4a10      	ldr	r2, [pc, #64]	; (80028b8 <HAL_TIM_Base_MspInit+0x78>)
 8002876:	4293      	cmp	r3, r2
 8002878:	d115      	bne.n	80028a6 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM11_CLK_ENABLE();
 800287a:	2300      	movs	r3, #0
 800287c:	60bb      	str	r3, [r7, #8]
 800287e:	4b0d      	ldr	r3, [pc, #52]	; (80028b4 <HAL_TIM_Base_MspInit+0x74>)
 8002880:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002882:	4a0c      	ldr	r2, [pc, #48]	; (80028b4 <HAL_TIM_Base_MspInit+0x74>)
 8002884:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002888:	6453      	str	r3, [r2, #68]	; 0x44
 800288a:	4b0a      	ldr	r3, [pc, #40]	; (80028b4 <HAL_TIM_Base_MspInit+0x74>)
 800288c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800288e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002892:	60bb      	str	r3, [r7, #8]
 8002894:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8002896:	2200      	movs	r2, #0
 8002898:	2100      	movs	r1, #0
 800289a:	201a      	movs	r0, #26
 800289c:	f000 ff15 	bl	80036ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 80028a0:	201a      	movs	r0, #26
 80028a2:	f000 ff2e 	bl	8003702 <HAL_NVIC_EnableIRQ>
}
 80028a6:	bf00      	nop
 80028a8:	3710      	adds	r7, #16
 80028aa:	46bd      	mov	sp, r7
 80028ac:	bd80      	pop	{r7, pc}
 80028ae:	bf00      	nop
 80028b0:	40000400 	.word	0x40000400
 80028b4:	40023800 	.word	0x40023800
 80028b8:	40014800 	.word	0x40014800

080028bc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	b08a      	sub	sp, #40	; 0x28
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028c4:	f107 0314 	add.w	r3, r7, #20
 80028c8:	2200      	movs	r2, #0
 80028ca:	601a      	str	r2, [r3, #0]
 80028cc:	605a      	str	r2, [r3, #4]
 80028ce:	609a      	str	r2, [r3, #8]
 80028d0:	60da      	str	r2, [r3, #12]
 80028d2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	4a1d      	ldr	r2, [pc, #116]	; (8002950 <HAL_UART_MspInit+0x94>)
 80028da:	4293      	cmp	r3, r2
 80028dc:	d133      	bne.n	8002946 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80028de:	2300      	movs	r3, #0
 80028e0:	613b      	str	r3, [r7, #16]
 80028e2:	4b1c      	ldr	r3, [pc, #112]	; (8002954 <HAL_UART_MspInit+0x98>)
 80028e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028e6:	4a1b      	ldr	r2, [pc, #108]	; (8002954 <HAL_UART_MspInit+0x98>)
 80028e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80028ec:	6413      	str	r3, [r2, #64]	; 0x40
 80028ee:	4b19      	ldr	r3, [pc, #100]	; (8002954 <HAL_UART_MspInit+0x98>)
 80028f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028f6:	613b      	str	r3, [r7, #16]
 80028f8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028fa:	2300      	movs	r3, #0
 80028fc:	60fb      	str	r3, [r7, #12]
 80028fe:	4b15      	ldr	r3, [pc, #84]	; (8002954 <HAL_UART_MspInit+0x98>)
 8002900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002902:	4a14      	ldr	r2, [pc, #80]	; (8002954 <HAL_UART_MspInit+0x98>)
 8002904:	f043 0301 	orr.w	r3, r3, #1
 8002908:	6313      	str	r3, [r2, #48]	; 0x30
 800290a:	4b12      	ldr	r3, [pc, #72]	; (8002954 <HAL_UART_MspInit+0x98>)
 800290c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800290e:	f003 0301 	and.w	r3, r3, #1
 8002912:	60fb      	str	r3, [r7, #12]
 8002914:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002916:	230c      	movs	r3, #12
 8002918:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800291a:	2302      	movs	r3, #2
 800291c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800291e:	2300      	movs	r3, #0
 8002920:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002922:	2303      	movs	r3, #3
 8002924:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002926:	2307      	movs	r3, #7
 8002928:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800292a:	f107 0314 	add.w	r3, r7, #20
 800292e:	4619      	mov	r1, r3
 8002930:	4809      	ldr	r0, [pc, #36]	; (8002958 <HAL_UART_MspInit+0x9c>)
 8002932:	f001 fa93 	bl	8003e5c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002936:	2200      	movs	r2, #0
 8002938:	2100      	movs	r1, #0
 800293a:	2026      	movs	r0, #38	; 0x26
 800293c:	f000 fec5 	bl	80036ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002940:	2026      	movs	r0, #38	; 0x26
 8002942:	f000 fede 	bl	8003702 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002946:	bf00      	nop
 8002948:	3728      	adds	r7, #40	; 0x28
 800294a:	46bd      	mov	sp, r7
 800294c:	bd80      	pop	{r7, pc}
 800294e:	bf00      	nop
 8002950:	40004400 	.word	0x40004400
 8002954:	40023800 	.word	0x40023800
 8002958:	40020000 	.word	0x40020000

0800295c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800295c:	b480      	push	{r7}
 800295e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002960:	e7fe      	b.n	8002960 <NMI_Handler+0x4>

08002962 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002962:	b480      	push	{r7}
 8002964:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002966:	e7fe      	b.n	8002966 <HardFault_Handler+0x4>

08002968 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002968:	b480      	push	{r7}
 800296a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800296c:	e7fe      	b.n	800296c <MemManage_Handler+0x4>

0800296e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800296e:	b480      	push	{r7}
 8002970:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002972:	e7fe      	b.n	8002972 <BusFault_Handler+0x4>

08002974 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002974:	b480      	push	{r7}
 8002976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002978:	e7fe      	b.n	8002978 <UsageFault_Handler+0x4>

0800297a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800297a:	b480      	push	{r7}
 800297c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800297e:	bf00      	nop
 8002980:	46bd      	mov	sp, r7
 8002982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002986:	4770      	bx	lr

08002988 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002988:	b480      	push	{r7}
 800298a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800298c:	bf00      	nop
 800298e:	46bd      	mov	sp, r7
 8002990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002994:	4770      	bx	lr

08002996 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002996:	b480      	push	{r7}
 8002998:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800299a:	bf00      	nop
 800299c:	46bd      	mov	sp, r7
 800299e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a2:	4770      	bx	lr

080029a4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80029a8:	f000 f98c 	bl	8002cc4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80029ac:	bf00      	nop
 80029ae:	bd80      	pop	{r7, pc}

080029b0 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80029b4:	4802      	ldr	r0, [pc, #8]	; (80029c0 <ADC_IRQHandler+0x10>)
 80029b6:	f000 f9e8 	bl	8002d8a <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 80029ba:	bf00      	nop
 80029bc:	bd80      	pop	{r7, pc}
 80029be:	bf00      	nop
 80029c0:	20000380 	.word	0x20000380

080029c4 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 80029c8:	4802      	ldr	r0, [pc, #8]	; (80029d4 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 80029ca:	f002 fc34 	bl	8005236 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 80029ce:	bf00      	nop
 80029d0:	bd80      	pop	{r7, pc}
 80029d2:	bf00      	nop
 80029d4:	200003c8 	.word	0x200003c8

080029d8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80029dc:	4802      	ldr	r0, [pc, #8]	; (80029e8 <USART2_IRQHandler+0x10>)
 80029de:	f003 f8f7 	bl	8005bd0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80029e2:	bf00      	nop
 80029e4:	bd80      	pop	{r7, pc}
 80029e6:	bf00      	nop
 80029e8:	20000468 	.word	0x20000468

080029ec <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 80029f0:	4802      	ldr	r0, [pc, #8]	; (80029fc <SPI3_IRQHandler+0x10>)
 80029f2:	f002 f93b 	bl	8004c6c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 80029f6:	bf00      	nop
 80029f8:	bd80      	pop	{r7, pc}
 80029fa:	bf00      	nop
 80029fc:	20000328 	.word	0x20000328

08002a00 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002a04:	4802      	ldr	r0, [pc, #8]	; (8002a10 <DMA2_Stream0_IRQHandler+0x10>)
 8002a06:	f000 ffbf 	bl	8003988 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002a0a:	bf00      	nop
 8002a0c:	bd80      	pop	{r7, pc}
 8002a0e:	bf00      	nop
 8002a10:	20000408 	.word	0x20000408

08002a14 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002a14:	b480      	push	{r7}
 8002a16:	af00      	add	r7, sp, #0
	return 1;
 8002a18:	2301      	movs	r3, #1
}
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a22:	4770      	bx	lr

08002a24 <_kill>:

int _kill(int pid, int sig)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b082      	sub	sp, #8
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
 8002a2c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002a2e:	f003 feeb 	bl	8006808 <__errno>
 8002a32:	4603      	mov	r3, r0
 8002a34:	2216      	movs	r2, #22
 8002a36:	601a      	str	r2, [r3, #0]
	return -1;
 8002a38:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	3708      	adds	r7, #8
 8002a40:	46bd      	mov	sp, r7
 8002a42:	bd80      	pop	{r7, pc}

08002a44 <_exit>:

void _exit (int status)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b082      	sub	sp, #8
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002a4c:	f04f 31ff 	mov.w	r1, #4294967295
 8002a50:	6878      	ldr	r0, [r7, #4]
 8002a52:	f7ff ffe7 	bl	8002a24 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002a56:	e7fe      	b.n	8002a56 <_exit+0x12>

08002a58 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b086      	sub	sp, #24
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	60f8      	str	r0, [r7, #12]
 8002a60:	60b9      	str	r1, [r7, #8]
 8002a62:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a64:	2300      	movs	r3, #0
 8002a66:	617b      	str	r3, [r7, #20]
 8002a68:	e00a      	b.n	8002a80 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002a6a:	f3af 8000 	nop.w
 8002a6e:	4601      	mov	r1, r0
 8002a70:	68bb      	ldr	r3, [r7, #8]
 8002a72:	1c5a      	adds	r2, r3, #1
 8002a74:	60ba      	str	r2, [r7, #8]
 8002a76:	b2ca      	uxtb	r2, r1
 8002a78:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a7a:	697b      	ldr	r3, [r7, #20]
 8002a7c:	3301      	adds	r3, #1
 8002a7e:	617b      	str	r3, [r7, #20]
 8002a80:	697a      	ldr	r2, [r7, #20]
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	429a      	cmp	r2, r3
 8002a86:	dbf0      	blt.n	8002a6a <_read+0x12>
	}

return len;
 8002a88:	687b      	ldr	r3, [r7, #4]
}
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	3718      	adds	r7, #24
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	bd80      	pop	{r7, pc}

08002a92 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002a92:	b580      	push	{r7, lr}
 8002a94:	b086      	sub	sp, #24
 8002a96:	af00      	add	r7, sp, #0
 8002a98:	60f8      	str	r0, [r7, #12]
 8002a9a:	60b9      	str	r1, [r7, #8]
 8002a9c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	617b      	str	r3, [r7, #20]
 8002aa2:	e009      	b.n	8002ab8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002aa4:	68bb      	ldr	r3, [r7, #8]
 8002aa6:	1c5a      	adds	r2, r3, #1
 8002aa8:	60ba      	str	r2, [r7, #8]
 8002aaa:	781b      	ldrb	r3, [r3, #0]
 8002aac:	4618      	mov	r0, r3
 8002aae:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ab2:	697b      	ldr	r3, [r7, #20]
 8002ab4:	3301      	adds	r3, #1
 8002ab6:	617b      	str	r3, [r7, #20]
 8002ab8:	697a      	ldr	r2, [r7, #20]
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	429a      	cmp	r2, r3
 8002abe:	dbf1      	blt.n	8002aa4 <_write+0x12>
	}
	return len;
 8002ac0:	687b      	ldr	r3, [r7, #4]
}
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	3718      	adds	r7, #24
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	bd80      	pop	{r7, pc}

08002aca <_close>:

int _close(int file)
{
 8002aca:	b480      	push	{r7}
 8002acc:	b083      	sub	sp, #12
 8002ace:	af00      	add	r7, sp, #0
 8002ad0:	6078      	str	r0, [r7, #4]
	return -1;
 8002ad2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	370c      	adds	r7, #12
 8002ada:	46bd      	mov	sp, r7
 8002adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae0:	4770      	bx	lr

08002ae2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002ae2:	b480      	push	{r7}
 8002ae4:	b083      	sub	sp, #12
 8002ae6:	af00      	add	r7, sp, #0
 8002ae8:	6078      	str	r0, [r7, #4]
 8002aea:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002af2:	605a      	str	r2, [r3, #4]
	return 0;
 8002af4:	2300      	movs	r3, #0
}
 8002af6:	4618      	mov	r0, r3
 8002af8:	370c      	adds	r7, #12
 8002afa:	46bd      	mov	sp, r7
 8002afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b00:	4770      	bx	lr

08002b02 <_isatty>:

int _isatty(int file)
{
 8002b02:	b480      	push	{r7}
 8002b04:	b083      	sub	sp, #12
 8002b06:	af00      	add	r7, sp, #0
 8002b08:	6078      	str	r0, [r7, #4]
	return 1;
 8002b0a:	2301      	movs	r3, #1
}
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	370c      	adds	r7, #12
 8002b10:	46bd      	mov	sp, r7
 8002b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b16:	4770      	bx	lr

08002b18 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002b18:	b480      	push	{r7}
 8002b1a:	b085      	sub	sp, #20
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	60f8      	str	r0, [r7, #12]
 8002b20:	60b9      	str	r1, [r7, #8]
 8002b22:	607a      	str	r2, [r7, #4]
	return 0;
 8002b24:	2300      	movs	r3, #0
}
 8002b26:	4618      	mov	r0, r3
 8002b28:	3714      	adds	r7, #20
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b30:	4770      	bx	lr
	...

08002b34 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b086      	sub	sp, #24
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002b3c:	4a14      	ldr	r2, [pc, #80]	; (8002b90 <_sbrk+0x5c>)
 8002b3e:	4b15      	ldr	r3, [pc, #84]	; (8002b94 <_sbrk+0x60>)
 8002b40:	1ad3      	subs	r3, r2, r3
 8002b42:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002b44:	697b      	ldr	r3, [r7, #20]
 8002b46:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002b48:	4b13      	ldr	r3, [pc, #76]	; (8002b98 <_sbrk+0x64>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d102      	bne.n	8002b56 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002b50:	4b11      	ldr	r3, [pc, #68]	; (8002b98 <_sbrk+0x64>)
 8002b52:	4a12      	ldr	r2, [pc, #72]	; (8002b9c <_sbrk+0x68>)
 8002b54:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002b56:	4b10      	ldr	r3, [pc, #64]	; (8002b98 <_sbrk+0x64>)
 8002b58:	681a      	ldr	r2, [r3, #0]
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	4413      	add	r3, r2
 8002b5e:	693a      	ldr	r2, [r7, #16]
 8002b60:	429a      	cmp	r2, r3
 8002b62:	d207      	bcs.n	8002b74 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002b64:	f003 fe50 	bl	8006808 <__errno>
 8002b68:	4603      	mov	r3, r0
 8002b6a:	220c      	movs	r2, #12
 8002b6c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002b6e:	f04f 33ff 	mov.w	r3, #4294967295
 8002b72:	e009      	b.n	8002b88 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002b74:	4b08      	ldr	r3, [pc, #32]	; (8002b98 <_sbrk+0x64>)
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002b7a:	4b07      	ldr	r3, [pc, #28]	; (8002b98 <_sbrk+0x64>)
 8002b7c:	681a      	ldr	r2, [r3, #0]
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	4413      	add	r3, r2
 8002b82:	4a05      	ldr	r2, [pc, #20]	; (8002b98 <_sbrk+0x64>)
 8002b84:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002b86:	68fb      	ldr	r3, [r7, #12]
}
 8002b88:	4618      	mov	r0, r3
 8002b8a:	3718      	adds	r7, #24
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	bd80      	pop	{r7, pc}
 8002b90:	20020000 	.word	0x20020000
 8002b94:	00000400 	.word	0x00000400
 8002b98:	200002dc 	.word	0x200002dc
 8002b9c:	200004c0 	.word	0x200004c0

08002ba0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002ba0:	b480      	push	{r7}
 8002ba2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002ba4:	4b08      	ldr	r3, [pc, #32]	; (8002bc8 <SystemInit+0x28>)
 8002ba6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002baa:	4a07      	ldr	r2, [pc, #28]	; (8002bc8 <SystemInit+0x28>)
 8002bac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002bb0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002bb4:	4b04      	ldr	r3, [pc, #16]	; (8002bc8 <SystemInit+0x28>)
 8002bb6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002bba:	609a      	str	r2, [r3, #8]
#endif
}
 8002bbc:	bf00      	nop
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc4:	4770      	bx	lr
 8002bc6:	bf00      	nop
 8002bc8:	e000ed00 	.word	0xe000ed00

08002bcc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002bcc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002c04 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002bd0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002bd2:	e003      	b.n	8002bdc <LoopCopyDataInit>

08002bd4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002bd4:	4b0c      	ldr	r3, [pc, #48]	; (8002c08 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002bd6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002bd8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002bda:	3104      	adds	r1, #4

08002bdc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002bdc:	480b      	ldr	r0, [pc, #44]	; (8002c0c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002bde:	4b0c      	ldr	r3, [pc, #48]	; (8002c10 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002be0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002be2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002be4:	d3f6      	bcc.n	8002bd4 <CopyDataInit>
  ldr  r2, =_sbss
 8002be6:	4a0b      	ldr	r2, [pc, #44]	; (8002c14 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002be8:	e002      	b.n	8002bf0 <LoopFillZerobss>

08002bea <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002bea:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002bec:	f842 3b04 	str.w	r3, [r2], #4

08002bf0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002bf0:	4b09      	ldr	r3, [pc, #36]	; (8002c18 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002bf2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002bf4:	d3f9      	bcc.n	8002bea <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002bf6:	f7ff ffd3 	bl	8002ba0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002bfa:	f003 fe0b 	bl	8006814 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002bfe:	f7fe f9ff 	bl	8001000 <main>
  bx  lr    
 8002c02:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002c04:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8002c08:	0800b944 	.word	0x0800b944
  ldr  r0, =_sdata
 8002c0c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002c10:	200001f0 	.word	0x200001f0
  ldr  r2, =_sbss
 8002c14:	200001f0 	.word	0x200001f0
  ldr  r3, = _ebss
 8002c18:	200004bc 	.word	0x200004bc

08002c1c <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002c1c:	e7fe      	b.n	8002c1c <DMA1_Stream0_IRQHandler>
	...

08002c20 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002c24:	4b0e      	ldr	r3, [pc, #56]	; (8002c60 <HAL_Init+0x40>)
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	4a0d      	ldr	r2, [pc, #52]	; (8002c60 <HAL_Init+0x40>)
 8002c2a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002c2e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002c30:	4b0b      	ldr	r3, [pc, #44]	; (8002c60 <HAL_Init+0x40>)
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	4a0a      	ldr	r2, [pc, #40]	; (8002c60 <HAL_Init+0x40>)
 8002c36:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002c3a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002c3c:	4b08      	ldr	r3, [pc, #32]	; (8002c60 <HAL_Init+0x40>)
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	4a07      	ldr	r2, [pc, #28]	; (8002c60 <HAL_Init+0x40>)
 8002c42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c46:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002c48:	2003      	movs	r0, #3
 8002c4a:	f000 fd33 	bl	80036b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002c4e:	2000      	movs	r0, #0
 8002c50:	f000 f808 	bl	8002c64 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002c54:	f7ff fcfc 	bl	8002650 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002c58:	2300      	movs	r3, #0
}
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	bd80      	pop	{r7, pc}
 8002c5e:	bf00      	nop
 8002c60:	40023c00 	.word	0x40023c00

08002c64 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b082      	sub	sp, #8
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002c6c:	4b12      	ldr	r3, [pc, #72]	; (8002cb8 <HAL_InitTick+0x54>)
 8002c6e:	681a      	ldr	r2, [r3, #0]
 8002c70:	4b12      	ldr	r3, [pc, #72]	; (8002cbc <HAL_InitTick+0x58>)
 8002c72:	781b      	ldrb	r3, [r3, #0]
 8002c74:	4619      	mov	r1, r3
 8002c76:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002c7a:	fbb3 f3f1 	udiv	r3, r3, r1
 8002c7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c82:	4618      	mov	r0, r3
 8002c84:	f000 fd4b 	bl	800371e <HAL_SYSTICK_Config>
 8002c88:	4603      	mov	r3, r0
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d001      	beq.n	8002c92 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002c8e:	2301      	movs	r3, #1
 8002c90:	e00e      	b.n	8002cb0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	2b0f      	cmp	r3, #15
 8002c96:	d80a      	bhi.n	8002cae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002c98:	2200      	movs	r2, #0
 8002c9a:	6879      	ldr	r1, [r7, #4]
 8002c9c:	f04f 30ff 	mov.w	r0, #4294967295
 8002ca0:	f000 fd13 	bl	80036ca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002ca4:	4a06      	ldr	r2, [pc, #24]	; (8002cc0 <HAL_InitTick+0x5c>)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002caa:	2300      	movs	r3, #0
 8002cac:	e000      	b.n	8002cb0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002cae:	2301      	movs	r3, #1
}
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	3708      	adds	r7, #8
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	bd80      	pop	{r7, pc}
 8002cb8:	20000010 	.word	0x20000010
 8002cbc:	20000018 	.word	0x20000018
 8002cc0:	20000014 	.word	0x20000014

08002cc4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002cc4:	b480      	push	{r7}
 8002cc6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002cc8:	4b06      	ldr	r3, [pc, #24]	; (8002ce4 <HAL_IncTick+0x20>)
 8002cca:	781b      	ldrb	r3, [r3, #0]
 8002ccc:	461a      	mov	r2, r3
 8002cce:	4b06      	ldr	r3, [pc, #24]	; (8002ce8 <HAL_IncTick+0x24>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	4413      	add	r3, r2
 8002cd4:	4a04      	ldr	r2, [pc, #16]	; (8002ce8 <HAL_IncTick+0x24>)
 8002cd6:	6013      	str	r3, [r2, #0]
}
 8002cd8:	bf00      	nop
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce0:	4770      	bx	lr
 8002ce2:	bf00      	nop
 8002ce4:	20000018 	.word	0x20000018
 8002ce8:	200004a8 	.word	0x200004a8

08002cec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002cec:	b480      	push	{r7}
 8002cee:	af00      	add	r7, sp, #0
  return uwTick;
 8002cf0:	4b03      	ldr	r3, [pc, #12]	; (8002d00 <HAL_GetTick+0x14>)
 8002cf2:	681b      	ldr	r3, [r3, #0]
}
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfc:	4770      	bx	lr
 8002cfe:	bf00      	nop
 8002d00:	200004a8 	.word	0x200004a8

08002d04 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b084      	sub	sp, #16
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002d0c:	2300      	movs	r3, #0
 8002d0e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d101      	bne.n	8002d1a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002d16:	2301      	movs	r3, #1
 8002d18:	e033      	b.n	8002d82 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d109      	bne.n	8002d36 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002d22:	6878      	ldr	r0, [r7, #4]
 8002d24:	f7ff fcbc 	bl	80026a0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	2200      	movs	r2, #0
 8002d32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d3a:	f003 0310 	and.w	r3, r3, #16
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d118      	bne.n	8002d74 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d46:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002d4a:	f023 0302 	bic.w	r3, r3, #2
 8002d4e:	f043 0202 	orr.w	r2, r3, #2
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002d56:	6878      	ldr	r0, [r7, #4]
 8002d58:	f000 fa54 	bl	8003204 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2200      	movs	r2, #0
 8002d60:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d66:	f023 0303 	bic.w	r3, r3, #3
 8002d6a:	f043 0201 	orr.w	r2, r3, #1
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	641a      	str	r2, [r3, #64]	; 0x40
 8002d72:	e001      	b.n	8002d78 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002d74:	2301      	movs	r3, #1
 8002d76:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002d80:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d82:	4618      	mov	r0, r3
 8002d84:	3710      	adds	r7, #16
 8002d86:	46bd      	mov	sp, r7
 8002d88:	bd80      	pop	{r7, pc}

08002d8a <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8002d8a:	b580      	push	{r7, lr}
 8002d8c:	b084      	sub	sp, #16
 8002d8e:	af00      	add	r7, sp, #0
 8002d90:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8002d92:	2300      	movs	r3, #0
 8002d94:	60fb      	str	r3, [r7, #12]
 8002d96:	2300      	movs	r3, #0
 8002d98:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f003 0302 	and.w	r3, r3, #2
 8002da4:	2b02      	cmp	r3, #2
 8002da6:	bf0c      	ite	eq
 8002da8:	2301      	moveq	r3, #1
 8002daa:	2300      	movne	r3, #0
 8002dac:	b2db      	uxtb	r3, r3
 8002dae:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	685b      	ldr	r3, [r3, #4]
 8002db6:	f003 0320 	and.w	r3, r3, #32
 8002dba:	2b20      	cmp	r3, #32
 8002dbc:	bf0c      	ite	eq
 8002dbe:	2301      	moveq	r3, #1
 8002dc0:	2300      	movne	r3, #0
 8002dc2:	b2db      	uxtb	r3, r3
 8002dc4:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d049      	beq.n	8002e60 <HAL_ADC_IRQHandler+0xd6>
 8002dcc:	68bb      	ldr	r3, [r7, #8]
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d046      	beq.n	8002e60 <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dd6:	f003 0310 	and.w	r3, r3, #16
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d105      	bne.n	8002dea <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002de2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	689b      	ldr	r3, [r3, #8]
 8002df0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d12b      	bne.n	8002e50 <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d127      	bne.n	8002e50 <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e06:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d006      	beq.n	8002e1c <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	689b      	ldr	r3, [r3, #8]
 8002e14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d119      	bne.n	8002e50 <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	685a      	ldr	r2, [r3, #4]
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f022 0220 	bic.w	r2, r2, #32
 8002e2a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e30:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e3c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d105      	bne.n	8002e50 <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e48:	f043 0201 	orr.w	r2, r3, #1
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002e50:	6878      	ldr	r0, [r7, #4]
 8002e52:	f000 f9af 	bl	80031b4 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f06f 0212 	mvn.w	r2, #18
 8002e5e:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f003 0304 	and.w	r3, r3, #4
 8002e6a:	2b04      	cmp	r3, #4
 8002e6c:	bf0c      	ite	eq
 8002e6e:	2301      	moveq	r3, #1
 8002e70:	2300      	movne	r3, #0
 8002e72:	b2db      	uxtb	r3, r3
 8002e74:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	685b      	ldr	r3, [r3, #4]
 8002e7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e80:	2b80      	cmp	r3, #128	; 0x80
 8002e82:	bf0c      	ite	eq
 8002e84:	2301      	moveq	r3, #1
 8002e86:	2300      	movne	r3, #0
 8002e88:	b2db      	uxtb	r3, r3
 8002e8a:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d057      	beq.n	8002f42 <HAL_ADC_IRQHandler+0x1b8>
 8002e92:	68bb      	ldr	r3, [r7, #8]
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d054      	beq.n	8002f42 <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e9c:	f003 0310 	and.w	r3, r3, #16
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d105      	bne.n	8002eb0 <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ea8:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	689b      	ldr	r3, [r3, #8]
 8002eb6:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d139      	bne.n	8002f32 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ec4:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d006      	beq.n	8002eda <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	689b      	ldr	r3, [r3, #8]
 8002ed2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d12b      	bne.n	8002f32 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	685b      	ldr	r3, [r3, #4]
 8002ee0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d124      	bne.n	8002f32 <HAL_ADC_IRQHandler+0x1a8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	689b      	ldr	r3, [r3, #8]
 8002eee:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d11d      	bne.n	8002f32 <HAL_ADC_IRQHandler+0x1a8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d119      	bne.n	8002f32 <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	685a      	ldr	r2, [r3, #4]
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002f0c:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f12:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d105      	bne.n	8002f32 <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f2a:	f043 0201 	orr.w	r2, r3, #1
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002f32:	6878      	ldr	r0, [r7, #4]
 8002f34:	f000 fae4 	bl	8003500 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f06f 020c 	mvn.w	r2, #12
 8002f40:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f003 0301 	and.w	r3, r3, #1
 8002f4c:	2b01      	cmp	r3, #1
 8002f4e:	bf0c      	ite	eq
 8002f50:	2301      	moveq	r3, #1
 8002f52:	2300      	movne	r3, #0
 8002f54:	b2db      	uxtb	r3, r3
 8002f56:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	685b      	ldr	r3, [r3, #4]
 8002f5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f62:	2b40      	cmp	r3, #64	; 0x40
 8002f64:	bf0c      	ite	eq
 8002f66:	2301      	moveq	r3, #1
 8002f68:	2300      	movne	r3, #0
 8002f6a:	b2db      	uxtb	r3, r3
 8002f6c:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d017      	beq.n	8002fa4 <HAL_ADC_IRQHandler+0x21a>
 8002f74:	68bb      	ldr	r3, [r7, #8]
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d014      	beq.n	8002fa4 <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f003 0301 	and.w	r3, r3, #1
 8002f84:	2b01      	cmp	r3, #1
 8002f86:	d10d      	bne.n	8002fa4 <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f8c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002f94:	6878      	ldr	r0, [r7, #4]
 8002f96:	f000 f921 	bl	80031dc <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f06f 0201 	mvn.w	r2, #1
 8002fa2:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f003 0320 	and.w	r3, r3, #32
 8002fae:	2b20      	cmp	r3, #32
 8002fb0:	bf0c      	ite	eq
 8002fb2:	2301      	moveq	r3, #1
 8002fb4:	2300      	movne	r3, #0
 8002fb6:	b2db      	uxtb	r3, r3
 8002fb8:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	685b      	ldr	r3, [r3, #4]
 8002fc0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002fc4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002fc8:	bf0c      	ite	eq
 8002fca:	2301      	moveq	r3, #1
 8002fcc:	2300      	movne	r3, #0
 8002fce:	b2db      	uxtb	r3, r3
 8002fd0:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d015      	beq.n	8003004 <HAL_ADC_IRQHandler+0x27a>
 8002fd8:	68bb      	ldr	r3, [r7, #8]
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d012      	beq.n	8003004 <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fe2:	f043 0202 	orr.w	r2, r3, #2
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f06f 0220 	mvn.w	r2, #32
 8002ff2:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002ff4:	6878      	ldr	r0, [r7, #4]
 8002ff6:	f000 f8fb 	bl	80031f0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f06f 0220 	mvn.w	r2, #32
 8003002:	601a      	str	r2, [r3, #0]
  }
}
 8003004:	bf00      	nop
 8003006:	3710      	adds	r7, #16
 8003008:	46bd      	mov	sp, r7
 800300a:	bd80      	pop	{r7, pc}

0800300c <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	b086      	sub	sp, #24
 8003010:	af00      	add	r7, sp, #0
 8003012:	60f8      	str	r0, [r7, #12]
 8003014:	60b9      	str	r1, [r7, #8]
 8003016:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8003018:	2300      	movs	r3, #0
 800301a:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003022:	2b01      	cmp	r3, #1
 8003024:	d101      	bne.n	800302a <HAL_ADC_Start_DMA+0x1e>
 8003026:	2302      	movs	r3, #2
 8003028:	e0b1      	b.n	800318e <HAL_ADC_Start_DMA+0x182>
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	2201      	movs	r2, #1
 800302e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	689b      	ldr	r3, [r3, #8]
 8003038:	f003 0301 	and.w	r3, r3, #1
 800303c:	2b01      	cmp	r3, #1
 800303e:	d018      	beq.n	8003072 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	689a      	ldr	r2, [r3, #8]
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f042 0201 	orr.w	r2, r2, #1
 800304e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003050:	4b51      	ldr	r3, [pc, #324]	; (8003198 <HAL_ADC_Start_DMA+0x18c>)
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	4a51      	ldr	r2, [pc, #324]	; (800319c <HAL_ADC_Start_DMA+0x190>)
 8003056:	fba2 2303 	umull	r2, r3, r2, r3
 800305a:	0c9a      	lsrs	r2, r3, #18
 800305c:	4613      	mov	r3, r2
 800305e:	005b      	lsls	r3, r3, #1
 8003060:	4413      	add	r3, r2
 8003062:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8003064:	e002      	b.n	800306c <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8003066:	693b      	ldr	r3, [r7, #16]
 8003068:	3b01      	subs	r3, #1
 800306a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800306c:	693b      	ldr	r3, [r7, #16]
 800306e:	2b00      	cmp	r3, #0
 8003070:	d1f9      	bne.n	8003066 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	689b      	ldr	r3, [r3, #8]
 8003078:	f003 0301 	and.w	r3, r3, #1
 800307c:	2b01      	cmp	r3, #1
 800307e:	f040 8085 	bne.w	800318c <HAL_ADC_Start_DMA+0x180>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003086:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800308a:	f023 0301 	bic.w	r3, r3, #1
 800308e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	685b      	ldr	r3, [r3, #4]
 800309c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d007      	beq.n	80030b4 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030a8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80030ac:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030b8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80030bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80030c0:	d106      	bne.n	80030d0 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030c6:	f023 0206 	bic.w	r2, r3, #6
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	645a      	str	r2, [r3, #68]	; 0x44
 80030ce:	e002      	b.n	80030d6 <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	2200      	movs	r2, #0
 80030d4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	2200      	movs	r2, #0
 80030da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80030de:	4b30      	ldr	r3, [pc, #192]	; (80031a0 <HAL_ADC_Start_DMA+0x194>)
 80030e0:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030e6:	4a2f      	ldr	r2, [pc, #188]	; (80031a4 <HAL_ADC_Start_DMA+0x198>)
 80030e8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030ee:	4a2e      	ldr	r2, [pc, #184]	; (80031a8 <HAL_ADC_Start_DMA+0x19c>)
 80030f0:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030f6:	4a2d      	ldr	r2, [pc, #180]	; (80031ac <HAL_ADC_Start_DMA+0x1a0>)
 80030f8:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8003102:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	685a      	ldr	r2, [r3, #4]
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8003112:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	689a      	ldr	r2, [r3, #8]
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003122:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	334c      	adds	r3, #76	; 0x4c
 800312e:	4619      	mov	r1, r3
 8003130:	68ba      	ldr	r2, [r7, #8]
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	f000 fbae 	bl	8003894 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003138:	697b      	ldr	r3, [r7, #20]
 800313a:	685b      	ldr	r3, [r3, #4]
 800313c:	f003 031f 	and.w	r3, r3, #31
 8003140:	2b00      	cmp	r3, #0
 8003142:	d10f      	bne.n	8003164 <HAL_ADC_Start_DMA+0x158>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	689b      	ldr	r3, [r3, #8]
 800314a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800314e:	2b00      	cmp	r3, #0
 8003150:	d11c      	bne.n	800318c <HAL_ADC_Start_DMA+0x180>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	689a      	ldr	r2, [r3, #8]
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003160:	609a      	str	r2, [r3, #8]
 8003162:	e013      	b.n	800318c <HAL_ADC_Start_DMA+0x180>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	4a11      	ldr	r2, [pc, #68]	; (80031b0 <HAL_ADC_Start_DMA+0x1a4>)
 800316a:	4293      	cmp	r3, r2
 800316c:	d10e      	bne.n	800318c <HAL_ADC_Start_DMA+0x180>
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	689b      	ldr	r3, [r3, #8]
 8003174:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003178:	2b00      	cmp	r3, #0
 800317a:	d107      	bne.n	800318c <HAL_ADC_Start_DMA+0x180>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	689a      	ldr	r2, [r3, #8]
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800318a:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 800318c:	2300      	movs	r3, #0
}
 800318e:	4618      	mov	r0, r3
 8003190:	3718      	adds	r7, #24
 8003192:	46bd      	mov	sp, r7
 8003194:	bd80      	pop	{r7, pc}
 8003196:	bf00      	nop
 8003198:	20000010 	.word	0x20000010
 800319c:	431bde83 	.word	0x431bde83
 80031a0:	40012300 	.word	0x40012300
 80031a4:	080033fd 	.word	0x080033fd
 80031a8:	080034b7 	.word	0x080034b7
 80031ac:	080034d3 	.word	0x080034d3
 80031b0:	40012000 	.word	0x40012000

080031b4 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80031b4:	b480      	push	{r7}
 80031b6:	b083      	sub	sp, #12
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 80031bc:	bf00      	nop
 80031be:	370c      	adds	r7, #12
 80031c0:	46bd      	mov	sp, r7
 80031c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c6:	4770      	bx	lr

080031c8 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80031c8:	b480      	push	{r7}
 80031ca:	b083      	sub	sp, #12
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80031d0:	bf00      	nop
 80031d2:	370c      	adds	r7, #12
 80031d4:	46bd      	mov	sp, r7
 80031d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031da:	4770      	bx	lr

080031dc <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80031dc:	b480      	push	{r7}
 80031de:	b083      	sub	sp, #12
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 80031e4:	bf00      	nop
 80031e6:	370c      	adds	r7, #12
 80031e8:	46bd      	mov	sp, r7
 80031ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ee:	4770      	bx	lr

080031f0 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80031f0:	b480      	push	{r7}
 80031f2:	b083      	sub	sp, #12
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80031f8:	bf00      	nop
 80031fa:	370c      	adds	r7, #12
 80031fc:	46bd      	mov	sp, r7
 80031fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003202:	4770      	bx	lr

08003204 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003204:	b480      	push	{r7}
 8003206:	b085      	sub	sp, #20
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800320c:	4b79      	ldr	r3, [pc, #484]	; (80033f4 <ADC_Init+0x1f0>)
 800320e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	685b      	ldr	r3, [r3, #4]
 8003214:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	685a      	ldr	r2, [r3, #4]
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	685b      	ldr	r3, [r3, #4]
 8003224:	431a      	orrs	r2, r3
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	685a      	ldr	r2, [r3, #4]
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003238:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	6859      	ldr	r1, [r3, #4]
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	691b      	ldr	r3, [r3, #16]
 8003244:	021a      	lsls	r2, r3, #8
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	430a      	orrs	r2, r1
 800324c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	685a      	ldr	r2, [r3, #4]
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800325c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	6859      	ldr	r1, [r3, #4]
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	689a      	ldr	r2, [r3, #8]
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	430a      	orrs	r2, r1
 800326e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	689a      	ldr	r2, [r3, #8]
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800327e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	6899      	ldr	r1, [r3, #8]
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	68da      	ldr	r2, [r3, #12]
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	430a      	orrs	r2, r1
 8003290:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003296:	4a58      	ldr	r2, [pc, #352]	; (80033f8 <ADC_Init+0x1f4>)
 8003298:	4293      	cmp	r3, r2
 800329a:	d022      	beq.n	80032e2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	689a      	ldr	r2, [r3, #8]
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80032aa:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	6899      	ldr	r1, [r3, #8]
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	430a      	orrs	r2, r1
 80032bc:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	689a      	ldr	r2, [r3, #8]
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80032cc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	6899      	ldr	r1, [r3, #8]
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	430a      	orrs	r2, r1
 80032de:	609a      	str	r2, [r3, #8]
 80032e0:	e00f      	b.n	8003302 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	689a      	ldr	r2, [r3, #8]
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80032f0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	689a      	ldr	r2, [r3, #8]
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003300:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	689a      	ldr	r2, [r3, #8]
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f022 0202 	bic.w	r2, r2, #2
 8003310:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	6899      	ldr	r1, [r3, #8]
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	7e1b      	ldrb	r3, [r3, #24]
 800331c:	005a      	lsls	r2, r3, #1
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	430a      	orrs	r2, r1
 8003324:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	f893 3020 	ldrb.w	r3, [r3, #32]
 800332c:	2b00      	cmp	r3, #0
 800332e:	d01b      	beq.n	8003368 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	685a      	ldr	r2, [r3, #4]
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800333e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	685a      	ldr	r2, [r3, #4]
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800334e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	6859      	ldr	r1, [r3, #4]
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800335a:	3b01      	subs	r3, #1
 800335c:	035a      	lsls	r2, r3, #13
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	430a      	orrs	r2, r1
 8003364:	605a      	str	r2, [r3, #4]
 8003366:	e007      	b.n	8003378 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	685a      	ldr	r2, [r3, #4]
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003376:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003386:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	69db      	ldr	r3, [r3, #28]
 8003392:	3b01      	subs	r3, #1
 8003394:	051a      	lsls	r2, r3, #20
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	430a      	orrs	r2, r1
 800339c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	689a      	ldr	r2, [r3, #8]
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80033ac:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	6899      	ldr	r1, [r3, #8]
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80033ba:	025a      	lsls	r2, r3, #9
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	430a      	orrs	r2, r1
 80033c2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	689a      	ldr	r2, [r3, #8]
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80033d2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	6899      	ldr	r1, [r3, #8]
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	695b      	ldr	r3, [r3, #20]
 80033de:	029a      	lsls	r2, r3, #10
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	430a      	orrs	r2, r1
 80033e6:	609a      	str	r2, [r3, #8]
}
 80033e8:	bf00      	nop
 80033ea:	3714      	adds	r7, #20
 80033ec:	46bd      	mov	sp, r7
 80033ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f2:	4770      	bx	lr
 80033f4:	40012300 	.word	0x40012300
 80033f8:	0f000001 	.word	0x0f000001

080033fc <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	b084      	sub	sp, #16
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003408:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800340e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003412:	2b00      	cmp	r3, #0
 8003414:	d13c      	bne.n	8003490 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800341a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	689b      	ldr	r3, [r3, #8]
 8003428:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800342c:	2b00      	cmp	r3, #0
 800342e:	d12b      	bne.n	8003488 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003434:	2b00      	cmp	r3, #0
 8003436:	d127      	bne.n	8003488 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800343e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003442:	2b00      	cmp	r3, #0
 8003444:	d006      	beq.n	8003454 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	689b      	ldr	r3, [r3, #8]
 800344c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003450:	2b00      	cmp	r3, #0
 8003452:	d119      	bne.n	8003488 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	685a      	ldr	r2, [r3, #4]
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f022 0220 	bic.w	r2, r2, #32
 8003462:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003468:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003474:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003478:	2b00      	cmp	r3, #0
 800347a:	d105      	bne.n	8003488 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003480:	f043 0201 	orr.w	r2, r3, #1
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003488:	68f8      	ldr	r0, [r7, #12]
 800348a:	f7ff fe93 	bl	80031b4 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800348e:	e00e      	b.n	80034ae <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003494:	f003 0310 	and.w	r3, r3, #16
 8003498:	2b00      	cmp	r3, #0
 800349a:	d003      	beq.n	80034a4 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 800349c:	68f8      	ldr	r0, [r7, #12]
 800349e:	f7ff fea7 	bl	80031f0 <HAL_ADC_ErrorCallback>
}
 80034a2:	e004      	b.n	80034ae <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034aa:	6878      	ldr	r0, [r7, #4]
 80034ac:	4798      	blx	r3
}
 80034ae:	bf00      	nop
 80034b0:	3710      	adds	r7, #16
 80034b2:	46bd      	mov	sp, r7
 80034b4:	bd80      	pop	{r7, pc}

080034b6 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80034b6:	b580      	push	{r7, lr}
 80034b8:	b084      	sub	sp, #16
 80034ba:	af00      	add	r7, sp, #0
 80034bc:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034c2:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80034c4:	68f8      	ldr	r0, [r7, #12]
 80034c6:	f7ff fe7f 	bl	80031c8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80034ca:	bf00      	nop
 80034cc:	3710      	adds	r7, #16
 80034ce:	46bd      	mov	sp, r7
 80034d0:	bd80      	pop	{r7, pc}

080034d2 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80034d2:	b580      	push	{r7, lr}
 80034d4:	b084      	sub	sp, #16
 80034d6:	af00      	add	r7, sp, #0
 80034d8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034de:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	2240      	movs	r2, #64	; 0x40
 80034e4:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034ea:	f043 0204 	orr.w	r2, r3, #4
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80034f2:	68f8      	ldr	r0, [r7, #12]
 80034f4:	f7ff fe7c 	bl	80031f0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80034f8:	bf00      	nop
 80034fa:	3710      	adds	r7, #16
 80034fc:	46bd      	mov	sp, r7
 80034fe:	bd80      	pop	{r7, pc}

08003500 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003500:	b480      	push	{r7}
 8003502:	b083      	sub	sp, #12
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8003508:	bf00      	nop
 800350a:	370c      	adds	r7, #12
 800350c:	46bd      	mov	sp, r7
 800350e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003512:	4770      	bx	lr

08003514 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003514:	b480      	push	{r7}
 8003516:	b085      	sub	sp, #20
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	f003 0307 	and.w	r3, r3, #7
 8003522:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003524:	4b0c      	ldr	r3, [pc, #48]	; (8003558 <__NVIC_SetPriorityGrouping+0x44>)
 8003526:	68db      	ldr	r3, [r3, #12]
 8003528:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800352a:	68ba      	ldr	r2, [r7, #8]
 800352c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003530:	4013      	ands	r3, r2
 8003532:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003538:	68bb      	ldr	r3, [r7, #8]
 800353a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800353c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003540:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003544:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003546:	4a04      	ldr	r2, [pc, #16]	; (8003558 <__NVIC_SetPriorityGrouping+0x44>)
 8003548:	68bb      	ldr	r3, [r7, #8]
 800354a:	60d3      	str	r3, [r2, #12]
}
 800354c:	bf00      	nop
 800354e:	3714      	adds	r7, #20
 8003550:	46bd      	mov	sp, r7
 8003552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003556:	4770      	bx	lr
 8003558:	e000ed00 	.word	0xe000ed00

0800355c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800355c:	b480      	push	{r7}
 800355e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003560:	4b04      	ldr	r3, [pc, #16]	; (8003574 <__NVIC_GetPriorityGrouping+0x18>)
 8003562:	68db      	ldr	r3, [r3, #12]
 8003564:	0a1b      	lsrs	r3, r3, #8
 8003566:	f003 0307 	and.w	r3, r3, #7
}
 800356a:	4618      	mov	r0, r3
 800356c:	46bd      	mov	sp, r7
 800356e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003572:	4770      	bx	lr
 8003574:	e000ed00 	.word	0xe000ed00

08003578 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003578:	b480      	push	{r7}
 800357a:	b083      	sub	sp, #12
 800357c:	af00      	add	r7, sp, #0
 800357e:	4603      	mov	r3, r0
 8003580:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003582:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003586:	2b00      	cmp	r3, #0
 8003588:	db0b      	blt.n	80035a2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800358a:	79fb      	ldrb	r3, [r7, #7]
 800358c:	f003 021f 	and.w	r2, r3, #31
 8003590:	4907      	ldr	r1, [pc, #28]	; (80035b0 <__NVIC_EnableIRQ+0x38>)
 8003592:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003596:	095b      	lsrs	r3, r3, #5
 8003598:	2001      	movs	r0, #1
 800359a:	fa00 f202 	lsl.w	r2, r0, r2
 800359e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80035a2:	bf00      	nop
 80035a4:	370c      	adds	r7, #12
 80035a6:	46bd      	mov	sp, r7
 80035a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ac:	4770      	bx	lr
 80035ae:	bf00      	nop
 80035b0:	e000e100 	.word	0xe000e100

080035b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80035b4:	b480      	push	{r7}
 80035b6:	b083      	sub	sp, #12
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	4603      	mov	r3, r0
 80035bc:	6039      	str	r1, [r7, #0]
 80035be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80035c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	db0a      	blt.n	80035de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80035c8:	683b      	ldr	r3, [r7, #0]
 80035ca:	b2da      	uxtb	r2, r3
 80035cc:	490c      	ldr	r1, [pc, #48]	; (8003600 <__NVIC_SetPriority+0x4c>)
 80035ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035d2:	0112      	lsls	r2, r2, #4
 80035d4:	b2d2      	uxtb	r2, r2
 80035d6:	440b      	add	r3, r1
 80035d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80035dc:	e00a      	b.n	80035f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	b2da      	uxtb	r2, r3
 80035e2:	4908      	ldr	r1, [pc, #32]	; (8003604 <__NVIC_SetPriority+0x50>)
 80035e4:	79fb      	ldrb	r3, [r7, #7]
 80035e6:	f003 030f 	and.w	r3, r3, #15
 80035ea:	3b04      	subs	r3, #4
 80035ec:	0112      	lsls	r2, r2, #4
 80035ee:	b2d2      	uxtb	r2, r2
 80035f0:	440b      	add	r3, r1
 80035f2:	761a      	strb	r2, [r3, #24]
}
 80035f4:	bf00      	nop
 80035f6:	370c      	adds	r7, #12
 80035f8:	46bd      	mov	sp, r7
 80035fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fe:	4770      	bx	lr
 8003600:	e000e100 	.word	0xe000e100
 8003604:	e000ed00 	.word	0xe000ed00

08003608 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003608:	b480      	push	{r7}
 800360a:	b089      	sub	sp, #36	; 0x24
 800360c:	af00      	add	r7, sp, #0
 800360e:	60f8      	str	r0, [r7, #12]
 8003610:	60b9      	str	r1, [r7, #8]
 8003612:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	f003 0307 	and.w	r3, r3, #7
 800361a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800361c:	69fb      	ldr	r3, [r7, #28]
 800361e:	f1c3 0307 	rsb	r3, r3, #7
 8003622:	2b04      	cmp	r3, #4
 8003624:	bf28      	it	cs
 8003626:	2304      	movcs	r3, #4
 8003628:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800362a:	69fb      	ldr	r3, [r7, #28]
 800362c:	3304      	adds	r3, #4
 800362e:	2b06      	cmp	r3, #6
 8003630:	d902      	bls.n	8003638 <NVIC_EncodePriority+0x30>
 8003632:	69fb      	ldr	r3, [r7, #28]
 8003634:	3b03      	subs	r3, #3
 8003636:	e000      	b.n	800363a <NVIC_EncodePriority+0x32>
 8003638:	2300      	movs	r3, #0
 800363a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800363c:	f04f 32ff 	mov.w	r2, #4294967295
 8003640:	69bb      	ldr	r3, [r7, #24]
 8003642:	fa02 f303 	lsl.w	r3, r2, r3
 8003646:	43da      	mvns	r2, r3
 8003648:	68bb      	ldr	r3, [r7, #8]
 800364a:	401a      	ands	r2, r3
 800364c:	697b      	ldr	r3, [r7, #20]
 800364e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003650:	f04f 31ff 	mov.w	r1, #4294967295
 8003654:	697b      	ldr	r3, [r7, #20]
 8003656:	fa01 f303 	lsl.w	r3, r1, r3
 800365a:	43d9      	mvns	r1, r3
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003660:	4313      	orrs	r3, r2
         );
}
 8003662:	4618      	mov	r0, r3
 8003664:	3724      	adds	r7, #36	; 0x24
 8003666:	46bd      	mov	sp, r7
 8003668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366c:	4770      	bx	lr
	...

08003670 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003670:	b580      	push	{r7, lr}
 8003672:	b082      	sub	sp, #8
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	3b01      	subs	r3, #1
 800367c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003680:	d301      	bcc.n	8003686 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003682:	2301      	movs	r3, #1
 8003684:	e00f      	b.n	80036a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003686:	4a0a      	ldr	r2, [pc, #40]	; (80036b0 <SysTick_Config+0x40>)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	3b01      	subs	r3, #1
 800368c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800368e:	210f      	movs	r1, #15
 8003690:	f04f 30ff 	mov.w	r0, #4294967295
 8003694:	f7ff ff8e 	bl	80035b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003698:	4b05      	ldr	r3, [pc, #20]	; (80036b0 <SysTick_Config+0x40>)
 800369a:	2200      	movs	r2, #0
 800369c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800369e:	4b04      	ldr	r3, [pc, #16]	; (80036b0 <SysTick_Config+0x40>)
 80036a0:	2207      	movs	r2, #7
 80036a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80036a4:	2300      	movs	r3, #0
}
 80036a6:	4618      	mov	r0, r3
 80036a8:	3708      	adds	r7, #8
 80036aa:	46bd      	mov	sp, r7
 80036ac:	bd80      	pop	{r7, pc}
 80036ae:	bf00      	nop
 80036b0:	e000e010 	.word	0xe000e010

080036b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	b082      	sub	sp, #8
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80036bc:	6878      	ldr	r0, [r7, #4]
 80036be:	f7ff ff29 	bl	8003514 <__NVIC_SetPriorityGrouping>
}
 80036c2:	bf00      	nop
 80036c4:	3708      	adds	r7, #8
 80036c6:	46bd      	mov	sp, r7
 80036c8:	bd80      	pop	{r7, pc}

080036ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80036ca:	b580      	push	{r7, lr}
 80036cc:	b086      	sub	sp, #24
 80036ce:	af00      	add	r7, sp, #0
 80036d0:	4603      	mov	r3, r0
 80036d2:	60b9      	str	r1, [r7, #8]
 80036d4:	607a      	str	r2, [r7, #4]
 80036d6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80036d8:	2300      	movs	r3, #0
 80036da:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80036dc:	f7ff ff3e 	bl	800355c <__NVIC_GetPriorityGrouping>
 80036e0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80036e2:	687a      	ldr	r2, [r7, #4]
 80036e4:	68b9      	ldr	r1, [r7, #8]
 80036e6:	6978      	ldr	r0, [r7, #20]
 80036e8:	f7ff ff8e 	bl	8003608 <NVIC_EncodePriority>
 80036ec:	4602      	mov	r2, r0
 80036ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80036f2:	4611      	mov	r1, r2
 80036f4:	4618      	mov	r0, r3
 80036f6:	f7ff ff5d 	bl	80035b4 <__NVIC_SetPriority>
}
 80036fa:	bf00      	nop
 80036fc:	3718      	adds	r7, #24
 80036fe:	46bd      	mov	sp, r7
 8003700:	bd80      	pop	{r7, pc}

08003702 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003702:	b580      	push	{r7, lr}
 8003704:	b082      	sub	sp, #8
 8003706:	af00      	add	r7, sp, #0
 8003708:	4603      	mov	r3, r0
 800370a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800370c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003710:	4618      	mov	r0, r3
 8003712:	f7ff ff31 	bl	8003578 <__NVIC_EnableIRQ>
}
 8003716:	bf00      	nop
 8003718:	3708      	adds	r7, #8
 800371a:	46bd      	mov	sp, r7
 800371c:	bd80      	pop	{r7, pc}

0800371e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800371e:	b580      	push	{r7, lr}
 8003720:	b082      	sub	sp, #8
 8003722:	af00      	add	r7, sp, #0
 8003724:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003726:	6878      	ldr	r0, [r7, #4]
 8003728:	f7ff ffa2 	bl	8003670 <SysTick_Config>
 800372c:	4603      	mov	r3, r0
}
 800372e:	4618      	mov	r0, r3
 8003730:	3708      	adds	r7, #8
 8003732:	46bd      	mov	sp, r7
 8003734:	bd80      	pop	{r7, pc}
	...

08003738 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003738:	b580      	push	{r7, lr}
 800373a:	b086      	sub	sp, #24
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003740:	2300      	movs	r3, #0
 8003742:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003744:	f7ff fad2 	bl	8002cec <HAL_GetTick>
 8003748:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	2b00      	cmp	r3, #0
 800374e:	d101      	bne.n	8003754 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003750:	2301      	movs	r3, #1
 8003752:	e099      	b.n	8003888 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	2200      	movs	r2, #0
 8003758:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2202      	movs	r2, #2
 8003760:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	681a      	ldr	r2, [r3, #0]
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f022 0201 	bic.w	r2, r2, #1
 8003772:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003774:	e00f      	b.n	8003796 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003776:	f7ff fab9 	bl	8002cec <HAL_GetTick>
 800377a:	4602      	mov	r2, r0
 800377c:	693b      	ldr	r3, [r7, #16]
 800377e:	1ad3      	subs	r3, r2, r3
 8003780:	2b05      	cmp	r3, #5
 8003782:	d908      	bls.n	8003796 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2220      	movs	r2, #32
 8003788:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	2203      	movs	r2, #3
 800378e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003792:	2303      	movs	r3, #3
 8003794:	e078      	b.n	8003888 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f003 0301 	and.w	r3, r3, #1
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d1e8      	bne.n	8003776 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80037ac:	697a      	ldr	r2, [r7, #20]
 80037ae:	4b38      	ldr	r3, [pc, #224]	; (8003890 <HAL_DMA_Init+0x158>)
 80037b0:	4013      	ands	r3, r2
 80037b2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	685a      	ldr	r2, [r3, #4]
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	689b      	ldr	r3, [r3, #8]
 80037bc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80037c2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	691b      	ldr	r3, [r3, #16]
 80037c8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80037ce:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	699b      	ldr	r3, [r3, #24]
 80037d4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80037da:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	6a1b      	ldr	r3, [r3, #32]
 80037e0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80037e2:	697a      	ldr	r2, [r7, #20]
 80037e4:	4313      	orrs	r3, r2
 80037e6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037ec:	2b04      	cmp	r3, #4
 80037ee:	d107      	bne.n	8003800 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037f8:	4313      	orrs	r3, r2
 80037fa:	697a      	ldr	r2, [r7, #20]
 80037fc:	4313      	orrs	r3, r2
 80037fe:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	697a      	ldr	r2, [r7, #20]
 8003806:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	695b      	ldr	r3, [r3, #20]
 800380e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003810:	697b      	ldr	r3, [r7, #20]
 8003812:	f023 0307 	bic.w	r3, r3, #7
 8003816:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800381c:	697a      	ldr	r2, [r7, #20]
 800381e:	4313      	orrs	r3, r2
 8003820:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003826:	2b04      	cmp	r3, #4
 8003828:	d117      	bne.n	800385a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800382e:	697a      	ldr	r2, [r7, #20]
 8003830:	4313      	orrs	r3, r2
 8003832:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003838:	2b00      	cmp	r3, #0
 800383a:	d00e      	beq.n	800385a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800383c:	6878      	ldr	r0, [r7, #4]
 800383e:	f000 fa91 	bl	8003d64 <DMA_CheckFifoParam>
 8003842:	4603      	mov	r3, r0
 8003844:	2b00      	cmp	r3, #0
 8003846:	d008      	beq.n	800385a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2240      	movs	r2, #64	; 0x40
 800384c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	2201      	movs	r2, #1
 8003852:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003856:	2301      	movs	r3, #1
 8003858:	e016      	b.n	8003888 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	697a      	ldr	r2, [r7, #20]
 8003860:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003862:	6878      	ldr	r0, [r7, #4]
 8003864:	f000 fa48 	bl	8003cf8 <DMA_CalcBaseAndBitshift>
 8003868:	4603      	mov	r3, r0
 800386a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003870:	223f      	movs	r2, #63	; 0x3f
 8003872:	409a      	lsls	r2, r3
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	2200      	movs	r2, #0
 800387c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	2201      	movs	r2, #1
 8003882:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003886:	2300      	movs	r3, #0
}
 8003888:	4618      	mov	r0, r3
 800388a:	3718      	adds	r7, #24
 800388c:	46bd      	mov	sp, r7
 800388e:	bd80      	pop	{r7, pc}
 8003890:	f010803f 	.word	0xf010803f

08003894 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003894:	b580      	push	{r7, lr}
 8003896:	b086      	sub	sp, #24
 8003898:	af00      	add	r7, sp, #0
 800389a:	60f8      	str	r0, [r7, #12]
 800389c:	60b9      	str	r1, [r7, #8]
 800389e:	607a      	str	r2, [r7, #4]
 80038a0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80038a2:	2300      	movs	r3, #0
 80038a4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038aa:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80038b2:	2b01      	cmp	r3, #1
 80038b4:	d101      	bne.n	80038ba <HAL_DMA_Start_IT+0x26>
 80038b6:	2302      	movs	r3, #2
 80038b8:	e040      	b.n	800393c <HAL_DMA_Start_IT+0xa8>
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	2201      	movs	r2, #1
 80038be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80038c8:	b2db      	uxtb	r3, r3
 80038ca:	2b01      	cmp	r3, #1
 80038cc:	d12f      	bne.n	800392e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	2202      	movs	r2, #2
 80038d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	2200      	movs	r2, #0
 80038da:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80038dc:	683b      	ldr	r3, [r7, #0]
 80038de:	687a      	ldr	r2, [r7, #4]
 80038e0:	68b9      	ldr	r1, [r7, #8]
 80038e2:	68f8      	ldr	r0, [r7, #12]
 80038e4:	f000 f9da 	bl	8003c9c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038ec:	223f      	movs	r2, #63	; 0x3f
 80038ee:	409a      	lsls	r2, r3
 80038f0:	693b      	ldr	r3, [r7, #16]
 80038f2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	681a      	ldr	r2, [r3, #0]
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f042 0216 	orr.w	r2, r2, #22
 8003902:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003908:	2b00      	cmp	r3, #0
 800390a:	d007      	beq.n	800391c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	681a      	ldr	r2, [r3, #0]
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f042 0208 	orr.w	r2, r2, #8
 800391a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	681a      	ldr	r2, [r3, #0]
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f042 0201 	orr.w	r2, r2, #1
 800392a:	601a      	str	r2, [r3, #0]
 800392c:	e005      	b.n	800393a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	2200      	movs	r2, #0
 8003932:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003936:	2302      	movs	r3, #2
 8003938:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800393a:	7dfb      	ldrb	r3, [r7, #23]
}
 800393c:	4618      	mov	r0, r3
 800393e:	3718      	adds	r7, #24
 8003940:	46bd      	mov	sp, r7
 8003942:	bd80      	pop	{r7, pc}

08003944 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003944:	b480      	push	{r7}
 8003946:	b083      	sub	sp, #12
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003952:	b2db      	uxtb	r3, r3
 8003954:	2b02      	cmp	r3, #2
 8003956:	d004      	beq.n	8003962 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2280      	movs	r2, #128	; 0x80
 800395c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800395e:	2301      	movs	r3, #1
 8003960:	e00c      	b.n	800397c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	2205      	movs	r2, #5
 8003966:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	681a      	ldr	r2, [r3, #0]
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f022 0201 	bic.w	r2, r2, #1
 8003978:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800397a:	2300      	movs	r3, #0
}
 800397c:	4618      	mov	r0, r3
 800397e:	370c      	adds	r7, #12
 8003980:	46bd      	mov	sp, r7
 8003982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003986:	4770      	bx	lr

08003988 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003988:	b580      	push	{r7, lr}
 800398a:	b086      	sub	sp, #24
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003990:	2300      	movs	r3, #0
 8003992:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003994:	4b92      	ldr	r3, [pc, #584]	; (8003be0 <HAL_DMA_IRQHandler+0x258>)
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	4a92      	ldr	r2, [pc, #584]	; (8003be4 <HAL_DMA_IRQHandler+0x25c>)
 800399a:	fba2 2303 	umull	r2, r3, r2, r3
 800399e:	0a9b      	lsrs	r3, r3, #10
 80039a0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039a6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80039a8:	693b      	ldr	r3, [r7, #16]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039b2:	2208      	movs	r2, #8
 80039b4:	409a      	lsls	r2, r3
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	4013      	ands	r3, r2
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d01a      	beq.n	80039f4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f003 0304 	and.w	r3, r3, #4
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d013      	beq.n	80039f4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	681a      	ldr	r2, [r3, #0]
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f022 0204 	bic.w	r2, r2, #4
 80039da:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039e0:	2208      	movs	r2, #8
 80039e2:	409a      	lsls	r2, r3
 80039e4:	693b      	ldr	r3, [r7, #16]
 80039e6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039ec:	f043 0201 	orr.w	r2, r3, #1
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039f8:	2201      	movs	r2, #1
 80039fa:	409a      	lsls	r2, r3
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	4013      	ands	r3, r2
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d012      	beq.n	8003a2a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	695b      	ldr	r3, [r3, #20]
 8003a0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d00b      	beq.n	8003a2a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a16:	2201      	movs	r2, #1
 8003a18:	409a      	lsls	r2, r3
 8003a1a:	693b      	ldr	r3, [r7, #16]
 8003a1c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a22:	f043 0202 	orr.w	r2, r3, #2
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a2e:	2204      	movs	r2, #4
 8003a30:	409a      	lsls	r2, r3
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	4013      	ands	r3, r2
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d012      	beq.n	8003a60 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f003 0302 	and.w	r3, r3, #2
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d00b      	beq.n	8003a60 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a4c:	2204      	movs	r2, #4
 8003a4e:	409a      	lsls	r2, r3
 8003a50:	693b      	ldr	r3, [r7, #16]
 8003a52:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a58:	f043 0204 	orr.w	r2, r3, #4
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a64:	2210      	movs	r2, #16
 8003a66:	409a      	lsls	r2, r3
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	4013      	ands	r3, r2
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d043      	beq.n	8003af8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f003 0308 	and.w	r3, r3, #8
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d03c      	beq.n	8003af8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a82:	2210      	movs	r2, #16
 8003a84:	409a      	lsls	r2, r3
 8003a86:	693b      	ldr	r3, [r7, #16]
 8003a88:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d018      	beq.n	8003aca <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d108      	bne.n	8003ab8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d024      	beq.n	8003af8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ab2:	6878      	ldr	r0, [r7, #4]
 8003ab4:	4798      	blx	r3
 8003ab6:	e01f      	b.n	8003af8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d01b      	beq.n	8003af8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ac4:	6878      	ldr	r0, [r7, #4]
 8003ac6:	4798      	blx	r3
 8003ac8:	e016      	b.n	8003af8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d107      	bne.n	8003ae8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	681a      	ldr	r2, [r3, #0]
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f022 0208 	bic.w	r2, r2, #8
 8003ae6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d003      	beq.n	8003af8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003af4:	6878      	ldr	r0, [r7, #4]
 8003af6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003afc:	2220      	movs	r2, #32
 8003afe:	409a      	lsls	r2, r3
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	4013      	ands	r3, r2
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	f000 808e 	beq.w	8003c26 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f003 0310 	and.w	r3, r3, #16
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	f000 8086 	beq.w	8003c26 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b1e:	2220      	movs	r2, #32
 8003b20:	409a      	lsls	r2, r3
 8003b22:	693b      	ldr	r3, [r7, #16]
 8003b24:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003b2c:	b2db      	uxtb	r3, r3
 8003b2e:	2b05      	cmp	r3, #5
 8003b30:	d136      	bne.n	8003ba0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	681a      	ldr	r2, [r3, #0]
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f022 0216 	bic.w	r2, r2, #22
 8003b40:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	695a      	ldr	r2, [r3, #20]
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003b50:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d103      	bne.n	8003b62 <HAL_DMA_IRQHandler+0x1da>
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d007      	beq.n	8003b72 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	681a      	ldr	r2, [r3, #0]
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f022 0208 	bic.w	r2, r2, #8
 8003b70:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b76:	223f      	movs	r2, #63	; 0x3f
 8003b78:	409a      	lsls	r2, r3
 8003b7a:	693b      	ldr	r3, [r7, #16]
 8003b7c:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	2200      	movs	r2, #0
 8003b82:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	2201      	movs	r2, #1
 8003b8a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d07d      	beq.n	8003c92 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b9a:	6878      	ldr	r0, [r7, #4]
 8003b9c:	4798      	blx	r3
        }
        return;
 8003b9e:	e078      	b.n	8003c92 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d01c      	beq.n	8003be8 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d108      	bne.n	8003bce <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d030      	beq.n	8003c26 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bc8:	6878      	ldr	r0, [r7, #4]
 8003bca:	4798      	blx	r3
 8003bcc:	e02b      	b.n	8003c26 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d027      	beq.n	8003c26 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bda:	6878      	ldr	r0, [r7, #4]
 8003bdc:	4798      	blx	r3
 8003bde:	e022      	b.n	8003c26 <HAL_DMA_IRQHandler+0x29e>
 8003be0:	20000010 	.word	0x20000010
 8003be4:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d10f      	bne.n	8003c16 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	681a      	ldr	r2, [r3, #0]
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f022 0210 	bic.w	r2, r2, #16
 8003c04:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	2200      	movs	r2, #0
 8003c0a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	2201      	movs	r2, #1
 8003c12:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d003      	beq.n	8003c26 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c22:	6878      	ldr	r0, [r7, #4]
 8003c24:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d032      	beq.n	8003c94 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c32:	f003 0301 	and.w	r3, r3, #1
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d022      	beq.n	8003c80 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	2205      	movs	r2, #5
 8003c3e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	681a      	ldr	r2, [r3, #0]
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f022 0201 	bic.w	r2, r2, #1
 8003c50:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003c52:	68bb      	ldr	r3, [r7, #8]
 8003c54:	3301      	adds	r3, #1
 8003c56:	60bb      	str	r3, [r7, #8]
 8003c58:	697a      	ldr	r2, [r7, #20]
 8003c5a:	429a      	cmp	r2, r3
 8003c5c:	d307      	bcc.n	8003c6e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f003 0301 	and.w	r3, r3, #1
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d1f2      	bne.n	8003c52 <HAL_DMA_IRQHandler+0x2ca>
 8003c6c:	e000      	b.n	8003c70 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8003c6e:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2200      	movs	r2, #0
 8003c74:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2201      	movs	r2, #1
 8003c7c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d005      	beq.n	8003c94 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c8c:	6878      	ldr	r0, [r7, #4]
 8003c8e:	4798      	blx	r3
 8003c90:	e000      	b.n	8003c94 <HAL_DMA_IRQHandler+0x30c>
        return;
 8003c92:	bf00      	nop
    }
  }
}
 8003c94:	3718      	adds	r7, #24
 8003c96:	46bd      	mov	sp, r7
 8003c98:	bd80      	pop	{r7, pc}
 8003c9a:	bf00      	nop

08003c9c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003c9c:	b480      	push	{r7}
 8003c9e:	b085      	sub	sp, #20
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	60f8      	str	r0, [r7, #12]
 8003ca4:	60b9      	str	r1, [r7, #8]
 8003ca6:	607a      	str	r2, [r7, #4]
 8003ca8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	681a      	ldr	r2, [r3, #0]
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003cb8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	683a      	ldr	r2, [r7, #0]
 8003cc0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	689b      	ldr	r3, [r3, #8]
 8003cc6:	2b40      	cmp	r3, #64	; 0x40
 8003cc8:	d108      	bne.n	8003cdc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	687a      	ldr	r2, [r7, #4]
 8003cd0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	68ba      	ldr	r2, [r7, #8]
 8003cd8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003cda:	e007      	b.n	8003cec <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	68ba      	ldr	r2, [r7, #8]
 8003ce2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	687a      	ldr	r2, [r7, #4]
 8003cea:	60da      	str	r2, [r3, #12]
}
 8003cec:	bf00      	nop
 8003cee:	3714      	adds	r7, #20
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf6:	4770      	bx	lr

08003cf8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003cf8:	b480      	push	{r7}
 8003cfa:	b085      	sub	sp, #20
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	b2db      	uxtb	r3, r3
 8003d06:	3b10      	subs	r3, #16
 8003d08:	4a14      	ldr	r2, [pc, #80]	; (8003d5c <DMA_CalcBaseAndBitshift+0x64>)
 8003d0a:	fba2 2303 	umull	r2, r3, r2, r3
 8003d0e:	091b      	lsrs	r3, r3, #4
 8003d10:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003d12:	4a13      	ldr	r2, [pc, #76]	; (8003d60 <DMA_CalcBaseAndBitshift+0x68>)
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	4413      	add	r3, r2
 8003d18:	781b      	ldrb	r3, [r3, #0]
 8003d1a:	461a      	mov	r2, r3
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	2b03      	cmp	r3, #3
 8003d24:	d909      	bls.n	8003d3a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003d2e:	f023 0303 	bic.w	r3, r3, #3
 8003d32:	1d1a      	adds	r2, r3, #4
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	659a      	str	r2, [r3, #88]	; 0x58
 8003d38:	e007      	b.n	8003d4a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003d42:	f023 0303 	bic.w	r3, r3, #3
 8003d46:	687a      	ldr	r2, [r7, #4]
 8003d48:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003d4e:	4618      	mov	r0, r3
 8003d50:	3714      	adds	r7, #20
 8003d52:	46bd      	mov	sp, r7
 8003d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d58:	4770      	bx	lr
 8003d5a:	bf00      	nop
 8003d5c:	aaaaaaab 	.word	0xaaaaaaab
 8003d60:	0800b478 	.word	0x0800b478

08003d64 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003d64:	b480      	push	{r7}
 8003d66:	b085      	sub	sp, #20
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003d6c:	2300      	movs	r3, #0
 8003d6e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d74:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	699b      	ldr	r3, [r3, #24]
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d11f      	bne.n	8003dbe <DMA_CheckFifoParam+0x5a>
 8003d7e:	68bb      	ldr	r3, [r7, #8]
 8003d80:	2b03      	cmp	r3, #3
 8003d82:	d856      	bhi.n	8003e32 <DMA_CheckFifoParam+0xce>
 8003d84:	a201      	add	r2, pc, #4	; (adr r2, 8003d8c <DMA_CheckFifoParam+0x28>)
 8003d86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d8a:	bf00      	nop
 8003d8c:	08003d9d 	.word	0x08003d9d
 8003d90:	08003daf 	.word	0x08003daf
 8003d94:	08003d9d 	.word	0x08003d9d
 8003d98:	08003e33 	.word	0x08003e33
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003da0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d046      	beq.n	8003e36 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003da8:	2301      	movs	r3, #1
 8003daa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003dac:	e043      	b.n	8003e36 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003db2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003db6:	d140      	bne.n	8003e3a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003db8:	2301      	movs	r3, #1
 8003dba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003dbc:	e03d      	b.n	8003e3a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	699b      	ldr	r3, [r3, #24]
 8003dc2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003dc6:	d121      	bne.n	8003e0c <DMA_CheckFifoParam+0xa8>
 8003dc8:	68bb      	ldr	r3, [r7, #8]
 8003dca:	2b03      	cmp	r3, #3
 8003dcc:	d837      	bhi.n	8003e3e <DMA_CheckFifoParam+0xda>
 8003dce:	a201      	add	r2, pc, #4	; (adr r2, 8003dd4 <DMA_CheckFifoParam+0x70>)
 8003dd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dd4:	08003de5 	.word	0x08003de5
 8003dd8:	08003deb 	.word	0x08003deb
 8003ddc:	08003de5 	.word	0x08003de5
 8003de0:	08003dfd 	.word	0x08003dfd
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003de4:	2301      	movs	r3, #1
 8003de6:	73fb      	strb	r3, [r7, #15]
      break;
 8003de8:	e030      	b.n	8003e4c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dee:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d025      	beq.n	8003e42 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003df6:	2301      	movs	r3, #1
 8003df8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003dfa:	e022      	b.n	8003e42 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e00:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003e04:	d11f      	bne.n	8003e46 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003e06:	2301      	movs	r3, #1
 8003e08:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003e0a:	e01c      	b.n	8003e46 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003e0c:	68bb      	ldr	r3, [r7, #8]
 8003e0e:	2b02      	cmp	r3, #2
 8003e10:	d903      	bls.n	8003e1a <DMA_CheckFifoParam+0xb6>
 8003e12:	68bb      	ldr	r3, [r7, #8]
 8003e14:	2b03      	cmp	r3, #3
 8003e16:	d003      	beq.n	8003e20 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003e18:	e018      	b.n	8003e4c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003e1a:	2301      	movs	r3, #1
 8003e1c:	73fb      	strb	r3, [r7, #15]
      break;
 8003e1e:	e015      	b.n	8003e4c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e24:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d00e      	beq.n	8003e4a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003e2c:	2301      	movs	r3, #1
 8003e2e:	73fb      	strb	r3, [r7, #15]
      break;
 8003e30:	e00b      	b.n	8003e4a <DMA_CheckFifoParam+0xe6>
      break;
 8003e32:	bf00      	nop
 8003e34:	e00a      	b.n	8003e4c <DMA_CheckFifoParam+0xe8>
      break;
 8003e36:	bf00      	nop
 8003e38:	e008      	b.n	8003e4c <DMA_CheckFifoParam+0xe8>
      break;
 8003e3a:	bf00      	nop
 8003e3c:	e006      	b.n	8003e4c <DMA_CheckFifoParam+0xe8>
      break;
 8003e3e:	bf00      	nop
 8003e40:	e004      	b.n	8003e4c <DMA_CheckFifoParam+0xe8>
      break;
 8003e42:	bf00      	nop
 8003e44:	e002      	b.n	8003e4c <DMA_CheckFifoParam+0xe8>
      break;   
 8003e46:	bf00      	nop
 8003e48:	e000      	b.n	8003e4c <DMA_CheckFifoParam+0xe8>
      break;
 8003e4a:	bf00      	nop
    }
  } 
  
  return status; 
 8003e4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e4e:	4618      	mov	r0, r3
 8003e50:	3714      	adds	r7, #20
 8003e52:	46bd      	mov	sp, r7
 8003e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e58:	4770      	bx	lr
 8003e5a:	bf00      	nop

08003e5c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003e5c:	b480      	push	{r7}
 8003e5e:	b089      	sub	sp, #36	; 0x24
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]
 8003e64:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003e66:	2300      	movs	r3, #0
 8003e68:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003e6a:	2300      	movs	r3, #0
 8003e6c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003e6e:	2300      	movs	r3, #0
 8003e70:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003e72:	2300      	movs	r3, #0
 8003e74:	61fb      	str	r3, [r7, #28]
 8003e76:	e159      	b.n	800412c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003e78:	2201      	movs	r2, #1
 8003e7a:	69fb      	ldr	r3, [r7, #28]
 8003e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e80:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003e82:	683b      	ldr	r3, [r7, #0]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	697a      	ldr	r2, [r7, #20]
 8003e88:	4013      	ands	r3, r2
 8003e8a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003e8c:	693a      	ldr	r2, [r7, #16]
 8003e8e:	697b      	ldr	r3, [r7, #20]
 8003e90:	429a      	cmp	r2, r3
 8003e92:	f040 8148 	bne.w	8004126 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003e96:	683b      	ldr	r3, [r7, #0]
 8003e98:	685b      	ldr	r3, [r3, #4]
 8003e9a:	2b01      	cmp	r3, #1
 8003e9c:	d00b      	beq.n	8003eb6 <HAL_GPIO_Init+0x5a>
 8003e9e:	683b      	ldr	r3, [r7, #0]
 8003ea0:	685b      	ldr	r3, [r3, #4]
 8003ea2:	2b02      	cmp	r3, #2
 8003ea4:	d007      	beq.n	8003eb6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003ea6:	683b      	ldr	r3, [r7, #0]
 8003ea8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003eaa:	2b11      	cmp	r3, #17
 8003eac:	d003      	beq.n	8003eb6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	685b      	ldr	r3, [r3, #4]
 8003eb2:	2b12      	cmp	r3, #18
 8003eb4:	d130      	bne.n	8003f18 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	689b      	ldr	r3, [r3, #8]
 8003eba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003ebc:	69fb      	ldr	r3, [r7, #28]
 8003ebe:	005b      	lsls	r3, r3, #1
 8003ec0:	2203      	movs	r2, #3
 8003ec2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ec6:	43db      	mvns	r3, r3
 8003ec8:	69ba      	ldr	r2, [r7, #24]
 8003eca:	4013      	ands	r3, r2
 8003ecc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003ece:	683b      	ldr	r3, [r7, #0]
 8003ed0:	68da      	ldr	r2, [r3, #12]
 8003ed2:	69fb      	ldr	r3, [r7, #28]
 8003ed4:	005b      	lsls	r3, r3, #1
 8003ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8003eda:	69ba      	ldr	r2, [r7, #24]
 8003edc:	4313      	orrs	r3, r2
 8003ede:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	69ba      	ldr	r2, [r7, #24]
 8003ee4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	685b      	ldr	r3, [r3, #4]
 8003eea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003eec:	2201      	movs	r2, #1
 8003eee:	69fb      	ldr	r3, [r7, #28]
 8003ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ef4:	43db      	mvns	r3, r3
 8003ef6:	69ba      	ldr	r2, [r7, #24]
 8003ef8:	4013      	ands	r3, r2
 8003efa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003efc:	683b      	ldr	r3, [r7, #0]
 8003efe:	685b      	ldr	r3, [r3, #4]
 8003f00:	091b      	lsrs	r3, r3, #4
 8003f02:	f003 0201 	and.w	r2, r3, #1
 8003f06:	69fb      	ldr	r3, [r7, #28]
 8003f08:	fa02 f303 	lsl.w	r3, r2, r3
 8003f0c:	69ba      	ldr	r2, [r7, #24]
 8003f0e:	4313      	orrs	r3, r2
 8003f10:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	69ba      	ldr	r2, [r7, #24]
 8003f16:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	68db      	ldr	r3, [r3, #12]
 8003f1c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003f1e:	69fb      	ldr	r3, [r7, #28]
 8003f20:	005b      	lsls	r3, r3, #1
 8003f22:	2203      	movs	r2, #3
 8003f24:	fa02 f303 	lsl.w	r3, r2, r3
 8003f28:	43db      	mvns	r3, r3
 8003f2a:	69ba      	ldr	r2, [r7, #24]
 8003f2c:	4013      	ands	r3, r2
 8003f2e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003f30:	683b      	ldr	r3, [r7, #0]
 8003f32:	689a      	ldr	r2, [r3, #8]
 8003f34:	69fb      	ldr	r3, [r7, #28]
 8003f36:	005b      	lsls	r3, r3, #1
 8003f38:	fa02 f303 	lsl.w	r3, r2, r3
 8003f3c:	69ba      	ldr	r2, [r7, #24]
 8003f3e:	4313      	orrs	r3, r2
 8003f40:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	69ba      	ldr	r2, [r7, #24]
 8003f46:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003f48:	683b      	ldr	r3, [r7, #0]
 8003f4a:	685b      	ldr	r3, [r3, #4]
 8003f4c:	2b02      	cmp	r3, #2
 8003f4e:	d003      	beq.n	8003f58 <HAL_GPIO_Init+0xfc>
 8003f50:	683b      	ldr	r3, [r7, #0]
 8003f52:	685b      	ldr	r3, [r3, #4]
 8003f54:	2b12      	cmp	r3, #18
 8003f56:	d123      	bne.n	8003fa0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003f58:	69fb      	ldr	r3, [r7, #28]
 8003f5a:	08da      	lsrs	r2, r3, #3
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	3208      	adds	r2, #8
 8003f60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003f64:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003f66:	69fb      	ldr	r3, [r7, #28]
 8003f68:	f003 0307 	and.w	r3, r3, #7
 8003f6c:	009b      	lsls	r3, r3, #2
 8003f6e:	220f      	movs	r2, #15
 8003f70:	fa02 f303 	lsl.w	r3, r2, r3
 8003f74:	43db      	mvns	r3, r3
 8003f76:	69ba      	ldr	r2, [r7, #24]
 8003f78:	4013      	ands	r3, r2
 8003f7a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003f7c:	683b      	ldr	r3, [r7, #0]
 8003f7e:	691a      	ldr	r2, [r3, #16]
 8003f80:	69fb      	ldr	r3, [r7, #28]
 8003f82:	f003 0307 	and.w	r3, r3, #7
 8003f86:	009b      	lsls	r3, r3, #2
 8003f88:	fa02 f303 	lsl.w	r3, r2, r3
 8003f8c:	69ba      	ldr	r2, [r7, #24]
 8003f8e:	4313      	orrs	r3, r2
 8003f90:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003f92:	69fb      	ldr	r3, [r7, #28]
 8003f94:	08da      	lsrs	r2, r3, #3
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	3208      	adds	r2, #8
 8003f9a:	69b9      	ldr	r1, [r7, #24]
 8003f9c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003fa6:	69fb      	ldr	r3, [r7, #28]
 8003fa8:	005b      	lsls	r3, r3, #1
 8003faa:	2203      	movs	r2, #3
 8003fac:	fa02 f303 	lsl.w	r3, r2, r3
 8003fb0:	43db      	mvns	r3, r3
 8003fb2:	69ba      	ldr	r2, [r7, #24]
 8003fb4:	4013      	ands	r3, r2
 8003fb6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003fb8:	683b      	ldr	r3, [r7, #0]
 8003fba:	685b      	ldr	r3, [r3, #4]
 8003fbc:	f003 0203 	and.w	r2, r3, #3
 8003fc0:	69fb      	ldr	r3, [r7, #28]
 8003fc2:	005b      	lsls	r3, r3, #1
 8003fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8003fc8:	69ba      	ldr	r2, [r7, #24]
 8003fca:	4313      	orrs	r3, r2
 8003fcc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	69ba      	ldr	r2, [r7, #24]
 8003fd2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	685b      	ldr	r3, [r3, #4]
 8003fd8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	f000 80a2 	beq.w	8004126 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003fe2:	2300      	movs	r3, #0
 8003fe4:	60fb      	str	r3, [r7, #12]
 8003fe6:	4b57      	ldr	r3, [pc, #348]	; (8004144 <HAL_GPIO_Init+0x2e8>)
 8003fe8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fea:	4a56      	ldr	r2, [pc, #344]	; (8004144 <HAL_GPIO_Init+0x2e8>)
 8003fec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003ff0:	6453      	str	r3, [r2, #68]	; 0x44
 8003ff2:	4b54      	ldr	r3, [pc, #336]	; (8004144 <HAL_GPIO_Init+0x2e8>)
 8003ff4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ff6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003ffa:	60fb      	str	r3, [r7, #12]
 8003ffc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003ffe:	4a52      	ldr	r2, [pc, #328]	; (8004148 <HAL_GPIO_Init+0x2ec>)
 8004000:	69fb      	ldr	r3, [r7, #28]
 8004002:	089b      	lsrs	r3, r3, #2
 8004004:	3302      	adds	r3, #2
 8004006:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800400a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800400c:	69fb      	ldr	r3, [r7, #28]
 800400e:	f003 0303 	and.w	r3, r3, #3
 8004012:	009b      	lsls	r3, r3, #2
 8004014:	220f      	movs	r2, #15
 8004016:	fa02 f303 	lsl.w	r3, r2, r3
 800401a:	43db      	mvns	r3, r3
 800401c:	69ba      	ldr	r2, [r7, #24]
 800401e:	4013      	ands	r3, r2
 8004020:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	4a49      	ldr	r2, [pc, #292]	; (800414c <HAL_GPIO_Init+0x2f0>)
 8004026:	4293      	cmp	r3, r2
 8004028:	d019      	beq.n	800405e <HAL_GPIO_Init+0x202>
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	4a48      	ldr	r2, [pc, #288]	; (8004150 <HAL_GPIO_Init+0x2f4>)
 800402e:	4293      	cmp	r3, r2
 8004030:	d013      	beq.n	800405a <HAL_GPIO_Init+0x1fe>
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	4a47      	ldr	r2, [pc, #284]	; (8004154 <HAL_GPIO_Init+0x2f8>)
 8004036:	4293      	cmp	r3, r2
 8004038:	d00d      	beq.n	8004056 <HAL_GPIO_Init+0x1fa>
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	4a46      	ldr	r2, [pc, #280]	; (8004158 <HAL_GPIO_Init+0x2fc>)
 800403e:	4293      	cmp	r3, r2
 8004040:	d007      	beq.n	8004052 <HAL_GPIO_Init+0x1f6>
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	4a45      	ldr	r2, [pc, #276]	; (800415c <HAL_GPIO_Init+0x300>)
 8004046:	4293      	cmp	r3, r2
 8004048:	d101      	bne.n	800404e <HAL_GPIO_Init+0x1f2>
 800404a:	2304      	movs	r3, #4
 800404c:	e008      	b.n	8004060 <HAL_GPIO_Init+0x204>
 800404e:	2307      	movs	r3, #7
 8004050:	e006      	b.n	8004060 <HAL_GPIO_Init+0x204>
 8004052:	2303      	movs	r3, #3
 8004054:	e004      	b.n	8004060 <HAL_GPIO_Init+0x204>
 8004056:	2302      	movs	r3, #2
 8004058:	e002      	b.n	8004060 <HAL_GPIO_Init+0x204>
 800405a:	2301      	movs	r3, #1
 800405c:	e000      	b.n	8004060 <HAL_GPIO_Init+0x204>
 800405e:	2300      	movs	r3, #0
 8004060:	69fa      	ldr	r2, [r7, #28]
 8004062:	f002 0203 	and.w	r2, r2, #3
 8004066:	0092      	lsls	r2, r2, #2
 8004068:	4093      	lsls	r3, r2
 800406a:	69ba      	ldr	r2, [r7, #24]
 800406c:	4313      	orrs	r3, r2
 800406e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004070:	4935      	ldr	r1, [pc, #212]	; (8004148 <HAL_GPIO_Init+0x2ec>)
 8004072:	69fb      	ldr	r3, [r7, #28]
 8004074:	089b      	lsrs	r3, r3, #2
 8004076:	3302      	adds	r3, #2
 8004078:	69ba      	ldr	r2, [r7, #24]
 800407a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800407e:	4b38      	ldr	r3, [pc, #224]	; (8004160 <HAL_GPIO_Init+0x304>)
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004084:	693b      	ldr	r3, [r7, #16]
 8004086:	43db      	mvns	r3, r3
 8004088:	69ba      	ldr	r2, [r7, #24]
 800408a:	4013      	ands	r3, r2
 800408c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800408e:	683b      	ldr	r3, [r7, #0]
 8004090:	685b      	ldr	r3, [r3, #4]
 8004092:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004096:	2b00      	cmp	r3, #0
 8004098:	d003      	beq.n	80040a2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800409a:	69ba      	ldr	r2, [r7, #24]
 800409c:	693b      	ldr	r3, [r7, #16]
 800409e:	4313      	orrs	r3, r2
 80040a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80040a2:	4a2f      	ldr	r2, [pc, #188]	; (8004160 <HAL_GPIO_Init+0x304>)
 80040a4:	69bb      	ldr	r3, [r7, #24]
 80040a6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80040a8:	4b2d      	ldr	r3, [pc, #180]	; (8004160 <HAL_GPIO_Init+0x304>)
 80040aa:	685b      	ldr	r3, [r3, #4]
 80040ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80040ae:	693b      	ldr	r3, [r7, #16]
 80040b0:	43db      	mvns	r3, r3
 80040b2:	69ba      	ldr	r2, [r7, #24]
 80040b4:	4013      	ands	r3, r2
 80040b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80040b8:	683b      	ldr	r3, [r7, #0]
 80040ba:	685b      	ldr	r3, [r3, #4]
 80040bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d003      	beq.n	80040cc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80040c4:	69ba      	ldr	r2, [r7, #24]
 80040c6:	693b      	ldr	r3, [r7, #16]
 80040c8:	4313      	orrs	r3, r2
 80040ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80040cc:	4a24      	ldr	r2, [pc, #144]	; (8004160 <HAL_GPIO_Init+0x304>)
 80040ce:	69bb      	ldr	r3, [r7, #24]
 80040d0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80040d2:	4b23      	ldr	r3, [pc, #140]	; (8004160 <HAL_GPIO_Init+0x304>)
 80040d4:	689b      	ldr	r3, [r3, #8]
 80040d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80040d8:	693b      	ldr	r3, [r7, #16]
 80040da:	43db      	mvns	r3, r3
 80040dc:	69ba      	ldr	r2, [r7, #24]
 80040de:	4013      	ands	r3, r2
 80040e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80040e2:	683b      	ldr	r3, [r7, #0]
 80040e4:	685b      	ldr	r3, [r3, #4]
 80040e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d003      	beq.n	80040f6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80040ee:	69ba      	ldr	r2, [r7, #24]
 80040f0:	693b      	ldr	r3, [r7, #16]
 80040f2:	4313      	orrs	r3, r2
 80040f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80040f6:	4a1a      	ldr	r2, [pc, #104]	; (8004160 <HAL_GPIO_Init+0x304>)
 80040f8:	69bb      	ldr	r3, [r7, #24]
 80040fa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80040fc:	4b18      	ldr	r3, [pc, #96]	; (8004160 <HAL_GPIO_Init+0x304>)
 80040fe:	68db      	ldr	r3, [r3, #12]
 8004100:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004102:	693b      	ldr	r3, [r7, #16]
 8004104:	43db      	mvns	r3, r3
 8004106:	69ba      	ldr	r2, [r7, #24]
 8004108:	4013      	ands	r3, r2
 800410a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800410c:	683b      	ldr	r3, [r7, #0]
 800410e:	685b      	ldr	r3, [r3, #4]
 8004110:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004114:	2b00      	cmp	r3, #0
 8004116:	d003      	beq.n	8004120 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8004118:	69ba      	ldr	r2, [r7, #24]
 800411a:	693b      	ldr	r3, [r7, #16]
 800411c:	4313      	orrs	r3, r2
 800411e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004120:	4a0f      	ldr	r2, [pc, #60]	; (8004160 <HAL_GPIO_Init+0x304>)
 8004122:	69bb      	ldr	r3, [r7, #24]
 8004124:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004126:	69fb      	ldr	r3, [r7, #28]
 8004128:	3301      	adds	r3, #1
 800412a:	61fb      	str	r3, [r7, #28]
 800412c:	69fb      	ldr	r3, [r7, #28]
 800412e:	2b0f      	cmp	r3, #15
 8004130:	f67f aea2 	bls.w	8003e78 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004134:	bf00      	nop
 8004136:	bf00      	nop
 8004138:	3724      	adds	r7, #36	; 0x24
 800413a:	46bd      	mov	sp, r7
 800413c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004140:	4770      	bx	lr
 8004142:	bf00      	nop
 8004144:	40023800 	.word	0x40023800
 8004148:	40013800 	.word	0x40013800
 800414c:	40020000 	.word	0x40020000
 8004150:	40020400 	.word	0x40020400
 8004154:	40020800 	.word	0x40020800
 8004158:	40020c00 	.word	0x40020c00
 800415c:	40021000 	.word	0x40021000
 8004160:	40013c00 	.word	0x40013c00

08004164 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004164:	b480      	push	{r7}
 8004166:	b085      	sub	sp, #20
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]
 800416c:	460b      	mov	r3, r1
 800416e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	691a      	ldr	r2, [r3, #16]
 8004174:	887b      	ldrh	r3, [r7, #2]
 8004176:	4013      	ands	r3, r2
 8004178:	2b00      	cmp	r3, #0
 800417a:	d002      	beq.n	8004182 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800417c:	2301      	movs	r3, #1
 800417e:	73fb      	strb	r3, [r7, #15]
 8004180:	e001      	b.n	8004186 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004182:	2300      	movs	r3, #0
 8004184:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004186:	7bfb      	ldrb	r3, [r7, #15]
}
 8004188:	4618      	mov	r0, r3
 800418a:	3714      	adds	r7, #20
 800418c:	46bd      	mov	sp, r7
 800418e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004192:	4770      	bx	lr

08004194 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004194:	b480      	push	{r7}
 8004196:	b083      	sub	sp, #12
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]
 800419c:	460b      	mov	r3, r1
 800419e:	807b      	strh	r3, [r7, #2]
 80041a0:	4613      	mov	r3, r2
 80041a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80041a4:	787b      	ldrb	r3, [r7, #1]
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d003      	beq.n	80041b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80041aa:	887a      	ldrh	r2, [r7, #2]
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80041b0:	e003      	b.n	80041ba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80041b2:	887b      	ldrh	r3, [r7, #2]
 80041b4:	041a      	lsls	r2, r3, #16
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	619a      	str	r2, [r3, #24]
}
 80041ba:	bf00      	nop
 80041bc:	370c      	adds	r7, #12
 80041be:	46bd      	mov	sp, r7
 80041c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c4:	4770      	bx	lr
	...

080041c8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80041c8:	b580      	push	{r7, lr}
 80041ca:	b086      	sub	sp, #24
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d101      	bne.n	80041da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80041d6:	2301      	movs	r3, #1
 80041d8:	e25b      	b.n	8004692 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f003 0301 	and.w	r3, r3, #1
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d075      	beq.n	80042d2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80041e6:	4ba3      	ldr	r3, [pc, #652]	; (8004474 <HAL_RCC_OscConfig+0x2ac>)
 80041e8:	689b      	ldr	r3, [r3, #8]
 80041ea:	f003 030c 	and.w	r3, r3, #12
 80041ee:	2b04      	cmp	r3, #4
 80041f0:	d00c      	beq.n	800420c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80041f2:	4ba0      	ldr	r3, [pc, #640]	; (8004474 <HAL_RCC_OscConfig+0x2ac>)
 80041f4:	689b      	ldr	r3, [r3, #8]
 80041f6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80041fa:	2b08      	cmp	r3, #8
 80041fc:	d112      	bne.n	8004224 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80041fe:	4b9d      	ldr	r3, [pc, #628]	; (8004474 <HAL_RCC_OscConfig+0x2ac>)
 8004200:	685b      	ldr	r3, [r3, #4]
 8004202:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004206:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800420a:	d10b      	bne.n	8004224 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800420c:	4b99      	ldr	r3, [pc, #612]	; (8004474 <HAL_RCC_OscConfig+0x2ac>)
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004214:	2b00      	cmp	r3, #0
 8004216:	d05b      	beq.n	80042d0 <HAL_RCC_OscConfig+0x108>
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	685b      	ldr	r3, [r3, #4]
 800421c:	2b00      	cmp	r3, #0
 800421e:	d157      	bne.n	80042d0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004220:	2301      	movs	r3, #1
 8004222:	e236      	b.n	8004692 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	685b      	ldr	r3, [r3, #4]
 8004228:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800422c:	d106      	bne.n	800423c <HAL_RCC_OscConfig+0x74>
 800422e:	4b91      	ldr	r3, [pc, #580]	; (8004474 <HAL_RCC_OscConfig+0x2ac>)
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	4a90      	ldr	r2, [pc, #576]	; (8004474 <HAL_RCC_OscConfig+0x2ac>)
 8004234:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004238:	6013      	str	r3, [r2, #0]
 800423a:	e01d      	b.n	8004278 <HAL_RCC_OscConfig+0xb0>
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	685b      	ldr	r3, [r3, #4]
 8004240:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004244:	d10c      	bne.n	8004260 <HAL_RCC_OscConfig+0x98>
 8004246:	4b8b      	ldr	r3, [pc, #556]	; (8004474 <HAL_RCC_OscConfig+0x2ac>)
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	4a8a      	ldr	r2, [pc, #552]	; (8004474 <HAL_RCC_OscConfig+0x2ac>)
 800424c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004250:	6013      	str	r3, [r2, #0]
 8004252:	4b88      	ldr	r3, [pc, #544]	; (8004474 <HAL_RCC_OscConfig+0x2ac>)
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	4a87      	ldr	r2, [pc, #540]	; (8004474 <HAL_RCC_OscConfig+0x2ac>)
 8004258:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800425c:	6013      	str	r3, [r2, #0]
 800425e:	e00b      	b.n	8004278 <HAL_RCC_OscConfig+0xb0>
 8004260:	4b84      	ldr	r3, [pc, #528]	; (8004474 <HAL_RCC_OscConfig+0x2ac>)
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	4a83      	ldr	r2, [pc, #524]	; (8004474 <HAL_RCC_OscConfig+0x2ac>)
 8004266:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800426a:	6013      	str	r3, [r2, #0]
 800426c:	4b81      	ldr	r3, [pc, #516]	; (8004474 <HAL_RCC_OscConfig+0x2ac>)
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	4a80      	ldr	r2, [pc, #512]	; (8004474 <HAL_RCC_OscConfig+0x2ac>)
 8004272:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004276:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	685b      	ldr	r3, [r3, #4]
 800427c:	2b00      	cmp	r3, #0
 800427e:	d013      	beq.n	80042a8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004280:	f7fe fd34 	bl	8002cec <HAL_GetTick>
 8004284:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004286:	e008      	b.n	800429a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004288:	f7fe fd30 	bl	8002cec <HAL_GetTick>
 800428c:	4602      	mov	r2, r0
 800428e:	693b      	ldr	r3, [r7, #16]
 8004290:	1ad3      	subs	r3, r2, r3
 8004292:	2b64      	cmp	r3, #100	; 0x64
 8004294:	d901      	bls.n	800429a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004296:	2303      	movs	r3, #3
 8004298:	e1fb      	b.n	8004692 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800429a:	4b76      	ldr	r3, [pc, #472]	; (8004474 <HAL_RCC_OscConfig+0x2ac>)
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d0f0      	beq.n	8004288 <HAL_RCC_OscConfig+0xc0>
 80042a6:	e014      	b.n	80042d2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042a8:	f7fe fd20 	bl	8002cec <HAL_GetTick>
 80042ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80042ae:	e008      	b.n	80042c2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80042b0:	f7fe fd1c 	bl	8002cec <HAL_GetTick>
 80042b4:	4602      	mov	r2, r0
 80042b6:	693b      	ldr	r3, [r7, #16]
 80042b8:	1ad3      	subs	r3, r2, r3
 80042ba:	2b64      	cmp	r3, #100	; 0x64
 80042bc:	d901      	bls.n	80042c2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80042be:	2303      	movs	r3, #3
 80042c0:	e1e7      	b.n	8004692 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80042c2:	4b6c      	ldr	r3, [pc, #432]	; (8004474 <HAL_RCC_OscConfig+0x2ac>)
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d1f0      	bne.n	80042b0 <HAL_RCC_OscConfig+0xe8>
 80042ce:	e000      	b.n	80042d2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f003 0302 	and.w	r3, r3, #2
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d063      	beq.n	80043a6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80042de:	4b65      	ldr	r3, [pc, #404]	; (8004474 <HAL_RCC_OscConfig+0x2ac>)
 80042e0:	689b      	ldr	r3, [r3, #8]
 80042e2:	f003 030c 	and.w	r3, r3, #12
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d00b      	beq.n	8004302 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80042ea:	4b62      	ldr	r3, [pc, #392]	; (8004474 <HAL_RCC_OscConfig+0x2ac>)
 80042ec:	689b      	ldr	r3, [r3, #8]
 80042ee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80042f2:	2b08      	cmp	r3, #8
 80042f4:	d11c      	bne.n	8004330 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80042f6:	4b5f      	ldr	r3, [pc, #380]	; (8004474 <HAL_RCC_OscConfig+0x2ac>)
 80042f8:	685b      	ldr	r3, [r3, #4]
 80042fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d116      	bne.n	8004330 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004302:	4b5c      	ldr	r3, [pc, #368]	; (8004474 <HAL_RCC_OscConfig+0x2ac>)
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f003 0302 	and.w	r3, r3, #2
 800430a:	2b00      	cmp	r3, #0
 800430c:	d005      	beq.n	800431a <HAL_RCC_OscConfig+0x152>
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	68db      	ldr	r3, [r3, #12]
 8004312:	2b01      	cmp	r3, #1
 8004314:	d001      	beq.n	800431a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004316:	2301      	movs	r3, #1
 8004318:	e1bb      	b.n	8004692 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800431a:	4b56      	ldr	r3, [pc, #344]	; (8004474 <HAL_RCC_OscConfig+0x2ac>)
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	691b      	ldr	r3, [r3, #16]
 8004326:	00db      	lsls	r3, r3, #3
 8004328:	4952      	ldr	r1, [pc, #328]	; (8004474 <HAL_RCC_OscConfig+0x2ac>)
 800432a:	4313      	orrs	r3, r2
 800432c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800432e:	e03a      	b.n	80043a6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	68db      	ldr	r3, [r3, #12]
 8004334:	2b00      	cmp	r3, #0
 8004336:	d020      	beq.n	800437a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004338:	4b4f      	ldr	r3, [pc, #316]	; (8004478 <HAL_RCC_OscConfig+0x2b0>)
 800433a:	2201      	movs	r2, #1
 800433c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800433e:	f7fe fcd5 	bl	8002cec <HAL_GetTick>
 8004342:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004344:	e008      	b.n	8004358 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004346:	f7fe fcd1 	bl	8002cec <HAL_GetTick>
 800434a:	4602      	mov	r2, r0
 800434c:	693b      	ldr	r3, [r7, #16]
 800434e:	1ad3      	subs	r3, r2, r3
 8004350:	2b02      	cmp	r3, #2
 8004352:	d901      	bls.n	8004358 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004354:	2303      	movs	r3, #3
 8004356:	e19c      	b.n	8004692 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004358:	4b46      	ldr	r3, [pc, #280]	; (8004474 <HAL_RCC_OscConfig+0x2ac>)
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f003 0302 	and.w	r3, r3, #2
 8004360:	2b00      	cmp	r3, #0
 8004362:	d0f0      	beq.n	8004346 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004364:	4b43      	ldr	r3, [pc, #268]	; (8004474 <HAL_RCC_OscConfig+0x2ac>)
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	691b      	ldr	r3, [r3, #16]
 8004370:	00db      	lsls	r3, r3, #3
 8004372:	4940      	ldr	r1, [pc, #256]	; (8004474 <HAL_RCC_OscConfig+0x2ac>)
 8004374:	4313      	orrs	r3, r2
 8004376:	600b      	str	r3, [r1, #0]
 8004378:	e015      	b.n	80043a6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800437a:	4b3f      	ldr	r3, [pc, #252]	; (8004478 <HAL_RCC_OscConfig+0x2b0>)
 800437c:	2200      	movs	r2, #0
 800437e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004380:	f7fe fcb4 	bl	8002cec <HAL_GetTick>
 8004384:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004386:	e008      	b.n	800439a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004388:	f7fe fcb0 	bl	8002cec <HAL_GetTick>
 800438c:	4602      	mov	r2, r0
 800438e:	693b      	ldr	r3, [r7, #16]
 8004390:	1ad3      	subs	r3, r2, r3
 8004392:	2b02      	cmp	r3, #2
 8004394:	d901      	bls.n	800439a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004396:	2303      	movs	r3, #3
 8004398:	e17b      	b.n	8004692 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800439a:	4b36      	ldr	r3, [pc, #216]	; (8004474 <HAL_RCC_OscConfig+0x2ac>)
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f003 0302 	and.w	r3, r3, #2
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d1f0      	bne.n	8004388 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f003 0308 	and.w	r3, r3, #8
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d030      	beq.n	8004414 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	695b      	ldr	r3, [r3, #20]
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d016      	beq.n	80043e8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80043ba:	4b30      	ldr	r3, [pc, #192]	; (800447c <HAL_RCC_OscConfig+0x2b4>)
 80043bc:	2201      	movs	r2, #1
 80043be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043c0:	f7fe fc94 	bl	8002cec <HAL_GetTick>
 80043c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80043c6:	e008      	b.n	80043da <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80043c8:	f7fe fc90 	bl	8002cec <HAL_GetTick>
 80043cc:	4602      	mov	r2, r0
 80043ce:	693b      	ldr	r3, [r7, #16]
 80043d0:	1ad3      	subs	r3, r2, r3
 80043d2:	2b02      	cmp	r3, #2
 80043d4:	d901      	bls.n	80043da <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80043d6:	2303      	movs	r3, #3
 80043d8:	e15b      	b.n	8004692 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80043da:	4b26      	ldr	r3, [pc, #152]	; (8004474 <HAL_RCC_OscConfig+0x2ac>)
 80043dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80043de:	f003 0302 	and.w	r3, r3, #2
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d0f0      	beq.n	80043c8 <HAL_RCC_OscConfig+0x200>
 80043e6:	e015      	b.n	8004414 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80043e8:	4b24      	ldr	r3, [pc, #144]	; (800447c <HAL_RCC_OscConfig+0x2b4>)
 80043ea:	2200      	movs	r2, #0
 80043ec:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80043ee:	f7fe fc7d 	bl	8002cec <HAL_GetTick>
 80043f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80043f4:	e008      	b.n	8004408 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80043f6:	f7fe fc79 	bl	8002cec <HAL_GetTick>
 80043fa:	4602      	mov	r2, r0
 80043fc:	693b      	ldr	r3, [r7, #16]
 80043fe:	1ad3      	subs	r3, r2, r3
 8004400:	2b02      	cmp	r3, #2
 8004402:	d901      	bls.n	8004408 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004404:	2303      	movs	r3, #3
 8004406:	e144      	b.n	8004692 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004408:	4b1a      	ldr	r3, [pc, #104]	; (8004474 <HAL_RCC_OscConfig+0x2ac>)
 800440a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800440c:	f003 0302 	and.w	r3, r3, #2
 8004410:	2b00      	cmp	r3, #0
 8004412:	d1f0      	bne.n	80043f6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f003 0304 	and.w	r3, r3, #4
 800441c:	2b00      	cmp	r3, #0
 800441e:	f000 80a0 	beq.w	8004562 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004422:	2300      	movs	r3, #0
 8004424:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004426:	4b13      	ldr	r3, [pc, #76]	; (8004474 <HAL_RCC_OscConfig+0x2ac>)
 8004428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800442a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800442e:	2b00      	cmp	r3, #0
 8004430:	d10f      	bne.n	8004452 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004432:	2300      	movs	r3, #0
 8004434:	60bb      	str	r3, [r7, #8]
 8004436:	4b0f      	ldr	r3, [pc, #60]	; (8004474 <HAL_RCC_OscConfig+0x2ac>)
 8004438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800443a:	4a0e      	ldr	r2, [pc, #56]	; (8004474 <HAL_RCC_OscConfig+0x2ac>)
 800443c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004440:	6413      	str	r3, [r2, #64]	; 0x40
 8004442:	4b0c      	ldr	r3, [pc, #48]	; (8004474 <HAL_RCC_OscConfig+0x2ac>)
 8004444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004446:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800444a:	60bb      	str	r3, [r7, #8]
 800444c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800444e:	2301      	movs	r3, #1
 8004450:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004452:	4b0b      	ldr	r3, [pc, #44]	; (8004480 <HAL_RCC_OscConfig+0x2b8>)
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800445a:	2b00      	cmp	r3, #0
 800445c:	d121      	bne.n	80044a2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800445e:	4b08      	ldr	r3, [pc, #32]	; (8004480 <HAL_RCC_OscConfig+0x2b8>)
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	4a07      	ldr	r2, [pc, #28]	; (8004480 <HAL_RCC_OscConfig+0x2b8>)
 8004464:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004468:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800446a:	f7fe fc3f 	bl	8002cec <HAL_GetTick>
 800446e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004470:	e011      	b.n	8004496 <HAL_RCC_OscConfig+0x2ce>
 8004472:	bf00      	nop
 8004474:	40023800 	.word	0x40023800
 8004478:	42470000 	.word	0x42470000
 800447c:	42470e80 	.word	0x42470e80
 8004480:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004484:	f7fe fc32 	bl	8002cec <HAL_GetTick>
 8004488:	4602      	mov	r2, r0
 800448a:	693b      	ldr	r3, [r7, #16]
 800448c:	1ad3      	subs	r3, r2, r3
 800448e:	2b02      	cmp	r3, #2
 8004490:	d901      	bls.n	8004496 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004492:	2303      	movs	r3, #3
 8004494:	e0fd      	b.n	8004692 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004496:	4b81      	ldr	r3, [pc, #516]	; (800469c <HAL_RCC_OscConfig+0x4d4>)
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d0f0      	beq.n	8004484 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	689b      	ldr	r3, [r3, #8]
 80044a6:	2b01      	cmp	r3, #1
 80044a8:	d106      	bne.n	80044b8 <HAL_RCC_OscConfig+0x2f0>
 80044aa:	4b7d      	ldr	r3, [pc, #500]	; (80046a0 <HAL_RCC_OscConfig+0x4d8>)
 80044ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044ae:	4a7c      	ldr	r2, [pc, #496]	; (80046a0 <HAL_RCC_OscConfig+0x4d8>)
 80044b0:	f043 0301 	orr.w	r3, r3, #1
 80044b4:	6713      	str	r3, [r2, #112]	; 0x70
 80044b6:	e01c      	b.n	80044f2 <HAL_RCC_OscConfig+0x32a>
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	689b      	ldr	r3, [r3, #8]
 80044bc:	2b05      	cmp	r3, #5
 80044be:	d10c      	bne.n	80044da <HAL_RCC_OscConfig+0x312>
 80044c0:	4b77      	ldr	r3, [pc, #476]	; (80046a0 <HAL_RCC_OscConfig+0x4d8>)
 80044c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044c4:	4a76      	ldr	r2, [pc, #472]	; (80046a0 <HAL_RCC_OscConfig+0x4d8>)
 80044c6:	f043 0304 	orr.w	r3, r3, #4
 80044ca:	6713      	str	r3, [r2, #112]	; 0x70
 80044cc:	4b74      	ldr	r3, [pc, #464]	; (80046a0 <HAL_RCC_OscConfig+0x4d8>)
 80044ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044d0:	4a73      	ldr	r2, [pc, #460]	; (80046a0 <HAL_RCC_OscConfig+0x4d8>)
 80044d2:	f043 0301 	orr.w	r3, r3, #1
 80044d6:	6713      	str	r3, [r2, #112]	; 0x70
 80044d8:	e00b      	b.n	80044f2 <HAL_RCC_OscConfig+0x32a>
 80044da:	4b71      	ldr	r3, [pc, #452]	; (80046a0 <HAL_RCC_OscConfig+0x4d8>)
 80044dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044de:	4a70      	ldr	r2, [pc, #448]	; (80046a0 <HAL_RCC_OscConfig+0x4d8>)
 80044e0:	f023 0301 	bic.w	r3, r3, #1
 80044e4:	6713      	str	r3, [r2, #112]	; 0x70
 80044e6:	4b6e      	ldr	r3, [pc, #440]	; (80046a0 <HAL_RCC_OscConfig+0x4d8>)
 80044e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044ea:	4a6d      	ldr	r2, [pc, #436]	; (80046a0 <HAL_RCC_OscConfig+0x4d8>)
 80044ec:	f023 0304 	bic.w	r3, r3, #4
 80044f0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	689b      	ldr	r3, [r3, #8]
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d015      	beq.n	8004526 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044fa:	f7fe fbf7 	bl	8002cec <HAL_GetTick>
 80044fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004500:	e00a      	b.n	8004518 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004502:	f7fe fbf3 	bl	8002cec <HAL_GetTick>
 8004506:	4602      	mov	r2, r0
 8004508:	693b      	ldr	r3, [r7, #16]
 800450a:	1ad3      	subs	r3, r2, r3
 800450c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004510:	4293      	cmp	r3, r2
 8004512:	d901      	bls.n	8004518 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004514:	2303      	movs	r3, #3
 8004516:	e0bc      	b.n	8004692 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004518:	4b61      	ldr	r3, [pc, #388]	; (80046a0 <HAL_RCC_OscConfig+0x4d8>)
 800451a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800451c:	f003 0302 	and.w	r3, r3, #2
 8004520:	2b00      	cmp	r3, #0
 8004522:	d0ee      	beq.n	8004502 <HAL_RCC_OscConfig+0x33a>
 8004524:	e014      	b.n	8004550 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004526:	f7fe fbe1 	bl	8002cec <HAL_GetTick>
 800452a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800452c:	e00a      	b.n	8004544 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800452e:	f7fe fbdd 	bl	8002cec <HAL_GetTick>
 8004532:	4602      	mov	r2, r0
 8004534:	693b      	ldr	r3, [r7, #16]
 8004536:	1ad3      	subs	r3, r2, r3
 8004538:	f241 3288 	movw	r2, #5000	; 0x1388
 800453c:	4293      	cmp	r3, r2
 800453e:	d901      	bls.n	8004544 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004540:	2303      	movs	r3, #3
 8004542:	e0a6      	b.n	8004692 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004544:	4b56      	ldr	r3, [pc, #344]	; (80046a0 <HAL_RCC_OscConfig+0x4d8>)
 8004546:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004548:	f003 0302 	and.w	r3, r3, #2
 800454c:	2b00      	cmp	r3, #0
 800454e:	d1ee      	bne.n	800452e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004550:	7dfb      	ldrb	r3, [r7, #23]
 8004552:	2b01      	cmp	r3, #1
 8004554:	d105      	bne.n	8004562 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004556:	4b52      	ldr	r3, [pc, #328]	; (80046a0 <HAL_RCC_OscConfig+0x4d8>)
 8004558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800455a:	4a51      	ldr	r2, [pc, #324]	; (80046a0 <HAL_RCC_OscConfig+0x4d8>)
 800455c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004560:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	699b      	ldr	r3, [r3, #24]
 8004566:	2b00      	cmp	r3, #0
 8004568:	f000 8092 	beq.w	8004690 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800456c:	4b4c      	ldr	r3, [pc, #304]	; (80046a0 <HAL_RCC_OscConfig+0x4d8>)
 800456e:	689b      	ldr	r3, [r3, #8]
 8004570:	f003 030c 	and.w	r3, r3, #12
 8004574:	2b08      	cmp	r3, #8
 8004576:	d05c      	beq.n	8004632 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	699b      	ldr	r3, [r3, #24]
 800457c:	2b02      	cmp	r3, #2
 800457e:	d141      	bne.n	8004604 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004580:	4b48      	ldr	r3, [pc, #288]	; (80046a4 <HAL_RCC_OscConfig+0x4dc>)
 8004582:	2200      	movs	r2, #0
 8004584:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004586:	f7fe fbb1 	bl	8002cec <HAL_GetTick>
 800458a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800458c:	e008      	b.n	80045a0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800458e:	f7fe fbad 	bl	8002cec <HAL_GetTick>
 8004592:	4602      	mov	r2, r0
 8004594:	693b      	ldr	r3, [r7, #16]
 8004596:	1ad3      	subs	r3, r2, r3
 8004598:	2b02      	cmp	r3, #2
 800459a:	d901      	bls.n	80045a0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800459c:	2303      	movs	r3, #3
 800459e:	e078      	b.n	8004692 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80045a0:	4b3f      	ldr	r3, [pc, #252]	; (80046a0 <HAL_RCC_OscConfig+0x4d8>)
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d1f0      	bne.n	800458e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	69da      	ldr	r2, [r3, #28]
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	6a1b      	ldr	r3, [r3, #32]
 80045b4:	431a      	orrs	r2, r3
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045ba:	019b      	lsls	r3, r3, #6
 80045bc:	431a      	orrs	r2, r3
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045c2:	085b      	lsrs	r3, r3, #1
 80045c4:	3b01      	subs	r3, #1
 80045c6:	041b      	lsls	r3, r3, #16
 80045c8:	431a      	orrs	r2, r3
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045ce:	061b      	lsls	r3, r3, #24
 80045d0:	4933      	ldr	r1, [pc, #204]	; (80046a0 <HAL_RCC_OscConfig+0x4d8>)
 80045d2:	4313      	orrs	r3, r2
 80045d4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80045d6:	4b33      	ldr	r3, [pc, #204]	; (80046a4 <HAL_RCC_OscConfig+0x4dc>)
 80045d8:	2201      	movs	r2, #1
 80045da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045dc:	f7fe fb86 	bl	8002cec <HAL_GetTick>
 80045e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80045e2:	e008      	b.n	80045f6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80045e4:	f7fe fb82 	bl	8002cec <HAL_GetTick>
 80045e8:	4602      	mov	r2, r0
 80045ea:	693b      	ldr	r3, [r7, #16]
 80045ec:	1ad3      	subs	r3, r2, r3
 80045ee:	2b02      	cmp	r3, #2
 80045f0:	d901      	bls.n	80045f6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80045f2:	2303      	movs	r3, #3
 80045f4:	e04d      	b.n	8004692 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80045f6:	4b2a      	ldr	r3, [pc, #168]	; (80046a0 <HAL_RCC_OscConfig+0x4d8>)
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d0f0      	beq.n	80045e4 <HAL_RCC_OscConfig+0x41c>
 8004602:	e045      	b.n	8004690 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004604:	4b27      	ldr	r3, [pc, #156]	; (80046a4 <HAL_RCC_OscConfig+0x4dc>)
 8004606:	2200      	movs	r2, #0
 8004608:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800460a:	f7fe fb6f 	bl	8002cec <HAL_GetTick>
 800460e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004610:	e008      	b.n	8004624 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004612:	f7fe fb6b 	bl	8002cec <HAL_GetTick>
 8004616:	4602      	mov	r2, r0
 8004618:	693b      	ldr	r3, [r7, #16]
 800461a:	1ad3      	subs	r3, r2, r3
 800461c:	2b02      	cmp	r3, #2
 800461e:	d901      	bls.n	8004624 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004620:	2303      	movs	r3, #3
 8004622:	e036      	b.n	8004692 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004624:	4b1e      	ldr	r3, [pc, #120]	; (80046a0 <HAL_RCC_OscConfig+0x4d8>)
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800462c:	2b00      	cmp	r3, #0
 800462e:	d1f0      	bne.n	8004612 <HAL_RCC_OscConfig+0x44a>
 8004630:	e02e      	b.n	8004690 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	699b      	ldr	r3, [r3, #24]
 8004636:	2b01      	cmp	r3, #1
 8004638:	d101      	bne.n	800463e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800463a:	2301      	movs	r3, #1
 800463c:	e029      	b.n	8004692 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800463e:	4b18      	ldr	r3, [pc, #96]	; (80046a0 <HAL_RCC_OscConfig+0x4d8>)
 8004640:	685b      	ldr	r3, [r3, #4]
 8004642:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	69db      	ldr	r3, [r3, #28]
 800464e:	429a      	cmp	r2, r3
 8004650:	d11c      	bne.n	800468c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800465c:	429a      	cmp	r2, r3
 800465e:	d115      	bne.n	800468c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004660:	68fa      	ldr	r2, [r7, #12]
 8004662:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004666:	4013      	ands	r3, r2
 8004668:	687a      	ldr	r2, [r7, #4]
 800466a:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800466c:	4293      	cmp	r3, r2
 800466e:	d10d      	bne.n	800468c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800467a:	429a      	cmp	r2, r3
 800467c:	d106      	bne.n	800468c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004688:	429a      	cmp	r2, r3
 800468a:	d001      	beq.n	8004690 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 800468c:	2301      	movs	r3, #1
 800468e:	e000      	b.n	8004692 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8004690:	2300      	movs	r3, #0
}
 8004692:	4618      	mov	r0, r3
 8004694:	3718      	adds	r7, #24
 8004696:	46bd      	mov	sp, r7
 8004698:	bd80      	pop	{r7, pc}
 800469a:	bf00      	nop
 800469c:	40007000 	.word	0x40007000
 80046a0:	40023800 	.word	0x40023800
 80046a4:	42470060 	.word	0x42470060

080046a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80046a8:	b580      	push	{r7, lr}
 80046aa:	b084      	sub	sp, #16
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	6078      	str	r0, [r7, #4]
 80046b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d101      	bne.n	80046bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80046b8:	2301      	movs	r3, #1
 80046ba:	e0cc      	b.n	8004856 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80046bc:	4b68      	ldr	r3, [pc, #416]	; (8004860 <HAL_RCC_ClockConfig+0x1b8>)
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f003 030f 	and.w	r3, r3, #15
 80046c4:	683a      	ldr	r2, [r7, #0]
 80046c6:	429a      	cmp	r2, r3
 80046c8:	d90c      	bls.n	80046e4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046ca:	4b65      	ldr	r3, [pc, #404]	; (8004860 <HAL_RCC_ClockConfig+0x1b8>)
 80046cc:	683a      	ldr	r2, [r7, #0]
 80046ce:	b2d2      	uxtb	r2, r2
 80046d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80046d2:	4b63      	ldr	r3, [pc, #396]	; (8004860 <HAL_RCC_ClockConfig+0x1b8>)
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f003 030f 	and.w	r3, r3, #15
 80046da:	683a      	ldr	r2, [r7, #0]
 80046dc:	429a      	cmp	r2, r3
 80046de:	d001      	beq.n	80046e4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80046e0:	2301      	movs	r3, #1
 80046e2:	e0b8      	b.n	8004856 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f003 0302 	and.w	r3, r3, #2
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d020      	beq.n	8004732 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f003 0304 	and.w	r3, r3, #4
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d005      	beq.n	8004708 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80046fc:	4b59      	ldr	r3, [pc, #356]	; (8004864 <HAL_RCC_ClockConfig+0x1bc>)
 80046fe:	689b      	ldr	r3, [r3, #8]
 8004700:	4a58      	ldr	r2, [pc, #352]	; (8004864 <HAL_RCC_ClockConfig+0x1bc>)
 8004702:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004706:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f003 0308 	and.w	r3, r3, #8
 8004710:	2b00      	cmp	r3, #0
 8004712:	d005      	beq.n	8004720 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004714:	4b53      	ldr	r3, [pc, #332]	; (8004864 <HAL_RCC_ClockConfig+0x1bc>)
 8004716:	689b      	ldr	r3, [r3, #8]
 8004718:	4a52      	ldr	r2, [pc, #328]	; (8004864 <HAL_RCC_ClockConfig+0x1bc>)
 800471a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800471e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004720:	4b50      	ldr	r3, [pc, #320]	; (8004864 <HAL_RCC_ClockConfig+0x1bc>)
 8004722:	689b      	ldr	r3, [r3, #8]
 8004724:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	689b      	ldr	r3, [r3, #8]
 800472c:	494d      	ldr	r1, [pc, #308]	; (8004864 <HAL_RCC_ClockConfig+0x1bc>)
 800472e:	4313      	orrs	r3, r2
 8004730:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f003 0301 	and.w	r3, r3, #1
 800473a:	2b00      	cmp	r3, #0
 800473c:	d044      	beq.n	80047c8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	685b      	ldr	r3, [r3, #4]
 8004742:	2b01      	cmp	r3, #1
 8004744:	d107      	bne.n	8004756 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004746:	4b47      	ldr	r3, [pc, #284]	; (8004864 <HAL_RCC_ClockConfig+0x1bc>)
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800474e:	2b00      	cmp	r3, #0
 8004750:	d119      	bne.n	8004786 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004752:	2301      	movs	r3, #1
 8004754:	e07f      	b.n	8004856 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	685b      	ldr	r3, [r3, #4]
 800475a:	2b02      	cmp	r3, #2
 800475c:	d003      	beq.n	8004766 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004762:	2b03      	cmp	r3, #3
 8004764:	d107      	bne.n	8004776 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004766:	4b3f      	ldr	r3, [pc, #252]	; (8004864 <HAL_RCC_ClockConfig+0x1bc>)
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800476e:	2b00      	cmp	r3, #0
 8004770:	d109      	bne.n	8004786 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004772:	2301      	movs	r3, #1
 8004774:	e06f      	b.n	8004856 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004776:	4b3b      	ldr	r3, [pc, #236]	; (8004864 <HAL_RCC_ClockConfig+0x1bc>)
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f003 0302 	and.w	r3, r3, #2
 800477e:	2b00      	cmp	r3, #0
 8004780:	d101      	bne.n	8004786 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004782:	2301      	movs	r3, #1
 8004784:	e067      	b.n	8004856 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004786:	4b37      	ldr	r3, [pc, #220]	; (8004864 <HAL_RCC_ClockConfig+0x1bc>)
 8004788:	689b      	ldr	r3, [r3, #8]
 800478a:	f023 0203 	bic.w	r2, r3, #3
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	685b      	ldr	r3, [r3, #4]
 8004792:	4934      	ldr	r1, [pc, #208]	; (8004864 <HAL_RCC_ClockConfig+0x1bc>)
 8004794:	4313      	orrs	r3, r2
 8004796:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004798:	f7fe faa8 	bl	8002cec <HAL_GetTick>
 800479c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800479e:	e00a      	b.n	80047b6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80047a0:	f7fe faa4 	bl	8002cec <HAL_GetTick>
 80047a4:	4602      	mov	r2, r0
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	1ad3      	subs	r3, r2, r3
 80047aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80047ae:	4293      	cmp	r3, r2
 80047b0:	d901      	bls.n	80047b6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80047b2:	2303      	movs	r3, #3
 80047b4:	e04f      	b.n	8004856 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047b6:	4b2b      	ldr	r3, [pc, #172]	; (8004864 <HAL_RCC_ClockConfig+0x1bc>)
 80047b8:	689b      	ldr	r3, [r3, #8]
 80047ba:	f003 020c 	and.w	r2, r3, #12
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	685b      	ldr	r3, [r3, #4]
 80047c2:	009b      	lsls	r3, r3, #2
 80047c4:	429a      	cmp	r2, r3
 80047c6:	d1eb      	bne.n	80047a0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80047c8:	4b25      	ldr	r3, [pc, #148]	; (8004860 <HAL_RCC_ClockConfig+0x1b8>)
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f003 030f 	and.w	r3, r3, #15
 80047d0:	683a      	ldr	r2, [r7, #0]
 80047d2:	429a      	cmp	r2, r3
 80047d4:	d20c      	bcs.n	80047f0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047d6:	4b22      	ldr	r3, [pc, #136]	; (8004860 <HAL_RCC_ClockConfig+0x1b8>)
 80047d8:	683a      	ldr	r2, [r7, #0]
 80047da:	b2d2      	uxtb	r2, r2
 80047dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80047de:	4b20      	ldr	r3, [pc, #128]	; (8004860 <HAL_RCC_ClockConfig+0x1b8>)
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f003 030f 	and.w	r3, r3, #15
 80047e6:	683a      	ldr	r2, [r7, #0]
 80047e8:	429a      	cmp	r2, r3
 80047ea:	d001      	beq.n	80047f0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80047ec:	2301      	movs	r3, #1
 80047ee:	e032      	b.n	8004856 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f003 0304 	and.w	r3, r3, #4
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d008      	beq.n	800480e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80047fc:	4b19      	ldr	r3, [pc, #100]	; (8004864 <HAL_RCC_ClockConfig+0x1bc>)
 80047fe:	689b      	ldr	r3, [r3, #8]
 8004800:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	68db      	ldr	r3, [r3, #12]
 8004808:	4916      	ldr	r1, [pc, #88]	; (8004864 <HAL_RCC_ClockConfig+0x1bc>)
 800480a:	4313      	orrs	r3, r2
 800480c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f003 0308 	and.w	r3, r3, #8
 8004816:	2b00      	cmp	r3, #0
 8004818:	d009      	beq.n	800482e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800481a:	4b12      	ldr	r3, [pc, #72]	; (8004864 <HAL_RCC_ClockConfig+0x1bc>)
 800481c:	689b      	ldr	r3, [r3, #8]
 800481e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	691b      	ldr	r3, [r3, #16]
 8004826:	00db      	lsls	r3, r3, #3
 8004828:	490e      	ldr	r1, [pc, #56]	; (8004864 <HAL_RCC_ClockConfig+0x1bc>)
 800482a:	4313      	orrs	r3, r2
 800482c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800482e:	f000 f821 	bl	8004874 <HAL_RCC_GetSysClockFreq>
 8004832:	4602      	mov	r2, r0
 8004834:	4b0b      	ldr	r3, [pc, #44]	; (8004864 <HAL_RCC_ClockConfig+0x1bc>)
 8004836:	689b      	ldr	r3, [r3, #8]
 8004838:	091b      	lsrs	r3, r3, #4
 800483a:	f003 030f 	and.w	r3, r3, #15
 800483e:	490a      	ldr	r1, [pc, #40]	; (8004868 <HAL_RCC_ClockConfig+0x1c0>)
 8004840:	5ccb      	ldrb	r3, [r1, r3]
 8004842:	fa22 f303 	lsr.w	r3, r2, r3
 8004846:	4a09      	ldr	r2, [pc, #36]	; (800486c <HAL_RCC_ClockConfig+0x1c4>)
 8004848:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800484a:	4b09      	ldr	r3, [pc, #36]	; (8004870 <HAL_RCC_ClockConfig+0x1c8>)
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	4618      	mov	r0, r3
 8004850:	f7fe fa08 	bl	8002c64 <HAL_InitTick>

  return HAL_OK;
 8004854:	2300      	movs	r3, #0
}
 8004856:	4618      	mov	r0, r3
 8004858:	3710      	adds	r7, #16
 800485a:	46bd      	mov	sp, r7
 800485c:	bd80      	pop	{r7, pc}
 800485e:	bf00      	nop
 8004860:	40023c00 	.word	0x40023c00
 8004864:	40023800 	.word	0x40023800
 8004868:	0800b460 	.word	0x0800b460
 800486c:	20000010 	.word	0x20000010
 8004870:	20000014 	.word	0x20000014

08004874 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004874:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004878:	b084      	sub	sp, #16
 800487a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800487c:	2300      	movs	r3, #0
 800487e:	607b      	str	r3, [r7, #4]
 8004880:	2300      	movs	r3, #0
 8004882:	60fb      	str	r3, [r7, #12]
 8004884:	2300      	movs	r3, #0
 8004886:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004888:	2300      	movs	r3, #0
 800488a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800488c:	4b67      	ldr	r3, [pc, #412]	; (8004a2c <HAL_RCC_GetSysClockFreq+0x1b8>)
 800488e:	689b      	ldr	r3, [r3, #8]
 8004890:	f003 030c 	and.w	r3, r3, #12
 8004894:	2b08      	cmp	r3, #8
 8004896:	d00d      	beq.n	80048b4 <HAL_RCC_GetSysClockFreq+0x40>
 8004898:	2b08      	cmp	r3, #8
 800489a:	f200 80bd 	bhi.w	8004a18 <HAL_RCC_GetSysClockFreq+0x1a4>
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d002      	beq.n	80048a8 <HAL_RCC_GetSysClockFreq+0x34>
 80048a2:	2b04      	cmp	r3, #4
 80048a4:	d003      	beq.n	80048ae <HAL_RCC_GetSysClockFreq+0x3a>
 80048a6:	e0b7      	b.n	8004a18 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80048a8:	4b61      	ldr	r3, [pc, #388]	; (8004a30 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80048aa:	60bb      	str	r3, [r7, #8]
       break;
 80048ac:	e0b7      	b.n	8004a1e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80048ae:	4b61      	ldr	r3, [pc, #388]	; (8004a34 <HAL_RCC_GetSysClockFreq+0x1c0>)
 80048b0:	60bb      	str	r3, [r7, #8]
      break;
 80048b2:	e0b4      	b.n	8004a1e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80048b4:	4b5d      	ldr	r3, [pc, #372]	; (8004a2c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80048b6:	685b      	ldr	r3, [r3, #4]
 80048b8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80048bc:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80048be:	4b5b      	ldr	r3, [pc, #364]	; (8004a2c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80048c0:	685b      	ldr	r3, [r3, #4]
 80048c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d04d      	beq.n	8004966 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80048ca:	4b58      	ldr	r3, [pc, #352]	; (8004a2c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80048cc:	685b      	ldr	r3, [r3, #4]
 80048ce:	099b      	lsrs	r3, r3, #6
 80048d0:	461a      	mov	r2, r3
 80048d2:	f04f 0300 	mov.w	r3, #0
 80048d6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80048da:	f04f 0100 	mov.w	r1, #0
 80048de:	ea02 0800 	and.w	r8, r2, r0
 80048e2:	ea03 0901 	and.w	r9, r3, r1
 80048e6:	4640      	mov	r0, r8
 80048e8:	4649      	mov	r1, r9
 80048ea:	f04f 0200 	mov.w	r2, #0
 80048ee:	f04f 0300 	mov.w	r3, #0
 80048f2:	014b      	lsls	r3, r1, #5
 80048f4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80048f8:	0142      	lsls	r2, r0, #5
 80048fa:	4610      	mov	r0, r2
 80048fc:	4619      	mov	r1, r3
 80048fe:	ebb0 0008 	subs.w	r0, r0, r8
 8004902:	eb61 0109 	sbc.w	r1, r1, r9
 8004906:	f04f 0200 	mov.w	r2, #0
 800490a:	f04f 0300 	mov.w	r3, #0
 800490e:	018b      	lsls	r3, r1, #6
 8004910:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004914:	0182      	lsls	r2, r0, #6
 8004916:	1a12      	subs	r2, r2, r0
 8004918:	eb63 0301 	sbc.w	r3, r3, r1
 800491c:	f04f 0000 	mov.w	r0, #0
 8004920:	f04f 0100 	mov.w	r1, #0
 8004924:	00d9      	lsls	r1, r3, #3
 8004926:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800492a:	00d0      	lsls	r0, r2, #3
 800492c:	4602      	mov	r2, r0
 800492e:	460b      	mov	r3, r1
 8004930:	eb12 0208 	adds.w	r2, r2, r8
 8004934:	eb43 0309 	adc.w	r3, r3, r9
 8004938:	f04f 0000 	mov.w	r0, #0
 800493c:	f04f 0100 	mov.w	r1, #0
 8004940:	0259      	lsls	r1, r3, #9
 8004942:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8004946:	0250      	lsls	r0, r2, #9
 8004948:	4602      	mov	r2, r0
 800494a:	460b      	mov	r3, r1
 800494c:	4610      	mov	r0, r2
 800494e:	4619      	mov	r1, r3
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	461a      	mov	r2, r3
 8004954:	f04f 0300 	mov.w	r3, #0
 8004958:	f7fc f99e 	bl	8000c98 <__aeabi_uldivmod>
 800495c:	4602      	mov	r2, r0
 800495e:	460b      	mov	r3, r1
 8004960:	4613      	mov	r3, r2
 8004962:	60fb      	str	r3, [r7, #12]
 8004964:	e04a      	b.n	80049fc <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004966:	4b31      	ldr	r3, [pc, #196]	; (8004a2c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004968:	685b      	ldr	r3, [r3, #4]
 800496a:	099b      	lsrs	r3, r3, #6
 800496c:	461a      	mov	r2, r3
 800496e:	f04f 0300 	mov.w	r3, #0
 8004972:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004976:	f04f 0100 	mov.w	r1, #0
 800497a:	ea02 0400 	and.w	r4, r2, r0
 800497e:	ea03 0501 	and.w	r5, r3, r1
 8004982:	4620      	mov	r0, r4
 8004984:	4629      	mov	r1, r5
 8004986:	f04f 0200 	mov.w	r2, #0
 800498a:	f04f 0300 	mov.w	r3, #0
 800498e:	014b      	lsls	r3, r1, #5
 8004990:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004994:	0142      	lsls	r2, r0, #5
 8004996:	4610      	mov	r0, r2
 8004998:	4619      	mov	r1, r3
 800499a:	1b00      	subs	r0, r0, r4
 800499c:	eb61 0105 	sbc.w	r1, r1, r5
 80049a0:	f04f 0200 	mov.w	r2, #0
 80049a4:	f04f 0300 	mov.w	r3, #0
 80049a8:	018b      	lsls	r3, r1, #6
 80049aa:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80049ae:	0182      	lsls	r2, r0, #6
 80049b0:	1a12      	subs	r2, r2, r0
 80049b2:	eb63 0301 	sbc.w	r3, r3, r1
 80049b6:	f04f 0000 	mov.w	r0, #0
 80049ba:	f04f 0100 	mov.w	r1, #0
 80049be:	00d9      	lsls	r1, r3, #3
 80049c0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80049c4:	00d0      	lsls	r0, r2, #3
 80049c6:	4602      	mov	r2, r0
 80049c8:	460b      	mov	r3, r1
 80049ca:	1912      	adds	r2, r2, r4
 80049cc:	eb45 0303 	adc.w	r3, r5, r3
 80049d0:	f04f 0000 	mov.w	r0, #0
 80049d4:	f04f 0100 	mov.w	r1, #0
 80049d8:	0299      	lsls	r1, r3, #10
 80049da:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80049de:	0290      	lsls	r0, r2, #10
 80049e0:	4602      	mov	r2, r0
 80049e2:	460b      	mov	r3, r1
 80049e4:	4610      	mov	r0, r2
 80049e6:	4619      	mov	r1, r3
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	461a      	mov	r2, r3
 80049ec:	f04f 0300 	mov.w	r3, #0
 80049f0:	f7fc f952 	bl	8000c98 <__aeabi_uldivmod>
 80049f4:	4602      	mov	r2, r0
 80049f6:	460b      	mov	r3, r1
 80049f8:	4613      	mov	r3, r2
 80049fa:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80049fc:	4b0b      	ldr	r3, [pc, #44]	; (8004a2c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80049fe:	685b      	ldr	r3, [r3, #4]
 8004a00:	0c1b      	lsrs	r3, r3, #16
 8004a02:	f003 0303 	and.w	r3, r3, #3
 8004a06:	3301      	adds	r3, #1
 8004a08:	005b      	lsls	r3, r3, #1
 8004a0a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004a0c:	68fa      	ldr	r2, [r7, #12]
 8004a0e:	683b      	ldr	r3, [r7, #0]
 8004a10:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a14:	60bb      	str	r3, [r7, #8]
      break;
 8004a16:	e002      	b.n	8004a1e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004a18:	4b05      	ldr	r3, [pc, #20]	; (8004a30 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004a1a:	60bb      	str	r3, [r7, #8]
      break;
 8004a1c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004a1e:	68bb      	ldr	r3, [r7, #8]
}
 8004a20:	4618      	mov	r0, r3
 8004a22:	3710      	adds	r7, #16
 8004a24:	46bd      	mov	sp, r7
 8004a26:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8004a2a:	bf00      	nop
 8004a2c:	40023800 	.word	0x40023800
 8004a30:	00f42400 	.word	0x00f42400
 8004a34:	007a1200 	.word	0x007a1200

08004a38 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004a38:	b480      	push	{r7}
 8004a3a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004a3c:	4b03      	ldr	r3, [pc, #12]	; (8004a4c <HAL_RCC_GetHCLKFreq+0x14>)
 8004a3e:	681b      	ldr	r3, [r3, #0]
}
 8004a40:	4618      	mov	r0, r3
 8004a42:	46bd      	mov	sp, r7
 8004a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a48:	4770      	bx	lr
 8004a4a:	bf00      	nop
 8004a4c:	20000010 	.word	0x20000010

08004a50 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004a50:	b580      	push	{r7, lr}
 8004a52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004a54:	f7ff fff0 	bl	8004a38 <HAL_RCC_GetHCLKFreq>
 8004a58:	4602      	mov	r2, r0
 8004a5a:	4b05      	ldr	r3, [pc, #20]	; (8004a70 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004a5c:	689b      	ldr	r3, [r3, #8]
 8004a5e:	0a9b      	lsrs	r3, r3, #10
 8004a60:	f003 0307 	and.w	r3, r3, #7
 8004a64:	4903      	ldr	r1, [pc, #12]	; (8004a74 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004a66:	5ccb      	ldrb	r3, [r1, r3]
 8004a68:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004a6c:	4618      	mov	r0, r3
 8004a6e:	bd80      	pop	{r7, pc}
 8004a70:	40023800 	.word	0x40023800
 8004a74:	0800b470 	.word	0x0800b470

08004a78 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004a78:	b580      	push	{r7, lr}
 8004a7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004a7c:	f7ff ffdc 	bl	8004a38 <HAL_RCC_GetHCLKFreq>
 8004a80:	4602      	mov	r2, r0
 8004a82:	4b05      	ldr	r3, [pc, #20]	; (8004a98 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004a84:	689b      	ldr	r3, [r3, #8]
 8004a86:	0b5b      	lsrs	r3, r3, #13
 8004a88:	f003 0307 	and.w	r3, r3, #7
 8004a8c:	4903      	ldr	r1, [pc, #12]	; (8004a9c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004a8e:	5ccb      	ldrb	r3, [r1, r3]
 8004a90:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004a94:	4618      	mov	r0, r3
 8004a96:	bd80      	pop	{r7, pc}
 8004a98:	40023800 	.word	0x40023800
 8004a9c:	0800b470 	.word	0x0800b470

08004aa0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004aa0:	b580      	push	{r7, lr}
 8004aa2:	b082      	sub	sp, #8
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d101      	bne.n	8004ab2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004aae:	2301      	movs	r3, #1
 8004ab0:	e056      	b.n	8004b60 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	2200      	movs	r2, #0
 8004ab6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004abe:	b2db      	uxtb	r3, r3
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d106      	bne.n	8004ad2 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	2200      	movs	r2, #0
 8004ac8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004acc:	6878      	ldr	r0, [r7, #4]
 8004ace:	f7fd fe67 	bl	80027a0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	2202      	movs	r2, #2
 8004ad6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	681a      	ldr	r2, [r3, #0]
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004ae8:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	685a      	ldr	r2, [r3, #4]
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	689b      	ldr	r3, [r3, #8]
 8004af2:	431a      	orrs	r2, r3
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	68db      	ldr	r3, [r3, #12]
 8004af8:	431a      	orrs	r2, r3
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	691b      	ldr	r3, [r3, #16]
 8004afe:	431a      	orrs	r2, r3
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	695b      	ldr	r3, [r3, #20]
 8004b04:	431a      	orrs	r2, r3
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	699b      	ldr	r3, [r3, #24]
 8004b0a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004b0e:	431a      	orrs	r2, r3
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	69db      	ldr	r3, [r3, #28]
 8004b14:	431a      	orrs	r2, r3
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	6a1b      	ldr	r3, [r3, #32]
 8004b1a:	ea42 0103 	orr.w	r1, r2, r3
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	430a      	orrs	r2, r1
 8004b28:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	699b      	ldr	r3, [r3, #24]
 8004b2e:	0c1b      	lsrs	r3, r3, #16
 8004b30:	f003 0104 	and.w	r1, r3, #4
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	430a      	orrs	r2, r1
 8004b3e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	69da      	ldr	r2, [r3, #28]
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004b4e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	2200      	movs	r2, #0
 8004b54:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	2201      	movs	r2, #1
 8004b5a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004b5e:	2300      	movs	r3, #0
}
 8004b60:	4618      	mov	r0, r3
 8004b62:	3708      	adds	r7, #8
 8004b64:	46bd      	mov	sp, r7
 8004b66:	bd80      	pop	{r7, pc}

08004b68 <HAL_SPI_Transmit_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8004b68:	b480      	push	{r7}
 8004b6a:	b087      	sub	sp, #28
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	60f8      	str	r0, [r7, #12]
 8004b70:	60b9      	str	r1, [r7, #8]
 8004b72:	4613      	mov	r3, r2
 8004b74:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004b76:	2300      	movs	r3, #0
 8004b78:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004b80:	2b01      	cmp	r3, #1
 8004b82:	d101      	bne.n	8004b88 <HAL_SPI_Transmit_IT+0x20>
 8004b84:	2302      	movs	r3, #2
 8004b86:	e067      	b.n	8004c58 <HAL_SPI_Transmit_IT+0xf0>
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	2201      	movs	r2, #1
 8004b8c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if ((pData == NULL) || (Size == 0U))
 8004b90:	68bb      	ldr	r3, [r7, #8]
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d002      	beq.n	8004b9c <HAL_SPI_Transmit_IT+0x34>
 8004b96:	88fb      	ldrh	r3, [r7, #6]
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d102      	bne.n	8004ba2 <HAL_SPI_Transmit_IT+0x3a>
  {
    errorcode = HAL_ERROR;
 8004b9c:	2301      	movs	r3, #1
 8004b9e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004ba0:	e055      	b.n	8004c4e <HAL_SPI_Transmit_IT+0xe6>
  }

  if (hspi->State != HAL_SPI_STATE_READY)
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004ba8:	b2db      	uxtb	r3, r3
 8004baa:	2b01      	cmp	r3, #1
 8004bac:	d002      	beq.n	8004bb4 <HAL_SPI_Transmit_IT+0x4c>
  {
    errorcode = HAL_BUSY;
 8004bae:	2302      	movs	r3, #2
 8004bb0:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004bb2:	e04c      	b.n	8004c4e <HAL_SPI_Transmit_IT+0xe6>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	2203      	movs	r2, #3
 8004bb8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	2200      	movs	r2, #0
 8004bc0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	68ba      	ldr	r2, [r7, #8]
 8004bc6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	88fa      	ldrh	r2, [r7, #6]
 8004bcc:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	88fa      	ldrh	r2, [r7, #6]
 8004bd2:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	2200      	movs	r2, #0
 8004bd8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	2200      	movs	r2, #0
 8004bde:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	2200      	movs	r2, #0
 8004be4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	2200      	movs	r2, #0
 8004bea:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	68db      	ldr	r3, [r3, #12]
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d003      	beq.n	8004bfc <HAL_SPI_Transmit_IT+0x94>
  {
    hspi->TxISR = SPI_TxISR_16BIT;
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	4a1b      	ldr	r2, [pc, #108]	; (8004c64 <HAL_SPI_Transmit_IT+0xfc>)
 8004bf8:	645a      	str	r2, [r3, #68]	; 0x44
 8004bfa:	e002      	b.n	8004c02 <HAL_SPI_Transmit_IT+0x9a>
  }
  else
  {
    hspi->TxISR = SPI_TxISR_8BIT;
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	4a1a      	ldr	r2, [pc, #104]	; (8004c68 <HAL_SPI_Transmit_IT+0x100>)
 8004c00:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	689b      	ldr	r3, [r3, #8]
 8004c06:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004c0a:	d107      	bne.n	8004c1c <HAL_SPI_Transmit_IT+0xb4>
  {
    SPI_1LINE_TX(hspi);
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	681a      	ldr	r2, [r3, #0]
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004c1a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	685a      	ldr	r2, [r3, #4]
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f042 02a0 	orr.w	r2, r2, #160	; 0xa0
 8004c2a:	605a      	str	r2, [r3, #4]


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c36:	2b40      	cmp	r3, #64	; 0x40
 8004c38:	d008      	beq.n	8004c4c <HAL_SPI_Transmit_IT+0xe4>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	681a      	ldr	r2, [r3, #0]
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004c48:	601a      	str	r2, [r3, #0]
 8004c4a:	e000      	b.n	8004c4e <HAL_SPI_Transmit_IT+0xe6>
  }

error :
 8004c4c:	bf00      	nop
  __HAL_UNLOCK(hspi);
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	2200      	movs	r2, #0
 8004c52:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004c56:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c58:	4618      	mov	r0, r3
 8004c5a:	371c      	adds	r7, #28
 8004c5c:	46bd      	mov	sp, r7
 8004c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c62:	4770      	bx	lr
 8004c64:	08004eef 	.word	0x08004eef
 8004c68:	08004ea9 	.word	0x08004ea9

08004c6c <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8004c6c:	b580      	push	{r7, lr}
 8004c6e:	b088      	sub	sp, #32
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	685b      	ldr	r3, [r3, #4]
 8004c7a:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	689b      	ldr	r3, [r3, #8]
 8004c82:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004c84:	69bb      	ldr	r3, [r7, #24]
 8004c86:	099b      	lsrs	r3, r3, #6
 8004c88:	f003 0301 	and.w	r3, r3, #1
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d10f      	bne.n	8004cb0 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004c90:	69bb      	ldr	r3, [r7, #24]
 8004c92:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d00a      	beq.n	8004cb0 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004c9a:	69fb      	ldr	r3, [r7, #28]
 8004c9c:	099b      	lsrs	r3, r3, #6
 8004c9e:	f003 0301 	and.w	r3, r3, #1
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d004      	beq.n	8004cb0 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004caa:	6878      	ldr	r0, [r7, #4]
 8004cac:	4798      	blx	r3
    return;
 8004cae:	e0d7      	b.n	8004e60 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8004cb0:	69bb      	ldr	r3, [r7, #24]
 8004cb2:	085b      	lsrs	r3, r3, #1
 8004cb4:	f003 0301 	and.w	r3, r3, #1
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d00a      	beq.n	8004cd2 <HAL_SPI_IRQHandler+0x66>
 8004cbc:	69fb      	ldr	r3, [r7, #28]
 8004cbe:	09db      	lsrs	r3, r3, #7
 8004cc0:	f003 0301 	and.w	r3, r3, #1
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d004      	beq.n	8004cd2 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ccc:	6878      	ldr	r0, [r7, #4]
 8004cce:	4798      	blx	r3
    return;
 8004cd0:	e0c6      	b.n	8004e60 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8004cd2:	69bb      	ldr	r3, [r7, #24]
 8004cd4:	095b      	lsrs	r3, r3, #5
 8004cd6:	f003 0301 	and.w	r3, r3, #1
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d10c      	bne.n	8004cf8 <HAL_SPI_IRQHandler+0x8c>
 8004cde:	69bb      	ldr	r3, [r7, #24]
 8004ce0:	099b      	lsrs	r3, r3, #6
 8004ce2:	f003 0301 	and.w	r3, r3, #1
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d106      	bne.n	8004cf8 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8004cea:	69bb      	ldr	r3, [r7, #24]
 8004cec:	0a1b      	lsrs	r3, r3, #8
 8004cee:	f003 0301 	and.w	r3, r3, #1
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	f000 80b4 	beq.w	8004e60 <HAL_SPI_IRQHandler+0x1f4>
 8004cf8:	69fb      	ldr	r3, [r7, #28]
 8004cfa:	095b      	lsrs	r3, r3, #5
 8004cfc:	f003 0301 	and.w	r3, r3, #1
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	f000 80ad 	beq.w	8004e60 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8004d06:	69bb      	ldr	r3, [r7, #24]
 8004d08:	099b      	lsrs	r3, r3, #6
 8004d0a:	f003 0301 	and.w	r3, r3, #1
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d023      	beq.n	8004d5a <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004d18:	b2db      	uxtb	r3, r3
 8004d1a:	2b03      	cmp	r3, #3
 8004d1c:	d011      	beq.n	8004d42 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d22:	f043 0204 	orr.w	r2, r3, #4
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004d2a:	2300      	movs	r3, #0
 8004d2c:	617b      	str	r3, [r7, #20]
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	68db      	ldr	r3, [r3, #12]
 8004d34:	617b      	str	r3, [r7, #20]
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	689b      	ldr	r3, [r3, #8]
 8004d3c:	617b      	str	r3, [r7, #20]
 8004d3e:	697b      	ldr	r3, [r7, #20]
 8004d40:	e00b      	b.n	8004d5a <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004d42:	2300      	movs	r3, #0
 8004d44:	613b      	str	r3, [r7, #16]
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	68db      	ldr	r3, [r3, #12]
 8004d4c:	613b      	str	r3, [r7, #16]
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	689b      	ldr	r3, [r3, #8]
 8004d54:	613b      	str	r3, [r7, #16]
 8004d56:	693b      	ldr	r3, [r7, #16]
        return;
 8004d58:	e082      	b.n	8004e60 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8004d5a:	69bb      	ldr	r3, [r7, #24]
 8004d5c:	095b      	lsrs	r3, r3, #5
 8004d5e:	f003 0301 	and.w	r3, r3, #1
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d014      	beq.n	8004d90 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d6a:	f043 0201 	orr.w	r2, r3, #1
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8004d72:	2300      	movs	r3, #0
 8004d74:	60fb      	str	r3, [r7, #12]
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	689b      	ldr	r3, [r3, #8]
 8004d7c:	60fb      	str	r3, [r7, #12]
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	681a      	ldr	r2, [r3, #0]
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d8c:	601a      	str	r2, [r3, #0]
 8004d8e:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8004d90:	69bb      	ldr	r3, [r7, #24]
 8004d92:	0a1b      	lsrs	r3, r3, #8
 8004d94:	f003 0301 	and.w	r3, r3, #1
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d00c      	beq.n	8004db6 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004da0:	f043 0208 	orr.w	r2, r3, #8
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8004da8:	2300      	movs	r3, #0
 8004daa:	60bb      	str	r3, [r7, #8]
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	689b      	ldr	r3, [r3, #8]
 8004db2:	60bb      	str	r3, [r7, #8]
 8004db4:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d04f      	beq.n	8004e5e <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	685a      	ldr	r2, [r3, #4]
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004dcc:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	2201      	movs	r2, #1
 8004dd2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8004dd6:	69fb      	ldr	r3, [r7, #28]
 8004dd8:	f003 0302 	and.w	r3, r3, #2
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d104      	bne.n	8004dea <HAL_SPI_IRQHandler+0x17e>
 8004de0:	69fb      	ldr	r3, [r7, #28]
 8004de2:	f003 0301 	and.w	r3, r3, #1
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d034      	beq.n	8004e54 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	685a      	ldr	r2, [r3, #4]
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f022 0203 	bic.w	r2, r2, #3
 8004df8:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d011      	beq.n	8004e26 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e06:	4a18      	ldr	r2, [pc, #96]	; (8004e68 <HAL_SPI_IRQHandler+0x1fc>)
 8004e08:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e0e:	4618      	mov	r0, r3
 8004e10:	f7fe fd98 	bl	8003944 <HAL_DMA_Abort_IT>
 8004e14:	4603      	mov	r3, r0
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d005      	beq.n	8004e26 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e1e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d016      	beq.n	8004e5c <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e32:	4a0d      	ldr	r2, [pc, #52]	; (8004e68 <HAL_SPI_IRQHandler+0x1fc>)
 8004e34:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e3a:	4618      	mov	r0, r3
 8004e3c:	f7fe fd82 	bl	8003944 <HAL_DMA_Abort_IT>
 8004e40:	4603      	mov	r3, r0
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d00a      	beq.n	8004e5c <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e4a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8004e52:	e003      	b.n	8004e5c <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8004e54:	6878      	ldr	r0, [r7, #4]
 8004e56:	f000 f809 	bl	8004e6c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8004e5a:	e000      	b.n	8004e5e <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8004e5c:	bf00      	nop
    return;
 8004e5e:	bf00      	nop
  }
}
 8004e60:	3720      	adds	r7, #32
 8004e62:	46bd      	mov	sp, r7
 8004e64:	bd80      	pop	{r7, pc}
 8004e66:	bf00      	nop
 8004e68:	08004e81 	.word	0x08004e81

08004e6c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8004e6c:	b480      	push	{r7}
 8004e6e:	b083      	sub	sp, #12
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8004e74:	bf00      	nop
 8004e76:	370c      	adds	r7, #12
 8004e78:	46bd      	mov	sp, r7
 8004e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e7e:	4770      	bx	lr

08004e80 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004e80:	b580      	push	{r7, lr}
 8004e82:	b084      	sub	sp, #16
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e8c:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	2200      	movs	r2, #0
 8004e92:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	2200      	movs	r2, #0
 8004e98:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8004e9a:	68f8      	ldr	r0, [r7, #12]
 8004e9c:	f7ff ffe6 	bl	8004e6c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004ea0:	bf00      	nop
 8004ea2:	3710      	adds	r7, #16
 8004ea4:	46bd      	mov	sp, r7
 8004ea6:	bd80      	pop	{r7, pc}

08004ea8 <SPI_TxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8004ea8:	b580      	push	{r7, lr}
 8004eaa:	b082      	sub	sp, #8
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	330c      	adds	r3, #12
 8004eba:	7812      	ldrb	r2, [r2, #0]
 8004ebc:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ec2:	1c5a      	adds	r2, r3, #1
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004ecc:	b29b      	uxth	r3, r3
 8004ece:	3b01      	subs	r3, #1
 8004ed0:	b29a      	uxth	r2, r3
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	86da      	strh	r2, [r3, #54]	; 0x36

  if (hspi->TxXferCount == 0U)
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004eda:	b29b      	uxth	r3, r3
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d102      	bne.n	8004ee6 <SPI_TxISR_8BIT+0x3e>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 8004ee0:	6878      	ldr	r0, [r7, #4]
 8004ee2:	f000 f8d3 	bl	800508c <SPI_CloseTx_ISR>
  }
}
 8004ee6:	bf00      	nop
 8004ee8:	3708      	adds	r7, #8
 8004eea:	46bd      	mov	sp, r7
 8004eec:	bd80      	pop	{r7, pc}

08004eee <SPI_TxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8004eee:	b580      	push	{r7, lr}
 8004ef0:	b082      	sub	sp, #8
 8004ef2:	af00      	add	r7, sp, #0
 8004ef4:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004efa:	881a      	ldrh	r2, [r3, #0]
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f06:	1c9a      	adds	r2, r3, #2
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004f10:	b29b      	uxth	r3, r3
 8004f12:	3b01      	subs	r3, #1
 8004f14:	b29a      	uxth	r2, r3
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	86da      	strh	r2, [r3, #54]	; 0x36

  if (hspi->TxXferCount == 0U)
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004f1e:	b29b      	uxth	r3, r3
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d102      	bne.n	8004f2a <SPI_TxISR_16BIT+0x3c>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 8004f24:	6878      	ldr	r0, [r7, #4]
 8004f26:	f000 f8b1 	bl	800508c <SPI_CloseTx_ISR>
  }
}
 8004f2a:	bf00      	nop
 8004f2c:	3708      	adds	r7, #8
 8004f2e:	46bd      	mov	sp, r7
 8004f30:	bd80      	pop	{r7, pc}

08004f32 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004f32:	b580      	push	{r7, lr}
 8004f34:	b084      	sub	sp, #16
 8004f36:	af00      	add	r7, sp, #0
 8004f38:	60f8      	str	r0, [r7, #12]
 8004f3a:	60b9      	str	r1, [r7, #8]
 8004f3c:	603b      	str	r3, [r7, #0]
 8004f3e:	4613      	mov	r3, r2
 8004f40:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004f42:	e04c      	b.n	8004fde <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004f44:	683b      	ldr	r3, [r7, #0]
 8004f46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f4a:	d048      	beq.n	8004fde <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8004f4c:	f7fd fece 	bl	8002cec <HAL_GetTick>
 8004f50:	4602      	mov	r2, r0
 8004f52:	69bb      	ldr	r3, [r7, #24]
 8004f54:	1ad3      	subs	r3, r2, r3
 8004f56:	683a      	ldr	r2, [r7, #0]
 8004f58:	429a      	cmp	r2, r3
 8004f5a:	d902      	bls.n	8004f62 <SPI_WaitFlagStateUntilTimeout+0x30>
 8004f5c:	683b      	ldr	r3, [r7, #0]
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d13d      	bne.n	8004fde <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	685a      	ldr	r2, [r3, #4]
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004f70:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	685b      	ldr	r3, [r3, #4]
 8004f76:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004f7a:	d111      	bne.n	8004fa0 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	689b      	ldr	r3, [r3, #8]
 8004f80:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f84:	d004      	beq.n	8004f90 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	689b      	ldr	r3, [r3, #8]
 8004f8a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f8e:	d107      	bne.n	8004fa0 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	681a      	ldr	r2, [r3, #0]
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004f9e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fa4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004fa8:	d10f      	bne.n	8004fca <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	681a      	ldr	r2, [r3, #0]
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004fb8:	601a      	str	r2, [r3, #0]
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	681a      	ldr	r2, [r3, #0]
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004fc8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	2201      	movs	r2, #1
 8004fce:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	2200      	movs	r2, #0
 8004fd6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004fda:	2303      	movs	r3, #3
 8004fdc:	e00f      	b.n	8004ffe <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	689a      	ldr	r2, [r3, #8]
 8004fe4:	68bb      	ldr	r3, [r7, #8]
 8004fe6:	4013      	ands	r3, r2
 8004fe8:	68ba      	ldr	r2, [r7, #8]
 8004fea:	429a      	cmp	r2, r3
 8004fec:	bf0c      	ite	eq
 8004fee:	2301      	moveq	r3, #1
 8004ff0:	2300      	movne	r3, #0
 8004ff2:	b2db      	uxtb	r3, r3
 8004ff4:	461a      	mov	r2, r3
 8004ff6:	79fb      	ldrb	r3, [r7, #7]
 8004ff8:	429a      	cmp	r2, r3
 8004ffa:	d1a3      	bne.n	8004f44 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8004ffc:	2300      	movs	r3, #0
}
 8004ffe:	4618      	mov	r0, r3
 8005000:	3710      	adds	r7, #16
 8005002:	46bd      	mov	sp, r7
 8005004:	bd80      	pop	{r7, pc}
	...

08005008 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005008:	b580      	push	{r7, lr}
 800500a:	b088      	sub	sp, #32
 800500c:	af02      	add	r7, sp, #8
 800500e:	60f8      	str	r0, [r7, #12]
 8005010:	60b9      	str	r1, [r7, #8]
 8005012:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005014:	4b1b      	ldr	r3, [pc, #108]	; (8005084 <SPI_EndRxTxTransaction+0x7c>)
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	4a1b      	ldr	r2, [pc, #108]	; (8005088 <SPI_EndRxTxTransaction+0x80>)
 800501a:	fba2 2303 	umull	r2, r3, r2, r3
 800501e:	0d5b      	lsrs	r3, r3, #21
 8005020:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005024:	fb02 f303 	mul.w	r3, r2, r3
 8005028:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	685b      	ldr	r3, [r3, #4]
 800502e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005032:	d112      	bne.n	800505a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	9300      	str	r3, [sp, #0]
 8005038:	68bb      	ldr	r3, [r7, #8]
 800503a:	2200      	movs	r2, #0
 800503c:	2180      	movs	r1, #128	; 0x80
 800503e:	68f8      	ldr	r0, [r7, #12]
 8005040:	f7ff ff77 	bl	8004f32 <SPI_WaitFlagStateUntilTimeout>
 8005044:	4603      	mov	r3, r0
 8005046:	2b00      	cmp	r3, #0
 8005048:	d016      	beq.n	8005078 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800504e:	f043 0220 	orr.w	r2, r3, #32
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005056:	2303      	movs	r3, #3
 8005058:	e00f      	b.n	800507a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800505a:	697b      	ldr	r3, [r7, #20]
 800505c:	2b00      	cmp	r3, #0
 800505e:	d00a      	beq.n	8005076 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8005060:	697b      	ldr	r3, [r7, #20]
 8005062:	3b01      	subs	r3, #1
 8005064:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	689b      	ldr	r3, [r3, #8]
 800506c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005070:	2b80      	cmp	r3, #128	; 0x80
 8005072:	d0f2      	beq.n	800505a <SPI_EndRxTxTransaction+0x52>
 8005074:	e000      	b.n	8005078 <SPI_EndRxTxTransaction+0x70>
        break;
 8005076:	bf00      	nop
  }

  return HAL_OK;
 8005078:	2300      	movs	r3, #0
}
 800507a:	4618      	mov	r0, r3
 800507c:	3718      	adds	r7, #24
 800507e:	46bd      	mov	sp, r7
 8005080:	bd80      	pop	{r7, pc}
 8005082:	bf00      	nop
 8005084:	20000010 	.word	0x20000010
 8005088:	165e9f81 	.word	0x165e9f81

0800508c <SPI_CloseTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseTx_ISR(SPI_HandleTypeDef *hspi)
{
 800508c:	b580      	push	{r7, lr}
 800508e:	b086      	sub	sp, #24
 8005090:	af00      	add	r7, sp, #0
 8005092:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 8005094:	4b2c      	ldr	r3, [pc, #176]	; (8005148 <SPI_CloseTx_ISR+0xbc>)
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	4a2c      	ldr	r2, [pc, #176]	; (800514c <SPI_CloseTx_ISR+0xc0>)
 800509a:	fba2 2303 	umull	r2, r3, r2, r3
 800509e:	0a5b      	lsrs	r3, r3, #9
 80050a0:	2264      	movs	r2, #100	; 0x64
 80050a2:	fb02 f303 	mul.w	r3, r2, r3
 80050a6:	613b      	str	r3, [r7, #16]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80050a8:	f7fd fe20 	bl	8002cec <HAL_GetTick>
 80050ac:	6178      	str	r0, [r7, #20]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 80050ae:	693b      	ldr	r3, [r7, #16]
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d106      	bne.n	80050c2 <SPI_CloseTx_ISR+0x36>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050b8:	f043 0220 	orr.w	r2, r3, #32
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80050c0:	e009      	b.n	80050d6 <SPI_CloseTx_ISR+0x4a>
    }
    count--;
 80050c2:	693b      	ldr	r3, [r7, #16]
 80050c4:	3b01      	subs	r3, #1
 80050c6:	613b      	str	r3, [r7, #16]
  } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	689b      	ldr	r3, [r3, #8]
 80050ce:	f003 0302 	and.w	r3, r3, #2
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d0eb      	beq.n	80050ae <SPI_CloseTx_ISR+0x22>

  /* Disable TXE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	685a      	ldr	r2, [r3, #4]
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80050e4:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80050e6:	697a      	ldr	r2, [r7, #20]
 80050e8:	2164      	movs	r1, #100	; 0x64
 80050ea:	6878      	ldr	r0, [r7, #4]
 80050ec:	f7ff ff8c 	bl	8005008 <SPI_EndRxTxTransaction>
 80050f0:	4603      	mov	r3, r0
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d005      	beq.n	8005102 <SPI_CloseTx_ISR+0x76>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050fa:	f043 0220 	orr.w	r2, r3, #32
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	689b      	ldr	r3, [r3, #8]
 8005106:	2b00      	cmp	r3, #0
 8005108:	d10a      	bne.n	8005120 <SPI_CloseTx_ISR+0x94>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800510a:	2300      	movs	r3, #0
 800510c:	60fb      	str	r3, [r7, #12]
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	68db      	ldr	r3, [r3, #12]
 8005114:	60fb      	str	r3, [r7, #12]
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	689b      	ldr	r3, [r3, #8]
 800511c:	60fb      	str	r3, [r7, #12]
 800511e:	68fb      	ldr	r3, [r7, #12]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	2201      	movs	r2, #1
 8005124:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800512c:	2b00      	cmp	r3, #0
 800512e:	d003      	beq.n	8005138 <SPI_CloseTx_ISR+0xac>
  {
    /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 8005130:	6878      	ldr	r0, [r7, #4]
 8005132:	f7ff fe9b 	bl	8004e6c <HAL_SPI_ErrorCallback>
    hspi->TxCpltCallback(hspi);
#else
    HAL_SPI_TxCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 8005136:	e002      	b.n	800513e <SPI_CloseTx_ISR+0xb2>
    HAL_SPI_TxCpltCallback(hspi);
 8005138:	6878      	ldr	r0, [r7, #4]
 800513a:	f7fd f9e1 	bl	8002500 <HAL_SPI_TxCpltCallback>
}
 800513e:	bf00      	nop
 8005140:	3718      	adds	r7, #24
 8005142:	46bd      	mov	sp, r7
 8005144:	bd80      	pop	{r7, pc}
 8005146:	bf00      	nop
 8005148:	20000010 	.word	0x20000010
 800514c:	057619f1 	.word	0x057619f1

08005150 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005150:	b580      	push	{r7, lr}
 8005152:	b082      	sub	sp, #8
 8005154:	af00      	add	r7, sp, #0
 8005156:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	2b00      	cmp	r3, #0
 800515c:	d101      	bne.n	8005162 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800515e:	2301      	movs	r3, #1
 8005160:	e01d      	b.n	800519e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005168:	b2db      	uxtb	r3, r3
 800516a:	2b00      	cmp	r3, #0
 800516c:	d106      	bne.n	800517c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	2200      	movs	r2, #0
 8005172:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005176:	6878      	ldr	r0, [r7, #4]
 8005178:	f7fd fb62 	bl	8002840 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	2202      	movs	r2, #2
 8005180:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681a      	ldr	r2, [r3, #0]
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	3304      	adds	r3, #4
 800518c:	4619      	mov	r1, r3
 800518e:	4610      	mov	r0, r2
 8005190:	f000 fa46 	bl	8005620 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	2201      	movs	r2, #1
 8005198:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800519c:	2300      	movs	r3, #0
}
 800519e:	4618      	mov	r0, r3
 80051a0:	3708      	adds	r7, #8
 80051a2:	46bd      	mov	sp, r7
 80051a4:	bd80      	pop	{r7, pc}

080051a6 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80051a6:	b480      	push	{r7}
 80051a8:	b085      	sub	sp, #20
 80051aa:	af00      	add	r7, sp, #0
 80051ac:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	2202      	movs	r2, #2
 80051b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	689b      	ldr	r3, [r3, #8]
 80051bc:	f003 0307 	and.w	r3, r3, #7
 80051c0:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	2b06      	cmp	r3, #6
 80051c6:	d007      	beq.n	80051d8 <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	681a      	ldr	r2, [r3, #0]
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	f042 0201 	orr.w	r2, r2, #1
 80051d6:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2201      	movs	r2, #1
 80051dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80051e0:	2300      	movs	r3, #0
}
 80051e2:	4618      	mov	r0, r3
 80051e4:	3714      	adds	r7, #20
 80051e6:	46bd      	mov	sp, r7
 80051e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ec:	4770      	bx	lr

080051ee <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80051ee:	b480      	push	{r7}
 80051f0:	b085      	sub	sp, #20
 80051f2:	af00      	add	r7, sp, #0
 80051f4:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	68da      	ldr	r2, [r3, #12]
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	f042 0201 	orr.w	r2, r2, #1
 8005204:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	689b      	ldr	r3, [r3, #8]
 800520c:	f003 0307 	and.w	r3, r3, #7
 8005210:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	2b06      	cmp	r3, #6
 8005216:	d007      	beq.n	8005228 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	681a      	ldr	r2, [r3, #0]
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	f042 0201 	orr.w	r2, r2, #1
 8005226:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005228:	2300      	movs	r3, #0
}
 800522a:	4618      	mov	r0, r3
 800522c:	3714      	adds	r7, #20
 800522e:	46bd      	mov	sp, r7
 8005230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005234:	4770      	bx	lr

08005236 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005236:	b580      	push	{r7, lr}
 8005238:	b082      	sub	sp, #8
 800523a:	af00      	add	r7, sp, #0
 800523c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	691b      	ldr	r3, [r3, #16]
 8005244:	f003 0302 	and.w	r3, r3, #2
 8005248:	2b02      	cmp	r3, #2
 800524a:	d122      	bne.n	8005292 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	68db      	ldr	r3, [r3, #12]
 8005252:	f003 0302 	and.w	r3, r3, #2
 8005256:	2b02      	cmp	r3, #2
 8005258:	d11b      	bne.n	8005292 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	f06f 0202 	mvn.w	r2, #2
 8005262:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	2201      	movs	r2, #1
 8005268:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	699b      	ldr	r3, [r3, #24]
 8005270:	f003 0303 	and.w	r3, r3, #3
 8005274:	2b00      	cmp	r3, #0
 8005276:	d003      	beq.n	8005280 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005278:	6878      	ldr	r0, [r7, #4]
 800527a:	f000 f9b2 	bl	80055e2 <HAL_TIM_IC_CaptureCallback>
 800527e:	e005      	b.n	800528c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005280:	6878      	ldr	r0, [r7, #4]
 8005282:	f000 f9a4 	bl	80055ce <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005286:	6878      	ldr	r0, [r7, #4]
 8005288:	f000 f9b5 	bl	80055f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	2200      	movs	r2, #0
 8005290:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	691b      	ldr	r3, [r3, #16]
 8005298:	f003 0304 	and.w	r3, r3, #4
 800529c:	2b04      	cmp	r3, #4
 800529e:	d122      	bne.n	80052e6 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	68db      	ldr	r3, [r3, #12]
 80052a6:	f003 0304 	and.w	r3, r3, #4
 80052aa:	2b04      	cmp	r3, #4
 80052ac:	d11b      	bne.n	80052e6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	f06f 0204 	mvn.w	r2, #4
 80052b6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	2202      	movs	r2, #2
 80052bc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	699b      	ldr	r3, [r3, #24]
 80052c4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d003      	beq.n	80052d4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80052cc:	6878      	ldr	r0, [r7, #4]
 80052ce:	f000 f988 	bl	80055e2 <HAL_TIM_IC_CaptureCallback>
 80052d2:	e005      	b.n	80052e0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80052d4:	6878      	ldr	r0, [r7, #4]
 80052d6:	f000 f97a 	bl	80055ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052da:	6878      	ldr	r0, [r7, #4]
 80052dc:	f000 f98b 	bl	80055f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	2200      	movs	r2, #0
 80052e4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	691b      	ldr	r3, [r3, #16]
 80052ec:	f003 0308 	and.w	r3, r3, #8
 80052f0:	2b08      	cmp	r3, #8
 80052f2:	d122      	bne.n	800533a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	68db      	ldr	r3, [r3, #12]
 80052fa:	f003 0308 	and.w	r3, r3, #8
 80052fe:	2b08      	cmp	r3, #8
 8005300:	d11b      	bne.n	800533a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	f06f 0208 	mvn.w	r2, #8
 800530a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	2204      	movs	r2, #4
 8005310:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	69db      	ldr	r3, [r3, #28]
 8005318:	f003 0303 	and.w	r3, r3, #3
 800531c:	2b00      	cmp	r3, #0
 800531e:	d003      	beq.n	8005328 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005320:	6878      	ldr	r0, [r7, #4]
 8005322:	f000 f95e 	bl	80055e2 <HAL_TIM_IC_CaptureCallback>
 8005326:	e005      	b.n	8005334 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005328:	6878      	ldr	r0, [r7, #4]
 800532a:	f000 f950 	bl	80055ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800532e:	6878      	ldr	r0, [r7, #4]
 8005330:	f000 f961 	bl	80055f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	2200      	movs	r2, #0
 8005338:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	691b      	ldr	r3, [r3, #16]
 8005340:	f003 0310 	and.w	r3, r3, #16
 8005344:	2b10      	cmp	r3, #16
 8005346:	d122      	bne.n	800538e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	68db      	ldr	r3, [r3, #12]
 800534e:	f003 0310 	and.w	r3, r3, #16
 8005352:	2b10      	cmp	r3, #16
 8005354:	d11b      	bne.n	800538e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	f06f 0210 	mvn.w	r2, #16
 800535e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	2208      	movs	r2, #8
 8005364:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	69db      	ldr	r3, [r3, #28]
 800536c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005370:	2b00      	cmp	r3, #0
 8005372:	d003      	beq.n	800537c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005374:	6878      	ldr	r0, [r7, #4]
 8005376:	f000 f934 	bl	80055e2 <HAL_TIM_IC_CaptureCallback>
 800537a:	e005      	b.n	8005388 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800537c:	6878      	ldr	r0, [r7, #4]
 800537e:	f000 f926 	bl	80055ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005382:	6878      	ldr	r0, [r7, #4]
 8005384:	f000 f937 	bl	80055f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	2200      	movs	r2, #0
 800538c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	691b      	ldr	r3, [r3, #16]
 8005394:	f003 0301 	and.w	r3, r3, #1
 8005398:	2b01      	cmp	r3, #1
 800539a:	d10e      	bne.n	80053ba <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	68db      	ldr	r3, [r3, #12]
 80053a2:	f003 0301 	and.w	r3, r3, #1
 80053a6:	2b01      	cmp	r3, #1
 80053a8:	d107      	bne.n	80053ba <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	f06f 0201 	mvn.w	r2, #1
 80053b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80053b4:	6878      	ldr	r0, [r7, #4]
 80053b6:	f7fd f8b9 	bl	800252c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	691b      	ldr	r3, [r3, #16]
 80053c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053c4:	2b80      	cmp	r3, #128	; 0x80
 80053c6:	d10e      	bne.n	80053e6 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	68db      	ldr	r3, [r3, #12]
 80053ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053d2:	2b80      	cmp	r3, #128	; 0x80
 80053d4:	d107      	bne.n	80053e6 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80053de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80053e0:	6878      	ldr	r0, [r7, #4]
 80053e2:	f000 faaf 	bl	8005944 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	691b      	ldr	r3, [r3, #16]
 80053ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053f0:	2b40      	cmp	r3, #64	; 0x40
 80053f2:	d10e      	bne.n	8005412 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	68db      	ldr	r3, [r3, #12]
 80053fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053fe:	2b40      	cmp	r3, #64	; 0x40
 8005400:	d107      	bne.n	8005412 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800540a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800540c:	6878      	ldr	r0, [r7, #4]
 800540e:	f000 f8fc 	bl	800560a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	691b      	ldr	r3, [r3, #16]
 8005418:	f003 0320 	and.w	r3, r3, #32
 800541c:	2b20      	cmp	r3, #32
 800541e:	d10e      	bne.n	800543e <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	68db      	ldr	r3, [r3, #12]
 8005426:	f003 0320 	and.w	r3, r3, #32
 800542a:	2b20      	cmp	r3, #32
 800542c:	d107      	bne.n	800543e <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	f06f 0220 	mvn.w	r2, #32
 8005436:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005438:	6878      	ldr	r0, [r7, #4]
 800543a:	f000 fa79 	bl	8005930 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800543e:	bf00      	nop
 8005440:	3708      	adds	r7, #8
 8005442:	46bd      	mov	sp, r7
 8005444:	bd80      	pop	{r7, pc}

08005446 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005446:	b580      	push	{r7, lr}
 8005448:	b084      	sub	sp, #16
 800544a:	af00      	add	r7, sp, #0
 800544c:	6078      	str	r0, [r7, #4]
 800544e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005456:	2b01      	cmp	r3, #1
 8005458:	d101      	bne.n	800545e <HAL_TIM_ConfigClockSource+0x18>
 800545a:	2302      	movs	r3, #2
 800545c:	e0b3      	b.n	80055c6 <HAL_TIM_ConfigClockSource+0x180>
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	2201      	movs	r2, #1
 8005462:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	2202      	movs	r2, #2
 800546a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	689b      	ldr	r3, [r3, #8]
 8005474:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800547c:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005484:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	68fa      	ldr	r2, [r7, #12]
 800548c:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800548e:	683b      	ldr	r3, [r7, #0]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005496:	d03e      	beq.n	8005516 <HAL_TIM_ConfigClockSource+0xd0>
 8005498:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800549c:	f200 8087 	bhi.w	80055ae <HAL_TIM_ConfigClockSource+0x168>
 80054a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80054a4:	f000 8085 	beq.w	80055b2 <HAL_TIM_ConfigClockSource+0x16c>
 80054a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80054ac:	d87f      	bhi.n	80055ae <HAL_TIM_ConfigClockSource+0x168>
 80054ae:	2b70      	cmp	r3, #112	; 0x70
 80054b0:	d01a      	beq.n	80054e8 <HAL_TIM_ConfigClockSource+0xa2>
 80054b2:	2b70      	cmp	r3, #112	; 0x70
 80054b4:	d87b      	bhi.n	80055ae <HAL_TIM_ConfigClockSource+0x168>
 80054b6:	2b60      	cmp	r3, #96	; 0x60
 80054b8:	d050      	beq.n	800555c <HAL_TIM_ConfigClockSource+0x116>
 80054ba:	2b60      	cmp	r3, #96	; 0x60
 80054bc:	d877      	bhi.n	80055ae <HAL_TIM_ConfigClockSource+0x168>
 80054be:	2b50      	cmp	r3, #80	; 0x50
 80054c0:	d03c      	beq.n	800553c <HAL_TIM_ConfigClockSource+0xf6>
 80054c2:	2b50      	cmp	r3, #80	; 0x50
 80054c4:	d873      	bhi.n	80055ae <HAL_TIM_ConfigClockSource+0x168>
 80054c6:	2b40      	cmp	r3, #64	; 0x40
 80054c8:	d058      	beq.n	800557c <HAL_TIM_ConfigClockSource+0x136>
 80054ca:	2b40      	cmp	r3, #64	; 0x40
 80054cc:	d86f      	bhi.n	80055ae <HAL_TIM_ConfigClockSource+0x168>
 80054ce:	2b30      	cmp	r3, #48	; 0x30
 80054d0:	d064      	beq.n	800559c <HAL_TIM_ConfigClockSource+0x156>
 80054d2:	2b30      	cmp	r3, #48	; 0x30
 80054d4:	d86b      	bhi.n	80055ae <HAL_TIM_ConfigClockSource+0x168>
 80054d6:	2b20      	cmp	r3, #32
 80054d8:	d060      	beq.n	800559c <HAL_TIM_ConfigClockSource+0x156>
 80054da:	2b20      	cmp	r3, #32
 80054dc:	d867      	bhi.n	80055ae <HAL_TIM_ConfigClockSource+0x168>
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d05c      	beq.n	800559c <HAL_TIM_ConfigClockSource+0x156>
 80054e2:	2b10      	cmp	r3, #16
 80054e4:	d05a      	beq.n	800559c <HAL_TIM_ConfigClockSource+0x156>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80054e6:	e062      	b.n	80055ae <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	6818      	ldr	r0, [r3, #0]
 80054ec:	683b      	ldr	r3, [r7, #0]
 80054ee:	6899      	ldr	r1, [r3, #8]
 80054f0:	683b      	ldr	r3, [r7, #0]
 80054f2:	685a      	ldr	r2, [r3, #4]
 80054f4:	683b      	ldr	r3, [r7, #0]
 80054f6:	68db      	ldr	r3, [r3, #12]
 80054f8:	f000 f98c 	bl	8005814 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	689b      	ldr	r3, [r3, #8]
 8005502:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800550a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	68fa      	ldr	r2, [r7, #12]
 8005512:	609a      	str	r2, [r3, #8]
      break;
 8005514:	e04e      	b.n	80055b4 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	6818      	ldr	r0, [r3, #0]
 800551a:	683b      	ldr	r3, [r7, #0]
 800551c:	6899      	ldr	r1, [r3, #8]
 800551e:	683b      	ldr	r3, [r7, #0]
 8005520:	685a      	ldr	r2, [r3, #4]
 8005522:	683b      	ldr	r3, [r7, #0]
 8005524:	68db      	ldr	r3, [r3, #12]
 8005526:	f000 f975 	bl	8005814 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	689a      	ldr	r2, [r3, #8]
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005538:	609a      	str	r2, [r3, #8]
      break;
 800553a:	e03b      	b.n	80055b4 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	6818      	ldr	r0, [r3, #0]
 8005540:	683b      	ldr	r3, [r7, #0]
 8005542:	6859      	ldr	r1, [r3, #4]
 8005544:	683b      	ldr	r3, [r7, #0]
 8005546:	68db      	ldr	r3, [r3, #12]
 8005548:	461a      	mov	r2, r3
 800554a:	f000 f8e9 	bl	8005720 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	2150      	movs	r1, #80	; 0x50
 8005554:	4618      	mov	r0, r3
 8005556:	f000 f942 	bl	80057de <TIM_ITRx_SetConfig>
      break;
 800555a:	e02b      	b.n	80055b4 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	6818      	ldr	r0, [r3, #0]
 8005560:	683b      	ldr	r3, [r7, #0]
 8005562:	6859      	ldr	r1, [r3, #4]
 8005564:	683b      	ldr	r3, [r7, #0]
 8005566:	68db      	ldr	r3, [r3, #12]
 8005568:	461a      	mov	r2, r3
 800556a:	f000 f908 	bl	800577e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	2160      	movs	r1, #96	; 0x60
 8005574:	4618      	mov	r0, r3
 8005576:	f000 f932 	bl	80057de <TIM_ITRx_SetConfig>
      break;
 800557a:	e01b      	b.n	80055b4 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	6818      	ldr	r0, [r3, #0]
 8005580:	683b      	ldr	r3, [r7, #0]
 8005582:	6859      	ldr	r1, [r3, #4]
 8005584:	683b      	ldr	r3, [r7, #0]
 8005586:	68db      	ldr	r3, [r3, #12]
 8005588:	461a      	mov	r2, r3
 800558a:	f000 f8c9 	bl	8005720 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	2140      	movs	r1, #64	; 0x40
 8005594:	4618      	mov	r0, r3
 8005596:	f000 f922 	bl	80057de <TIM_ITRx_SetConfig>
      break;
 800559a:	e00b      	b.n	80055b4 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681a      	ldr	r2, [r3, #0]
 80055a0:	683b      	ldr	r3, [r7, #0]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	4619      	mov	r1, r3
 80055a6:	4610      	mov	r0, r2
 80055a8:	f000 f919 	bl	80057de <TIM_ITRx_SetConfig>
      break;
 80055ac:	e002      	b.n	80055b4 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80055ae:	bf00      	nop
 80055b0:	e000      	b.n	80055b4 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80055b2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	2201      	movs	r2, #1
 80055b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	2200      	movs	r2, #0
 80055c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80055c4:	2300      	movs	r3, #0
}
 80055c6:	4618      	mov	r0, r3
 80055c8:	3710      	adds	r7, #16
 80055ca:	46bd      	mov	sp, r7
 80055cc:	bd80      	pop	{r7, pc}

080055ce <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80055ce:	b480      	push	{r7}
 80055d0:	b083      	sub	sp, #12
 80055d2:	af00      	add	r7, sp, #0
 80055d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80055d6:	bf00      	nop
 80055d8:	370c      	adds	r7, #12
 80055da:	46bd      	mov	sp, r7
 80055dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e0:	4770      	bx	lr

080055e2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80055e2:	b480      	push	{r7}
 80055e4:	b083      	sub	sp, #12
 80055e6:	af00      	add	r7, sp, #0
 80055e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80055ea:	bf00      	nop
 80055ec:	370c      	adds	r7, #12
 80055ee:	46bd      	mov	sp, r7
 80055f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f4:	4770      	bx	lr

080055f6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80055f6:	b480      	push	{r7}
 80055f8:	b083      	sub	sp, #12
 80055fa:	af00      	add	r7, sp, #0
 80055fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80055fe:	bf00      	nop
 8005600:	370c      	adds	r7, #12
 8005602:	46bd      	mov	sp, r7
 8005604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005608:	4770      	bx	lr

0800560a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800560a:	b480      	push	{r7}
 800560c:	b083      	sub	sp, #12
 800560e:	af00      	add	r7, sp, #0
 8005610:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005612:	bf00      	nop
 8005614:	370c      	adds	r7, #12
 8005616:	46bd      	mov	sp, r7
 8005618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800561c:	4770      	bx	lr
	...

08005620 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005620:	b480      	push	{r7}
 8005622:	b085      	sub	sp, #20
 8005624:	af00      	add	r7, sp, #0
 8005626:	6078      	str	r0, [r7, #4]
 8005628:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	4a34      	ldr	r2, [pc, #208]	; (8005704 <TIM_Base_SetConfig+0xe4>)
 8005634:	4293      	cmp	r3, r2
 8005636:	d00f      	beq.n	8005658 <TIM_Base_SetConfig+0x38>
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800563e:	d00b      	beq.n	8005658 <TIM_Base_SetConfig+0x38>
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	4a31      	ldr	r2, [pc, #196]	; (8005708 <TIM_Base_SetConfig+0xe8>)
 8005644:	4293      	cmp	r3, r2
 8005646:	d007      	beq.n	8005658 <TIM_Base_SetConfig+0x38>
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	4a30      	ldr	r2, [pc, #192]	; (800570c <TIM_Base_SetConfig+0xec>)
 800564c:	4293      	cmp	r3, r2
 800564e:	d003      	beq.n	8005658 <TIM_Base_SetConfig+0x38>
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	4a2f      	ldr	r2, [pc, #188]	; (8005710 <TIM_Base_SetConfig+0xf0>)
 8005654:	4293      	cmp	r3, r2
 8005656:	d108      	bne.n	800566a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800565e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005660:	683b      	ldr	r3, [r7, #0]
 8005662:	685b      	ldr	r3, [r3, #4]
 8005664:	68fa      	ldr	r2, [r7, #12]
 8005666:	4313      	orrs	r3, r2
 8005668:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	4a25      	ldr	r2, [pc, #148]	; (8005704 <TIM_Base_SetConfig+0xe4>)
 800566e:	4293      	cmp	r3, r2
 8005670:	d01b      	beq.n	80056aa <TIM_Base_SetConfig+0x8a>
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005678:	d017      	beq.n	80056aa <TIM_Base_SetConfig+0x8a>
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	4a22      	ldr	r2, [pc, #136]	; (8005708 <TIM_Base_SetConfig+0xe8>)
 800567e:	4293      	cmp	r3, r2
 8005680:	d013      	beq.n	80056aa <TIM_Base_SetConfig+0x8a>
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	4a21      	ldr	r2, [pc, #132]	; (800570c <TIM_Base_SetConfig+0xec>)
 8005686:	4293      	cmp	r3, r2
 8005688:	d00f      	beq.n	80056aa <TIM_Base_SetConfig+0x8a>
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	4a20      	ldr	r2, [pc, #128]	; (8005710 <TIM_Base_SetConfig+0xf0>)
 800568e:	4293      	cmp	r3, r2
 8005690:	d00b      	beq.n	80056aa <TIM_Base_SetConfig+0x8a>
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	4a1f      	ldr	r2, [pc, #124]	; (8005714 <TIM_Base_SetConfig+0xf4>)
 8005696:	4293      	cmp	r3, r2
 8005698:	d007      	beq.n	80056aa <TIM_Base_SetConfig+0x8a>
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	4a1e      	ldr	r2, [pc, #120]	; (8005718 <TIM_Base_SetConfig+0xf8>)
 800569e:	4293      	cmp	r3, r2
 80056a0:	d003      	beq.n	80056aa <TIM_Base_SetConfig+0x8a>
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	4a1d      	ldr	r2, [pc, #116]	; (800571c <TIM_Base_SetConfig+0xfc>)
 80056a6:	4293      	cmp	r3, r2
 80056a8:	d108      	bne.n	80056bc <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80056b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80056b2:	683b      	ldr	r3, [r7, #0]
 80056b4:	68db      	ldr	r3, [r3, #12]
 80056b6:	68fa      	ldr	r2, [r7, #12]
 80056b8:	4313      	orrs	r3, r2
 80056ba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80056c2:	683b      	ldr	r3, [r7, #0]
 80056c4:	695b      	ldr	r3, [r3, #20]
 80056c6:	4313      	orrs	r3, r2
 80056c8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	68fa      	ldr	r2, [r7, #12]
 80056ce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80056d0:	683b      	ldr	r3, [r7, #0]
 80056d2:	689a      	ldr	r2, [r3, #8]
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80056d8:	683b      	ldr	r3, [r7, #0]
 80056da:	681a      	ldr	r2, [r3, #0]
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	4a08      	ldr	r2, [pc, #32]	; (8005704 <TIM_Base_SetConfig+0xe4>)
 80056e4:	4293      	cmp	r3, r2
 80056e6:	d103      	bne.n	80056f0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80056e8:	683b      	ldr	r3, [r7, #0]
 80056ea:	691a      	ldr	r2, [r3, #16]
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	2201      	movs	r2, #1
 80056f4:	615a      	str	r2, [r3, #20]
}
 80056f6:	bf00      	nop
 80056f8:	3714      	adds	r7, #20
 80056fa:	46bd      	mov	sp, r7
 80056fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005700:	4770      	bx	lr
 8005702:	bf00      	nop
 8005704:	40010000 	.word	0x40010000
 8005708:	40000400 	.word	0x40000400
 800570c:	40000800 	.word	0x40000800
 8005710:	40000c00 	.word	0x40000c00
 8005714:	40014000 	.word	0x40014000
 8005718:	40014400 	.word	0x40014400
 800571c:	40014800 	.word	0x40014800

08005720 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005720:	b480      	push	{r7}
 8005722:	b087      	sub	sp, #28
 8005724:	af00      	add	r7, sp, #0
 8005726:	60f8      	str	r0, [r7, #12]
 8005728:	60b9      	str	r1, [r7, #8]
 800572a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	6a1b      	ldr	r3, [r3, #32]
 8005730:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	6a1b      	ldr	r3, [r3, #32]
 8005736:	f023 0201 	bic.w	r2, r3, #1
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	699b      	ldr	r3, [r3, #24]
 8005742:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005744:	693b      	ldr	r3, [r7, #16]
 8005746:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800574a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	011b      	lsls	r3, r3, #4
 8005750:	693a      	ldr	r2, [r7, #16]
 8005752:	4313      	orrs	r3, r2
 8005754:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005756:	697b      	ldr	r3, [r7, #20]
 8005758:	f023 030a 	bic.w	r3, r3, #10
 800575c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800575e:	697a      	ldr	r2, [r7, #20]
 8005760:	68bb      	ldr	r3, [r7, #8]
 8005762:	4313      	orrs	r3, r2
 8005764:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	693a      	ldr	r2, [r7, #16]
 800576a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	697a      	ldr	r2, [r7, #20]
 8005770:	621a      	str	r2, [r3, #32]
}
 8005772:	bf00      	nop
 8005774:	371c      	adds	r7, #28
 8005776:	46bd      	mov	sp, r7
 8005778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800577c:	4770      	bx	lr

0800577e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800577e:	b480      	push	{r7}
 8005780:	b087      	sub	sp, #28
 8005782:	af00      	add	r7, sp, #0
 8005784:	60f8      	str	r0, [r7, #12]
 8005786:	60b9      	str	r1, [r7, #8]
 8005788:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	6a1b      	ldr	r3, [r3, #32]
 800578e:	f023 0210 	bic.w	r2, r3, #16
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	699b      	ldr	r3, [r3, #24]
 800579a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	6a1b      	ldr	r3, [r3, #32]
 80057a0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80057a2:	697b      	ldr	r3, [r7, #20]
 80057a4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80057a8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	031b      	lsls	r3, r3, #12
 80057ae:	697a      	ldr	r2, [r7, #20]
 80057b0:	4313      	orrs	r3, r2
 80057b2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80057b4:	693b      	ldr	r3, [r7, #16]
 80057b6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80057ba:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80057bc:	68bb      	ldr	r3, [r7, #8]
 80057be:	011b      	lsls	r3, r3, #4
 80057c0:	693a      	ldr	r2, [r7, #16]
 80057c2:	4313      	orrs	r3, r2
 80057c4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	697a      	ldr	r2, [r7, #20]
 80057ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	693a      	ldr	r2, [r7, #16]
 80057d0:	621a      	str	r2, [r3, #32]
}
 80057d2:	bf00      	nop
 80057d4:	371c      	adds	r7, #28
 80057d6:	46bd      	mov	sp, r7
 80057d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057dc:	4770      	bx	lr

080057de <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80057de:	b480      	push	{r7}
 80057e0:	b085      	sub	sp, #20
 80057e2:	af00      	add	r7, sp, #0
 80057e4:	6078      	str	r0, [r7, #4]
 80057e6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	689b      	ldr	r3, [r3, #8]
 80057ec:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057f4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80057f6:	683a      	ldr	r2, [r7, #0]
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	4313      	orrs	r3, r2
 80057fc:	f043 0307 	orr.w	r3, r3, #7
 8005800:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	68fa      	ldr	r2, [r7, #12]
 8005806:	609a      	str	r2, [r3, #8]
}
 8005808:	bf00      	nop
 800580a:	3714      	adds	r7, #20
 800580c:	46bd      	mov	sp, r7
 800580e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005812:	4770      	bx	lr

08005814 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005814:	b480      	push	{r7}
 8005816:	b087      	sub	sp, #28
 8005818:	af00      	add	r7, sp, #0
 800581a:	60f8      	str	r0, [r7, #12]
 800581c:	60b9      	str	r1, [r7, #8]
 800581e:	607a      	str	r2, [r7, #4]
 8005820:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	689b      	ldr	r3, [r3, #8]
 8005826:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005828:	697b      	ldr	r3, [r7, #20]
 800582a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800582e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005830:	683b      	ldr	r3, [r7, #0]
 8005832:	021a      	lsls	r2, r3, #8
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	431a      	orrs	r2, r3
 8005838:	68bb      	ldr	r3, [r7, #8]
 800583a:	4313      	orrs	r3, r2
 800583c:	697a      	ldr	r2, [r7, #20]
 800583e:	4313      	orrs	r3, r2
 8005840:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	697a      	ldr	r2, [r7, #20]
 8005846:	609a      	str	r2, [r3, #8]
}
 8005848:	bf00      	nop
 800584a:	371c      	adds	r7, #28
 800584c:	46bd      	mov	sp, r7
 800584e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005852:	4770      	bx	lr

08005854 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005854:	b480      	push	{r7}
 8005856:	b085      	sub	sp, #20
 8005858:	af00      	add	r7, sp, #0
 800585a:	6078      	str	r0, [r7, #4]
 800585c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005864:	2b01      	cmp	r3, #1
 8005866:	d101      	bne.n	800586c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005868:	2302      	movs	r3, #2
 800586a:	e050      	b.n	800590e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	2201      	movs	r2, #1
 8005870:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	2202      	movs	r2, #2
 8005878:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	685b      	ldr	r3, [r3, #4]
 8005882:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	689b      	ldr	r3, [r3, #8]
 800588a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005892:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005894:	683b      	ldr	r3, [r7, #0]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	68fa      	ldr	r2, [r7, #12]
 800589a:	4313      	orrs	r3, r2
 800589c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	68fa      	ldr	r2, [r7, #12]
 80058a4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	4a1c      	ldr	r2, [pc, #112]	; (800591c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80058ac:	4293      	cmp	r3, r2
 80058ae:	d018      	beq.n	80058e2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80058b8:	d013      	beq.n	80058e2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	4a18      	ldr	r2, [pc, #96]	; (8005920 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80058c0:	4293      	cmp	r3, r2
 80058c2:	d00e      	beq.n	80058e2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	4a16      	ldr	r2, [pc, #88]	; (8005924 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80058ca:	4293      	cmp	r3, r2
 80058cc:	d009      	beq.n	80058e2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	4a15      	ldr	r2, [pc, #84]	; (8005928 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80058d4:	4293      	cmp	r3, r2
 80058d6:	d004      	beq.n	80058e2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	4a13      	ldr	r2, [pc, #76]	; (800592c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80058de:	4293      	cmp	r3, r2
 80058e0:	d10c      	bne.n	80058fc <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80058e2:	68bb      	ldr	r3, [r7, #8]
 80058e4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80058e8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80058ea:	683b      	ldr	r3, [r7, #0]
 80058ec:	685b      	ldr	r3, [r3, #4]
 80058ee:	68ba      	ldr	r2, [r7, #8]
 80058f0:	4313      	orrs	r3, r2
 80058f2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	68ba      	ldr	r2, [r7, #8]
 80058fa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	2201      	movs	r2, #1
 8005900:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	2200      	movs	r2, #0
 8005908:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800590c:	2300      	movs	r3, #0
}
 800590e:	4618      	mov	r0, r3
 8005910:	3714      	adds	r7, #20
 8005912:	46bd      	mov	sp, r7
 8005914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005918:	4770      	bx	lr
 800591a:	bf00      	nop
 800591c:	40010000 	.word	0x40010000
 8005920:	40000400 	.word	0x40000400
 8005924:	40000800 	.word	0x40000800
 8005928:	40000c00 	.word	0x40000c00
 800592c:	40014000 	.word	0x40014000

08005930 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005930:	b480      	push	{r7}
 8005932:	b083      	sub	sp, #12
 8005934:	af00      	add	r7, sp, #0
 8005936:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005938:	bf00      	nop
 800593a:	370c      	adds	r7, #12
 800593c:	46bd      	mov	sp, r7
 800593e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005942:	4770      	bx	lr

08005944 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005944:	b480      	push	{r7}
 8005946:	b083      	sub	sp, #12
 8005948:	af00      	add	r7, sp, #0
 800594a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800594c:	bf00      	nop
 800594e:	370c      	adds	r7, #12
 8005950:	46bd      	mov	sp, r7
 8005952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005956:	4770      	bx	lr

08005958 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005958:	b580      	push	{r7, lr}
 800595a:	b082      	sub	sp, #8
 800595c:	af00      	add	r7, sp, #0
 800595e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	2b00      	cmp	r3, #0
 8005964:	d101      	bne.n	800596a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005966:	2301      	movs	r3, #1
 8005968:	e03f      	b.n	80059ea <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005970:	b2db      	uxtb	r3, r3
 8005972:	2b00      	cmp	r3, #0
 8005974:	d106      	bne.n	8005984 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	2200      	movs	r2, #0
 800597a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800597e:	6878      	ldr	r0, [r7, #4]
 8005980:	f7fc ff9c 	bl	80028bc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	2224      	movs	r2, #36	; 0x24
 8005988:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	68da      	ldr	r2, [r3, #12]
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800599a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800599c:	6878      	ldr	r0, [r7, #4]
 800599e:	f000 fb97 	bl	80060d0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	691a      	ldr	r2, [r3, #16]
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80059b0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	695a      	ldr	r2, [r3, #20]
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80059c0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	68da      	ldr	r2, [r3, #12]
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80059d0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	2200      	movs	r2, #0
 80059d6:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	2220      	movs	r2, #32
 80059dc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	2220      	movs	r2, #32
 80059e4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80059e8:	2300      	movs	r3, #0
}
 80059ea:	4618      	mov	r0, r3
 80059ec:	3708      	adds	r7, #8
 80059ee:	46bd      	mov	sp, r7
 80059f0:	bd80      	pop	{r7, pc}

080059f2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80059f2:	b580      	push	{r7, lr}
 80059f4:	b088      	sub	sp, #32
 80059f6:	af02      	add	r7, sp, #8
 80059f8:	60f8      	str	r0, [r7, #12]
 80059fa:	60b9      	str	r1, [r7, #8]
 80059fc:	603b      	str	r3, [r7, #0]
 80059fe:	4613      	mov	r3, r2
 8005a00:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8005a02:	2300      	movs	r3, #0
 8005a04:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005a0c:	b2db      	uxtb	r3, r3
 8005a0e:	2b20      	cmp	r3, #32
 8005a10:	f040 8083 	bne.w	8005b1a <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8005a14:	68bb      	ldr	r3, [r7, #8]
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d002      	beq.n	8005a20 <HAL_UART_Transmit+0x2e>
 8005a1a:	88fb      	ldrh	r3, [r7, #6]
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d101      	bne.n	8005a24 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8005a20:	2301      	movs	r3, #1
 8005a22:	e07b      	b.n	8005b1c <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005a2a:	2b01      	cmp	r3, #1
 8005a2c:	d101      	bne.n	8005a32 <HAL_UART_Transmit+0x40>
 8005a2e:	2302      	movs	r3, #2
 8005a30:	e074      	b.n	8005b1c <HAL_UART_Transmit+0x12a>
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	2201      	movs	r2, #1
 8005a36:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	2200      	movs	r2, #0
 8005a3e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	2221      	movs	r2, #33	; 0x21
 8005a44:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8005a48:	f7fd f950 	bl	8002cec <HAL_GetTick>
 8005a4c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	88fa      	ldrh	r2, [r7, #6]
 8005a52:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	88fa      	ldrh	r2, [r7, #6]
 8005a58:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	2200      	movs	r2, #0
 8005a5e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8005a62:	e042      	b.n	8005aea <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005a68:	b29b      	uxth	r3, r3
 8005a6a:	3b01      	subs	r3, #1
 8005a6c:	b29a      	uxth	r2, r3
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	689b      	ldr	r3, [r3, #8]
 8005a76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a7a:	d122      	bne.n	8005ac2 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005a7c:	683b      	ldr	r3, [r7, #0]
 8005a7e:	9300      	str	r3, [sp, #0]
 8005a80:	697b      	ldr	r3, [r7, #20]
 8005a82:	2200      	movs	r2, #0
 8005a84:	2180      	movs	r1, #128	; 0x80
 8005a86:	68f8      	ldr	r0, [r7, #12]
 8005a88:	f000 f9b6 	bl	8005df8 <UART_WaitOnFlagUntilTimeout>
 8005a8c:	4603      	mov	r3, r0
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d001      	beq.n	8005a96 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8005a92:	2303      	movs	r3, #3
 8005a94:	e042      	b.n	8005b1c <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8005a96:	68bb      	ldr	r3, [r7, #8]
 8005a98:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8005a9a:	693b      	ldr	r3, [r7, #16]
 8005a9c:	881b      	ldrh	r3, [r3, #0]
 8005a9e:	461a      	mov	r2, r3
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005aa8:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	691b      	ldr	r3, [r3, #16]
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d103      	bne.n	8005aba <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8005ab2:	68bb      	ldr	r3, [r7, #8]
 8005ab4:	3302      	adds	r3, #2
 8005ab6:	60bb      	str	r3, [r7, #8]
 8005ab8:	e017      	b.n	8005aea <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8005aba:	68bb      	ldr	r3, [r7, #8]
 8005abc:	3301      	adds	r3, #1
 8005abe:	60bb      	str	r3, [r7, #8]
 8005ac0:	e013      	b.n	8005aea <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005ac2:	683b      	ldr	r3, [r7, #0]
 8005ac4:	9300      	str	r3, [sp, #0]
 8005ac6:	697b      	ldr	r3, [r7, #20]
 8005ac8:	2200      	movs	r2, #0
 8005aca:	2180      	movs	r1, #128	; 0x80
 8005acc:	68f8      	ldr	r0, [r7, #12]
 8005ace:	f000 f993 	bl	8005df8 <UART_WaitOnFlagUntilTimeout>
 8005ad2:	4603      	mov	r3, r0
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d001      	beq.n	8005adc <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8005ad8:	2303      	movs	r3, #3
 8005ada:	e01f      	b.n	8005b1c <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8005adc:	68bb      	ldr	r3, [r7, #8]
 8005ade:	1c5a      	adds	r2, r3, #1
 8005ae0:	60ba      	str	r2, [r7, #8]
 8005ae2:	781a      	ldrb	r2, [r3, #0]
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005aee:	b29b      	uxth	r3, r3
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d1b7      	bne.n	8005a64 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005af4:	683b      	ldr	r3, [r7, #0]
 8005af6:	9300      	str	r3, [sp, #0]
 8005af8:	697b      	ldr	r3, [r7, #20]
 8005afa:	2200      	movs	r2, #0
 8005afc:	2140      	movs	r1, #64	; 0x40
 8005afe:	68f8      	ldr	r0, [r7, #12]
 8005b00:	f000 f97a 	bl	8005df8 <UART_WaitOnFlagUntilTimeout>
 8005b04:	4603      	mov	r3, r0
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d001      	beq.n	8005b0e <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8005b0a:	2303      	movs	r3, #3
 8005b0c:	e006      	b.n	8005b1c <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	2220      	movs	r2, #32
 8005b12:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8005b16:	2300      	movs	r3, #0
 8005b18:	e000      	b.n	8005b1c <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8005b1a:	2302      	movs	r3, #2
  }
}
 8005b1c:	4618      	mov	r0, r3
 8005b1e:	3718      	adds	r7, #24
 8005b20:	46bd      	mov	sp, r7
 8005b22:	bd80      	pop	{r7, pc}

08005b24 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005b24:	b480      	push	{r7}
 8005b26:	b085      	sub	sp, #20
 8005b28:	af00      	add	r7, sp, #0
 8005b2a:	60f8      	str	r0, [r7, #12]
 8005b2c:	60b9      	str	r1, [r7, #8]
 8005b2e:	4613      	mov	r3, r2
 8005b30:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8005b38:	b2db      	uxtb	r3, r3
 8005b3a:	2b20      	cmp	r3, #32
 8005b3c:	d140      	bne.n	8005bc0 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005b3e:	68bb      	ldr	r3, [r7, #8]
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d002      	beq.n	8005b4a <HAL_UART_Receive_IT+0x26>
 8005b44:	88fb      	ldrh	r3, [r7, #6]
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d101      	bne.n	8005b4e <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005b4a:	2301      	movs	r3, #1
 8005b4c:	e039      	b.n	8005bc2 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005b54:	2b01      	cmp	r3, #1
 8005b56:	d101      	bne.n	8005b5c <HAL_UART_Receive_IT+0x38>
 8005b58:	2302      	movs	r3, #2
 8005b5a:	e032      	b.n	8005bc2 <HAL_UART_Receive_IT+0x9e>
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	2201      	movs	r2, #1
 8005b60:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	68ba      	ldr	r2, [r7, #8]
 8005b68:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	88fa      	ldrh	r2, [r7, #6]
 8005b6e:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	88fa      	ldrh	r2, [r7, #6]
 8005b74:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	2200      	movs	r2, #0
 8005b7a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	2222      	movs	r2, #34	; 0x22
 8005b80:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	2200      	movs	r2, #0
 8005b88:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	68da      	ldr	r2, [r3, #12]
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005b9a:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	695a      	ldr	r2, [r3, #20]
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	f042 0201 	orr.w	r2, r2, #1
 8005baa:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	68da      	ldr	r2, [r3, #12]
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	f042 0220 	orr.w	r2, r2, #32
 8005bba:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8005bbc:	2300      	movs	r3, #0
 8005bbe:	e000      	b.n	8005bc2 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8005bc0:	2302      	movs	r3, #2
  }
}
 8005bc2:	4618      	mov	r0, r3
 8005bc4:	3714      	adds	r7, #20
 8005bc6:	46bd      	mov	sp, r7
 8005bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bcc:	4770      	bx	lr
	...

08005bd0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005bd0:	b580      	push	{r7, lr}
 8005bd2:	b088      	sub	sp, #32
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	68db      	ldr	r3, [r3, #12]
 8005be6:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	695b      	ldr	r3, [r3, #20]
 8005bee:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8005bf0:	2300      	movs	r3, #0
 8005bf2:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8005bf4:	2300      	movs	r3, #0
 8005bf6:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005bf8:	69fb      	ldr	r3, [r7, #28]
 8005bfa:	f003 030f 	and.w	r3, r3, #15
 8005bfe:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8005c00:	693b      	ldr	r3, [r7, #16]
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d10d      	bne.n	8005c22 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005c06:	69fb      	ldr	r3, [r7, #28]
 8005c08:	f003 0320 	and.w	r3, r3, #32
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d008      	beq.n	8005c22 <HAL_UART_IRQHandler+0x52>
 8005c10:	69bb      	ldr	r3, [r7, #24]
 8005c12:	f003 0320 	and.w	r3, r3, #32
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d003      	beq.n	8005c22 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8005c1a:	6878      	ldr	r0, [r7, #4]
 8005c1c:	f000 f9d6 	bl	8005fcc <UART_Receive_IT>
      return;
 8005c20:	e0d0      	b.n	8005dc4 <HAL_UART_IRQHandler+0x1f4>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005c22:	693b      	ldr	r3, [r7, #16]
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	f000 80b0 	beq.w	8005d8a <HAL_UART_IRQHandler+0x1ba>
 8005c2a:	697b      	ldr	r3, [r7, #20]
 8005c2c:	f003 0301 	and.w	r3, r3, #1
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d105      	bne.n	8005c40 <HAL_UART_IRQHandler+0x70>
 8005c34:	69bb      	ldr	r3, [r7, #24]
 8005c36:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	f000 80a5 	beq.w	8005d8a <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005c40:	69fb      	ldr	r3, [r7, #28]
 8005c42:	f003 0301 	and.w	r3, r3, #1
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d00a      	beq.n	8005c60 <HAL_UART_IRQHandler+0x90>
 8005c4a:	69bb      	ldr	r3, [r7, #24]
 8005c4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d005      	beq.n	8005c60 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c58:	f043 0201 	orr.w	r2, r3, #1
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005c60:	69fb      	ldr	r3, [r7, #28]
 8005c62:	f003 0304 	and.w	r3, r3, #4
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d00a      	beq.n	8005c80 <HAL_UART_IRQHandler+0xb0>
 8005c6a:	697b      	ldr	r3, [r7, #20]
 8005c6c:	f003 0301 	and.w	r3, r3, #1
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d005      	beq.n	8005c80 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c78:	f043 0202 	orr.w	r2, r3, #2
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005c80:	69fb      	ldr	r3, [r7, #28]
 8005c82:	f003 0302 	and.w	r3, r3, #2
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d00a      	beq.n	8005ca0 <HAL_UART_IRQHandler+0xd0>
 8005c8a:	697b      	ldr	r3, [r7, #20]
 8005c8c:	f003 0301 	and.w	r3, r3, #1
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d005      	beq.n	8005ca0 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c98:	f043 0204 	orr.w	r2, r3, #4
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8005ca0:	69fb      	ldr	r3, [r7, #28]
 8005ca2:	f003 0308 	and.w	r3, r3, #8
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d00f      	beq.n	8005cca <HAL_UART_IRQHandler+0xfa>
 8005caa:	69bb      	ldr	r3, [r7, #24]
 8005cac:	f003 0320 	and.w	r3, r3, #32
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d104      	bne.n	8005cbe <HAL_UART_IRQHandler+0xee>
 8005cb4:	697b      	ldr	r3, [r7, #20]
 8005cb6:	f003 0301 	and.w	r3, r3, #1
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d005      	beq.n	8005cca <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005cc2:	f043 0208 	orr.w	r2, r3, #8
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d077      	beq.n	8005dc2 <HAL_UART_IRQHandler+0x1f2>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005cd2:	69fb      	ldr	r3, [r7, #28]
 8005cd4:	f003 0320 	and.w	r3, r3, #32
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d007      	beq.n	8005cec <HAL_UART_IRQHandler+0x11c>
 8005cdc:	69bb      	ldr	r3, [r7, #24]
 8005cde:	f003 0320 	and.w	r3, r3, #32
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d002      	beq.n	8005cec <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8005ce6:	6878      	ldr	r0, [r7, #4]
 8005ce8:	f000 f970 	bl	8005fcc <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	695b      	ldr	r3, [r3, #20]
 8005cf2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cf6:	2b40      	cmp	r3, #64	; 0x40
 8005cf8:	bf0c      	ite	eq
 8005cfa:	2301      	moveq	r3, #1
 8005cfc:	2300      	movne	r3, #0
 8005cfe:	b2db      	uxtb	r3, r3
 8005d00:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d06:	f003 0308 	and.w	r3, r3, #8
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d102      	bne.n	8005d14 <HAL_UART_IRQHandler+0x144>
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d031      	beq.n	8005d78 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005d14:	6878      	ldr	r0, [r7, #4]
 8005d16:	f000 f8b9 	bl	8005e8c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	695b      	ldr	r3, [r3, #20]
 8005d20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d24:	2b40      	cmp	r3, #64	; 0x40
 8005d26:	d123      	bne.n	8005d70 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	695a      	ldr	r2, [r3, #20]
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005d36:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d013      	beq.n	8005d68 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d44:	4a21      	ldr	r2, [pc, #132]	; (8005dcc <HAL_UART_IRQHandler+0x1fc>)
 8005d46:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d4c:	4618      	mov	r0, r3
 8005d4e:	f7fd fdf9 	bl	8003944 <HAL_DMA_Abort_IT>
 8005d52:	4603      	mov	r3, r0
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d016      	beq.n	8005d86 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d5e:	687a      	ldr	r2, [r7, #4]
 8005d60:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005d62:	4610      	mov	r0, r2
 8005d64:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d66:	e00e      	b.n	8005d86 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005d68:	6878      	ldr	r0, [r7, #4]
 8005d6a:	f000 f83b 	bl	8005de4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d6e:	e00a      	b.n	8005d86 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005d70:	6878      	ldr	r0, [r7, #4]
 8005d72:	f000 f837 	bl	8005de4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d76:	e006      	b.n	8005d86 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005d78:	6878      	ldr	r0, [r7, #4]
 8005d7a:	f000 f833 	bl	8005de4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	2200      	movs	r2, #0
 8005d82:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8005d84:	e01d      	b.n	8005dc2 <HAL_UART_IRQHandler+0x1f2>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d86:	bf00      	nop
    return;
 8005d88:	e01b      	b.n	8005dc2 <HAL_UART_IRQHandler+0x1f2>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005d8a:	69fb      	ldr	r3, [r7, #28]
 8005d8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d008      	beq.n	8005da6 <HAL_UART_IRQHandler+0x1d6>
 8005d94:	69bb      	ldr	r3, [r7, #24]
 8005d96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d003      	beq.n	8005da6 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8005d9e:	6878      	ldr	r0, [r7, #4]
 8005da0:	f000 f8a6 	bl	8005ef0 <UART_Transmit_IT>
    return;
 8005da4:	e00e      	b.n	8005dc4 <HAL_UART_IRQHandler+0x1f4>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005da6:	69fb      	ldr	r3, [r7, #28]
 8005da8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d009      	beq.n	8005dc4 <HAL_UART_IRQHandler+0x1f4>
 8005db0:	69bb      	ldr	r3, [r7, #24]
 8005db2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d004      	beq.n	8005dc4 <HAL_UART_IRQHandler+0x1f4>
  {
    UART_EndTransmit_IT(huart);
 8005dba:	6878      	ldr	r0, [r7, #4]
 8005dbc:	f000 f8ee 	bl	8005f9c <UART_EndTransmit_IT>
    return;
 8005dc0:	e000      	b.n	8005dc4 <HAL_UART_IRQHandler+0x1f4>
    return;
 8005dc2:	bf00      	nop
  }
}
 8005dc4:	3720      	adds	r7, #32
 8005dc6:	46bd      	mov	sp, r7
 8005dc8:	bd80      	pop	{r7, pc}
 8005dca:	bf00      	nop
 8005dcc:	08005ec9 	.word	0x08005ec9

08005dd0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005dd0:	b480      	push	{r7}
 8005dd2:	b083      	sub	sp, #12
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005dd8:	bf00      	nop
 8005dda:	370c      	adds	r7, #12
 8005ddc:	46bd      	mov	sp, r7
 8005dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de2:	4770      	bx	lr

08005de4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005de4:	b480      	push	{r7}
 8005de6:	b083      	sub	sp, #12
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005dec:	bf00      	nop
 8005dee:	370c      	adds	r7, #12
 8005df0:	46bd      	mov	sp, r7
 8005df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df6:	4770      	bx	lr

08005df8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8005df8:	b580      	push	{r7, lr}
 8005dfa:	b084      	sub	sp, #16
 8005dfc:	af00      	add	r7, sp, #0
 8005dfe:	60f8      	str	r0, [r7, #12]
 8005e00:	60b9      	str	r1, [r7, #8]
 8005e02:	603b      	str	r3, [r7, #0]
 8005e04:	4613      	mov	r3, r2
 8005e06:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005e08:	e02c      	b.n	8005e64 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005e0a:	69bb      	ldr	r3, [r7, #24]
 8005e0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e10:	d028      	beq.n	8005e64 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005e12:	69bb      	ldr	r3, [r7, #24]
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d007      	beq.n	8005e28 <UART_WaitOnFlagUntilTimeout+0x30>
 8005e18:	f7fc ff68 	bl	8002cec <HAL_GetTick>
 8005e1c:	4602      	mov	r2, r0
 8005e1e:	683b      	ldr	r3, [r7, #0]
 8005e20:	1ad3      	subs	r3, r2, r3
 8005e22:	69ba      	ldr	r2, [r7, #24]
 8005e24:	429a      	cmp	r2, r3
 8005e26:	d21d      	bcs.n	8005e64 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	68da      	ldr	r2, [r3, #12]
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005e36:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	695a      	ldr	r2, [r3, #20]
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	f022 0201 	bic.w	r2, r2, #1
 8005e46:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	2220      	movs	r2, #32
 8005e4c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	2220      	movs	r2, #32
 8005e54:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	2200      	movs	r2, #0
 8005e5c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8005e60:	2303      	movs	r3, #3
 8005e62:	e00f      	b.n	8005e84 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	681a      	ldr	r2, [r3, #0]
 8005e6a:	68bb      	ldr	r3, [r7, #8]
 8005e6c:	4013      	ands	r3, r2
 8005e6e:	68ba      	ldr	r2, [r7, #8]
 8005e70:	429a      	cmp	r2, r3
 8005e72:	bf0c      	ite	eq
 8005e74:	2301      	moveq	r3, #1
 8005e76:	2300      	movne	r3, #0
 8005e78:	b2db      	uxtb	r3, r3
 8005e7a:	461a      	mov	r2, r3
 8005e7c:	79fb      	ldrb	r3, [r7, #7]
 8005e7e:	429a      	cmp	r2, r3
 8005e80:	d0c3      	beq.n	8005e0a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005e82:	2300      	movs	r3, #0
}
 8005e84:	4618      	mov	r0, r3
 8005e86:	3710      	adds	r7, #16
 8005e88:	46bd      	mov	sp, r7
 8005e8a:	bd80      	pop	{r7, pc}

08005e8c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005e8c:	b480      	push	{r7}
 8005e8e:	b083      	sub	sp, #12
 8005e90:	af00      	add	r7, sp, #0
 8005e92:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	68da      	ldr	r2, [r3, #12]
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005ea2:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	695a      	ldr	r2, [r3, #20]
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	f022 0201 	bic.w	r2, r2, #1
 8005eb2:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	2220      	movs	r2, #32
 8005eb8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8005ebc:	bf00      	nop
 8005ebe:	370c      	adds	r7, #12
 8005ec0:	46bd      	mov	sp, r7
 8005ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec6:	4770      	bx	lr

08005ec8 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005ec8:	b580      	push	{r7, lr}
 8005eca:	b084      	sub	sp, #16
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ed4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	2200      	movs	r2, #0
 8005eda:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	2200      	movs	r2, #0
 8005ee0:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005ee2:	68f8      	ldr	r0, [r7, #12]
 8005ee4:	f7ff ff7e 	bl	8005de4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005ee8:	bf00      	nop
 8005eea:	3710      	adds	r7, #16
 8005eec:	46bd      	mov	sp, r7
 8005eee:	bd80      	pop	{r7, pc}

08005ef0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005ef0:	b480      	push	{r7}
 8005ef2:	b085      	sub	sp, #20
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005efe:	b2db      	uxtb	r3, r3
 8005f00:	2b21      	cmp	r3, #33	; 0x21
 8005f02:	d144      	bne.n	8005f8e <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	689b      	ldr	r3, [r3, #8]
 8005f08:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f0c:	d11a      	bne.n	8005f44 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	6a1b      	ldr	r3, [r3, #32]
 8005f12:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	881b      	ldrh	r3, [r3, #0]
 8005f18:	461a      	mov	r2, r3
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005f22:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	691b      	ldr	r3, [r3, #16]
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d105      	bne.n	8005f38 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	6a1b      	ldr	r3, [r3, #32]
 8005f30:	1c9a      	adds	r2, r3, #2
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	621a      	str	r2, [r3, #32]
 8005f36:	e00e      	b.n	8005f56 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	6a1b      	ldr	r3, [r3, #32]
 8005f3c:	1c5a      	adds	r2, r3, #1
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	621a      	str	r2, [r3, #32]
 8005f42:	e008      	b.n	8005f56 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	6a1b      	ldr	r3, [r3, #32]
 8005f48:	1c59      	adds	r1, r3, #1
 8005f4a:	687a      	ldr	r2, [r7, #4]
 8005f4c:	6211      	str	r1, [r2, #32]
 8005f4e:	781a      	ldrb	r2, [r3, #0]
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005f5a:	b29b      	uxth	r3, r3
 8005f5c:	3b01      	subs	r3, #1
 8005f5e:	b29b      	uxth	r3, r3
 8005f60:	687a      	ldr	r2, [r7, #4]
 8005f62:	4619      	mov	r1, r3
 8005f64:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d10f      	bne.n	8005f8a <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	68da      	ldr	r2, [r3, #12]
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005f78:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	68da      	ldr	r2, [r3, #12]
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005f88:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005f8a:	2300      	movs	r3, #0
 8005f8c:	e000      	b.n	8005f90 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8005f8e:	2302      	movs	r3, #2
  }
}
 8005f90:	4618      	mov	r0, r3
 8005f92:	3714      	adds	r7, #20
 8005f94:	46bd      	mov	sp, r7
 8005f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f9a:	4770      	bx	lr

08005f9c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005f9c:	b580      	push	{r7, lr}
 8005f9e:	b082      	sub	sp, #8
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	68da      	ldr	r2, [r3, #12]
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005fb2:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	2220      	movs	r2, #32
 8005fb8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005fbc:	6878      	ldr	r0, [r7, #4]
 8005fbe:	f7ff ff07 	bl	8005dd0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005fc2:	2300      	movs	r3, #0
}
 8005fc4:	4618      	mov	r0, r3
 8005fc6:	3708      	adds	r7, #8
 8005fc8:	46bd      	mov	sp, r7
 8005fca:	bd80      	pop	{r7, pc}

08005fcc <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005fcc:	b580      	push	{r7, lr}
 8005fce:	b084      	sub	sp, #16
 8005fd0:	af00      	add	r7, sp, #0
 8005fd2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8005fda:	b2db      	uxtb	r3, r3
 8005fdc:	2b22      	cmp	r3, #34	; 0x22
 8005fde:	d171      	bne.n	80060c4 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	689b      	ldr	r3, [r3, #8]
 8005fe4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005fe8:	d123      	bne.n	8006032 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fee:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	691b      	ldr	r3, [r3, #16]
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d10e      	bne.n	8006016 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	685b      	ldr	r3, [r3, #4]
 8005ffe:	b29b      	uxth	r3, r3
 8006000:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006004:	b29a      	uxth	r2, r3
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800600e:	1c9a      	adds	r2, r3, #2
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	629a      	str	r2, [r3, #40]	; 0x28
 8006014:	e029      	b.n	800606a <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	685b      	ldr	r3, [r3, #4]
 800601c:	b29b      	uxth	r3, r3
 800601e:	b2db      	uxtb	r3, r3
 8006020:	b29a      	uxth	r2, r3
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800602a:	1c5a      	adds	r2, r3, #1
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	629a      	str	r2, [r3, #40]	; 0x28
 8006030:	e01b      	b.n	800606a <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	691b      	ldr	r3, [r3, #16]
 8006036:	2b00      	cmp	r3, #0
 8006038:	d10a      	bne.n	8006050 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	6858      	ldr	r0, [r3, #4]
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006044:	1c59      	adds	r1, r3, #1
 8006046:	687a      	ldr	r2, [r7, #4]
 8006048:	6291      	str	r1, [r2, #40]	; 0x28
 800604a:	b2c2      	uxtb	r2, r0
 800604c:	701a      	strb	r2, [r3, #0]
 800604e:	e00c      	b.n	800606a <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	685b      	ldr	r3, [r3, #4]
 8006056:	b2da      	uxtb	r2, r3
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800605c:	1c58      	adds	r0, r3, #1
 800605e:	6879      	ldr	r1, [r7, #4]
 8006060:	6288      	str	r0, [r1, #40]	; 0x28
 8006062:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006066:	b2d2      	uxtb	r2, r2
 8006068:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800606e:	b29b      	uxth	r3, r3
 8006070:	3b01      	subs	r3, #1
 8006072:	b29b      	uxth	r3, r3
 8006074:	687a      	ldr	r2, [r7, #4]
 8006076:	4619      	mov	r1, r3
 8006078:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800607a:	2b00      	cmp	r3, #0
 800607c:	d120      	bne.n	80060c0 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	68da      	ldr	r2, [r3, #12]
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	f022 0220 	bic.w	r2, r2, #32
 800608c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	68da      	ldr	r2, [r3, #12]
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800609c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	695a      	ldr	r2, [r3, #20]
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	f022 0201 	bic.w	r2, r2, #1
 80060ac:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	2220      	movs	r2, #32
 80060b2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80060b6:	6878      	ldr	r0, [r7, #4]
 80060b8:	f7fc faa0 	bl	80025fc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 80060bc:	2300      	movs	r3, #0
 80060be:	e002      	b.n	80060c6 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 80060c0:	2300      	movs	r3, #0
 80060c2:	e000      	b.n	80060c6 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 80060c4:	2302      	movs	r3, #2
  }
}
 80060c6:	4618      	mov	r0, r3
 80060c8:	3710      	adds	r7, #16
 80060ca:	46bd      	mov	sp, r7
 80060cc:	bd80      	pop	{r7, pc}
	...

080060d0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80060d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80060d4:	b0bd      	sub	sp, #244	; 0xf4
 80060d6:	af00      	add	r7, sp, #0
 80060d8:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80060dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	691b      	ldr	r3, [r3, #16]
 80060e4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80060e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80060ec:	68d9      	ldr	r1, [r3, #12]
 80060ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80060f2:	681a      	ldr	r2, [r3, #0]
 80060f4:	ea40 0301 	orr.w	r3, r0, r1
 80060f8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80060fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80060fe:	689a      	ldr	r2, [r3, #8]
 8006100:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006104:	691b      	ldr	r3, [r3, #16]
 8006106:	431a      	orrs	r2, r3
 8006108:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800610c:	695b      	ldr	r3, [r3, #20]
 800610e:	431a      	orrs	r2, r3
 8006110:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006114:	69db      	ldr	r3, [r3, #28]
 8006116:	4313      	orrs	r3, r2
 8006118:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  MODIFY_REG(huart->Instance->CR1,
 800611c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	68db      	ldr	r3, [r3, #12]
 8006124:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006128:	f021 010c 	bic.w	r1, r1, #12
 800612c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006130:	681a      	ldr	r2, [r3, #0]
 8006132:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006136:	430b      	orrs	r3, r1
 8006138:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800613a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	695b      	ldr	r3, [r3, #20]
 8006142:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006146:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800614a:	6999      	ldr	r1, [r3, #24]
 800614c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006150:	681a      	ldr	r2, [r3, #0]
 8006152:	ea40 0301 	orr.w	r3, r0, r1
 8006156:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006158:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800615c:	69db      	ldr	r3, [r3, #28]
 800615e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006162:	f040 81a5 	bne.w	80064b0 <UART_SetConfig+0x3e0>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006166:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800616a:	681a      	ldr	r2, [r3, #0]
 800616c:	4bcd      	ldr	r3, [pc, #820]	; (80064a4 <UART_SetConfig+0x3d4>)
 800616e:	429a      	cmp	r2, r3
 8006170:	d006      	beq.n	8006180 <UART_SetConfig+0xb0>
 8006172:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006176:	681a      	ldr	r2, [r3, #0]
 8006178:	4bcb      	ldr	r3, [pc, #812]	; (80064a8 <UART_SetConfig+0x3d8>)
 800617a:	429a      	cmp	r2, r3
 800617c:	f040 80cb 	bne.w	8006316 <UART_SetConfig+0x246>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006180:	f7fe fc7a 	bl	8004a78 <HAL_RCC_GetPCLK2Freq>
 8006184:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006188:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800618c:	461c      	mov	r4, r3
 800618e:	f04f 0500 	mov.w	r5, #0
 8006192:	4622      	mov	r2, r4
 8006194:	462b      	mov	r3, r5
 8006196:	1891      	adds	r1, r2, r2
 8006198:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 800619c:	415b      	adcs	r3, r3
 800619e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80061a2:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80061a6:	1912      	adds	r2, r2, r4
 80061a8:	eb45 0303 	adc.w	r3, r5, r3
 80061ac:	f04f 0000 	mov.w	r0, #0
 80061b0:	f04f 0100 	mov.w	r1, #0
 80061b4:	00d9      	lsls	r1, r3, #3
 80061b6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80061ba:	00d0      	lsls	r0, r2, #3
 80061bc:	4602      	mov	r2, r0
 80061be:	460b      	mov	r3, r1
 80061c0:	1911      	adds	r1, r2, r4
 80061c2:	f8c7 10d8 	str.w	r1, [r7, #216]	; 0xd8
 80061c6:	416b      	adcs	r3, r5
 80061c8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80061cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80061d0:	685b      	ldr	r3, [r3, #4]
 80061d2:	461a      	mov	r2, r3
 80061d4:	f04f 0300 	mov.w	r3, #0
 80061d8:	1891      	adds	r1, r2, r2
 80061da:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 80061de:	415b      	adcs	r3, r3
 80061e0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80061e4:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 80061e8:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 80061ec:	f7fa fd54 	bl	8000c98 <__aeabi_uldivmod>
 80061f0:	4602      	mov	r2, r0
 80061f2:	460b      	mov	r3, r1
 80061f4:	4bad      	ldr	r3, [pc, #692]	; (80064ac <UART_SetConfig+0x3dc>)
 80061f6:	fba3 2302 	umull	r2, r3, r3, r2
 80061fa:	095b      	lsrs	r3, r3, #5
 80061fc:	011e      	lsls	r6, r3, #4
 80061fe:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006202:	461c      	mov	r4, r3
 8006204:	f04f 0500 	mov.w	r5, #0
 8006208:	4622      	mov	r2, r4
 800620a:	462b      	mov	r3, r5
 800620c:	1891      	adds	r1, r2, r2
 800620e:	67b9      	str	r1, [r7, #120]	; 0x78
 8006210:	415b      	adcs	r3, r3
 8006212:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006214:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8006218:	1912      	adds	r2, r2, r4
 800621a:	eb45 0303 	adc.w	r3, r5, r3
 800621e:	f04f 0000 	mov.w	r0, #0
 8006222:	f04f 0100 	mov.w	r1, #0
 8006226:	00d9      	lsls	r1, r3, #3
 8006228:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800622c:	00d0      	lsls	r0, r2, #3
 800622e:	4602      	mov	r2, r0
 8006230:	460b      	mov	r3, r1
 8006232:	1911      	adds	r1, r2, r4
 8006234:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 8006238:	416b      	adcs	r3, r5
 800623a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800623e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006242:	685b      	ldr	r3, [r3, #4]
 8006244:	461a      	mov	r2, r3
 8006246:	f04f 0300 	mov.w	r3, #0
 800624a:	1891      	adds	r1, r2, r2
 800624c:	6739      	str	r1, [r7, #112]	; 0x70
 800624e:	415b      	adcs	r3, r3
 8006250:	677b      	str	r3, [r7, #116]	; 0x74
 8006252:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8006256:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 800625a:	f7fa fd1d 	bl	8000c98 <__aeabi_uldivmod>
 800625e:	4602      	mov	r2, r0
 8006260:	460b      	mov	r3, r1
 8006262:	4b92      	ldr	r3, [pc, #584]	; (80064ac <UART_SetConfig+0x3dc>)
 8006264:	fba3 1302 	umull	r1, r3, r3, r2
 8006268:	095b      	lsrs	r3, r3, #5
 800626a:	2164      	movs	r1, #100	; 0x64
 800626c:	fb01 f303 	mul.w	r3, r1, r3
 8006270:	1ad3      	subs	r3, r2, r3
 8006272:	00db      	lsls	r3, r3, #3
 8006274:	3332      	adds	r3, #50	; 0x32
 8006276:	4a8d      	ldr	r2, [pc, #564]	; (80064ac <UART_SetConfig+0x3dc>)
 8006278:	fba2 2303 	umull	r2, r3, r2, r3
 800627c:	095b      	lsrs	r3, r3, #5
 800627e:	005b      	lsls	r3, r3, #1
 8006280:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006284:	441e      	add	r6, r3
 8006286:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800628a:	4618      	mov	r0, r3
 800628c:	f04f 0100 	mov.w	r1, #0
 8006290:	4602      	mov	r2, r0
 8006292:	460b      	mov	r3, r1
 8006294:	1894      	adds	r4, r2, r2
 8006296:	66bc      	str	r4, [r7, #104]	; 0x68
 8006298:	415b      	adcs	r3, r3
 800629a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800629c:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 80062a0:	1812      	adds	r2, r2, r0
 80062a2:	eb41 0303 	adc.w	r3, r1, r3
 80062a6:	f04f 0400 	mov.w	r4, #0
 80062aa:	f04f 0500 	mov.w	r5, #0
 80062ae:	00dd      	lsls	r5, r3, #3
 80062b0:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80062b4:	00d4      	lsls	r4, r2, #3
 80062b6:	4622      	mov	r2, r4
 80062b8:	462b      	mov	r3, r5
 80062ba:	1814      	adds	r4, r2, r0
 80062bc:	f8c7 40c8 	str.w	r4, [r7, #200]	; 0xc8
 80062c0:	414b      	adcs	r3, r1
 80062c2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80062c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80062ca:	685b      	ldr	r3, [r3, #4]
 80062cc:	461a      	mov	r2, r3
 80062ce:	f04f 0300 	mov.w	r3, #0
 80062d2:	1891      	adds	r1, r2, r2
 80062d4:	6639      	str	r1, [r7, #96]	; 0x60
 80062d6:	415b      	adcs	r3, r3
 80062d8:	667b      	str	r3, [r7, #100]	; 0x64
 80062da:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80062de:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80062e2:	f7fa fcd9 	bl	8000c98 <__aeabi_uldivmod>
 80062e6:	4602      	mov	r2, r0
 80062e8:	460b      	mov	r3, r1
 80062ea:	4b70      	ldr	r3, [pc, #448]	; (80064ac <UART_SetConfig+0x3dc>)
 80062ec:	fba3 1302 	umull	r1, r3, r3, r2
 80062f0:	095b      	lsrs	r3, r3, #5
 80062f2:	2164      	movs	r1, #100	; 0x64
 80062f4:	fb01 f303 	mul.w	r3, r1, r3
 80062f8:	1ad3      	subs	r3, r2, r3
 80062fa:	00db      	lsls	r3, r3, #3
 80062fc:	3332      	adds	r3, #50	; 0x32
 80062fe:	4a6b      	ldr	r2, [pc, #428]	; (80064ac <UART_SetConfig+0x3dc>)
 8006300:	fba2 2303 	umull	r2, r3, r2, r3
 8006304:	095b      	lsrs	r3, r3, #5
 8006306:	f003 0207 	and.w	r2, r3, #7
 800630a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	4432      	add	r2, r6
 8006312:	609a      	str	r2, [r3, #8]
 8006314:	e26d      	b.n	80067f2 <UART_SetConfig+0x722>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006316:	f7fe fb9b 	bl	8004a50 <HAL_RCC_GetPCLK1Freq>
 800631a:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800631e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006322:	461c      	mov	r4, r3
 8006324:	f04f 0500 	mov.w	r5, #0
 8006328:	4622      	mov	r2, r4
 800632a:	462b      	mov	r3, r5
 800632c:	1891      	adds	r1, r2, r2
 800632e:	65b9      	str	r1, [r7, #88]	; 0x58
 8006330:	415b      	adcs	r3, r3
 8006332:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006334:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006338:	1912      	adds	r2, r2, r4
 800633a:	eb45 0303 	adc.w	r3, r5, r3
 800633e:	f04f 0000 	mov.w	r0, #0
 8006342:	f04f 0100 	mov.w	r1, #0
 8006346:	00d9      	lsls	r1, r3, #3
 8006348:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800634c:	00d0      	lsls	r0, r2, #3
 800634e:	4602      	mov	r2, r0
 8006350:	460b      	mov	r3, r1
 8006352:	1911      	adds	r1, r2, r4
 8006354:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
 8006358:	416b      	adcs	r3, r5
 800635a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800635e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006362:	685b      	ldr	r3, [r3, #4]
 8006364:	461a      	mov	r2, r3
 8006366:	f04f 0300 	mov.w	r3, #0
 800636a:	1891      	adds	r1, r2, r2
 800636c:	6539      	str	r1, [r7, #80]	; 0x50
 800636e:	415b      	adcs	r3, r3
 8006370:	657b      	str	r3, [r7, #84]	; 0x54
 8006372:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006376:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 800637a:	f7fa fc8d 	bl	8000c98 <__aeabi_uldivmod>
 800637e:	4602      	mov	r2, r0
 8006380:	460b      	mov	r3, r1
 8006382:	4b4a      	ldr	r3, [pc, #296]	; (80064ac <UART_SetConfig+0x3dc>)
 8006384:	fba3 2302 	umull	r2, r3, r3, r2
 8006388:	095b      	lsrs	r3, r3, #5
 800638a:	011e      	lsls	r6, r3, #4
 800638c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006390:	461c      	mov	r4, r3
 8006392:	f04f 0500 	mov.w	r5, #0
 8006396:	4622      	mov	r2, r4
 8006398:	462b      	mov	r3, r5
 800639a:	1891      	adds	r1, r2, r2
 800639c:	64b9      	str	r1, [r7, #72]	; 0x48
 800639e:	415b      	adcs	r3, r3
 80063a0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80063a2:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80063a6:	1912      	adds	r2, r2, r4
 80063a8:	eb45 0303 	adc.w	r3, r5, r3
 80063ac:	f04f 0000 	mov.w	r0, #0
 80063b0:	f04f 0100 	mov.w	r1, #0
 80063b4:	00d9      	lsls	r1, r3, #3
 80063b6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80063ba:	00d0      	lsls	r0, r2, #3
 80063bc:	4602      	mov	r2, r0
 80063be:	460b      	mov	r3, r1
 80063c0:	1911      	adds	r1, r2, r4
 80063c2:	f8c7 10b8 	str.w	r1, [r7, #184]	; 0xb8
 80063c6:	416b      	adcs	r3, r5
 80063c8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80063cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80063d0:	685b      	ldr	r3, [r3, #4]
 80063d2:	461a      	mov	r2, r3
 80063d4:	f04f 0300 	mov.w	r3, #0
 80063d8:	1891      	adds	r1, r2, r2
 80063da:	6439      	str	r1, [r7, #64]	; 0x40
 80063dc:	415b      	adcs	r3, r3
 80063de:	647b      	str	r3, [r7, #68]	; 0x44
 80063e0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80063e4:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 80063e8:	f7fa fc56 	bl	8000c98 <__aeabi_uldivmod>
 80063ec:	4602      	mov	r2, r0
 80063ee:	460b      	mov	r3, r1
 80063f0:	4b2e      	ldr	r3, [pc, #184]	; (80064ac <UART_SetConfig+0x3dc>)
 80063f2:	fba3 1302 	umull	r1, r3, r3, r2
 80063f6:	095b      	lsrs	r3, r3, #5
 80063f8:	2164      	movs	r1, #100	; 0x64
 80063fa:	fb01 f303 	mul.w	r3, r1, r3
 80063fe:	1ad3      	subs	r3, r2, r3
 8006400:	00db      	lsls	r3, r3, #3
 8006402:	3332      	adds	r3, #50	; 0x32
 8006404:	4a29      	ldr	r2, [pc, #164]	; (80064ac <UART_SetConfig+0x3dc>)
 8006406:	fba2 2303 	umull	r2, r3, r2, r3
 800640a:	095b      	lsrs	r3, r3, #5
 800640c:	005b      	lsls	r3, r3, #1
 800640e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006412:	441e      	add	r6, r3
 8006414:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006418:	4618      	mov	r0, r3
 800641a:	f04f 0100 	mov.w	r1, #0
 800641e:	4602      	mov	r2, r0
 8006420:	460b      	mov	r3, r1
 8006422:	1894      	adds	r4, r2, r2
 8006424:	63bc      	str	r4, [r7, #56]	; 0x38
 8006426:	415b      	adcs	r3, r3
 8006428:	63fb      	str	r3, [r7, #60]	; 0x3c
 800642a:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800642e:	1812      	adds	r2, r2, r0
 8006430:	eb41 0303 	adc.w	r3, r1, r3
 8006434:	f04f 0400 	mov.w	r4, #0
 8006438:	f04f 0500 	mov.w	r5, #0
 800643c:	00dd      	lsls	r5, r3, #3
 800643e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006442:	00d4      	lsls	r4, r2, #3
 8006444:	4622      	mov	r2, r4
 8006446:	462b      	mov	r3, r5
 8006448:	1814      	adds	r4, r2, r0
 800644a:	f8c7 40b0 	str.w	r4, [r7, #176]	; 0xb0
 800644e:	414b      	adcs	r3, r1
 8006450:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006454:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006458:	685b      	ldr	r3, [r3, #4]
 800645a:	461a      	mov	r2, r3
 800645c:	f04f 0300 	mov.w	r3, #0
 8006460:	1891      	adds	r1, r2, r2
 8006462:	6339      	str	r1, [r7, #48]	; 0x30
 8006464:	415b      	adcs	r3, r3
 8006466:	637b      	str	r3, [r7, #52]	; 0x34
 8006468:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800646c:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8006470:	f7fa fc12 	bl	8000c98 <__aeabi_uldivmod>
 8006474:	4602      	mov	r2, r0
 8006476:	460b      	mov	r3, r1
 8006478:	4b0c      	ldr	r3, [pc, #48]	; (80064ac <UART_SetConfig+0x3dc>)
 800647a:	fba3 1302 	umull	r1, r3, r3, r2
 800647e:	095b      	lsrs	r3, r3, #5
 8006480:	2164      	movs	r1, #100	; 0x64
 8006482:	fb01 f303 	mul.w	r3, r1, r3
 8006486:	1ad3      	subs	r3, r2, r3
 8006488:	00db      	lsls	r3, r3, #3
 800648a:	3332      	adds	r3, #50	; 0x32
 800648c:	4a07      	ldr	r2, [pc, #28]	; (80064ac <UART_SetConfig+0x3dc>)
 800648e:	fba2 2303 	umull	r2, r3, r2, r3
 8006492:	095b      	lsrs	r3, r3, #5
 8006494:	f003 0207 	and.w	r2, r3, #7
 8006498:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	4432      	add	r2, r6
 80064a0:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80064a2:	e1a6      	b.n	80067f2 <UART_SetConfig+0x722>
 80064a4:	40011000 	.word	0x40011000
 80064a8:	40011400 	.word	0x40011400
 80064ac:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80064b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80064b4:	681a      	ldr	r2, [r3, #0]
 80064b6:	4bd1      	ldr	r3, [pc, #836]	; (80067fc <UART_SetConfig+0x72c>)
 80064b8:	429a      	cmp	r2, r3
 80064ba:	d006      	beq.n	80064ca <UART_SetConfig+0x3fa>
 80064bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80064c0:	681a      	ldr	r2, [r3, #0]
 80064c2:	4bcf      	ldr	r3, [pc, #828]	; (8006800 <UART_SetConfig+0x730>)
 80064c4:	429a      	cmp	r2, r3
 80064c6:	f040 80ca 	bne.w	800665e <UART_SetConfig+0x58e>
      pclk = HAL_RCC_GetPCLK2Freq();
 80064ca:	f7fe fad5 	bl	8004a78 <HAL_RCC_GetPCLK2Freq>
 80064ce:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80064d2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80064d6:	461c      	mov	r4, r3
 80064d8:	f04f 0500 	mov.w	r5, #0
 80064dc:	4622      	mov	r2, r4
 80064de:	462b      	mov	r3, r5
 80064e0:	1891      	adds	r1, r2, r2
 80064e2:	62b9      	str	r1, [r7, #40]	; 0x28
 80064e4:	415b      	adcs	r3, r3
 80064e6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80064e8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80064ec:	1912      	adds	r2, r2, r4
 80064ee:	eb45 0303 	adc.w	r3, r5, r3
 80064f2:	f04f 0000 	mov.w	r0, #0
 80064f6:	f04f 0100 	mov.w	r1, #0
 80064fa:	00d9      	lsls	r1, r3, #3
 80064fc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006500:	00d0      	lsls	r0, r2, #3
 8006502:	4602      	mov	r2, r0
 8006504:	460b      	mov	r3, r1
 8006506:	eb12 0a04 	adds.w	sl, r2, r4
 800650a:	eb43 0b05 	adc.w	fp, r3, r5
 800650e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006512:	685b      	ldr	r3, [r3, #4]
 8006514:	4618      	mov	r0, r3
 8006516:	f04f 0100 	mov.w	r1, #0
 800651a:	f04f 0200 	mov.w	r2, #0
 800651e:	f04f 0300 	mov.w	r3, #0
 8006522:	008b      	lsls	r3, r1, #2
 8006524:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006528:	0082      	lsls	r2, r0, #2
 800652a:	4650      	mov	r0, sl
 800652c:	4659      	mov	r1, fp
 800652e:	f7fa fbb3 	bl	8000c98 <__aeabi_uldivmod>
 8006532:	4602      	mov	r2, r0
 8006534:	460b      	mov	r3, r1
 8006536:	4bb3      	ldr	r3, [pc, #716]	; (8006804 <UART_SetConfig+0x734>)
 8006538:	fba3 2302 	umull	r2, r3, r3, r2
 800653c:	095b      	lsrs	r3, r3, #5
 800653e:	011e      	lsls	r6, r3, #4
 8006540:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006544:	4618      	mov	r0, r3
 8006546:	f04f 0100 	mov.w	r1, #0
 800654a:	4602      	mov	r2, r0
 800654c:	460b      	mov	r3, r1
 800654e:	1894      	adds	r4, r2, r2
 8006550:	623c      	str	r4, [r7, #32]
 8006552:	415b      	adcs	r3, r3
 8006554:	627b      	str	r3, [r7, #36]	; 0x24
 8006556:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800655a:	1812      	adds	r2, r2, r0
 800655c:	eb41 0303 	adc.w	r3, r1, r3
 8006560:	f04f 0400 	mov.w	r4, #0
 8006564:	f04f 0500 	mov.w	r5, #0
 8006568:	00dd      	lsls	r5, r3, #3
 800656a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800656e:	00d4      	lsls	r4, r2, #3
 8006570:	4622      	mov	r2, r4
 8006572:	462b      	mov	r3, r5
 8006574:	1814      	adds	r4, r2, r0
 8006576:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 800657a:	414b      	adcs	r3, r1
 800657c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006580:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006584:	685b      	ldr	r3, [r3, #4]
 8006586:	4618      	mov	r0, r3
 8006588:	f04f 0100 	mov.w	r1, #0
 800658c:	f04f 0200 	mov.w	r2, #0
 8006590:	f04f 0300 	mov.w	r3, #0
 8006594:	008b      	lsls	r3, r1, #2
 8006596:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800659a:	0082      	lsls	r2, r0, #2
 800659c:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 80065a0:	f7fa fb7a 	bl	8000c98 <__aeabi_uldivmod>
 80065a4:	4602      	mov	r2, r0
 80065a6:	460b      	mov	r3, r1
 80065a8:	4b96      	ldr	r3, [pc, #600]	; (8006804 <UART_SetConfig+0x734>)
 80065aa:	fba3 1302 	umull	r1, r3, r3, r2
 80065ae:	095b      	lsrs	r3, r3, #5
 80065b0:	2164      	movs	r1, #100	; 0x64
 80065b2:	fb01 f303 	mul.w	r3, r1, r3
 80065b6:	1ad3      	subs	r3, r2, r3
 80065b8:	011b      	lsls	r3, r3, #4
 80065ba:	3332      	adds	r3, #50	; 0x32
 80065bc:	4a91      	ldr	r2, [pc, #580]	; (8006804 <UART_SetConfig+0x734>)
 80065be:	fba2 2303 	umull	r2, r3, r2, r3
 80065c2:	095b      	lsrs	r3, r3, #5
 80065c4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80065c8:	441e      	add	r6, r3
 80065ca:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80065ce:	4618      	mov	r0, r3
 80065d0:	f04f 0100 	mov.w	r1, #0
 80065d4:	4602      	mov	r2, r0
 80065d6:	460b      	mov	r3, r1
 80065d8:	1894      	adds	r4, r2, r2
 80065da:	61bc      	str	r4, [r7, #24]
 80065dc:	415b      	adcs	r3, r3
 80065de:	61fb      	str	r3, [r7, #28]
 80065e0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80065e4:	1812      	adds	r2, r2, r0
 80065e6:	eb41 0303 	adc.w	r3, r1, r3
 80065ea:	f04f 0400 	mov.w	r4, #0
 80065ee:	f04f 0500 	mov.w	r5, #0
 80065f2:	00dd      	lsls	r5, r3, #3
 80065f4:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80065f8:	00d4      	lsls	r4, r2, #3
 80065fa:	4622      	mov	r2, r4
 80065fc:	462b      	mov	r3, r5
 80065fe:	1814      	adds	r4, r2, r0
 8006600:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
 8006604:	414b      	adcs	r3, r1
 8006606:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800660a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800660e:	685b      	ldr	r3, [r3, #4]
 8006610:	4618      	mov	r0, r3
 8006612:	f04f 0100 	mov.w	r1, #0
 8006616:	f04f 0200 	mov.w	r2, #0
 800661a:	f04f 0300 	mov.w	r3, #0
 800661e:	008b      	lsls	r3, r1, #2
 8006620:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006624:	0082      	lsls	r2, r0, #2
 8006626:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 800662a:	f7fa fb35 	bl	8000c98 <__aeabi_uldivmod>
 800662e:	4602      	mov	r2, r0
 8006630:	460b      	mov	r3, r1
 8006632:	4b74      	ldr	r3, [pc, #464]	; (8006804 <UART_SetConfig+0x734>)
 8006634:	fba3 1302 	umull	r1, r3, r3, r2
 8006638:	095b      	lsrs	r3, r3, #5
 800663a:	2164      	movs	r1, #100	; 0x64
 800663c:	fb01 f303 	mul.w	r3, r1, r3
 8006640:	1ad3      	subs	r3, r2, r3
 8006642:	011b      	lsls	r3, r3, #4
 8006644:	3332      	adds	r3, #50	; 0x32
 8006646:	4a6f      	ldr	r2, [pc, #444]	; (8006804 <UART_SetConfig+0x734>)
 8006648:	fba2 2303 	umull	r2, r3, r2, r3
 800664c:	095b      	lsrs	r3, r3, #5
 800664e:	f003 020f 	and.w	r2, r3, #15
 8006652:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	4432      	add	r2, r6
 800665a:	609a      	str	r2, [r3, #8]
 800665c:	e0c9      	b.n	80067f2 <UART_SetConfig+0x722>
      pclk = HAL_RCC_GetPCLK1Freq();
 800665e:	f7fe f9f7 	bl	8004a50 <HAL_RCC_GetPCLK1Freq>
 8006662:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006666:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800666a:	461c      	mov	r4, r3
 800666c:	f04f 0500 	mov.w	r5, #0
 8006670:	4622      	mov	r2, r4
 8006672:	462b      	mov	r3, r5
 8006674:	1891      	adds	r1, r2, r2
 8006676:	6139      	str	r1, [r7, #16]
 8006678:	415b      	adcs	r3, r3
 800667a:	617b      	str	r3, [r7, #20]
 800667c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8006680:	1912      	adds	r2, r2, r4
 8006682:	eb45 0303 	adc.w	r3, r5, r3
 8006686:	f04f 0000 	mov.w	r0, #0
 800668a:	f04f 0100 	mov.w	r1, #0
 800668e:	00d9      	lsls	r1, r3, #3
 8006690:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006694:	00d0      	lsls	r0, r2, #3
 8006696:	4602      	mov	r2, r0
 8006698:	460b      	mov	r3, r1
 800669a:	eb12 0804 	adds.w	r8, r2, r4
 800669e:	eb43 0905 	adc.w	r9, r3, r5
 80066a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80066a6:	685b      	ldr	r3, [r3, #4]
 80066a8:	4618      	mov	r0, r3
 80066aa:	f04f 0100 	mov.w	r1, #0
 80066ae:	f04f 0200 	mov.w	r2, #0
 80066b2:	f04f 0300 	mov.w	r3, #0
 80066b6:	008b      	lsls	r3, r1, #2
 80066b8:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80066bc:	0082      	lsls	r2, r0, #2
 80066be:	4640      	mov	r0, r8
 80066c0:	4649      	mov	r1, r9
 80066c2:	f7fa fae9 	bl	8000c98 <__aeabi_uldivmod>
 80066c6:	4602      	mov	r2, r0
 80066c8:	460b      	mov	r3, r1
 80066ca:	4b4e      	ldr	r3, [pc, #312]	; (8006804 <UART_SetConfig+0x734>)
 80066cc:	fba3 2302 	umull	r2, r3, r3, r2
 80066d0:	095b      	lsrs	r3, r3, #5
 80066d2:	011e      	lsls	r6, r3, #4
 80066d4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80066d8:	4618      	mov	r0, r3
 80066da:	f04f 0100 	mov.w	r1, #0
 80066de:	4602      	mov	r2, r0
 80066e0:	460b      	mov	r3, r1
 80066e2:	1894      	adds	r4, r2, r2
 80066e4:	60bc      	str	r4, [r7, #8]
 80066e6:	415b      	adcs	r3, r3
 80066e8:	60fb      	str	r3, [r7, #12]
 80066ea:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80066ee:	1812      	adds	r2, r2, r0
 80066f0:	eb41 0303 	adc.w	r3, r1, r3
 80066f4:	f04f 0400 	mov.w	r4, #0
 80066f8:	f04f 0500 	mov.w	r5, #0
 80066fc:	00dd      	lsls	r5, r3, #3
 80066fe:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006702:	00d4      	lsls	r4, r2, #3
 8006704:	4622      	mov	r2, r4
 8006706:	462b      	mov	r3, r5
 8006708:	1814      	adds	r4, r2, r0
 800670a:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 800670e:	414b      	adcs	r3, r1
 8006710:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006714:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006718:	685b      	ldr	r3, [r3, #4]
 800671a:	4618      	mov	r0, r3
 800671c:	f04f 0100 	mov.w	r1, #0
 8006720:	f04f 0200 	mov.w	r2, #0
 8006724:	f04f 0300 	mov.w	r3, #0
 8006728:	008b      	lsls	r3, r1, #2
 800672a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800672e:	0082      	lsls	r2, r0, #2
 8006730:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006734:	f7fa fab0 	bl	8000c98 <__aeabi_uldivmod>
 8006738:	4602      	mov	r2, r0
 800673a:	460b      	mov	r3, r1
 800673c:	4b31      	ldr	r3, [pc, #196]	; (8006804 <UART_SetConfig+0x734>)
 800673e:	fba3 1302 	umull	r1, r3, r3, r2
 8006742:	095b      	lsrs	r3, r3, #5
 8006744:	2164      	movs	r1, #100	; 0x64
 8006746:	fb01 f303 	mul.w	r3, r1, r3
 800674a:	1ad3      	subs	r3, r2, r3
 800674c:	011b      	lsls	r3, r3, #4
 800674e:	3332      	adds	r3, #50	; 0x32
 8006750:	4a2c      	ldr	r2, [pc, #176]	; (8006804 <UART_SetConfig+0x734>)
 8006752:	fba2 2303 	umull	r2, r3, r2, r3
 8006756:	095b      	lsrs	r3, r3, #5
 8006758:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800675c:	441e      	add	r6, r3
 800675e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006762:	4618      	mov	r0, r3
 8006764:	f04f 0100 	mov.w	r1, #0
 8006768:	4602      	mov	r2, r0
 800676a:	460b      	mov	r3, r1
 800676c:	1894      	adds	r4, r2, r2
 800676e:	603c      	str	r4, [r7, #0]
 8006770:	415b      	adcs	r3, r3
 8006772:	607b      	str	r3, [r7, #4]
 8006774:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006778:	1812      	adds	r2, r2, r0
 800677a:	eb41 0303 	adc.w	r3, r1, r3
 800677e:	f04f 0400 	mov.w	r4, #0
 8006782:	f04f 0500 	mov.w	r5, #0
 8006786:	00dd      	lsls	r5, r3, #3
 8006788:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800678c:	00d4      	lsls	r4, r2, #3
 800678e:	4622      	mov	r2, r4
 8006790:	462b      	mov	r3, r5
 8006792:	1814      	adds	r4, r2, r0
 8006794:	f8c7 4090 	str.w	r4, [r7, #144]	; 0x90
 8006798:	414b      	adcs	r3, r1
 800679a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800679e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80067a2:	685b      	ldr	r3, [r3, #4]
 80067a4:	4618      	mov	r0, r3
 80067a6:	f04f 0100 	mov.w	r1, #0
 80067aa:	f04f 0200 	mov.w	r2, #0
 80067ae:	f04f 0300 	mov.w	r3, #0
 80067b2:	008b      	lsls	r3, r1, #2
 80067b4:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80067b8:	0082      	lsls	r2, r0, #2
 80067ba:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 80067be:	f7fa fa6b 	bl	8000c98 <__aeabi_uldivmod>
 80067c2:	4602      	mov	r2, r0
 80067c4:	460b      	mov	r3, r1
 80067c6:	4b0f      	ldr	r3, [pc, #60]	; (8006804 <UART_SetConfig+0x734>)
 80067c8:	fba3 1302 	umull	r1, r3, r3, r2
 80067cc:	095b      	lsrs	r3, r3, #5
 80067ce:	2164      	movs	r1, #100	; 0x64
 80067d0:	fb01 f303 	mul.w	r3, r1, r3
 80067d4:	1ad3      	subs	r3, r2, r3
 80067d6:	011b      	lsls	r3, r3, #4
 80067d8:	3332      	adds	r3, #50	; 0x32
 80067da:	4a0a      	ldr	r2, [pc, #40]	; (8006804 <UART_SetConfig+0x734>)
 80067dc:	fba2 2303 	umull	r2, r3, r2, r3
 80067e0:	095b      	lsrs	r3, r3, #5
 80067e2:	f003 020f 	and.w	r2, r3, #15
 80067e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	4432      	add	r2, r6
 80067ee:	609a      	str	r2, [r3, #8]
}
 80067f0:	e7ff      	b.n	80067f2 <UART_SetConfig+0x722>
 80067f2:	bf00      	nop
 80067f4:	37f4      	adds	r7, #244	; 0xf4
 80067f6:	46bd      	mov	sp, r7
 80067f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80067fc:	40011000 	.word	0x40011000
 8006800:	40011400 	.word	0x40011400
 8006804:	51eb851f 	.word	0x51eb851f

08006808 <__errno>:
 8006808:	4b01      	ldr	r3, [pc, #4]	; (8006810 <__errno+0x8>)
 800680a:	6818      	ldr	r0, [r3, #0]
 800680c:	4770      	bx	lr
 800680e:	bf00      	nop
 8006810:	2000001c 	.word	0x2000001c

08006814 <__libc_init_array>:
 8006814:	b570      	push	{r4, r5, r6, lr}
 8006816:	4d0d      	ldr	r5, [pc, #52]	; (800684c <__libc_init_array+0x38>)
 8006818:	4c0d      	ldr	r4, [pc, #52]	; (8006850 <__libc_init_array+0x3c>)
 800681a:	1b64      	subs	r4, r4, r5
 800681c:	10a4      	asrs	r4, r4, #2
 800681e:	2600      	movs	r6, #0
 8006820:	42a6      	cmp	r6, r4
 8006822:	d109      	bne.n	8006838 <__libc_init_array+0x24>
 8006824:	4d0b      	ldr	r5, [pc, #44]	; (8006854 <__libc_init_array+0x40>)
 8006826:	4c0c      	ldr	r4, [pc, #48]	; (8006858 <__libc_init_array+0x44>)
 8006828:	f004 fc46 	bl	800b0b8 <_init>
 800682c:	1b64      	subs	r4, r4, r5
 800682e:	10a4      	asrs	r4, r4, #2
 8006830:	2600      	movs	r6, #0
 8006832:	42a6      	cmp	r6, r4
 8006834:	d105      	bne.n	8006842 <__libc_init_array+0x2e>
 8006836:	bd70      	pop	{r4, r5, r6, pc}
 8006838:	f855 3b04 	ldr.w	r3, [r5], #4
 800683c:	4798      	blx	r3
 800683e:	3601      	adds	r6, #1
 8006840:	e7ee      	b.n	8006820 <__libc_init_array+0xc>
 8006842:	f855 3b04 	ldr.w	r3, [r5], #4
 8006846:	4798      	blx	r3
 8006848:	3601      	adds	r6, #1
 800684a:	e7f2      	b.n	8006832 <__libc_init_array+0x1e>
 800684c:	0800b93c 	.word	0x0800b93c
 8006850:	0800b93c 	.word	0x0800b93c
 8006854:	0800b93c 	.word	0x0800b93c
 8006858:	0800b940 	.word	0x0800b940

0800685c <memcpy>:
 800685c:	440a      	add	r2, r1
 800685e:	4291      	cmp	r1, r2
 8006860:	f100 33ff 	add.w	r3, r0, #4294967295
 8006864:	d100      	bne.n	8006868 <memcpy+0xc>
 8006866:	4770      	bx	lr
 8006868:	b510      	push	{r4, lr}
 800686a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800686e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006872:	4291      	cmp	r1, r2
 8006874:	d1f9      	bne.n	800686a <memcpy+0xe>
 8006876:	bd10      	pop	{r4, pc}

08006878 <memset>:
 8006878:	4402      	add	r2, r0
 800687a:	4603      	mov	r3, r0
 800687c:	4293      	cmp	r3, r2
 800687e:	d100      	bne.n	8006882 <memset+0xa>
 8006880:	4770      	bx	lr
 8006882:	f803 1b01 	strb.w	r1, [r3], #1
 8006886:	e7f9      	b.n	800687c <memset+0x4>

08006888 <__cvt>:
 8006888:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800688c:	ec55 4b10 	vmov	r4, r5, d0
 8006890:	2d00      	cmp	r5, #0
 8006892:	460e      	mov	r6, r1
 8006894:	4619      	mov	r1, r3
 8006896:	462b      	mov	r3, r5
 8006898:	bfbb      	ittet	lt
 800689a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800689e:	461d      	movlt	r5, r3
 80068a0:	2300      	movge	r3, #0
 80068a2:	232d      	movlt	r3, #45	; 0x2d
 80068a4:	700b      	strb	r3, [r1, #0]
 80068a6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80068a8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80068ac:	4691      	mov	r9, r2
 80068ae:	f023 0820 	bic.w	r8, r3, #32
 80068b2:	bfbc      	itt	lt
 80068b4:	4622      	movlt	r2, r4
 80068b6:	4614      	movlt	r4, r2
 80068b8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80068bc:	d005      	beq.n	80068ca <__cvt+0x42>
 80068be:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80068c2:	d100      	bne.n	80068c6 <__cvt+0x3e>
 80068c4:	3601      	adds	r6, #1
 80068c6:	2102      	movs	r1, #2
 80068c8:	e000      	b.n	80068cc <__cvt+0x44>
 80068ca:	2103      	movs	r1, #3
 80068cc:	ab03      	add	r3, sp, #12
 80068ce:	9301      	str	r3, [sp, #4]
 80068d0:	ab02      	add	r3, sp, #8
 80068d2:	9300      	str	r3, [sp, #0]
 80068d4:	ec45 4b10 	vmov	d0, r4, r5
 80068d8:	4653      	mov	r3, sl
 80068da:	4632      	mov	r2, r6
 80068dc:	f001 fdb4 	bl	8008448 <_dtoa_r>
 80068e0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80068e4:	4607      	mov	r7, r0
 80068e6:	d102      	bne.n	80068ee <__cvt+0x66>
 80068e8:	f019 0f01 	tst.w	r9, #1
 80068ec:	d022      	beq.n	8006934 <__cvt+0xac>
 80068ee:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80068f2:	eb07 0906 	add.w	r9, r7, r6
 80068f6:	d110      	bne.n	800691a <__cvt+0x92>
 80068f8:	783b      	ldrb	r3, [r7, #0]
 80068fa:	2b30      	cmp	r3, #48	; 0x30
 80068fc:	d10a      	bne.n	8006914 <__cvt+0x8c>
 80068fe:	2200      	movs	r2, #0
 8006900:	2300      	movs	r3, #0
 8006902:	4620      	mov	r0, r4
 8006904:	4629      	mov	r1, r5
 8006906:	f7fa f8e7 	bl	8000ad8 <__aeabi_dcmpeq>
 800690a:	b918      	cbnz	r0, 8006914 <__cvt+0x8c>
 800690c:	f1c6 0601 	rsb	r6, r6, #1
 8006910:	f8ca 6000 	str.w	r6, [sl]
 8006914:	f8da 3000 	ldr.w	r3, [sl]
 8006918:	4499      	add	r9, r3
 800691a:	2200      	movs	r2, #0
 800691c:	2300      	movs	r3, #0
 800691e:	4620      	mov	r0, r4
 8006920:	4629      	mov	r1, r5
 8006922:	f7fa f8d9 	bl	8000ad8 <__aeabi_dcmpeq>
 8006926:	b108      	cbz	r0, 800692c <__cvt+0xa4>
 8006928:	f8cd 900c 	str.w	r9, [sp, #12]
 800692c:	2230      	movs	r2, #48	; 0x30
 800692e:	9b03      	ldr	r3, [sp, #12]
 8006930:	454b      	cmp	r3, r9
 8006932:	d307      	bcc.n	8006944 <__cvt+0xbc>
 8006934:	9b03      	ldr	r3, [sp, #12]
 8006936:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006938:	1bdb      	subs	r3, r3, r7
 800693a:	4638      	mov	r0, r7
 800693c:	6013      	str	r3, [r2, #0]
 800693e:	b004      	add	sp, #16
 8006940:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006944:	1c59      	adds	r1, r3, #1
 8006946:	9103      	str	r1, [sp, #12]
 8006948:	701a      	strb	r2, [r3, #0]
 800694a:	e7f0      	b.n	800692e <__cvt+0xa6>

0800694c <__exponent>:
 800694c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800694e:	4603      	mov	r3, r0
 8006950:	2900      	cmp	r1, #0
 8006952:	bfb8      	it	lt
 8006954:	4249      	neglt	r1, r1
 8006956:	f803 2b02 	strb.w	r2, [r3], #2
 800695a:	bfb4      	ite	lt
 800695c:	222d      	movlt	r2, #45	; 0x2d
 800695e:	222b      	movge	r2, #43	; 0x2b
 8006960:	2909      	cmp	r1, #9
 8006962:	7042      	strb	r2, [r0, #1]
 8006964:	dd2a      	ble.n	80069bc <__exponent+0x70>
 8006966:	f10d 0407 	add.w	r4, sp, #7
 800696a:	46a4      	mov	ip, r4
 800696c:	270a      	movs	r7, #10
 800696e:	46a6      	mov	lr, r4
 8006970:	460a      	mov	r2, r1
 8006972:	fb91 f6f7 	sdiv	r6, r1, r7
 8006976:	fb07 1516 	mls	r5, r7, r6, r1
 800697a:	3530      	adds	r5, #48	; 0x30
 800697c:	2a63      	cmp	r2, #99	; 0x63
 800697e:	f104 34ff 	add.w	r4, r4, #4294967295
 8006982:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8006986:	4631      	mov	r1, r6
 8006988:	dcf1      	bgt.n	800696e <__exponent+0x22>
 800698a:	3130      	adds	r1, #48	; 0x30
 800698c:	f1ae 0502 	sub.w	r5, lr, #2
 8006990:	f804 1c01 	strb.w	r1, [r4, #-1]
 8006994:	1c44      	adds	r4, r0, #1
 8006996:	4629      	mov	r1, r5
 8006998:	4561      	cmp	r1, ip
 800699a:	d30a      	bcc.n	80069b2 <__exponent+0x66>
 800699c:	f10d 0209 	add.w	r2, sp, #9
 80069a0:	eba2 020e 	sub.w	r2, r2, lr
 80069a4:	4565      	cmp	r5, ip
 80069a6:	bf88      	it	hi
 80069a8:	2200      	movhi	r2, #0
 80069aa:	4413      	add	r3, r2
 80069ac:	1a18      	subs	r0, r3, r0
 80069ae:	b003      	add	sp, #12
 80069b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80069b2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80069b6:	f804 2f01 	strb.w	r2, [r4, #1]!
 80069ba:	e7ed      	b.n	8006998 <__exponent+0x4c>
 80069bc:	2330      	movs	r3, #48	; 0x30
 80069be:	3130      	adds	r1, #48	; 0x30
 80069c0:	7083      	strb	r3, [r0, #2]
 80069c2:	70c1      	strb	r1, [r0, #3]
 80069c4:	1d03      	adds	r3, r0, #4
 80069c6:	e7f1      	b.n	80069ac <__exponent+0x60>

080069c8 <_printf_float>:
 80069c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069cc:	ed2d 8b02 	vpush	{d8}
 80069d0:	b08d      	sub	sp, #52	; 0x34
 80069d2:	460c      	mov	r4, r1
 80069d4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80069d8:	4616      	mov	r6, r2
 80069da:	461f      	mov	r7, r3
 80069dc:	4605      	mov	r5, r0
 80069de:	f002 fe8f 	bl	8009700 <_localeconv_r>
 80069e2:	f8d0 a000 	ldr.w	sl, [r0]
 80069e6:	4650      	mov	r0, sl
 80069e8:	f7f9 fbfa 	bl	80001e0 <strlen>
 80069ec:	2300      	movs	r3, #0
 80069ee:	930a      	str	r3, [sp, #40]	; 0x28
 80069f0:	6823      	ldr	r3, [r4, #0]
 80069f2:	9305      	str	r3, [sp, #20]
 80069f4:	f8d8 3000 	ldr.w	r3, [r8]
 80069f8:	f894 b018 	ldrb.w	fp, [r4, #24]
 80069fc:	3307      	adds	r3, #7
 80069fe:	f023 0307 	bic.w	r3, r3, #7
 8006a02:	f103 0208 	add.w	r2, r3, #8
 8006a06:	f8c8 2000 	str.w	r2, [r8]
 8006a0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a0e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8006a12:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8006a16:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006a1a:	9307      	str	r3, [sp, #28]
 8006a1c:	f8cd 8018 	str.w	r8, [sp, #24]
 8006a20:	ee08 0a10 	vmov	s16, r0
 8006a24:	4b9f      	ldr	r3, [pc, #636]	; (8006ca4 <_printf_float+0x2dc>)
 8006a26:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006a2a:	f04f 32ff 	mov.w	r2, #4294967295
 8006a2e:	f7fa f885 	bl	8000b3c <__aeabi_dcmpun>
 8006a32:	bb88      	cbnz	r0, 8006a98 <_printf_float+0xd0>
 8006a34:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006a38:	4b9a      	ldr	r3, [pc, #616]	; (8006ca4 <_printf_float+0x2dc>)
 8006a3a:	f04f 32ff 	mov.w	r2, #4294967295
 8006a3e:	f7fa f85f 	bl	8000b00 <__aeabi_dcmple>
 8006a42:	bb48      	cbnz	r0, 8006a98 <_printf_float+0xd0>
 8006a44:	2200      	movs	r2, #0
 8006a46:	2300      	movs	r3, #0
 8006a48:	4640      	mov	r0, r8
 8006a4a:	4649      	mov	r1, r9
 8006a4c:	f7fa f84e 	bl	8000aec <__aeabi_dcmplt>
 8006a50:	b110      	cbz	r0, 8006a58 <_printf_float+0x90>
 8006a52:	232d      	movs	r3, #45	; 0x2d
 8006a54:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006a58:	4b93      	ldr	r3, [pc, #588]	; (8006ca8 <_printf_float+0x2e0>)
 8006a5a:	4894      	ldr	r0, [pc, #592]	; (8006cac <_printf_float+0x2e4>)
 8006a5c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8006a60:	bf94      	ite	ls
 8006a62:	4698      	movls	r8, r3
 8006a64:	4680      	movhi	r8, r0
 8006a66:	2303      	movs	r3, #3
 8006a68:	6123      	str	r3, [r4, #16]
 8006a6a:	9b05      	ldr	r3, [sp, #20]
 8006a6c:	f023 0204 	bic.w	r2, r3, #4
 8006a70:	6022      	str	r2, [r4, #0]
 8006a72:	f04f 0900 	mov.w	r9, #0
 8006a76:	9700      	str	r7, [sp, #0]
 8006a78:	4633      	mov	r3, r6
 8006a7a:	aa0b      	add	r2, sp, #44	; 0x2c
 8006a7c:	4621      	mov	r1, r4
 8006a7e:	4628      	mov	r0, r5
 8006a80:	f000 f9d8 	bl	8006e34 <_printf_common>
 8006a84:	3001      	adds	r0, #1
 8006a86:	f040 8090 	bne.w	8006baa <_printf_float+0x1e2>
 8006a8a:	f04f 30ff 	mov.w	r0, #4294967295
 8006a8e:	b00d      	add	sp, #52	; 0x34
 8006a90:	ecbd 8b02 	vpop	{d8}
 8006a94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a98:	4642      	mov	r2, r8
 8006a9a:	464b      	mov	r3, r9
 8006a9c:	4640      	mov	r0, r8
 8006a9e:	4649      	mov	r1, r9
 8006aa0:	f7fa f84c 	bl	8000b3c <__aeabi_dcmpun>
 8006aa4:	b140      	cbz	r0, 8006ab8 <_printf_float+0xf0>
 8006aa6:	464b      	mov	r3, r9
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	bfbc      	itt	lt
 8006aac:	232d      	movlt	r3, #45	; 0x2d
 8006aae:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006ab2:	487f      	ldr	r0, [pc, #508]	; (8006cb0 <_printf_float+0x2e8>)
 8006ab4:	4b7f      	ldr	r3, [pc, #508]	; (8006cb4 <_printf_float+0x2ec>)
 8006ab6:	e7d1      	b.n	8006a5c <_printf_float+0x94>
 8006ab8:	6863      	ldr	r3, [r4, #4]
 8006aba:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8006abe:	9206      	str	r2, [sp, #24]
 8006ac0:	1c5a      	adds	r2, r3, #1
 8006ac2:	d13f      	bne.n	8006b44 <_printf_float+0x17c>
 8006ac4:	2306      	movs	r3, #6
 8006ac6:	6063      	str	r3, [r4, #4]
 8006ac8:	9b05      	ldr	r3, [sp, #20]
 8006aca:	6861      	ldr	r1, [r4, #4]
 8006acc:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8006ad0:	2300      	movs	r3, #0
 8006ad2:	9303      	str	r3, [sp, #12]
 8006ad4:	ab0a      	add	r3, sp, #40	; 0x28
 8006ad6:	e9cd b301 	strd	fp, r3, [sp, #4]
 8006ada:	ab09      	add	r3, sp, #36	; 0x24
 8006adc:	ec49 8b10 	vmov	d0, r8, r9
 8006ae0:	9300      	str	r3, [sp, #0]
 8006ae2:	6022      	str	r2, [r4, #0]
 8006ae4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006ae8:	4628      	mov	r0, r5
 8006aea:	f7ff fecd 	bl	8006888 <__cvt>
 8006aee:	9b06      	ldr	r3, [sp, #24]
 8006af0:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006af2:	2b47      	cmp	r3, #71	; 0x47
 8006af4:	4680      	mov	r8, r0
 8006af6:	d108      	bne.n	8006b0a <_printf_float+0x142>
 8006af8:	1cc8      	adds	r0, r1, #3
 8006afa:	db02      	blt.n	8006b02 <_printf_float+0x13a>
 8006afc:	6863      	ldr	r3, [r4, #4]
 8006afe:	4299      	cmp	r1, r3
 8006b00:	dd41      	ble.n	8006b86 <_printf_float+0x1be>
 8006b02:	f1ab 0b02 	sub.w	fp, fp, #2
 8006b06:	fa5f fb8b 	uxtb.w	fp, fp
 8006b0a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006b0e:	d820      	bhi.n	8006b52 <_printf_float+0x18a>
 8006b10:	3901      	subs	r1, #1
 8006b12:	465a      	mov	r2, fp
 8006b14:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006b18:	9109      	str	r1, [sp, #36]	; 0x24
 8006b1a:	f7ff ff17 	bl	800694c <__exponent>
 8006b1e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006b20:	1813      	adds	r3, r2, r0
 8006b22:	2a01      	cmp	r2, #1
 8006b24:	4681      	mov	r9, r0
 8006b26:	6123      	str	r3, [r4, #16]
 8006b28:	dc02      	bgt.n	8006b30 <_printf_float+0x168>
 8006b2a:	6822      	ldr	r2, [r4, #0]
 8006b2c:	07d2      	lsls	r2, r2, #31
 8006b2e:	d501      	bpl.n	8006b34 <_printf_float+0x16c>
 8006b30:	3301      	adds	r3, #1
 8006b32:	6123      	str	r3, [r4, #16]
 8006b34:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d09c      	beq.n	8006a76 <_printf_float+0xae>
 8006b3c:	232d      	movs	r3, #45	; 0x2d
 8006b3e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006b42:	e798      	b.n	8006a76 <_printf_float+0xae>
 8006b44:	9a06      	ldr	r2, [sp, #24]
 8006b46:	2a47      	cmp	r2, #71	; 0x47
 8006b48:	d1be      	bne.n	8006ac8 <_printf_float+0x100>
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d1bc      	bne.n	8006ac8 <_printf_float+0x100>
 8006b4e:	2301      	movs	r3, #1
 8006b50:	e7b9      	b.n	8006ac6 <_printf_float+0xfe>
 8006b52:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8006b56:	d118      	bne.n	8006b8a <_printf_float+0x1c2>
 8006b58:	2900      	cmp	r1, #0
 8006b5a:	6863      	ldr	r3, [r4, #4]
 8006b5c:	dd0b      	ble.n	8006b76 <_printf_float+0x1ae>
 8006b5e:	6121      	str	r1, [r4, #16]
 8006b60:	b913      	cbnz	r3, 8006b68 <_printf_float+0x1a0>
 8006b62:	6822      	ldr	r2, [r4, #0]
 8006b64:	07d0      	lsls	r0, r2, #31
 8006b66:	d502      	bpl.n	8006b6e <_printf_float+0x1a6>
 8006b68:	3301      	adds	r3, #1
 8006b6a:	440b      	add	r3, r1
 8006b6c:	6123      	str	r3, [r4, #16]
 8006b6e:	65a1      	str	r1, [r4, #88]	; 0x58
 8006b70:	f04f 0900 	mov.w	r9, #0
 8006b74:	e7de      	b.n	8006b34 <_printf_float+0x16c>
 8006b76:	b913      	cbnz	r3, 8006b7e <_printf_float+0x1b6>
 8006b78:	6822      	ldr	r2, [r4, #0]
 8006b7a:	07d2      	lsls	r2, r2, #31
 8006b7c:	d501      	bpl.n	8006b82 <_printf_float+0x1ba>
 8006b7e:	3302      	adds	r3, #2
 8006b80:	e7f4      	b.n	8006b6c <_printf_float+0x1a4>
 8006b82:	2301      	movs	r3, #1
 8006b84:	e7f2      	b.n	8006b6c <_printf_float+0x1a4>
 8006b86:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8006b8a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006b8c:	4299      	cmp	r1, r3
 8006b8e:	db05      	blt.n	8006b9c <_printf_float+0x1d4>
 8006b90:	6823      	ldr	r3, [r4, #0]
 8006b92:	6121      	str	r1, [r4, #16]
 8006b94:	07d8      	lsls	r0, r3, #31
 8006b96:	d5ea      	bpl.n	8006b6e <_printf_float+0x1a6>
 8006b98:	1c4b      	adds	r3, r1, #1
 8006b9a:	e7e7      	b.n	8006b6c <_printf_float+0x1a4>
 8006b9c:	2900      	cmp	r1, #0
 8006b9e:	bfd4      	ite	le
 8006ba0:	f1c1 0202 	rsble	r2, r1, #2
 8006ba4:	2201      	movgt	r2, #1
 8006ba6:	4413      	add	r3, r2
 8006ba8:	e7e0      	b.n	8006b6c <_printf_float+0x1a4>
 8006baa:	6823      	ldr	r3, [r4, #0]
 8006bac:	055a      	lsls	r2, r3, #21
 8006bae:	d407      	bmi.n	8006bc0 <_printf_float+0x1f8>
 8006bb0:	6923      	ldr	r3, [r4, #16]
 8006bb2:	4642      	mov	r2, r8
 8006bb4:	4631      	mov	r1, r6
 8006bb6:	4628      	mov	r0, r5
 8006bb8:	47b8      	blx	r7
 8006bba:	3001      	adds	r0, #1
 8006bbc:	d12c      	bne.n	8006c18 <_printf_float+0x250>
 8006bbe:	e764      	b.n	8006a8a <_printf_float+0xc2>
 8006bc0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006bc4:	f240 80e0 	bls.w	8006d88 <_printf_float+0x3c0>
 8006bc8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006bcc:	2200      	movs	r2, #0
 8006bce:	2300      	movs	r3, #0
 8006bd0:	f7f9 ff82 	bl	8000ad8 <__aeabi_dcmpeq>
 8006bd4:	2800      	cmp	r0, #0
 8006bd6:	d034      	beq.n	8006c42 <_printf_float+0x27a>
 8006bd8:	4a37      	ldr	r2, [pc, #220]	; (8006cb8 <_printf_float+0x2f0>)
 8006bda:	2301      	movs	r3, #1
 8006bdc:	4631      	mov	r1, r6
 8006bde:	4628      	mov	r0, r5
 8006be0:	47b8      	blx	r7
 8006be2:	3001      	adds	r0, #1
 8006be4:	f43f af51 	beq.w	8006a8a <_printf_float+0xc2>
 8006be8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006bec:	429a      	cmp	r2, r3
 8006bee:	db02      	blt.n	8006bf6 <_printf_float+0x22e>
 8006bf0:	6823      	ldr	r3, [r4, #0]
 8006bf2:	07d8      	lsls	r0, r3, #31
 8006bf4:	d510      	bpl.n	8006c18 <_printf_float+0x250>
 8006bf6:	ee18 3a10 	vmov	r3, s16
 8006bfa:	4652      	mov	r2, sl
 8006bfc:	4631      	mov	r1, r6
 8006bfe:	4628      	mov	r0, r5
 8006c00:	47b8      	blx	r7
 8006c02:	3001      	adds	r0, #1
 8006c04:	f43f af41 	beq.w	8006a8a <_printf_float+0xc2>
 8006c08:	f04f 0800 	mov.w	r8, #0
 8006c0c:	f104 091a 	add.w	r9, r4, #26
 8006c10:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006c12:	3b01      	subs	r3, #1
 8006c14:	4543      	cmp	r3, r8
 8006c16:	dc09      	bgt.n	8006c2c <_printf_float+0x264>
 8006c18:	6823      	ldr	r3, [r4, #0]
 8006c1a:	079b      	lsls	r3, r3, #30
 8006c1c:	f100 8105 	bmi.w	8006e2a <_printf_float+0x462>
 8006c20:	68e0      	ldr	r0, [r4, #12]
 8006c22:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006c24:	4298      	cmp	r0, r3
 8006c26:	bfb8      	it	lt
 8006c28:	4618      	movlt	r0, r3
 8006c2a:	e730      	b.n	8006a8e <_printf_float+0xc6>
 8006c2c:	2301      	movs	r3, #1
 8006c2e:	464a      	mov	r2, r9
 8006c30:	4631      	mov	r1, r6
 8006c32:	4628      	mov	r0, r5
 8006c34:	47b8      	blx	r7
 8006c36:	3001      	adds	r0, #1
 8006c38:	f43f af27 	beq.w	8006a8a <_printf_float+0xc2>
 8006c3c:	f108 0801 	add.w	r8, r8, #1
 8006c40:	e7e6      	b.n	8006c10 <_printf_float+0x248>
 8006c42:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	dc39      	bgt.n	8006cbc <_printf_float+0x2f4>
 8006c48:	4a1b      	ldr	r2, [pc, #108]	; (8006cb8 <_printf_float+0x2f0>)
 8006c4a:	2301      	movs	r3, #1
 8006c4c:	4631      	mov	r1, r6
 8006c4e:	4628      	mov	r0, r5
 8006c50:	47b8      	blx	r7
 8006c52:	3001      	adds	r0, #1
 8006c54:	f43f af19 	beq.w	8006a8a <_printf_float+0xc2>
 8006c58:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006c5c:	4313      	orrs	r3, r2
 8006c5e:	d102      	bne.n	8006c66 <_printf_float+0x29e>
 8006c60:	6823      	ldr	r3, [r4, #0]
 8006c62:	07d9      	lsls	r1, r3, #31
 8006c64:	d5d8      	bpl.n	8006c18 <_printf_float+0x250>
 8006c66:	ee18 3a10 	vmov	r3, s16
 8006c6a:	4652      	mov	r2, sl
 8006c6c:	4631      	mov	r1, r6
 8006c6e:	4628      	mov	r0, r5
 8006c70:	47b8      	blx	r7
 8006c72:	3001      	adds	r0, #1
 8006c74:	f43f af09 	beq.w	8006a8a <_printf_float+0xc2>
 8006c78:	f04f 0900 	mov.w	r9, #0
 8006c7c:	f104 0a1a 	add.w	sl, r4, #26
 8006c80:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006c82:	425b      	negs	r3, r3
 8006c84:	454b      	cmp	r3, r9
 8006c86:	dc01      	bgt.n	8006c8c <_printf_float+0x2c4>
 8006c88:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006c8a:	e792      	b.n	8006bb2 <_printf_float+0x1ea>
 8006c8c:	2301      	movs	r3, #1
 8006c8e:	4652      	mov	r2, sl
 8006c90:	4631      	mov	r1, r6
 8006c92:	4628      	mov	r0, r5
 8006c94:	47b8      	blx	r7
 8006c96:	3001      	adds	r0, #1
 8006c98:	f43f aef7 	beq.w	8006a8a <_printf_float+0xc2>
 8006c9c:	f109 0901 	add.w	r9, r9, #1
 8006ca0:	e7ee      	b.n	8006c80 <_printf_float+0x2b8>
 8006ca2:	bf00      	nop
 8006ca4:	7fefffff 	.word	0x7fefffff
 8006ca8:	0800b484 	.word	0x0800b484
 8006cac:	0800b488 	.word	0x0800b488
 8006cb0:	0800b490 	.word	0x0800b490
 8006cb4:	0800b48c 	.word	0x0800b48c
 8006cb8:	0800b494 	.word	0x0800b494
 8006cbc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006cbe:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006cc0:	429a      	cmp	r2, r3
 8006cc2:	bfa8      	it	ge
 8006cc4:	461a      	movge	r2, r3
 8006cc6:	2a00      	cmp	r2, #0
 8006cc8:	4691      	mov	r9, r2
 8006cca:	dc37      	bgt.n	8006d3c <_printf_float+0x374>
 8006ccc:	f04f 0b00 	mov.w	fp, #0
 8006cd0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006cd4:	f104 021a 	add.w	r2, r4, #26
 8006cd8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006cda:	9305      	str	r3, [sp, #20]
 8006cdc:	eba3 0309 	sub.w	r3, r3, r9
 8006ce0:	455b      	cmp	r3, fp
 8006ce2:	dc33      	bgt.n	8006d4c <_printf_float+0x384>
 8006ce4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006ce8:	429a      	cmp	r2, r3
 8006cea:	db3b      	blt.n	8006d64 <_printf_float+0x39c>
 8006cec:	6823      	ldr	r3, [r4, #0]
 8006cee:	07da      	lsls	r2, r3, #31
 8006cf0:	d438      	bmi.n	8006d64 <_printf_float+0x39c>
 8006cf2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006cf4:	9b05      	ldr	r3, [sp, #20]
 8006cf6:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006cf8:	1ad3      	subs	r3, r2, r3
 8006cfa:	eba2 0901 	sub.w	r9, r2, r1
 8006cfe:	4599      	cmp	r9, r3
 8006d00:	bfa8      	it	ge
 8006d02:	4699      	movge	r9, r3
 8006d04:	f1b9 0f00 	cmp.w	r9, #0
 8006d08:	dc35      	bgt.n	8006d76 <_printf_float+0x3ae>
 8006d0a:	f04f 0800 	mov.w	r8, #0
 8006d0e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006d12:	f104 0a1a 	add.w	sl, r4, #26
 8006d16:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006d1a:	1a9b      	subs	r3, r3, r2
 8006d1c:	eba3 0309 	sub.w	r3, r3, r9
 8006d20:	4543      	cmp	r3, r8
 8006d22:	f77f af79 	ble.w	8006c18 <_printf_float+0x250>
 8006d26:	2301      	movs	r3, #1
 8006d28:	4652      	mov	r2, sl
 8006d2a:	4631      	mov	r1, r6
 8006d2c:	4628      	mov	r0, r5
 8006d2e:	47b8      	blx	r7
 8006d30:	3001      	adds	r0, #1
 8006d32:	f43f aeaa 	beq.w	8006a8a <_printf_float+0xc2>
 8006d36:	f108 0801 	add.w	r8, r8, #1
 8006d3a:	e7ec      	b.n	8006d16 <_printf_float+0x34e>
 8006d3c:	4613      	mov	r3, r2
 8006d3e:	4631      	mov	r1, r6
 8006d40:	4642      	mov	r2, r8
 8006d42:	4628      	mov	r0, r5
 8006d44:	47b8      	blx	r7
 8006d46:	3001      	adds	r0, #1
 8006d48:	d1c0      	bne.n	8006ccc <_printf_float+0x304>
 8006d4a:	e69e      	b.n	8006a8a <_printf_float+0xc2>
 8006d4c:	2301      	movs	r3, #1
 8006d4e:	4631      	mov	r1, r6
 8006d50:	4628      	mov	r0, r5
 8006d52:	9205      	str	r2, [sp, #20]
 8006d54:	47b8      	blx	r7
 8006d56:	3001      	adds	r0, #1
 8006d58:	f43f ae97 	beq.w	8006a8a <_printf_float+0xc2>
 8006d5c:	9a05      	ldr	r2, [sp, #20]
 8006d5e:	f10b 0b01 	add.w	fp, fp, #1
 8006d62:	e7b9      	b.n	8006cd8 <_printf_float+0x310>
 8006d64:	ee18 3a10 	vmov	r3, s16
 8006d68:	4652      	mov	r2, sl
 8006d6a:	4631      	mov	r1, r6
 8006d6c:	4628      	mov	r0, r5
 8006d6e:	47b8      	blx	r7
 8006d70:	3001      	adds	r0, #1
 8006d72:	d1be      	bne.n	8006cf2 <_printf_float+0x32a>
 8006d74:	e689      	b.n	8006a8a <_printf_float+0xc2>
 8006d76:	9a05      	ldr	r2, [sp, #20]
 8006d78:	464b      	mov	r3, r9
 8006d7a:	4442      	add	r2, r8
 8006d7c:	4631      	mov	r1, r6
 8006d7e:	4628      	mov	r0, r5
 8006d80:	47b8      	blx	r7
 8006d82:	3001      	adds	r0, #1
 8006d84:	d1c1      	bne.n	8006d0a <_printf_float+0x342>
 8006d86:	e680      	b.n	8006a8a <_printf_float+0xc2>
 8006d88:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006d8a:	2a01      	cmp	r2, #1
 8006d8c:	dc01      	bgt.n	8006d92 <_printf_float+0x3ca>
 8006d8e:	07db      	lsls	r3, r3, #31
 8006d90:	d538      	bpl.n	8006e04 <_printf_float+0x43c>
 8006d92:	2301      	movs	r3, #1
 8006d94:	4642      	mov	r2, r8
 8006d96:	4631      	mov	r1, r6
 8006d98:	4628      	mov	r0, r5
 8006d9a:	47b8      	blx	r7
 8006d9c:	3001      	adds	r0, #1
 8006d9e:	f43f ae74 	beq.w	8006a8a <_printf_float+0xc2>
 8006da2:	ee18 3a10 	vmov	r3, s16
 8006da6:	4652      	mov	r2, sl
 8006da8:	4631      	mov	r1, r6
 8006daa:	4628      	mov	r0, r5
 8006dac:	47b8      	blx	r7
 8006dae:	3001      	adds	r0, #1
 8006db0:	f43f ae6b 	beq.w	8006a8a <_printf_float+0xc2>
 8006db4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006db8:	2200      	movs	r2, #0
 8006dba:	2300      	movs	r3, #0
 8006dbc:	f7f9 fe8c 	bl	8000ad8 <__aeabi_dcmpeq>
 8006dc0:	b9d8      	cbnz	r0, 8006dfa <_printf_float+0x432>
 8006dc2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006dc4:	f108 0201 	add.w	r2, r8, #1
 8006dc8:	3b01      	subs	r3, #1
 8006dca:	4631      	mov	r1, r6
 8006dcc:	4628      	mov	r0, r5
 8006dce:	47b8      	blx	r7
 8006dd0:	3001      	adds	r0, #1
 8006dd2:	d10e      	bne.n	8006df2 <_printf_float+0x42a>
 8006dd4:	e659      	b.n	8006a8a <_printf_float+0xc2>
 8006dd6:	2301      	movs	r3, #1
 8006dd8:	4652      	mov	r2, sl
 8006dda:	4631      	mov	r1, r6
 8006ddc:	4628      	mov	r0, r5
 8006dde:	47b8      	blx	r7
 8006de0:	3001      	adds	r0, #1
 8006de2:	f43f ae52 	beq.w	8006a8a <_printf_float+0xc2>
 8006de6:	f108 0801 	add.w	r8, r8, #1
 8006dea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006dec:	3b01      	subs	r3, #1
 8006dee:	4543      	cmp	r3, r8
 8006df0:	dcf1      	bgt.n	8006dd6 <_printf_float+0x40e>
 8006df2:	464b      	mov	r3, r9
 8006df4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006df8:	e6dc      	b.n	8006bb4 <_printf_float+0x1ec>
 8006dfa:	f04f 0800 	mov.w	r8, #0
 8006dfe:	f104 0a1a 	add.w	sl, r4, #26
 8006e02:	e7f2      	b.n	8006dea <_printf_float+0x422>
 8006e04:	2301      	movs	r3, #1
 8006e06:	4642      	mov	r2, r8
 8006e08:	e7df      	b.n	8006dca <_printf_float+0x402>
 8006e0a:	2301      	movs	r3, #1
 8006e0c:	464a      	mov	r2, r9
 8006e0e:	4631      	mov	r1, r6
 8006e10:	4628      	mov	r0, r5
 8006e12:	47b8      	blx	r7
 8006e14:	3001      	adds	r0, #1
 8006e16:	f43f ae38 	beq.w	8006a8a <_printf_float+0xc2>
 8006e1a:	f108 0801 	add.w	r8, r8, #1
 8006e1e:	68e3      	ldr	r3, [r4, #12]
 8006e20:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006e22:	1a5b      	subs	r3, r3, r1
 8006e24:	4543      	cmp	r3, r8
 8006e26:	dcf0      	bgt.n	8006e0a <_printf_float+0x442>
 8006e28:	e6fa      	b.n	8006c20 <_printf_float+0x258>
 8006e2a:	f04f 0800 	mov.w	r8, #0
 8006e2e:	f104 0919 	add.w	r9, r4, #25
 8006e32:	e7f4      	b.n	8006e1e <_printf_float+0x456>

08006e34 <_printf_common>:
 8006e34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006e38:	4616      	mov	r6, r2
 8006e3a:	4699      	mov	r9, r3
 8006e3c:	688a      	ldr	r2, [r1, #8]
 8006e3e:	690b      	ldr	r3, [r1, #16]
 8006e40:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006e44:	4293      	cmp	r3, r2
 8006e46:	bfb8      	it	lt
 8006e48:	4613      	movlt	r3, r2
 8006e4a:	6033      	str	r3, [r6, #0]
 8006e4c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006e50:	4607      	mov	r7, r0
 8006e52:	460c      	mov	r4, r1
 8006e54:	b10a      	cbz	r2, 8006e5a <_printf_common+0x26>
 8006e56:	3301      	adds	r3, #1
 8006e58:	6033      	str	r3, [r6, #0]
 8006e5a:	6823      	ldr	r3, [r4, #0]
 8006e5c:	0699      	lsls	r1, r3, #26
 8006e5e:	bf42      	ittt	mi
 8006e60:	6833      	ldrmi	r3, [r6, #0]
 8006e62:	3302      	addmi	r3, #2
 8006e64:	6033      	strmi	r3, [r6, #0]
 8006e66:	6825      	ldr	r5, [r4, #0]
 8006e68:	f015 0506 	ands.w	r5, r5, #6
 8006e6c:	d106      	bne.n	8006e7c <_printf_common+0x48>
 8006e6e:	f104 0a19 	add.w	sl, r4, #25
 8006e72:	68e3      	ldr	r3, [r4, #12]
 8006e74:	6832      	ldr	r2, [r6, #0]
 8006e76:	1a9b      	subs	r3, r3, r2
 8006e78:	42ab      	cmp	r3, r5
 8006e7a:	dc26      	bgt.n	8006eca <_printf_common+0x96>
 8006e7c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006e80:	1e13      	subs	r3, r2, #0
 8006e82:	6822      	ldr	r2, [r4, #0]
 8006e84:	bf18      	it	ne
 8006e86:	2301      	movne	r3, #1
 8006e88:	0692      	lsls	r2, r2, #26
 8006e8a:	d42b      	bmi.n	8006ee4 <_printf_common+0xb0>
 8006e8c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006e90:	4649      	mov	r1, r9
 8006e92:	4638      	mov	r0, r7
 8006e94:	47c0      	blx	r8
 8006e96:	3001      	adds	r0, #1
 8006e98:	d01e      	beq.n	8006ed8 <_printf_common+0xa4>
 8006e9a:	6823      	ldr	r3, [r4, #0]
 8006e9c:	68e5      	ldr	r5, [r4, #12]
 8006e9e:	6832      	ldr	r2, [r6, #0]
 8006ea0:	f003 0306 	and.w	r3, r3, #6
 8006ea4:	2b04      	cmp	r3, #4
 8006ea6:	bf08      	it	eq
 8006ea8:	1aad      	subeq	r5, r5, r2
 8006eaa:	68a3      	ldr	r3, [r4, #8]
 8006eac:	6922      	ldr	r2, [r4, #16]
 8006eae:	bf0c      	ite	eq
 8006eb0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006eb4:	2500      	movne	r5, #0
 8006eb6:	4293      	cmp	r3, r2
 8006eb8:	bfc4      	itt	gt
 8006eba:	1a9b      	subgt	r3, r3, r2
 8006ebc:	18ed      	addgt	r5, r5, r3
 8006ebe:	2600      	movs	r6, #0
 8006ec0:	341a      	adds	r4, #26
 8006ec2:	42b5      	cmp	r5, r6
 8006ec4:	d11a      	bne.n	8006efc <_printf_common+0xc8>
 8006ec6:	2000      	movs	r0, #0
 8006ec8:	e008      	b.n	8006edc <_printf_common+0xa8>
 8006eca:	2301      	movs	r3, #1
 8006ecc:	4652      	mov	r2, sl
 8006ece:	4649      	mov	r1, r9
 8006ed0:	4638      	mov	r0, r7
 8006ed2:	47c0      	blx	r8
 8006ed4:	3001      	adds	r0, #1
 8006ed6:	d103      	bne.n	8006ee0 <_printf_common+0xac>
 8006ed8:	f04f 30ff 	mov.w	r0, #4294967295
 8006edc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ee0:	3501      	adds	r5, #1
 8006ee2:	e7c6      	b.n	8006e72 <_printf_common+0x3e>
 8006ee4:	18e1      	adds	r1, r4, r3
 8006ee6:	1c5a      	adds	r2, r3, #1
 8006ee8:	2030      	movs	r0, #48	; 0x30
 8006eea:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006eee:	4422      	add	r2, r4
 8006ef0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006ef4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006ef8:	3302      	adds	r3, #2
 8006efa:	e7c7      	b.n	8006e8c <_printf_common+0x58>
 8006efc:	2301      	movs	r3, #1
 8006efe:	4622      	mov	r2, r4
 8006f00:	4649      	mov	r1, r9
 8006f02:	4638      	mov	r0, r7
 8006f04:	47c0      	blx	r8
 8006f06:	3001      	adds	r0, #1
 8006f08:	d0e6      	beq.n	8006ed8 <_printf_common+0xa4>
 8006f0a:	3601      	adds	r6, #1
 8006f0c:	e7d9      	b.n	8006ec2 <_printf_common+0x8e>
	...

08006f10 <_printf_i>:
 8006f10:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006f14:	460c      	mov	r4, r1
 8006f16:	4691      	mov	r9, r2
 8006f18:	7e27      	ldrb	r7, [r4, #24]
 8006f1a:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006f1c:	2f78      	cmp	r7, #120	; 0x78
 8006f1e:	4680      	mov	r8, r0
 8006f20:	469a      	mov	sl, r3
 8006f22:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006f26:	d807      	bhi.n	8006f38 <_printf_i+0x28>
 8006f28:	2f62      	cmp	r7, #98	; 0x62
 8006f2a:	d80a      	bhi.n	8006f42 <_printf_i+0x32>
 8006f2c:	2f00      	cmp	r7, #0
 8006f2e:	f000 80d8 	beq.w	80070e2 <_printf_i+0x1d2>
 8006f32:	2f58      	cmp	r7, #88	; 0x58
 8006f34:	f000 80a3 	beq.w	800707e <_printf_i+0x16e>
 8006f38:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006f3c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006f40:	e03a      	b.n	8006fb8 <_printf_i+0xa8>
 8006f42:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006f46:	2b15      	cmp	r3, #21
 8006f48:	d8f6      	bhi.n	8006f38 <_printf_i+0x28>
 8006f4a:	a001      	add	r0, pc, #4	; (adr r0, 8006f50 <_printf_i+0x40>)
 8006f4c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8006f50:	08006fa9 	.word	0x08006fa9
 8006f54:	08006fbd 	.word	0x08006fbd
 8006f58:	08006f39 	.word	0x08006f39
 8006f5c:	08006f39 	.word	0x08006f39
 8006f60:	08006f39 	.word	0x08006f39
 8006f64:	08006f39 	.word	0x08006f39
 8006f68:	08006fbd 	.word	0x08006fbd
 8006f6c:	08006f39 	.word	0x08006f39
 8006f70:	08006f39 	.word	0x08006f39
 8006f74:	08006f39 	.word	0x08006f39
 8006f78:	08006f39 	.word	0x08006f39
 8006f7c:	080070c9 	.word	0x080070c9
 8006f80:	08006fed 	.word	0x08006fed
 8006f84:	080070ab 	.word	0x080070ab
 8006f88:	08006f39 	.word	0x08006f39
 8006f8c:	08006f39 	.word	0x08006f39
 8006f90:	080070eb 	.word	0x080070eb
 8006f94:	08006f39 	.word	0x08006f39
 8006f98:	08006fed 	.word	0x08006fed
 8006f9c:	08006f39 	.word	0x08006f39
 8006fa0:	08006f39 	.word	0x08006f39
 8006fa4:	080070b3 	.word	0x080070b3
 8006fa8:	680b      	ldr	r3, [r1, #0]
 8006faa:	1d1a      	adds	r2, r3, #4
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	600a      	str	r2, [r1, #0]
 8006fb0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006fb4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006fb8:	2301      	movs	r3, #1
 8006fba:	e0a3      	b.n	8007104 <_printf_i+0x1f4>
 8006fbc:	6825      	ldr	r5, [r4, #0]
 8006fbe:	6808      	ldr	r0, [r1, #0]
 8006fc0:	062e      	lsls	r6, r5, #24
 8006fc2:	f100 0304 	add.w	r3, r0, #4
 8006fc6:	d50a      	bpl.n	8006fde <_printf_i+0xce>
 8006fc8:	6805      	ldr	r5, [r0, #0]
 8006fca:	600b      	str	r3, [r1, #0]
 8006fcc:	2d00      	cmp	r5, #0
 8006fce:	da03      	bge.n	8006fd8 <_printf_i+0xc8>
 8006fd0:	232d      	movs	r3, #45	; 0x2d
 8006fd2:	426d      	negs	r5, r5
 8006fd4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006fd8:	485e      	ldr	r0, [pc, #376]	; (8007154 <_printf_i+0x244>)
 8006fda:	230a      	movs	r3, #10
 8006fdc:	e019      	b.n	8007012 <_printf_i+0x102>
 8006fde:	f015 0f40 	tst.w	r5, #64	; 0x40
 8006fe2:	6805      	ldr	r5, [r0, #0]
 8006fe4:	600b      	str	r3, [r1, #0]
 8006fe6:	bf18      	it	ne
 8006fe8:	b22d      	sxthne	r5, r5
 8006fea:	e7ef      	b.n	8006fcc <_printf_i+0xbc>
 8006fec:	680b      	ldr	r3, [r1, #0]
 8006fee:	6825      	ldr	r5, [r4, #0]
 8006ff0:	1d18      	adds	r0, r3, #4
 8006ff2:	6008      	str	r0, [r1, #0]
 8006ff4:	0628      	lsls	r0, r5, #24
 8006ff6:	d501      	bpl.n	8006ffc <_printf_i+0xec>
 8006ff8:	681d      	ldr	r5, [r3, #0]
 8006ffa:	e002      	b.n	8007002 <_printf_i+0xf2>
 8006ffc:	0669      	lsls	r1, r5, #25
 8006ffe:	d5fb      	bpl.n	8006ff8 <_printf_i+0xe8>
 8007000:	881d      	ldrh	r5, [r3, #0]
 8007002:	4854      	ldr	r0, [pc, #336]	; (8007154 <_printf_i+0x244>)
 8007004:	2f6f      	cmp	r7, #111	; 0x6f
 8007006:	bf0c      	ite	eq
 8007008:	2308      	moveq	r3, #8
 800700a:	230a      	movne	r3, #10
 800700c:	2100      	movs	r1, #0
 800700e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007012:	6866      	ldr	r6, [r4, #4]
 8007014:	60a6      	str	r6, [r4, #8]
 8007016:	2e00      	cmp	r6, #0
 8007018:	bfa2      	ittt	ge
 800701a:	6821      	ldrge	r1, [r4, #0]
 800701c:	f021 0104 	bicge.w	r1, r1, #4
 8007020:	6021      	strge	r1, [r4, #0]
 8007022:	b90d      	cbnz	r5, 8007028 <_printf_i+0x118>
 8007024:	2e00      	cmp	r6, #0
 8007026:	d04d      	beq.n	80070c4 <_printf_i+0x1b4>
 8007028:	4616      	mov	r6, r2
 800702a:	fbb5 f1f3 	udiv	r1, r5, r3
 800702e:	fb03 5711 	mls	r7, r3, r1, r5
 8007032:	5dc7      	ldrb	r7, [r0, r7]
 8007034:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007038:	462f      	mov	r7, r5
 800703a:	42bb      	cmp	r3, r7
 800703c:	460d      	mov	r5, r1
 800703e:	d9f4      	bls.n	800702a <_printf_i+0x11a>
 8007040:	2b08      	cmp	r3, #8
 8007042:	d10b      	bne.n	800705c <_printf_i+0x14c>
 8007044:	6823      	ldr	r3, [r4, #0]
 8007046:	07df      	lsls	r7, r3, #31
 8007048:	d508      	bpl.n	800705c <_printf_i+0x14c>
 800704a:	6923      	ldr	r3, [r4, #16]
 800704c:	6861      	ldr	r1, [r4, #4]
 800704e:	4299      	cmp	r1, r3
 8007050:	bfde      	ittt	le
 8007052:	2330      	movle	r3, #48	; 0x30
 8007054:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007058:	f106 36ff 	addle.w	r6, r6, #4294967295
 800705c:	1b92      	subs	r2, r2, r6
 800705e:	6122      	str	r2, [r4, #16]
 8007060:	f8cd a000 	str.w	sl, [sp]
 8007064:	464b      	mov	r3, r9
 8007066:	aa03      	add	r2, sp, #12
 8007068:	4621      	mov	r1, r4
 800706a:	4640      	mov	r0, r8
 800706c:	f7ff fee2 	bl	8006e34 <_printf_common>
 8007070:	3001      	adds	r0, #1
 8007072:	d14c      	bne.n	800710e <_printf_i+0x1fe>
 8007074:	f04f 30ff 	mov.w	r0, #4294967295
 8007078:	b004      	add	sp, #16
 800707a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800707e:	4835      	ldr	r0, [pc, #212]	; (8007154 <_printf_i+0x244>)
 8007080:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007084:	6823      	ldr	r3, [r4, #0]
 8007086:	680e      	ldr	r6, [r1, #0]
 8007088:	061f      	lsls	r7, r3, #24
 800708a:	f856 5b04 	ldr.w	r5, [r6], #4
 800708e:	600e      	str	r6, [r1, #0]
 8007090:	d514      	bpl.n	80070bc <_printf_i+0x1ac>
 8007092:	07d9      	lsls	r1, r3, #31
 8007094:	bf44      	itt	mi
 8007096:	f043 0320 	orrmi.w	r3, r3, #32
 800709a:	6023      	strmi	r3, [r4, #0]
 800709c:	b91d      	cbnz	r5, 80070a6 <_printf_i+0x196>
 800709e:	6823      	ldr	r3, [r4, #0]
 80070a0:	f023 0320 	bic.w	r3, r3, #32
 80070a4:	6023      	str	r3, [r4, #0]
 80070a6:	2310      	movs	r3, #16
 80070a8:	e7b0      	b.n	800700c <_printf_i+0xfc>
 80070aa:	6823      	ldr	r3, [r4, #0]
 80070ac:	f043 0320 	orr.w	r3, r3, #32
 80070b0:	6023      	str	r3, [r4, #0]
 80070b2:	2378      	movs	r3, #120	; 0x78
 80070b4:	4828      	ldr	r0, [pc, #160]	; (8007158 <_printf_i+0x248>)
 80070b6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80070ba:	e7e3      	b.n	8007084 <_printf_i+0x174>
 80070bc:	065e      	lsls	r6, r3, #25
 80070be:	bf48      	it	mi
 80070c0:	b2ad      	uxthmi	r5, r5
 80070c2:	e7e6      	b.n	8007092 <_printf_i+0x182>
 80070c4:	4616      	mov	r6, r2
 80070c6:	e7bb      	b.n	8007040 <_printf_i+0x130>
 80070c8:	680b      	ldr	r3, [r1, #0]
 80070ca:	6826      	ldr	r6, [r4, #0]
 80070cc:	6960      	ldr	r0, [r4, #20]
 80070ce:	1d1d      	adds	r5, r3, #4
 80070d0:	600d      	str	r5, [r1, #0]
 80070d2:	0635      	lsls	r5, r6, #24
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	d501      	bpl.n	80070dc <_printf_i+0x1cc>
 80070d8:	6018      	str	r0, [r3, #0]
 80070da:	e002      	b.n	80070e2 <_printf_i+0x1d2>
 80070dc:	0671      	lsls	r1, r6, #25
 80070de:	d5fb      	bpl.n	80070d8 <_printf_i+0x1c8>
 80070e0:	8018      	strh	r0, [r3, #0]
 80070e2:	2300      	movs	r3, #0
 80070e4:	6123      	str	r3, [r4, #16]
 80070e6:	4616      	mov	r6, r2
 80070e8:	e7ba      	b.n	8007060 <_printf_i+0x150>
 80070ea:	680b      	ldr	r3, [r1, #0]
 80070ec:	1d1a      	adds	r2, r3, #4
 80070ee:	600a      	str	r2, [r1, #0]
 80070f0:	681e      	ldr	r6, [r3, #0]
 80070f2:	6862      	ldr	r2, [r4, #4]
 80070f4:	2100      	movs	r1, #0
 80070f6:	4630      	mov	r0, r6
 80070f8:	f7f9 f87a 	bl	80001f0 <memchr>
 80070fc:	b108      	cbz	r0, 8007102 <_printf_i+0x1f2>
 80070fe:	1b80      	subs	r0, r0, r6
 8007100:	6060      	str	r0, [r4, #4]
 8007102:	6863      	ldr	r3, [r4, #4]
 8007104:	6123      	str	r3, [r4, #16]
 8007106:	2300      	movs	r3, #0
 8007108:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800710c:	e7a8      	b.n	8007060 <_printf_i+0x150>
 800710e:	6923      	ldr	r3, [r4, #16]
 8007110:	4632      	mov	r2, r6
 8007112:	4649      	mov	r1, r9
 8007114:	4640      	mov	r0, r8
 8007116:	47d0      	blx	sl
 8007118:	3001      	adds	r0, #1
 800711a:	d0ab      	beq.n	8007074 <_printf_i+0x164>
 800711c:	6823      	ldr	r3, [r4, #0]
 800711e:	079b      	lsls	r3, r3, #30
 8007120:	d413      	bmi.n	800714a <_printf_i+0x23a>
 8007122:	68e0      	ldr	r0, [r4, #12]
 8007124:	9b03      	ldr	r3, [sp, #12]
 8007126:	4298      	cmp	r0, r3
 8007128:	bfb8      	it	lt
 800712a:	4618      	movlt	r0, r3
 800712c:	e7a4      	b.n	8007078 <_printf_i+0x168>
 800712e:	2301      	movs	r3, #1
 8007130:	4632      	mov	r2, r6
 8007132:	4649      	mov	r1, r9
 8007134:	4640      	mov	r0, r8
 8007136:	47d0      	blx	sl
 8007138:	3001      	adds	r0, #1
 800713a:	d09b      	beq.n	8007074 <_printf_i+0x164>
 800713c:	3501      	adds	r5, #1
 800713e:	68e3      	ldr	r3, [r4, #12]
 8007140:	9903      	ldr	r1, [sp, #12]
 8007142:	1a5b      	subs	r3, r3, r1
 8007144:	42ab      	cmp	r3, r5
 8007146:	dcf2      	bgt.n	800712e <_printf_i+0x21e>
 8007148:	e7eb      	b.n	8007122 <_printf_i+0x212>
 800714a:	2500      	movs	r5, #0
 800714c:	f104 0619 	add.w	r6, r4, #25
 8007150:	e7f5      	b.n	800713e <_printf_i+0x22e>
 8007152:	bf00      	nop
 8007154:	0800b496 	.word	0x0800b496
 8007158:	0800b4a7 	.word	0x0800b4a7

0800715c <_scanf_float>:
 800715c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007160:	b087      	sub	sp, #28
 8007162:	4617      	mov	r7, r2
 8007164:	9303      	str	r3, [sp, #12]
 8007166:	688b      	ldr	r3, [r1, #8]
 8007168:	1e5a      	subs	r2, r3, #1
 800716a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800716e:	bf83      	ittte	hi
 8007170:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8007174:	195b      	addhi	r3, r3, r5
 8007176:	9302      	strhi	r3, [sp, #8]
 8007178:	2300      	movls	r3, #0
 800717a:	bf86      	itte	hi
 800717c:	f240 135d 	movwhi	r3, #349	; 0x15d
 8007180:	608b      	strhi	r3, [r1, #8]
 8007182:	9302      	strls	r3, [sp, #8]
 8007184:	680b      	ldr	r3, [r1, #0]
 8007186:	468b      	mov	fp, r1
 8007188:	2500      	movs	r5, #0
 800718a:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800718e:	f84b 3b1c 	str.w	r3, [fp], #28
 8007192:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8007196:	4680      	mov	r8, r0
 8007198:	460c      	mov	r4, r1
 800719a:	465e      	mov	r6, fp
 800719c:	46aa      	mov	sl, r5
 800719e:	46a9      	mov	r9, r5
 80071a0:	9501      	str	r5, [sp, #4]
 80071a2:	68a2      	ldr	r2, [r4, #8]
 80071a4:	b152      	cbz	r2, 80071bc <_scanf_float+0x60>
 80071a6:	683b      	ldr	r3, [r7, #0]
 80071a8:	781b      	ldrb	r3, [r3, #0]
 80071aa:	2b4e      	cmp	r3, #78	; 0x4e
 80071ac:	d864      	bhi.n	8007278 <_scanf_float+0x11c>
 80071ae:	2b40      	cmp	r3, #64	; 0x40
 80071b0:	d83c      	bhi.n	800722c <_scanf_float+0xd0>
 80071b2:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 80071b6:	b2c8      	uxtb	r0, r1
 80071b8:	280e      	cmp	r0, #14
 80071ba:	d93a      	bls.n	8007232 <_scanf_float+0xd6>
 80071bc:	f1b9 0f00 	cmp.w	r9, #0
 80071c0:	d003      	beq.n	80071ca <_scanf_float+0x6e>
 80071c2:	6823      	ldr	r3, [r4, #0]
 80071c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80071c8:	6023      	str	r3, [r4, #0]
 80071ca:	f10a 3aff 	add.w	sl, sl, #4294967295
 80071ce:	f1ba 0f01 	cmp.w	sl, #1
 80071d2:	f200 8113 	bhi.w	80073fc <_scanf_float+0x2a0>
 80071d6:	455e      	cmp	r6, fp
 80071d8:	f200 8105 	bhi.w	80073e6 <_scanf_float+0x28a>
 80071dc:	2501      	movs	r5, #1
 80071de:	4628      	mov	r0, r5
 80071e0:	b007      	add	sp, #28
 80071e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80071e6:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80071ea:	2a0d      	cmp	r2, #13
 80071ec:	d8e6      	bhi.n	80071bc <_scanf_float+0x60>
 80071ee:	a101      	add	r1, pc, #4	; (adr r1, 80071f4 <_scanf_float+0x98>)
 80071f0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80071f4:	08007333 	.word	0x08007333
 80071f8:	080071bd 	.word	0x080071bd
 80071fc:	080071bd 	.word	0x080071bd
 8007200:	080071bd 	.word	0x080071bd
 8007204:	08007393 	.word	0x08007393
 8007208:	0800736b 	.word	0x0800736b
 800720c:	080071bd 	.word	0x080071bd
 8007210:	080071bd 	.word	0x080071bd
 8007214:	08007341 	.word	0x08007341
 8007218:	080071bd 	.word	0x080071bd
 800721c:	080071bd 	.word	0x080071bd
 8007220:	080071bd 	.word	0x080071bd
 8007224:	080071bd 	.word	0x080071bd
 8007228:	080072f9 	.word	0x080072f9
 800722c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8007230:	e7db      	b.n	80071ea <_scanf_float+0x8e>
 8007232:	290e      	cmp	r1, #14
 8007234:	d8c2      	bhi.n	80071bc <_scanf_float+0x60>
 8007236:	a001      	add	r0, pc, #4	; (adr r0, 800723c <_scanf_float+0xe0>)
 8007238:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800723c:	080072eb 	.word	0x080072eb
 8007240:	080071bd 	.word	0x080071bd
 8007244:	080072eb 	.word	0x080072eb
 8007248:	0800737f 	.word	0x0800737f
 800724c:	080071bd 	.word	0x080071bd
 8007250:	08007299 	.word	0x08007299
 8007254:	080072d5 	.word	0x080072d5
 8007258:	080072d5 	.word	0x080072d5
 800725c:	080072d5 	.word	0x080072d5
 8007260:	080072d5 	.word	0x080072d5
 8007264:	080072d5 	.word	0x080072d5
 8007268:	080072d5 	.word	0x080072d5
 800726c:	080072d5 	.word	0x080072d5
 8007270:	080072d5 	.word	0x080072d5
 8007274:	080072d5 	.word	0x080072d5
 8007278:	2b6e      	cmp	r3, #110	; 0x6e
 800727a:	d809      	bhi.n	8007290 <_scanf_float+0x134>
 800727c:	2b60      	cmp	r3, #96	; 0x60
 800727e:	d8b2      	bhi.n	80071e6 <_scanf_float+0x8a>
 8007280:	2b54      	cmp	r3, #84	; 0x54
 8007282:	d077      	beq.n	8007374 <_scanf_float+0x218>
 8007284:	2b59      	cmp	r3, #89	; 0x59
 8007286:	d199      	bne.n	80071bc <_scanf_float+0x60>
 8007288:	2d07      	cmp	r5, #7
 800728a:	d197      	bne.n	80071bc <_scanf_float+0x60>
 800728c:	2508      	movs	r5, #8
 800728e:	e029      	b.n	80072e4 <_scanf_float+0x188>
 8007290:	2b74      	cmp	r3, #116	; 0x74
 8007292:	d06f      	beq.n	8007374 <_scanf_float+0x218>
 8007294:	2b79      	cmp	r3, #121	; 0x79
 8007296:	e7f6      	b.n	8007286 <_scanf_float+0x12a>
 8007298:	6821      	ldr	r1, [r4, #0]
 800729a:	05c8      	lsls	r0, r1, #23
 800729c:	d51a      	bpl.n	80072d4 <_scanf_float+0x178>
 800729e:	9b02      	ldr	r3, [sp, #8]
 80072a0:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80072a4:	6021      	str	r1, [r4, #0]
 80072a6:	f109 0901 	add.w	r9, r9, #1
 80072aa:	b11b      	cbz	r3, 80072b4 <_scanf_float+0x158>
 80072ac:	3b01      	subs	r3, #1
 80072ae:	3201      	adds	r2, #1
 80072b0:	9302      	str	r3, [sp, #8]
 80072b2:	60a2      	str	r2, [r4, #8]
 80072b4:	68a3      	ldr	r3, [r4, #8]
 80072b6:	3b01      	subs	r3, #1
 80072b8:	60a3      	str	r3, [r4, #8]
 80072ba:	6923      	ldr	r3, [r4, #16]
 80072bc:	3301      	adds	r3, #1
 80072be:	6123      	str	r3, [r4, #16]
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	3b01      	subs	r3, #1
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	607b      	str	r3, [r7, #4]
 80072c8:	f340 8084 	ble.w	80073d4 <_scanf_float+0x278>
 80072cc:	683b      	ldr	r3, [r7, #0]
 80072ce:	3301      	adds	r3, #1
 80072d0:	603b      	str	r3, [r7, #0]
 80072d2:	e766      	b.n	80071a2 <_scanf_float+0x46>
 80072d4:	eb1a 0f05 	cmn.w	sl, r5
 80072d8:	f47f af70 	bne.w	80071bc <_scanf_float+0x60>
 80072dc:	6822      	ldr	r2, [r4, #0]
 80072de:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 80072e2:	6022      	str	r2, [r4, #0]
 80072e4:	f806 3b01 	strb.w	r3, [r6], #1
 80072e8:	e7e4      	b.n	80072b4 <_scanf_float+0x158>
 80072ea:	6822      	ldr	r2, [r4, #0]
 80072ec:	0610      	lsls	r0, r2, #24
 80072ee:	f57f af65 	bpl.w	80071bc <_scanf_float+0x60>
 80072f2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80072f6:	e7f4      	b.n	80072e2 <_scanf_float+0x186>
 80072f8:	f1ba 0f00 	cmp.w	sl, #0
 80072fc:	d10e      	bne.n	800731c <_scanf_float+0x1c0>
 80072fe:	f1b9 0f00 	cmp.w	r9, #0
 8007302:	d10e      	bne.n	8007322 <_scanf_float+0x1c6>
 8007304:	6822      	ldr	r2, [r4, #0]
 8007306:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800730a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800730e:	d108      	bne.n	8007322 <_scanf_float+0x1c6>
 8007310:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8007314:	6022      	str	r2, [r4, #0]
 8007316:	f04f 0a01 	mov.w	sl, #1
 800731a:	e7e3      	b.n	80072e4 <_scanf_float+0x188>
 800731c:	f1ba 0f02 	cmp.w	sl, #2
 8007320:	d055      	beq.n	80073ce <_scanf_float+0x272>
 8007322:	2d01      	cmp	r5, #1
 8007324:	d002      	beq.n	800732c <_scanf_float+0x1d0>
 8007326:	2d04      	cmp	r5, #4
 8007328:	f47f af48 	bne.w	80071bc <_scanf_float+0x60>
 800732c:	3501      	adds	r5, #1
 800732e:	b2ed      	uxtb	r5, r5
 8007330:	e7d8      	b.n	80072e4 <_scanf_float+0x188>
 8007332:	f1ba 0f01 	cmp.w	sl, #1
 8007336:	f47f af41 	bne.w	80071bc <_scanf_float+0x60>
 800733a:	f04f 0a02 	mov.w	sl, #2
 800733e:	e7d1      	b.n	80072e4 <_scanf_float+0x188>
 8007340:	b97d      	cbnz	r5, 8007362 <_scanf_float+0x206>
 8007342:	f1b9 0f00 	cmp.w	r9, #0
 8007346:	f47f af3c 	bne.w	80071c2 <_scanf_float+0x66>
 800734a:	6822      	ldr	r2, [r4, #0]
 800734c:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8007350:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8007354:	f47f af39 	bne.w	80071ca <_scanf_float+0x6e>
 8007358:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800735c:	6022      	str	r2, [r4, #0]
 800735e:	2501      	movs	r5, #1
 8007360:	e7c0      	b.n	80072e4 <_scanf_float+0x188>
 8007362:	2d03      	cmp	r5, #3
 8007364:	d0e2      	beq.n	800732c <_scanf_float+0x1d0>
 8007366:	2d05      	cmp	r5, #5
 8007368:	e7de      	b.n	8007328 <_scanf_float+0x1cc>
 800736a:	2d02      	cmp	r5, #2
 800736c:	f47f af26 	bne.w	80071bc <_scanf_float+0x60>
 8007370:	2503      	movs	r5, #3
 8007372:	e7b7      	b.n	80072e4 <_scanf_float+0x188>
 8007374:	2d06      	cmp	r5, #6
 8007376:	f47f af21 	bne.w	80071bc <_scanf_float+0x60>
 800737a:	2507      	movs	r5, #7
 800737c:	e7b2      	b.n	80072e4 <_scanf_float+0x188>
 800737e:	6822      	ldr	r2, [r4, #0]
 8007380:	0591      	lsls	r1, r2, #22
 8007382:	f57f af1b 	bpl.w	80071bc <_scanf_float+0x60>
 8007386:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800738a:	6022      	str	r2, [r4, #0]
 800738c:	f8cd 9004 	str.w	r9, [sp, #4]
 8007390:	e7a8      	b.n	80072e4 <_scanf_float+0x188>
 8007392:	6822      	ldr	r2, [r4, #0]
 8007394:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8007398:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800739c:	d006      	beq.n	80073ac <_scanf_float+0x250>
 800739e:	0550      	lsls	r0, r2, #21
 80073a0:	f57f af0c 	bpl.w	80071bc <_scanf_float+0x60>
 80073a4:	f1b9 0f00 	cmp.w	r9, #0
 80073a8:	f43f af0f 	beq.w	80071ca <_scanf_float+0x6e>
 80073ac:	0591      	lsls	r1, r2, #22
 80073ae:	bf58      	it	pl
 80073b0:	9901      	ldrpl	r1, [sp, #4]
 80073b2:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80073b6:	bf58      	it	pl
 80073b8:	eba9 0101 	subpl.w	r1, r9, r1
 80073bc:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 80073c0:	bf58      	it	pl
 80073c2:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80073c6:	6022      	str	r2, [r4, #0]
 80073c8:	f04f 0900 	mov.w	r9, #0
 80073cc:	e78a      	b.n	80072e4 <_scanf_float+0x188>
 80073ce:	f04f 0a03 	mov.w	sl, #3
 80073d2:	e787      	b.n	80072e4 <_scanf_float+0x188>
 80073d4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80073d8:	4639      	mov	r1, r7
 80073da:	4640      	mov	r0, r8
 80073dc:	4798      	blx	r3
 80073de:	2800      	cmp	r0, #0
 80073e0:	f43f aedf 	beq.w	80071a2 <_scanf_float+0x46>
 80073e4:	e6ea      	b.n	80071bc <_scanf_float+0x60>
 80073e6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80073ea:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80073ee:	463a      	mov	r2, r7
 80073f0:	4640      	mov	r0, r8
 80073f2:	4798      	blx	r3
 80073f4:	6923      	ldr	r3, [r4, #16]
 80073f6:	3b01      	subs	r3, #1
 80073f8:	6123      	str	r3, [r4, #16]
 80073fa:	e6ec      	b.n	80071d6 <_scanf_float+0x7a>
 80073fc:	1e6b      	subs	r3, r5, #1
 80073fe:	2b06      	cmp	r3, #6
 8007400:	d825      	bhi.n	800744e <_scanf_float+0x2f2>
 8007402:	2d02      	cmp	r5, #2
 8007404:	d836      	bhi.n	8007474 <_scanf_float+0x318>
 8007406:	455e      	cmp	r6, fp
 8007408:	f67f aee8 	bls.w	80071dc <_scanf_float+0x80>
 800740c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007410:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007414:	463a      	mov	r2, r7
 8007416:	4640      	mov	r0, r8
 8007418:	4798      	blx	r3
 800741a:	6923      	ldr	r3, [r4, #16]
 800741c:	3b01      	subs	r3, #1
 800741e:	6123      	str	r3, [r4, #16]
 8007420:	e7f1      	b.n	8007406 <_scanf_float+0x2aa>
 8007422:	9802      	ldr	r0, [sp, #8]
 8007424:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007428:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800742c:	9002      	str	r0, [sp, #8]
 800742e:	463a      	mov	r2, r7
 8007430:	4640      	mov	r0, r8
 8007432:	4798      	blx	r3
 8007434:	6923      	ldr	r3, [r4, #16]
 8007436:	3b01      	subs	r3, #1
 8007438:	6123      	str	r3, [r4, #16]
 800743a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800743e:	fa5f fa8a 	uxtb.w	sl, sl
 8007442:	f1ba 0f02 	cmp.w	sl, #2
 8007446:	d1ec      	bne.n	8007422 <_scanf_float+0x2c6>
 8007448:	3d03      	subs	r5, #3
 800744a:	b2ed      	uxtb	r5, r5
 800744c:	1b76      	subs	r6, r6, r5
 800744e:	6823      	ldr	r3, [r4, #0]
 8007450:	05da      	lsls	r2, r3, #23
 8007452:	d52f      	bpl.n	80074b4 <_scanf_float+0x358>
 8007454:	055b      	lsls	r3, r3, #21
 8007456:	d510      	bpl.n	800747a <_scanf_float+0x31e>
 8007458:	455e      	cmp	r6, fp
 800745a:	f67f aebf 	bls.w	80071dc <_scanf_float+0x80>
 800745e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007462:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007466:	463a      	mov	r2, r7
 8007468:	4640      	mov	r0, r8
 800746a:	4798      	blx	r3
 800746c:	6923      	ldr	r3, [r4, #16]
 800746e:	3b01      	subs	r3, #1
 8007470:	6123      	str	r3, [r4, #16]
 8007472:	e7f1      	b.n	8007458 <_scanf_float+0x2fc>
 8007474:	46aa      	mov	sl, r5
 8007476:	9602      	str	r6, [sp, #8]
 8007478:	e7df      	b.n	800743a <_scanf_float+0x2de>
 800747a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800747e:	6923      	ldr	r3, [r4, #16]
 8007480:	2965      	cmp	r1, #101	; 0x65
 8007482:	f103 33ff 	add.w	r3, r3, #4294967295
 8007486:	f106 35ff 	add.w	r5, r6, #4294967295
 800748a:	6123      	str	r3, [r4, #16]
 800748c:	d00c      	beq.n	80074a8 <_scanf_float+0x34c>
 800748e:	2945      	cmp	r1, #69	; 0x45
 8007490:	d00a      	beq.n	80074a8 <_scanf_float+0x34c>
 8007492:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007496:	463a      	mov	r2, r7
 8007498:	4640      	mov	r0, r8
 800749a:	4798      	blx	r3
 800749c:	6923      	ldr	r3, [r4, #16]
 800749e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80074a2:	3b01      	subs	r3, #1
 80074a4:	1eb5      	subs	r5, r6, #2
 80074a6:	6123      	str	r3, [r4, #16]
 80074a8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80074ac:	463a      	mov	r2, r7
 80074ae:	4640      	mov	r0, r8
 80074b0:	4798      	blx	r3
 80074b2:	462e      	mov	r6, r5
 80074b4:	6825      	ldr	r5, [r4, #0]
 80074b6:	f015 0510 	ands.w	r5, r5, #16
 80074ba:	d158      	bne.n	800756e <_scanf_float+0x412>
 80074bc:	7035      	strb	r5, [r6, #0]
 80074be:	6823      	ldr	r3, [r4, #0]
 80074c0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80074c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80074c8:	d11c      	bne.n	8007504 <_scanf_float+0x3a8>
 80074ca:	9b01      	ldr	r3, [sp, #4]
 80074cc:	454b      	cmp	r3, r9
 80074ce:	eba3 0209 	sub.w	r2, r3, r9
 80074d2:	d124      	bne.n	800751e <_scanf_float+0x3c2>
 80074d4:	2200      	movs	r2, #0
 80074d6:	4659      	mov	r1, fp
 80074d8:	4640      	mov	r0, r8
 80074da:	f000 fe9b 	bl	8008214 <_strtod_r>
 80074de:	9b03      	ldr	r3, [sp, #12]
 80074e0:	6821      	ldr	r1, [r4, #0]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	f011 0f02 	tst.w	r1, #2
 80074e8:	ec57 6b10 	vmov	r6, r7, d0
 80074ec:	f103 0204 	add.w	r2, r3, #4
 80074f0:	d020      	beq.n	8007534 <_scanf_float+0x3d8>
 80074f2:	9903      	ldr	r1, [sp, #12]
 80074f4:	600a      	str	r2, [r1, #0]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	e9c3 6700 	strd	r6, r7, [r3]
 80074fc:	68e3      	ldr	r3, [r4, #12]
 80074fe:	3301      	adds	r3, #1
 8007500:	60e3      	str	r3, [r4, #12]
 8007502:	e66c      	b.n	80071de <_scanf_float+0x82>
 8007504:	9b04      	ldr	r3, [sp, #16]
 8007506:	2b00      	cmp	r3, #0
 8007508:	d0e4      	beq.n	80074d4 <_scanf_float+0x378>
 800750a:	9905      	ldr	r1, [sp, #20]
 800750c:	230a      	movs	r3, #10
 800750e:	462a      	mov	r2, r5
 8007510:	3101      	adds	r1, #1
 8007512:	4640      	mov	r0, r8
 8007514:	f000 ff08 	bl	8008328 <_strtol_r>
 8007518:	9b04      	ldr	r3, [sp, #16]
 800751a:	9e05      	ldr	r6, [sp, #20]
 800751c:	1ac2      	subs	r2, r0, r3
 800751e:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8007522:	429e      	cmp	r6, r3
 8007524:	bf28      	it	cs
 8007526:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800752a:	4912      	ldr	r1, [pc, #72]	; (8007574 <_scanf_float+0x418>)
 800752c:	4630      	mov	r0, r6
 800752e:	f000 f82b 	bl	8007588 <siprintf>
 8007532:	e7cf      	b.n	80074d4 <_scanf_float+0x378>
 8007534:	f011 0f04 	tst.w	r1, #4
 8007538:	9903      	ldr	r1, [sp, #12]
 800753a:	600a      	str	r2, [r1, #0]
 800753c:	d1db      	bne.n	80074f6 <_scanf_float+0x39a>
 800753e:	f8d3 8000 	ldr.w	r8, [r3]
 8007542:	ee10 2a10 	vmov	r2, s0
 8007546:	ee10 0a10 	vmov	r0, s0
 800754a:	463b      	mov	r3, r7
 800754c:	4639      	mov	r1, r7
 800754e:	f7f9 faf5 	bl	8000b3c <__aeabi_dcmpun>
 8007552:	b128      	cbz	r0, 8007560 <_scanf_float+0x404>
 8007554:	4808      	ldr	r0, [pc, #32]	; (8007578 <_scanf_float+0x41c>)
 8007556:	f000 f811 	bl	800757c <nanf>
 800755a:	ed88 0a00 	vstr	s0, [r8]
 800755e:	e7cd      	b.n	80074fc <_scanf_float+0x3a0>
 8007560:	4630      	mov	r0, r6
 8007562:	4639      	mov	r1, r7
 8007564:	f7f9 fb48 	bl	8000bf8 <__aeabi_d2f>
 8007568:	f8c8 0000 	str.w	r0, [r8]
 800756c:	e7c6      	b.n	80074fc <_scanf_float+0x3a0>
 800756e:	2500      	movs	r5, #0
 8007570:	e635      	b.n	80071de <_scanf_float+0x82>
 8007572:	bf00      	nop
 8007574:	0800b4b8 	.word	0x0800b4b8
 8007578:	0800b8d0 	.word	0x0800b8d0

0800757c <nanf>:
 800757c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8007584 <nanf+0x8>
 8007580:	4770      	bx	lr
 8007582:	bf00      	nop
 8007584:	7fc00000 	.word	0x7fc00000

08007588 <siprintf>:
 8007588:	b40e      	push	{r1, r2, r3}
 800758a:	b500      	push	{lr}
 800758c:	b09c      	sub	sp, #112	; 0x70
 800758e:	ab1d      	add	r3, sp, #116	; 0x74
 8007590:	9002      	str	r0, [sp, #8]
 8007592:	9006      	str	r0, [sp, #24]
 8007594:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007598:	4809      	ldr	r0, [pc, #36]	; (80075c0 <siprintf+0x38>)
 800759a:	9107      	str	r1, [sp, #28]
 800759c:	9104      	str	r1, [sp, #16]
 800759e:	4909      	ldr	r1, [pc, #36]	; (80075c4 <siprintf+0x3c>)
 80075a0:	f853 2b04 	ldr.w	r2, [r3], #4
 80075a4:	9105      	str	r1, [sp, #20]
 80075a6:	6800      	ldr	r0, [r0, #0]
 80075a8:	9301      	str	r3, [sp, #4]
 80075aa:	a902      	add	r1, sp, #8
 80075ac:	f002 fe96 	bl	800a2dc <_svfiprintf_r>
 80075b0:	9b02      	ldr	r3, [sp, #8]
 80075b2:	2200      	movs	r2, #0
 80075b4:	701a      	strb	r2, [r3, #0]
 80075b6:	b01c      	add	sp, #112	; 0x70
 80075b8:	f85d eb04 	ldr.w	lr, [sp], #4
 80075bc:	b003      	add	sp, #12
 80075be:	4770      	bx	lr
 80075c0:	2000001c 	.word	0x2000001c
 80075c4:	ffff0208 	.word	0xffff0208

080075c8 <sulp>:
 80075c8:	b570      	push	{r4, r5, r6, lr}
 80075ca:	4604      	mov	r4, r0
 80075cc:	460d      	mov	r5, r1
 80075ce:	ec45 4b10 	vmov	d0, r4, r5
 80075d2:	4616      	mov	r6, r2
 80075d4:	f002 fc1e 	bl	8009e14 <__ulp>
 80075d8:	ec51 0b10 	vmov	r0, r1, d0
 80075dc:	b17e      	cbz	r6, 80075fe <sulp+0x36>
 80075de:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80075e2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	dd09      	ble.n	80075fe <sulp+0x36>
 80075ea:	051b      	lsls	r3, r3, #20
 80075ec:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80075f0:	2400      	movs	r4, #0
 80075f2:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80075f6:	4622      	mov	r2, r4
 80075f8:	462b      	mov	r3, r5
 80075fa:	f7f9 f805 	bl	8000608 <__aeabi_dmul>
 80075fe:	bd70      	pop	{r4, r5, r6, pc}

08007600 <_strtod_l>:
 8007600:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007604:	b0a3      	sub	sp, #140	; 0x8c
 8007606:	461f      	mov	r7, r3
 8007608:	2300      	movs	r3, #0
 800760a:	931e      	str	r3, [sp, #120]	; 0x78
 800760c:	4ba4      	ldr	r3, [pc, #656]	; (80078a0 <_strtod_l+0x2a0>)
 800760e:	9219      	str	r2, [sp, #100]	; 0x64
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	9307      	str	r3, [sp, #28]
 8007614:	4604      	mov	r4, r0
 8007616:	4618      	mov	r0, r3
 8007618:	4688      	mov	r8, r1
 800761a:	f7f8 fde1 	bl	80001e0 <strlen>
 800761e:	f04f 0a00 	mov.w	sl, #0
 8007622:	4605      	mov	r5, r0
 8007624:	f04f 0b00 	mov.w	fp, #0
 8007628:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800762c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800762e:	781a      	ldrb	r2, [r3, #0]
 8007630:	2a2b      	cmp	r2, #43	; 0x2b
 8007632:	d04c      	beq.n	80076ce <_strtod_l+0xce>
 8007634:	d839      	bhi.n	80076aa <_strtod_l+0xaa>
 8007636:	2a0d      	cmp	r2, #13
 8007638:	d832      	bhi.n	80076a0 <_strtod_l+0xa0>
 800763a:	2a08      	cmp	r2, #8
 800763c:	d832      	bhi.n	80076a4 <_strtod_l+0xa4>
 800763e:	2a00      	cmp	r2, #0
 8007640:	d03c      	beq.n	80076bc <_strtod_l+0xbc>
 8007642:	2300      	movs	r3, #0
 8007644:	930e      	str	r3, [sp, #56]	; 0x38
 8007646:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8007648:	7833      	ldrb	r3, [r6, #0]
 800764a:	2b30      	cmp	r3, #48	; 0x30
 800764c:	f040 80b4 	bne.w	80077b8 <_strtod_l+0x1b8>
 8007650:	7873      	ldrb	r3, [r6, #1]
 8007652:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8007656:	2b58      	cmp	r3, #88	; 0x58
 8007658:	d16c      	bne.n	8007734 <_strtod_l+0x134>
 800765a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800765c:	9301      	str	r3, [sp, #4]
 800765e:	ab1e      	add	r3, sp, #120	; 0x78
 8007660:	9702      	str	r7, [sp, #8]
 8007662:	9300      	str	r3, [sp, #0]
 8007664:	4a8f      	ldr	r2, [pc, #572]	; (80078a4 <_strtod_l+0x2a4>)
 8007666:	ab1f      	add	r3, sp, #124	; 0x7c
 8007668:	a91d      	add	r1, sp, #116	; 0x74
 800766a:	4620      	mov	r0, r4
 800766c:	f001 fd40 	bl	80090f0 <__gethex>
 8007670:	f010 0707 	ands.w	r7, r0, #7
 8007674:	4605      	mov	r5, r0
 8007676:	d005      	beq.n	8007684 <_strtod_l+0x84>
 8007678:	2f06      	cmp	r7, #6
 800767a:	d12a      	bne.n	80076d2 <_strtod_l+0xd2>
 800767c:	3601      	adds	r6, #1
 800767e:	2300      	movs	r3, #0
 8007680:	961d      	str	r6, [sp, #116]	; 0x74
 8007682:	930e      	str	r3, [sp, #56]	; 0x38
 8007684:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007686:	2b00      	cmp	r3, #0
 8007688:	f040 8596 	bne.w	80081b8 <_strtod_l+0xbb8>
 800768c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800768e:	b1db      	cbz	r3, 80076c8 <_strtod_l+0xc8>
 8007690:	4652      	mov	r2, sl
 8007692:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8007696:	ec43 2b10 	vmov	d0, r2, r3
 800769a:	b023      	add	sp, #140	; 0x8c
 800769c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80076a0:	2a20      	cmp	r2, #32
 80076a2:	d1ce      	bne.n	8007642 <_strtod_l+0x42>
 80076a4:	3301      	adds	r3, #1
 80076a6:	931d      	str	r3, [sp, #116]	; 0x74
 80076a8:	e7c0      	b.n	800762c <_strtod_l+0x2c>
 80076aa:	2a2d      	cmp	r2, #45	; 0x2d
 80076ac:	d1c9      	bne.n	8007642 <_strtod_l+0x42>
 80076ae:	2201      	movs	r2, #1
 80076b0:	920e      	str	r2, [sp, #56]	; 0x38
 80076b2:	1c5a      	adds	r2, r3, #1
 80076b4:	921d      	str	r2, [sp, #116]	; 0x74
 80076b6:	785b      	ldrb	r3, [r3, #1]
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d1c4      	bne.n	8007646 <_strtod_l+0x46>
 80076bc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80076be:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	f040 8576 	bne.w	80081b4 <_strtod_l+0xbb4>
 80076c8:	4652      	mov	r2, sl
 80076ca:	465b      	mov	r3, fp
 80076cc:	e7e3      	b.n	8007696 <_strtod_l+0x96>
 80076ce:	2200      	movs	r2, #0
 80076d0:	e7ee      	b.n	80076b0 <_strtod_l+0xb0>
 80076d2:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80076d4:	b13a      	cbz	r2, 80076e6 <_strtod_l+0xe6>
 80076d6:	2135      	movs	r1, #53	; 0x35
 80076d8:	a820      	add	r0, sp, #128	; 0x80
 80076da:	f002 fca6 	bl	800a02a <__copybits>
 80076de:	991e      	ldr	r1, [sp, #120]	; 0x78
 80076e0:	4620      	mov	r0, r4
 80076e2:	f002 f86b 	bl	80097bc <_Bfree>
 80076e6:	3f01      	subs	r7, #1
 80076e8:	2f05      	cmp	r7, #5
 80076ea:	d807      	bhi.n	80076fc <_strtod_l+0xfc>
 80076ec:	e8df f007 	tbb	[pc, r7]
 80076f0:	1d180b0e 	.word	0x1d180b0e
 80076f4:	030e      	.short	0x030e
 80076f6:	f04f 0b00 	mov.w	fp, #0
 80076fa:	46da      	mov	sl, fp
 80076fc:	0728      	lsls	r0, r5, #28
 80076fe:	d5c1      	bpl.n	8007684 <_strtod_l+0x84>
 8007700:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8007704:	e7be      	b.n	8007684 <_strtod_l+0x84>
 8007706:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 800770a:	e7f7      	b.n	80076fc <_strtod_l+0xfc>
 800770c:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 8007710:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8007712:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8007716:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800771a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800771e:	e7ed      	b.n	80076fc <_strtod_l+0xfc>
 8007720:	f8df b184 	ldr.w	fp, [pc, #388]	; 80078a8 <_strtod_l+0x2a8>
 8007724:	f04f 0a00 	mov.w	sl, #0
 8007728:	e7e8      	b.n	80076fc <_strtod_l+0xfc>
 800772a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800772e:	f04f 3aff 	mov.w	sl, #4294967295
 8007732:	e7e3      	b.n	80076fc <_strtod_l+0xfc>
 8007734:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007736:	1c5a      	adds	r2, r3, #1
 8007738:	921d      	str	r2, [sp, #116]	; 0x74
 800773a:	785b      	ldrb	r3, [r3, #1]
 800773c:	2b30      	cmp	r3, #48	; 0x30
 800773e:	d0f9      	beq.n	8007734 <_strtod_l+0x134>
 8007740:	2b00      	cmp	r3, #0
 8007742:	d09f      	beq.n	8007684 <_strtod_l+0x84>
 8007744:	2301      	movs	r3, #1
 8007746:	f04f 0900 	mov.w	r9, #0
 800774a:	9304      	str	r3, [sp, #16]
 800774c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800774e:	930a      	str	r3, [sp, #40]	; 0x28
 8007750:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8007754:	464f      	mov	r7, r9
 8007756:	220a      	movs	r2, #10
 8007758:	981d      	ldr	r0, [sp, #116]	; 0x74
 800775a:	7806      	ldrb	r6, [r0, #0]
 800775c:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8007760:	b2d9      	uxtb	r1, r3
 8007762:	2909      	cmp	r1, #9
 8007764:	d92a      	bls.n	80077bc <_strtod_l+0x1bc>
 8007766:	9907      	ldr	r1, [sp, #28]
 8007768:	462a      	mov	r2, r5
 800776a:	f002 fed1 	bl	800a510 <strncmp>
 800776e:	b398      	cbz	r0, 80077d8 <_strtod_l+0x1d8>
 8007770:	2000      	movs	r0, #0
 8007772:	4633      	mov	r3, r6
 8007774:	463d      	mov	r5, r7
 8007776:	9007      	str	r0, [sp, #28]
 8007778:	4602      	mov	r2, r0
 800777a:	2b65      	cmp	r3, #101	; 0x65
 800777c:	d001      	beq.n	8007782 <_strtod_l+0x182>
 800777e:	2b45      	cmp	r3, #69	; 0x45
 8007780:	d118      	bne.n	80077b4 <_strtod_l+0x1b4>
 8007782:	b91d      	cbnz	r5, 800778c <_strtod_l+0x18c>
 8007784:	9b04      	ldr	r3, [sp, #16]
 8007786:	4303      	orrs	r3, r0
 8007788:	d098      	beq.n	80076bc <_strtod_l+0xbc>
 800778a:	2500      	movs	r5, #0
 800778c:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 8007790:	f108 0301 	add.w	r3, r8, #1
 8007794:	931d      	str	r3, [sp, #116]	; 0x74
 8007796:	f898 3001 	ldrb.w	r3, [r8, #1]
 800779a:	2b2b      	cmp	r3, #43	; 0x2b
 800779c:	d075      	beq.n	800788a <_strtod_l+0x28a>
 800779e:	2b2d      	cmp	r3, #45	; 0x2d
 80077a0:	d07b      	beq.n	800789a <_strtod_l+0x29a>
 80077a2:	f04f 0c00 	mov.w	ip, #0
 80077a6:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 80077aa:	2909      	cmp	r1, #9
 80077ac:	f240 8082 	bls.w	80078b4 <_strtod_l+0x2b4>
 80077b0:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 80077b4:	2600      	movs	r6, #0
 80077b6:	e09d      	b.n	80078f4 <_strtod_l+0x2f4>
 80077b8:	2300      	movs	r3, #0
 80077ba:	e7c4      	b.n	8007746 <_strtod_l+0x146>
 80077bc:	2f08      	cmp	r7, #8
 80077be:	bfd8      	it	le
 80077c0:	9909      	ldrle	r1, [sp, #36]	; 0x24
 80077c2:	f100 0001 	add.w	r0, r0, #1
 80077c6:	bfda      	itte	le
 80077c8:	fb02 3301 	mlale	r3, r2, r1, r3
 80077cc:	9309      	strle	r3, [sp, #36]	; 0x24
 80077ce:	fb02 3909 	mlagt	r9, r2, r9, r3
 80077d2:	3701      	adds	r7, #1
 80077d4:	901d      	str	r0, [sp, #116]	; 0x74
 80077d6:	e7bf      	b.n	8007758 <_strtod_l+0x158>
 80077d8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80077da:	195a      	adds	r2, r3, r5
 80077dc:	921d      	str	r2, [sp, #116]	; 0x74
 80077de:	5d5b      	ldrb	r3, [r3, r5]
 80077e0:	2f00      	cmp	r7, #0
 80077e2:	d037      	beq.n	8007854 <_strtod_l+0x254>
 80077e4:	9007      	str	r0, [sp, #28]
 80077e6:	463d      	mov	r5, r7
 80077e8:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 80077ec:	2a09      	cmp	r2, #9
 80077ee:	d912      	bls.n	8007816 <_strtod_l+0x216>
 80077f0:	2201      	movs	r2, #1
 80077f2:	e7c2      	b.n	800777a <_strtod_l+0x17a>
 80077f4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80077f6:	1c5a      	adds	r2, r3, #1
 80077f8:	921d      	str	r2, [sp, #116]	; 0x74
 80077fa:	785b      	ldrb	r3, [r3, #1]
 80077fc:	3001      	adds	r0, #1
 80077fe:	2b30      	cmp	r3, #48	; 0x30
 8007800:	d0f8      	beq.n	80077f4 <_strtod_l+0x1f4>
 8007802:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8007806:	2a08      	cmp	r2, #8
 8007808:	f200 84db 	bhi.w	80081c2 <_strtod_l+0xbc2>
 800780c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800780e:	9007      	str	r0, [sp, #28]
 8007810:	2000      	movs	r0, #0
 8007812:	920a      	str	r2, [sp, #40]	; 0x28
 8007814:	4605      	mov	r5, r0
 8007816:	3b30      	subs	r3, #48	; 0x30
 8007818:	f100 0201 	add.w	r2, r0, #1
 800781c:	d014      	beq.n	8007848 <_strtod_l+0x248>
 800781e:	9907      	ldr	r1, [sp, #28]
 8007820:	4411      	add	r1, r2
 8007822:	9107      	str	r1, [sp, #28]
 8007824:	462a      	mov	r2, r5
 8007826:	eb00 0e05 	add.w	lr, r0, r5
 800782a:	210a      	movs	r1, #10
 800782c:	4572      	cmp	r2, lr
 800782e:	d113      	bne.n	8007858 <_strtod_l+0x258>
 8007830:	182a      	adds	r2, r5, r0
 8007832:	2a08      	cmp	r2, #8
 8007834:	f105 0501 	add.w	r5, r5, #1
 8007838:	4405      	add	r5, r0
 800783a:	dc1c      	bgt.n	8007876 <_strtod_l+0x276>
 800783c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800783e:	220a      	movs	r2, #10
 8007840:	fb02 3301 	mla	r3, r2, r1, r3
 8007844:	9309      	str	r3, [sp, #36]	; 0x24
 8007846:	2200      	movs	r2, #0
 8007848:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800784a:	1c59      	adds	r1, r3, #1
 800784c:	911d      	str	r1, [sp, #116]	; 0x74
 800784e:	785b      	ldrb	r3, [r3, #1]
 8007850:	4610      	mov	r0, r2
 8007852:	e7c9      	b.n	80077e8 <_strtod_l+0x1e8>
 8007854:	4638      	mov	r0, r7
 8007856:	e7d2      	b.n	80077fe <_strtod_l+0x1fe>
 8007858:	2a08      	cmp	r2, #8
 800785a:	dc04      	bgt.n	8007866 <_strtod_l+0x266>
 800785c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800785e:	434e      	muls	r6, r1
 8007860:	9609      	str	r6, [sp, #36]	; 0x24
 8007862:	3201      	adds	r2, #1
 8007864:	e7e2      	b.n	800782c <_strtod_l+0x22c>
 8007866:	f102 0c01 	add.w	ip, r2, #1
 800786a:	f1bc 0f10 	cmp.w	ip, #16
 800786e:	bfd8      	it	le
 8007870:	fb01 f909 	mulle.w	r9, r1, r9
 8007874:	e7f5      	b.n	8007862 <_strtod_l+0x262>
 8007876:	2d10      	cmp	r5, #16
 8007878:	bfdc      	itt	le
 800787a:	220a      	movle	r2, #10
 800787c:	fb02 3909 	mlale	r9, r2, r9, r3
 8007880:	e7e1      	b.n	8007846 <_strtod_l+0x246>
 8007882:	2300      	movs	r3, #0
 8007884:	9307      	str	r3, [sp, #28]
 8007886:	2201      	movs	r2, #1
 8007888:	e77c      	b.n	8007784 <_strtod_l+0x184>
 800788a:	f04f 0c00 	mov.w	ip, #0
 800788e:	f108 0302 	add.w	r3, r8, #2
 8007892:	931d      	str	r3, [sp, #116]	; 0x74
 8007894:	f898 3002 	ldrb.w	r3, [r8, #2]
 8007898:	e785      	b.n	80077a6 <_strtod_l+0x1a6>
 800789a:	f04f 0c01 	mov.w	ip, #1
 800789e:	e7f6      	b.n	800788e <_strtod_l+0x28e>
 80078a0:	0800b710 	.word	0x0800b710
 80078a4:	0800b4c0 	.word	0x0800b4c0
 80078a8:	7ff00000 	.word	0x7ff00000
 80078ac:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80078ae:	1c59      	adds	r1, r3, #1
 80078b0:	911d      	str	r1, [sp, #116]	; 0x74
 80078b2:	785b      	ldrb	r3, [r3, #1]
 80078b4:	2b30      	cmp	r3, #48	; 0x30
 80078b6:	d0f9      	beq.n	80078ac <_strtod_l+0x2ac>
 80078b8:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 80078bc:	2908      	cmp	r1, #8
 80078be:	f63f af79 	bhi.w	80077b4 <_strtod_l+0x1b4>
 80078c2:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 80078c6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80078c8:	9308      	str	r3, [sp, #32]
 80078ca:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80078cc:	1c59      	adds	r1, r3, #1
 80078ce:	911d      	str	r1, [sp, #116]	; 0x74
 80078d0:	785b      	ldrb	r3, [r3, #1]
 80078d2:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 80078d6:	2e09      	cmp	r6, #9
 80078d8:	d937      	bls.n	800794a <_strtod_l+0x34a>
 80078da:	9e08      	ldr	r6, [sp, #32]
 80078dc:	1b89      	subs	r1, r1, r6
 80078de:	2908      	cmp	r1, #8
 80078e0:	f644 661f 	movw	r6, #19999	; 0x4e1f
 80078e4:	dc02      	bgt.n	80078ec <_strtod_l+0x2ec>
 80078e6:	4576      	cmp	r6, lr
 80078e8:	bfa8      	it	ge
 80078ea:	4676      	movge	r6, lr
 80078ec:	f1bc 0f00 	cmp.w	ip, #0
 80078f0:	d000      	beq.n	80078f4 <_strtod_l+0x2f4>
 80078f2:	4276      	negs	r6, r6
 80078f4:	2d00      	cmp	r5, #0
 80078f6:	d14f      	bne.n	8007998 <_strtod_l+0x398>
 80078f8:	9904      	ldr	r1, [sp, #16]
 80078fa:	4301      	orrs	r1, r0
 80078fc:	f47f aec2 	bne.w	8007684 <_strtod_l+0x84>
 8007900:	2a00      	cmp	r2, #0
 8007902:	f47f aedb 	bne.w	80076bc <_strtod_l+0xbc>
 8007906:	2b69      	cmp	r3, #105	; 0x69
 8007908:	d027      	beq.n	800795a <_strtod_l+0x35a>
 800790a:	dc24      	bgt.n	8007956 <_strtod_l+0x356>
 800790c:	2b49      	cmp	r3, #73	; 0x49
 800790e:	d024      	beq.n	800795a <_strtod_l+0x35a>
 8007910:	2b4e      	cmp	r3, #78	; 0x4e
 8007912:	f47f aed3 	bne.w	80076bc <_strtod_l+0xbc>
 8007916:	499e      	ldr	r1, [pc, #632]	; (8007b90 <_strtod_l+0x590>)
 8007918:	a81d      	add	r0, sp, #116	; 0x74
 800791a:	f001 fe41 	bl	80095a0 <__match>
 800791e:	2800      	cmp	r0, #0
 8007920:	f43f aecc 	beq.w	80076bc <_strtod_l+0xbc>
 8007924:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007926:	781b      	ldrb	r3, [r3, #0]
 8007928:	2b28      	cmp	r3, #40	; 0x28
 800792a:	d12d      	bne.n	8007988 <_strtod_l+0x388>
 800792c:	4999      	ldr	r1, [pc, #612]	; (8007b94 <_strtod_l+0x594>)
 800792e:	aa20      	add	r2, sp, #128	; 0x80
 8007930:	a81d      	add	r0, sp, #116	; 0x74
 8007932:	f001 fe49 	bl	80095c8 <__hexnan>
 8007936:	2805      	cmp	r0, #5
 8007938:	d126      	bne.n	8007988 <_strtod_l+0x388>
 800793a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800793c:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 8007940:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8007944:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8007948:	e69c      	b.n	8007684 <_strtod_l+0x84>
 800794a:	210a      	movs	r1, #10
 800794c:	fb01 3e0e 	mla	lr, r1, lr, r3
 8007950:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8007954:	e7b9      	b.n	80078ca <_strtod_l+0x2ca>
 8007956:	2b6e      	cmp	r3, #110	; 0x6e
 8007958:	e7db      	b.n	8007912 <_strtod_l+0x312>
 800795a:	498f      	ldr	r1, [pc, #572]	; (8007b98 <_strtod_l+0x598>)
 800795c:	a81d      	add	r0, sp, #116	; 0x74
 800795e:	f001 fe1f 	bl	80095a0 <__match>
 8007962:	2800      	cmp	r0, #0
 8007964:	f43f aeaa 	beq.w	80076bc <_strtod_l+0xbc>
 8007968:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800796a:	498c      	ldr	r1, [pc, #560]	; (8007b9c <_strtod_l+0x59c>)
 800796c:	3b01      	subs	r3, #1
 800796e:	a81d      	add	r0, sp, #116	; 0x74
 8007970:	931d      	str	r3, [sp, #116]	; 0x74
 8007972:	f001 fe15 	bl	80095a0 <__match>
 8007976:	b910      	cbnz	r0, 800797e <_strtod_l+0x37e>
 8007978:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800797a:	3301      	adds	r3, #1
 800797c:	931d      	str	r3, [sp, #116]	; 0x74
 800797e:	f8df b22c 	ldr.w	fp, [pc, #556]	; 8007bac <_strtod_l+0x5ac>
 8007982:	f04f 0a00 	mov.w	sl, #0
 8007986:	e67d      	b.n	8007684 <_strtod_l+0x84>
 8007988:	4885      	ldr	r0, [pc, #532]	; (8007ba0 <_strtod_l+0x5a0>)
 800798a:	f002 fda9 	bl	800a4e0 <nan>
 800798e:	ed8d 0b04 	vstr	d0, [sp, #16]
 8007992:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8007996:	e675      	b.n	8007684 <_strtod_l+0x84>
 8007998:	9b07      	ldr	r3, [sp, #28]
 800799a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800799c:	1af3      	subs	r3, r6, r3
 800799e:	2f00      	cmp	r7, #0
 80079a0:	bf08      	it	eq
 80079a2:	462f      	moveq	r7, r5
 80079a4:	2d10      	cmp	r5, #16
 80079a6:	9308      	str	r3, [sp, #32]
 80079a8:	46a8      	mov	r8, r5
 80079aa:	bfa8      	it	ge
 80079ac:	f04f 0810 	movge.w	r8, #16
 80079b0:	f7f8 fdb0 	bl	8000514 <__aeabi_ui2d>
 80079b4:	2d09      	cmp	r5, #9
 80079b6:	4682      	mov	sl, r0
 80079b8:	468b      	mov	fp, r1
 80079ba:	dd13      	ble.n	80079e4 <_strtod_l+0x3e4>
 80079bc:	4b79      	ldr	r3, [pc, #484]	; (8007ba4 <_strtod_l+0x5a4>)
 80079be:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80079c2:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80079c6:	f7f8 fe1f 	bl	8000608 <__aeabi_dmul>
 80079ca:	4682      	mov	sl, r0
 80079cc:	4648      	mov	r0, r9
 80079ce:	468b      	mov	fp, r1
 80079d0:	f7f8 fda0 	bl	8000514 <__aeabi_ui2d>
 80079d4:	4602      	mov	r2, r0
 80079d6:	460b      	mov	r3, r1
 80079d8:	4650      	mov	r0, sl
 80079da:	4659      	mov	r1, fp
 80079dc:	f7f8 fc5e 	bl	800029c <__adddf3>
 80079e0:	4682      	mov	sl, r0
 80079e2:	468b      	mov	fp, r1
 80079e4:	2d0f      	cmp	r5, #15
 80079e6:	dc38      	bgt.n	8007a5a <_strtod_l+0x45a>
 80079e8:	9b08      	ldr	r3, [sp, #32]
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	f43f ae4a 	beq.w	8007684 <_strtod_l+0x84>
 80079f0:	dd24      	ble.n	8007a3c <_strtod_l+0x43c>
 80079f2:	2b16      	cmp	r3, #22
 80079f4:	dc0b      	bgt.n	8007a0e <_strtod_l+0x40e>
 80079f6:	4d6b      	ldr	r5, [pc, #428]	; (8007ba4 <_strtod_l+0x5a4>)
 80079f8:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 80079fc:	e9d5 0100 	ldrd	r0, r1, [r5]
 8007a00:	4652      	mov	r2, sl
 8007a02:	465b      	mov	r3, fp
 8007a04:	f7f8 fe00 	bl	8000608 <__aeabi_dmul>
 8007a08:	4682      	mov	sl, r0
 8007a0a:	468b      	mov	fp, r1
 8007a0c:	e63a      	b.n	8007684 <_strtod_l+0x84>
 8007a0e:	9a08      	ldr	r2, [sp, #32]
 8007a10:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8007a14:	4293      	cmp	r3, r2
 8007a16:	db20      	blt.n	8007a5a <_strtod_l+0x45a>
 8007a18:	4c62      	ldr	r4, [pc, #392]	; (8007ba4 <_strtod_l+0x5a4>)
 8007a1a:	f1c5 050f 	rsb	r5, r5, #15
 8007a1e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8007a22:	4652      	mov	r2, sl
 8007a24:	465b      	mov	r3, fp
 8007a26:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007a2a:	f7f8 fded 	bl	8000608 <__aeabi_dmul>
 8007a2e:	9b08      	ldr	r3, [sp, #32]
 8007a30:	1b5d      	subs	r5, r3, r5
 8007a32:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8007a36:	e9d4 2300 	ldrd	r2, r3, [r4]
 8007a3a:	e7e3      	b.n	8007a04 <_strtod_l+0x404>
 8007a3c:	9b08      	ldr	r3, [sp, #32]
 8007a3e:	3316      	adds	r3, #22
 8007a40:	db0b      	blt.n	8007a5a <_strtod_l+0x45a>
 8007a42:	9b07      	ldr	r3, [sp, #28]
 8007a44:	4a57      	ldr	r2, [pc, #348]	; (8007ba4 <_strtod_l+0x5a4>)
 8007a46:	1b9e      	subs	r6, r3, r6
 8007a48:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 8007a4c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007a50:	4650      	mov	r0, sl
 8007a52:	4659      	mov	r1, fp
 8007a54:	f7f8 ff02 	bl	800085c <__aeabi_ddiv>
 8007a58:	e7d6      	b.n	8007a08 <_strtod_l+0x408>
 8007a5a:	9b08      	ldr	r3, [sp, #32]
 8007a5c:	eba5 0808 	sub.w	r8, r5, r8
 8007a60:	4498      	add	r8, r3
 8007a62:	f1b8 0f00 	cmp.w	r8, #0
 8007a66:	dd71      	ble.n	8007b4c <_strtod_l+0x54c>
 8007a68:	f018 030f 	ands.w	r3, r8, #15
 8007a6c:	d00a      	beq.n	8007a84 <_strtod_l+0x484>
 8007a6e:	494d      	ldr	r1, [pc, #308]	; (8007ba4 <_strtod_l+0x5a4>)
 8007a70:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007a74:	4652      	mov	r2, sl
 8007a76:	465b      	mov	r3, fp
 8007a78:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007a7c:	f7f8 fdc4 	bl	8000608 <__aeabi_dmul>
 8007a80:	4682      	mov	sl, r0
 8007a82:	468b      	mov	fp, r1
 8007a84:	f038 080f 	bics.w	r8, r8, #15
 8007a88:	d04d      	beq.n	8007b26 <_strtod_l+0x526>
 8007a8a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8007a8e:	dd22      	ble.n	8007ad6 <_strtod_l+0x4d6>
 8007a90:	2500      	movs	r5, #0
 8007a92:	462e      	mov	r6, r5
 8007a94:	9509      	str	r5, [sp, #36]	; 0x24
 8007a96:	9507      	str	r5, [sp, #28]
 8007a98:	2322      	movs	r3, #34	; 0x22
 8007a9a:	f8df b110 	ldr.w	fp, [pc, #272]	; 8007bac <_strtod_l+0x5ac>
 8007a9e:	6023      	str	r3, [r4, #0]
 8007aa0:	f04f 0a00 	mov.w	sl, #0
 8007aa4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	f43f adec 	beq.w	8007684 <_strtod_l+0x84>
 8007aac:	991e      	ldr	r1, [sp, #120]	; 0x78
 8007aae:	4620      	mov	r0, r4
 8007ab0:	f001 fe84 	bl	80097bc <_Bfree>
 8007ab4:	9907      	ldr	r1, [sp, #28]
 8007ab6:	4620      	mov	r0, r4
 8007ab8:	f001 fe80 	bl	80097bc <_Bfree>
 8007abc:	4631      	mov	r1, r6
 8007abe:	4620      	mov	r0, r4
 8007ac0:	f001 fe7c 	bl	80097bc <_Bfree>
 8007ac4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007ac6:	4620      	mov	r0, r4
 8007ac8:	f001 fe78 	bl	80097bc <_Bfree>
 8007acc:	4629      	mov	r1, r5
 8007ace:	4620      	mov	r0, r4
 8007ad0:	f001 fe74 	bl	80097bc <_Bfree>
 8007ad4:	e5d6      	b.n	8007684 <_strtod_l+0x84>
 8007ad6:	2300      	movs	r3, #0
 8007ad8:	ea4f 1828 	mov.w	r8, r8, asr #4
 8007adc:	4650      	mov	r0, sl
 8007ade:	4659      	mov	r1, fp
 8007ae0:	4699      	mov	r9, r3
 8007ae2:	f1b8 0f01 	cmp.w	r8, #1
 8007ae6:	dc21      	bgt.n	8007b2c <_strtod_l+0x52c>
 8007ae8:	b10b      	cbz	r3, 8007aee <_strtod_l+0x4ee>
 8007aea:	4682      	mov	sl, r0
 8007aec:	468b      	mov	fp, r1
 8007aee:	4b2e      	ldr	r3, [pc, #184]	; (8007ba8 <_strtod_l+0x5a8>)
 8007af0:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8007af4:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8007af8:	4652      	mov	r2, sl
 8007afa:	465b      	mov	r3, fp
 8007afc:	e9d9 0100 	ldrd	r0, r1, [r9]
 8007b00:	f7f8 fd82 	bl	8000608 <__aeabi_dmul>
 8007b04:	4b29      	ldr	r3, [pc, #164]	; (8007bac <_strtod_l+0x5ac>)
 8007b06:	460a      	mov	r2, r1
 8007b08:	400b      	ands	r3, r1
 8007b0a:	4929      	ldr	r1, [pc, #164]	; (8007bb0 <_strtod_l+0x5b0>)
 8007b0c:	428b      	cmp	r3, r1
 8007b0e:	4682      	mov	sl, r0
 8007b10:	d8be      	bhi.n	8007a90 <_strtod_l+0x490>
 8007b12:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8007b16:	428b      	cmp	r3, r1
 8007b18:	bf86      	itte	hi
 8007b1a:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 8007bb4 <_strtod_l+0x5b4>
 8007b1e:	f04f 3aff 	movhi.w	sl, #4294967295
 8007b22:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8007b26:	2300      	movs	r3, #0
 8007b28:	9304      	str	r3, [sp, #16]
 8007b2a:	e081      	b.n	8007c30 <_strtod_l+0x630>
 8007b2c:	f018 0f01 	tst.w	r8, #1
 8007b30:	d007      	beq.n	8007b42 <_strtod_l+0x542>
 8007b32:	4b1d      	ldr	r3, [pc, #116]	; (8007ba8 <_strtod_l+0x5a8>)
 8007b34:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8007b38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b3c:	f7f8 fd64 	bl	8000608 <__aeabi_dmul>
 8007b40:	2301      	movs	r3, #1
 8007b42:	f109 0901 	add.w	r9, r9, #1
 8007b46:	ea4f 0868 	mov.w	r8, r8, asr #1
 8007b4a:	e7ca      	b.n	8007ae2 <_strtod_l+0x4e2>
 8007b4c:	d0eb      	beq.n	8007b26 <_strtod_l+0x526>
 8007b4e:	f1c8 0800 	rsb	r8, r8, #0
 8007b52:	f018 020f 	ands.w	r2, r8, #15
 8007b56:	d00a      	beq.n	8007b6e <_strtod_l+0x56e>
 8007b58:	4b12      	ldr	r3, [pc, #72]	; (8007ba4 <_strtod_l+0x5a4>)
 8007b5a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007b5e:	4650      	mov	r0, sl
 8007b60:	4659      	mov	r1, fp
 8007b62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b66:	f7f8 fe79 	bl	800085c <__aeabi_ddiv>
 8007b6a:	4682      	mov	sl, r0
 8007b6c:	468b      	mov	fp, r1
 8007b6e:	ea5f 1828 	movs.w	r8, r8, asr #4
 8007b72:	d0d8      	beq.n	8007b26 <_strtod_l+0x526>
 8007b74:	f1b8 0f1f 	cmp.w	r8, #31
 8007b78:	dd1e      	ble.n	8007bb8 <_strtod_l+0x5b8>
 8007b7a:	2500      	movs	r5, #0
 8007b7c:	462e      	mov	r6, r5
 8007b7e:	9509      	str	r5, [sp, #36]	; 0x24
 8007b80:	9507      	str	r5, [sp, #28]
 8007b82:	2322      	movs	r3, #34	; 0x22
 8007b84:	f04f 0a00 	mov.w	sl, #0
 8007b88:	f04f 0b00 	mov.w	fp, #0
 8007b8c:	6023      	str	r3, [r4, #0]
 8007b8e:	e789      	b.n	8007aa4 <_strtod_l+0x4a4>
 8007b90:	0800b491 	.word	0x0800b491
 8007b94:	0800b4d4 	.word	0x0800b4d4
 8007b98:	0800b489 	.word	0x0800b489
 8007b9c:	0800b614 	.word	0x0800b614
 8007ba0:	0800b8d0 	.word	0x0800b8d0
 8007ba4:	0800b7b0 	.word	0x0800b7b0
 8007ba8:	0800b788 	.word	0x0800b788
 8007bac:	7ff00000 	.word	0x7ff00000
 8007bb0:	7ca00000 	.word	0x7ca00000
 8007bb4:	7fefffff 	.word	0x7fefffff
 8007bb8:	f018 0310 	ands.w	r3, r8, #16
 8007bbc:	bf18      	it	ne
 8007bbe:	236a      	movne	r3, #106	; 0x6a
 8007bc0:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 8007f78 <_strtod_l+0x978>
 8007bc4:	9304      	str	r3, [sp, #16]
 8007bc6:	4650      	mov	r0, sl
 8007bc8:	4659      	mov	r1, fp
 8007bca:	2300      	movs	r3, #0
 8007bcc:	f018 0f01 	tst.w	r8, #1
 8007bd0:	d004      	beq.n	8007bdc <_strtod_l+0x5dc>
 8007bd2:	e9d9 2300 	ldrd	r2, r3, [r9]
 8007bd6:	f7f8 fd17 	bl	8000608 <__aeabi_dmul>
 8007bda:	2301      	movs	r3, #1
 8007bdc:	ea5f 0868 	movs.w	r8, r8, asr #1
 8007be0:	f109 0908 	add.w	r9, r9, #8
 8007be4:	d1f2      	bne.n	8007bcc <_strtod_l+0x5cc>
 8007be6:	b10b      	cbz	r3, 8007bec <_strtod_l+0x5ec>
 8007be8:	4682      	mov	sl, r0
 8007bea:	468b      	mov	fp, r1
 8007bec:	9b04      	ldr	r3, [sp, #16]
 8007bee:	b1bb      	cbz	r3, 8007c20 <_strtod_l+0x620>
 8007bf0:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8007bf4:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	4659      	mov	r1, fp
 8007bfc:	dd10      	ble.n	8007c20 <_strtod_l+0x620>
 8007bfe:	2b1f      	cmp	r3, #31
 8007c00:	f340 8128 	ble.w	8007e54 <_strtod_l+0x854>
 8007c04:	2b34      	cmp	r3, #52	; 0x34
 8007c06:	bfde      	ittt	le
 8007c08:	3b20      	suble	r3, #32
 8007c0a:	f04f 32ff 	movle.w	r2, #4294967295
 8007c0e:	fa02 f303 	lslle.w	r3, r2, r3
 8007c12:	f04f 0a00 	mov.w	sl, #0
 8007c16:	bfcc      	ite	gt
 8007c18:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8007c1c:	ea03 0b01 	andle.w	fp, r3, r1
 8007c20:	2200      	movs	r2, #0
 8007c22:	2300      	movs	r3, #0
 8007c24:	4650      	mov	r0, sl
 8007c26:	4659      	mov	r1, fp
 8007c28:	f7f8 ff56 	bl	8000ad8 <__aeabi_dcmpeq>
 8007c2c:	2800      	cmp	r0, #0
 8007c2e:	d1a4      	bne.n	8007b7a <_strtod_l+0x57a>
 8007c30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c32:	9300      	str	r3, [sp, #0]
 8007c34:	990a      	ldr	r1, [sp, #40]	; 0x28
 8007c36:	462b      	mov	r3, r5
 8007c38:	463a      	mov	r2, r7
 8007c3a:	4620      	mov	r0, r4
 8007c3c:	f001 fe2a 	bl	8009894 <__s2b>
 8007c40:	9009      	str	r0, [sp, #36]	; 0x24
 8007c42:	2800      	cmp	r0, #0
 8007c44:	f43f af24 	beq.w	8007a90 <_strtod_l+0x490>
 8007c48:	9b07      	ldr	r3, [sp, #28]
 8007c4a:	1b9e      	subs	r6, r3, r6
 8007c4c:	9b08      	ldr	r3, [sp, #32]
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	bfb4      	ite	lt
 8007c52:	4633      	movlt	r3, r6
 8007c54:	2300      	movge	r3, #0
 8007c56:	9310      	str	r3, [sp, #64]	; 0x40
 8007c58:	9b08      	ldr	r3, [sp, #32]
 8007c5a:	2500      	movs	r5, #0
 8007c5c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8007c60:	9318      	str	r3, [sp, #96]	; 0x60
 8007c62:	462e      	mov	r6, r5
 8007c64:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c66:	4620      	mov	r0, r4
 8007c68:	6859      	ldr	r1, [r3, #4]
 8007c6a:	f001 fd67 	bl	800973c <_Balloc>
 8007c6e:	9007      	str	r0, [sp, #28]
 8007c70:	2800      	cmp	r0, #0
 8007c72:	f43f af11 	beq.w	8007a98 <_strtod_l+0x498>
 8007c76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c78:	691a      	ldr	r2, [r3, #16]
 8007c7a:	3202      	adds	r2, #2
 8007c7c:	f103 010c 	add.w	r1, r3, #12
 8007c80:	0092      	lsls	r2, r2, #2
 8007c82:	300c      	adds	r0, #12
 8007c84:	f7fe fdea 	bl	800685c <memcpy>
 8007c88:	ec4b ab10 	vmov	d0, sl, fp
 8007c8c:	aa20      	add	r2, sp, #128	; 0x80
 8007c8e:	a91f      	add	r1, sp, #124	; 0x7c
 8007c90:	4620      	mov	r0, r4
 8007c92:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 8007c96:	f002 f939 	bl	8009f0c <__d2b>
 8007c9a:	901e      	str	r0, [sp, #120]	; 0x78
 8007c9c:	2800      	cmp	r0, #0
 8007c9e:	f43f aefb 	beq.w	8007a98 <_strtod_l+0x498>
 8007ca2:	2101      	movs	r1, #1
 8007ca4:	4620      	mov	r0, r4
 8007ca6:	f001 fe8f 	bl	80099c8 <__i2b>
 8007caa:	4606      	mov	r6, r0
 8007cac:	2800      	cmp	r0, #0
 8007cae:	f43f aef3 	beq.w	8007a98 <_strtod_l+0x498>
 8007cb2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8007cb4:	9904      	ldr	r1, [sp, #16]
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	bfab      	itete	ge
 8007cba:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 8007cbc:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 8007cbe:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 8007cc0:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 8007cc4:	bfac      	ite	ge
 8007cc6:	eb03 0902 	addge.w	r9, r3, r2
 8007cca:	1ad7      	sublt	r7, r2, r3
 8007ccc:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8007cce:	eba3 0801 	sub.w	r8, r3, r1
 8007cd2:	4490      	add	r8, r2
 8007cd4:	4ba3      	ldr	r3, [pc, #652]	; (8007f64 <_strtod_l+0x964>)
 8007cd6:	f108 38ff 	add.w	r8, r8, #4294967295
 8007cda:	4598      	cmp	r8, r3
 8007cdc:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8007ce0:	f280 80cc 	bge.w	8007e7c <_strtod_l+0x87c>
 8007ce4:	eba3 0308 	sub.w	r3, r3, r8
 8007ce8:	2b1f      	cmp	r3, #31
 8007cea:	eba2 0203 	sub.w	r2, r2, r3
 8007cee:	f04f 0101 	mov.w	r1, #1
 8007cf2:	f300 80b6 	bgt.w	8007e62 <_strtod_l+0x862>
 8007cf6:	fa01 f303 	lsl.w	r3, r1, r3
 8007cfa:	9311      	str	r3, [sp, #68]	; 0x44
 8007cfc:	2300      	movs	r3, #0
 8007cfe:	930c      	str	r3, [sp, #48]	; 0x30
 8007d00:	eb09 0802 	add.w	r8, r9, r2
 8007d04:	9b04      	ldr	r3, [sp, #16]
 8007d06:	45c1      	cmp	r9, r8
 8007d08:	4417      	add	r7, r2
 8007d0a:	441f      	add	r7, r3
 8007d0c:	464b      	mov	r3, r9
 8007d0e:	bfa8      	it	ge
 8007d10:	4643      	movge	r3, r8
 8007d12:	42bb      	cmp	r3, r7
 8007d14:	bfa8      	it	ge
 8007d16:	463b      	movge	r3, r7
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	bfc2      	ittt	gt
 8007d1c:	eba8 0803 	subgt.w	r8, r8, r3
 8007d20:	1aff      	subgt	r7, r7, r3
 8007d22:	eba9 0903 	subgt.w	r9, r9, r3
 8007d26:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	dd17      	ble.n	8007d5c <_strtod_l+0x75c>
 8007d2c:	4631      	mov	r1, r6
 8007d2e:	461a      	mov	r2, r3
 8007d30:	4620      	mov	r0, r4
 8007d32:	f001 ff05 	bl	8009b40 <__pow5mult>
 8007d36:	4606      	mov	r6, r0
 8007d38:	2800      	cmp	r0, #0
 8007d3a:	f43f aead 	beq.w	8007a98 <_strtod_l+0x498>
 8007d3e:	4601      	mov	r1, r0
 8007d40:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8007d42:	4620      	mov	r0, r4
 8007d44:	f001 fe56 	bl	80099f4 <__multiply>
 8007d48:	900f      	str	r0, [sp, #60]	; 0x3c
 8007d4a:	2800      	cmp	r0, #0
 8007d4c:	f43f aea4 	beq.w	8007a98 <_strtod_l+0x498>
 8007d50:	991e      	ldr	r1, [sp, #120]	; 0x78
 8007d52:	4620      	mov	r0, r4
 8007d54:	f001 fd32 	bl	80097bc <_Bfree>
 8007d58:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007d5a:	931e      	str	r3, [sp, #120]	; 0x78
 8007d5c:	f1b8 0f00 	cmp.w	r8, #0
 8007d60:	f300 8091 	bgt.w	8007e86 <_strtod_l+0x886>
 8007d64:	9b08      	ldr	r3, [sp, #32]
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	dd08      	ble.n	8007d7c <_strtod_l+0x77c>
 8007d6a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8007d6c:	9907      	ldr	r1, [sp, #28]
 8007d6e:	4620      	mov	r0, r4
 8007d70:	f001 fee6 	bl	8009b40 <__pow5mult>
 8007d74:	9007      	str	r0, [sp, #28]
 8007d76:	2800      	cmp	r0, #0
 8007d78:	f43f ae8e 	beq.w	8007a98 <_strtod_l+0x498>
 8007d7c:	2f00      	cmp	r7, #0
 8007d7e:	dd08      	ble.n	8007d92 <_strtod_l+0x792>
 8007d80:	9907      	ldr	r1, [sp, #28]
 8007d82:	463a      	mov	r2, r7
 8007d84:	4620      	mov	r0, r4
 8007d86:	f001 ff35 	bl	8009bf4 <__lshift>
 8007d8a:	9007      	str	r0, [sp, #28]
 8007d8c:	2800      	cmp	r0, #0
 8007d8e:	f43f ae83 	beq.w	8007a98 <_strtod_l+0x498>
 8007d92:	f1b9 0f00 	cmp.w	r9, #0
 8007d96:	dd08      	ble.n	8007daa <_strtod_l+0x7aa>
 8007d98:	4631      	mov	r1, r6
 8007d9a:	464a      	mov	r2, r9
 8007d9c:	4620      	mov	r0, r4
 8007d9e:	f001 ff29 	bl	8009bf4 <__lshift>
 8007da2:	4606      	mov	r6, r0
 8007da4:	2800      	cmp	r0, #0
 8007da6:	f43f ae77 	beq.w	8007a98 <_strtod_l+0x498>
 8007daa:	9a07      	ldr	r2, [sp, #28]
 8007dac:	991e      	ldr	r1, [sp, #120]	; 0x78
 8007dae:	4620      	mov	r0, r4
 8007db0:	f001 ffa8 	bl	8009d04 <__mdiff>
 8007db4:	4605      	mov	r5, r0
 8007db6:	2800      	cmp	r0, #0
 8007db8:	f43f ae6e 	beq.w	8007a98 <_strtod_l+0x498>
 8007dbc:	68c3      	ldr	r3, [r0, #12]
 8007dbe:	930f      	str	r3, [sp, #60]	; 0x3c
 8007dc0:	2300      	movs	r3, #0
 8007dc2:	60c3      	str	r3, [r0, #12]
 8007dc4:	4631      	mov	r1, r6
 8007dc6:	f001 ff81 	bl	8009ccc <__mcmp>
 8007dca:	2800      	cmp	r0, #0
 8007dcc:	da65      	bge.n	8007e9a <_strtod_l+0x89a>
 8007dce:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007dd0:	ea53 030a 	orrs.w	r3, r3, sl
 8007dd4:	f040 8087 	bne.w	8007ee6 <_strtod_l+0x8e6>
 8007dd8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	f040 8082 	bne.w	8007ee6 <_strtod_l+0x8e6>
 8007de2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007de6:	0d1b      	lsrs	r3, r3, #20
 8007de8:	051b      	lsls	r3, r3, #20
 8007dea:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8007dee:	d97a      	bls.n	8007ee6 <_strtod_l+0x8e6>
 8007df0:	696b      	ldr	r3, [r5, #20]
 8007df2:	b913      	cbnz	r3, 8007dfa <_strtod_l+0x7fa>
 8007df4:	692b      	ldr	r3, [r5, #16]
 8007df6:	2b01      	cmp	r3, #1
 8007df8:	dd75      	ble.n	8007ee6 <_strtod_l+0x8e6>
 8007dfa:	4629      	mov	r1, r5
 8007dfc:	2201      	movs	r2, #1
 8007dfe:	4620      	mov	r0, r4
 8007e00:	f001 fef8 	bl	8009bf4 <__lshift>
 8007e04:	4631      	mov	r1, r6
 8007e06:	4605      	mov	r5, r0
 8007e08:	f001 ff60 	bl	8009ccc <__mcmp>
 8007e0c:	2800      	cmp	r0, #0
 8007e0e:	dd6a      	ble.n	8007ee6 <_strtod_l+0x8e6>
 8007e10:	9904      	ldr	r1, [sp, #16]
 8007e12:	4a55      	ldr	r2, [pc, #340]	; (8007f68 <_strtod_l+0x968>)
 8007e14:	465b      	mov	r3, fp
 8007e16:	2900      	cmp	r1, #0
 8007e18:	f000 8085 	beq.w	8007f26 <_strtod_l+0x926>
 8007e1c:	ea02 010b 	and.w	r1, r2, fp
 8007e20:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8007e24:	dc7f      	bgt.n	8007f26 <_strtod_l+0x926>
 8007e26:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8007e2a:	f77f aeaa 	ble.w	8007b82 <_strtod_l+0x582>
 8007e2e:	4a4f      	ldr	r2, [pc, #316]	; (8007f6c <_strtod_l+0x96c>)
 8007e30:	2300      	movs	r3, #0
 8007e32:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 8007e36:	4650      	mov	r0, sl
 8007e38:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 8007e3c:	4659      	mov	r1, fp
 8007e3e:	f7f8 fbe3 	bl	8000608 <__aeabi_dmul>
 8007e42:	460b      	mov	r3, r1
 8007e44:	4303      	orrs	r3, r0
 8007e46:	bf08      	it	eq
 8007e48:	2322      	moveq	r3, #34	; 0x22
 8007e4a:	4682      	mov	sl, r0
 8007e4c:	468b      	mov	fp, r1
 8007e4e:	bf08      	it	eq
 8007e50:	6023      	streq	r3, [r4, #0]
 8007e52:	e62b      	b.n	8007aac <_strtod_l+0x4ac>
 8007e54:	f04f 32ff 	mov.w	r2, #4294967295
 8007e58:	fa02 f303 	lsl.w	r3, r2, r3
 8007e5c:	ea03 0a0a 	and.w	sl, r3, sl
 8007e60:	e6de      	b.n	8007c20 <_strtod_l+0x620>
 8007e62:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8007e66:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8007e6a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8007e6e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8007e72:	fa01 f308 	lsl.w	r3, r1, r8
 8007e76:	930c      	str	r3, [sp, #48]	; 0x30
 8007e78:	9111      	str	r1, [sp, #68]	; 0x44
 8007e7a:	e741      	b.n	8007d00 <_strtod_l+0x700>
 8007e7c:	2300      	movs	r3, #0
 8007e7e:	930c      	str	r3, [sp, #48]	; 0x30
 8007e80:	2301      	movs	r3, #1
 8007e82:	9311      	str	r3, [sp, #68]	; 0x44
 8007e84:	e73c      	b.n	8007d00 <_strtod_l+0x700>
 8007e86:	991e      	ldr	r1, [sp, #120]	; 0x78
 8007e88:	4642      	mov	r2, r8
 8007e8a:	4620      	mov	r0, r4
 8007e8c:	f001 feb2 	bl	8009bf4 <__lshift>
 8007e90:	901e      	str	r0, [sp, #120]	; 0x78
 8007e92:	2800      	cmp	r0, #0
 8007e94:	f47f af66 	bne.w	8007d64 <_strtod_l+0x764>
 8007e98:	e5fe      	b.n	8007a98 <_strtod_l+0x498>
 8007e9a:	465f      	mov	r7, fp
 8007e9c:	d16e      	bne.n	8007f7c <_strtod_l+0x97c>
 8007e9e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007ea0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007ea4:	b342      	cbz	r2, 8007ef8 <_strtod_l+0x8f8>
 8007ea6:	4a32      	ldr	r2, [pc, #200]	; (8007f70 <_strtod_l+0x970>)
 8007ea8:	4293      	cmp	r3, r2
 8007eaa:	d128      	bne.n	8007efe <_strtod_l+0x8fe>
 8007eac:	9b04      	ldr	r3, [sp, #16]
 8007eae:	4650      	mov	r0, sl
 8007eb0:	b1eb      	cbz	r3, 8007eee <_strtod_l+0x8ee>
 8007eb2:	4a2d      	ldr	r2, [pc, #180]	; (8007f68 <_strtod_l+0x968>)
 8007eb4:	403a      	ands	r2, r7
 8007eb6:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8007eba:	f04f 31ff 	mov.w	r1, #4294967295
 8007ebe:	d819      	bhi.n	8007ef4 <_strtod_l+0x8f4>
 8007ec0:	0d12      	lsrs	r2, r2, #20
 8007ec2:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8007ec6:	fa01 f303 	lsl.w	r3, r1, r3
 8007eca:	4298      	cmp	r0, r3
 8007ecc:	d117      	bne.n	8007efe <_strtod_l+0x8fe>
 8007ece:	4b29      	ldr	r3, [pc, #164]	; (8007f74 <_strtod_l+0x974>)
 8007ed0:	429f      	cmp	r7, r3
 8007ed2:	d102      	bne.n	8007eda <_strtod_l+0x8da>
 8007ed4:	3001      	adds	r0, #1
 8007ed6:	f43f addf 	beq.w	8007a98 <_strtod_l+0x498>
 8007eda:	4b23      	ldr	r3, [pc, #140]	; (8007f68 <_strtod_l+0x968>)
 8007edc:	403b      	ands	r3, r7
 8007ede:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8007ee2:	f04f 0a00 	mov.w	sl, #0
 8007ee6:	9b04      	ldr	r3, [sp, #16]
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d1a0      	bne.n	8007e2e <_strtod_l+0x82e>
 8007eec:	e5de      	b.n	8007aac <_strtod_l+0x4ac>
 8007eee:	f04f 33ff 	mov.w	r3, #4294967295
 8007ef2:	e7ea      	b.n	8007eca <_strtod_l+0x8ca>
 8007ef4:	460b      	mov	r3, r1
 8007ef6:	e7e8      	b.n	8007eca <_strtod_l+0x8ca>
 8007ef8:	ea53 030a 	orrs.w	r3, r3, sl
 8007efc:	d088      	beq.n	8007e10 <_strtod_l+0x810>
 8007efe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007f00:	b1db      	cbz	r3, 8007f3a <_strtod_l+0x93a>
 8007f02:	423b      	tst	r3, r7
 8007f04:	d0ef      	beq.n	8007ee6 <_strtod_l+0x8e6>
 8007f06:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007f08:	9a04      	ldr	r2, [sp, #16]
 8007f0a:	4650      	mov	r0, sl
 8007f0c:	4659      	mov	r1, fp
 8007f0e:	b1c3      	cbz	r3, 8007f42 <_strtod_l+0x942>
 8007f10:	f7ff fb5a 	bl	80075c8 <sulp>
 8007f14:	4602      	mov	r2, r0
 8007f16:	460b      	mov	r3, r1
 8007f18:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007f1c:	f7f8 f9be 	bl	800029c <__adddf3>
 8007f20:	4682      	mov	sl, r0
 8007f22:	468b      	mov	fp, r1
 8007f24:	e7df      	b.n	8007ee6 <_strtod_l+0x8e6>
 8007f26:	4013      	ands	r3, r2
 8007f28:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8007f2c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8007f30:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8007f34:	f04f 3aff 	mov.w	sl, #4294967295
 8007f38:	e7d5      	b.n	8007ee6 <_strtod_l+0x8e6>
 8007f3a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007f3c:	ea13 0f0a 	tst.w	r3, sl
 8007f40:	e7e0      	b.n	8007f04 <_strtod_l+0x904>
 8007f42:	f7ff fb41 	bl	80075c8 <sulp>
 8007f46:	4602      	mov	r2, r0
 8007f48:	460b      	mov	r3, r1
 8007f4a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007f4e:	f7f8 f9a3 	bl	8000298 <__aeabi_dsub>
 8007f52:	2200      	movs	r2, #0
 8007f54:	2300      	movs	r3, #0
 8007f56:	4682      	mov	sl, r0
 8007f58:	468b      	mov	fp, r1
 8007f5a:	f7f8 fdbd 	bl	8000ad8 <__aeabi_dcmpeq>
 8007f5e:	2800      	cmp	r0, #0
 8007f60:	d0c1      	beq.n	8007ee6 <_strtod_l+0x8e6>
 8007f62:	e60e      	b.n	8007b82 <_strtod_l+0x582>
 8007f64:	fffffc02 	.word	0xfffffc02
 8007f68:	7ff00000 	.word	0x7ff00000
 8007f6c:	39500000 	.word	0x39500000
 8007f70:	000fffff 	.word	0x000fffff
 8007f74:	7fefffff 	.word	0x7fefffff
 8007f78:	0800b4e8 	.word	0x0800b4e8
 8007f7c:	4631      	mov	r1, r6
 8007f7e:	4628      	mov	r0, r5
 8007f80:	f002 f820 	bl	8009fc4 <__ratio>
 8007f84:	ec59 8b10 	vmov	r8, r9, d0
 8007f88:	ee10 0a10 	vmov	r0, s0
 8007f8c:	2200      	movs	r2, #0
 8007f8e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007f92:	4649      	mov	r1, r9
 8007f94:	f7f8 fdb4 	bl	8000b00 <__aeabi_dcmple>
 8007f98:	2800      	cmp	r0, #0
 8007f9a:	d07c      	beq.n	8008096 <_strtod_l+0xa96>
 8007f9c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d04c      	beq.n	800803c <_strtod_l+0xa3c>
 8007fa2:	4b95      	ldr	r3, [pc, #596]	; (80081f8 <_strtod_l+0xbf8>)
 8007fa4:	2200      	movs	r2, #0
 8007fa6:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8007faa:	f8df 924c 	ldr.w	r9, [pc, #588]	; 80081f8 <_strtod_l+0xbf8>
 8007fae:	f04f 0800 	mov.w	r8, #0
 8007fb2:	4b92      	ldr	r3, [pc, #584]	; (80081fc <_strtod_l+0xbfc>)
 8007fb4:	403b      	ands	r3, r7
 8007fb6:	9311      	str	r3, [sp, #68]	; 0x44
 8007fb8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8007fba:	4b91      	ldr	r3, [pc, #580]	; (8008200 <_strtod_l+0xc00>)
 8007fbc:	429a      	cmp	r2, r3
 8007fbe:	f040 80b2 	bne.w	8008126 <_strtod_l+0xb26>
 8007fc2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8007fc6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007fca:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8007fce:	ec4b ab10 	vmov	d0, sl, fp
 8007fd2:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 8007fd6:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8007fda:	f001 ff1b 	bl	8009e14 <__ulp>
 8007fde:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007fe2:	ec53 2b10 	vmov	r2, r3, d0
 8007fe6:	f7f8 fb0f 	bl	8000608 <__aeabi_dmul>
 8007fea:	4652      	mov	r2, sl
 8007fec:	465b      	mov	r3, fp
 8007fee:	f7f8 f955 	bl	800029c <__adddf3>
 8007ff2:	460b      	mov	r3, r1
 8007ff4:	4981      	ldr	r1, [pc, #516]	; (80081fc <_strtod_l+0xbfc>)
 8007ff6:	4a83      	ldr	r2, [pc, #524]	; (8008204 <_strtod_l+0xc04>)
 8007ff8:	4019      	ands	r1, r3
 8007ffa:	4291      	cmp	r1, r2
 8007ffc:	4682      	mov	sl, r0
 8007ffe:	d95e      	bls.n	80080be <_strtod_l+0xabe>
 8008000:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008002:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8008006:	4293      	cmp	r3, r2
 8008008:	d103      	bne.n	8008012 <_strtod_l+0xa12>
 800800a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800800c:	3301      	adds	r3, #1
 800800e:	f43f ad43 	beq.w	8007a98 <_strtod_l+0x498>
 8008012:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 8008210 <_strtod_l+0xc10>
 8008016:	f04f 3aff 	mov.w	sl, #4294967295
 800801a:	991e      	ldr	r1, [sp, #120]	; 0x78
 800801c:	4620      	mov	r0, r4
 800801e:	f001 fbcd 	bl	80097bc <_Bfree>
 8008022:	9907      	ldr	r1, [sp, #28]
 8008024:	4620      	mov	r0, r4
 8008026:	f001 fbc9 	bl	80097bc <_Bfree>
 800802a:	4631      	mov	r1, r6
 800802c:	4620      	mov	r0, r4
 800802e:	f001 fbc5 	bl	80097bc <_Bfree>
 8008032:	4629      	mov	r1, r5
 8008034:	4620      	mov	r0, r4
 8008036:	f001 fbc1 	bl	80097bc <_Bfree>
 800803a:	e613      	b.n	8007c64 <_strtod_l+0x664>
 800803c:	f1ba 0f00 	cmp.w	sl, #0
 8008040:	d11b      	bne.n	800807a <_strtod_l+0xa7a>
 8008042:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008046:	b9f3      	cbnz	r3, 8008086 <_strtod_l+0xa86>
 8008048:	4b6b      	ldr	r3, [pc, #428]	; (80081f8 <_strtod_l+0xbf8>)
 800804a:	2200      	movs	r2, #0
 800804c:	4640      	mov	r0, r8
 800804e:	4649      	mov	r1, r9
 8008050:	f7f8 fd4c 	bl	8000aec <__aeabi_dcmplt>
 8008054:	b9d0      	cbnz	r0, 800808c <_strtod_l+0xa8c>
 8008056:	4640      	mov	r0, r8
 8008058:	4649      	mov	r1, r9
 800805a:	4b6b      	ldr	r3, [pc, #428]	; (8008208 <_strtod_l+0xc08>)
 800805c:	2200      	movs	r2, #0
 800805e:	f7f8 fad3 	bl	8000608 <__aeabi_dmul>
 8008062:	4680      	mov	r8, r0
 8008064:	4689      	mov	r9, r1
 8008066:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800806a:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 800806e:	931b      	str	r3, [sp, #108]	; 0x6c
 8008070:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 8008074:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8008078:	e79b      	b.n	8007fb2 <_strtod_l+0x9b2>
 800807a:	f1ba 0f01 	cmp.w	sl, #1
 800807e:	d102      	bne.n	8008086 <_strtod_l+0xa86>
 8008080:	2f00      	cmp	r7, #0
 8008082:	f43f ad7e 	beq.w	8007b82 <_strtod_l+0x582>
 8008086:	4b61      	ldr	r3, [pc, #388]	; (800820c <_strtod_l+0xc0c>)
 8008088:	2200      	movs	r2, #0
 800808a:	e78c      	b.n	8007fa6 <_strtod_l+0x9a6>
 800808c:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8008208 <_strtod_l+0xc08>
 8008090:	f04f 0800 	mov.w	r8, #0
 8008094:	e7e7      	b.n	8008066 <_strtod_l+0xa66>
 8008096:	4b5c      	ldr	r3, [pc, #368]	; (8008208 <_strtod_l+0xc08>)
 8008098:	4640      	mov	r0, r8
 800809a:	4649      	mov	r1, r9
 800809c:	2200      	movs	r2, #0
 800809e:	f7f8 fab3 	bl	8000608 <__aeabi_dmul>
 80080a2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80080a4:	4680      	mov	r8, r0
 80080a6:	4689      	mov	r9, r1
 80080a8:	b933      	cbnz	r3, 80080b8 <_strtod_l+0xab8>
 80080aa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80080ae:	9012      	str	r0, [sp, #72]	; 0x48
 80080b0:	9313      	str	r3, [sp, #76]	; 0x4c
 80080b2:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 80080b6:	e7dd      	b.n	8008074 <_strtod_l+0xa74>
 80080b8:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 80080bc:	e7f9      	b.n	80080b2 <_strtod_l+0xab2>
 80080be:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 80080c2:	9b04      	ldr	r3, [sp, #16]
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d1a8      	bne.n	800801a <_strtod_l+0xa1a>
 80080c8:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80080cc:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80080ce:	0d1b      	lsrs	r3, r3, #20
 80080d0:	051b      	lsls	r3, r3, #20
 80080d2:	429a      	cmp	r2, r3
 80080d4:	d1a1      	bne.n	800801a <_strtod_l+0xa1a>
 80080d6:	4640      	mov	r0, r8
 80080d8:	4649      	mov	r1, r9
 80080da:	f7f8 fdf5 	bl	8000cc8 <__aeabi_d2lz>
 80080de:	f7f8 fa65 	bl	80005ac <__aeabi_l2d>
 80080e2:	4602      	mov	r2, r0
 80080e4:	460b      	mov	r3, r1
 80080e6:	4640      	mov	r0, r8
 80080e8:	4649      	mov	r1, r9
 80080ea:	f7f8 f8d5 	bl	8000298 <__aeabi_dsub>
 80080ee:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80080f0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80080f4:	ea43 030a 	orr.w	r3, r3, sl
 80080f8:	4313      	orrs	r3, r2
 80080fa:	4680      	mov	r8, r0
 80080fc:	4689      	mov	r9, r1
 80080fe:	d053      	beq.n	80081a8 <_strtod_l+0xba8>
 8008100:	a335      	add	r3, pc, #212	; (adr r3, 80081d8 <_strtod_l+0xbd8>)
 8008102:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008106:	f7f8 fcf1 	bl	8000aec <__aeabi_dcmplt>
 800810a:	2800      	cmp	r0, #0
 800810c:	f47f acce 	bne.w	8007aac <_strtod_l+0x4ac>
 8008110:	a333      	add	r3, pc, #204	; (adr r3, 80081e0 <_strtod_l+0xbe0>)
 8008112:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008116:	4640      	mov	r0, r8
 8008118:	4649      	mov	r1, r9
 800811a:	f7f8 fd05 	bl	8000b28 <__aeabi_dcmpgt>
 800811e:	2800      	cmp	r0, #0
 8008120:	f43f af7b 	beq.w	800801a <_strtod_l+0xa1a>
 8008124:	e4c2      	b.n	8007aac <_strtod_l+0x4ac>
 8008126:	9b04      	ldr	r3, [sp, #16]
 8008128:	b333      	cbz	r3, 8008178 <_strtod_l+0xb78>
 800812a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800812c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8008130:	d822      	bhi.n	8008178 <_strtod_l+0xb78>
 8008132:	a32d      	add	r3, pc, #180	; (adr r3, 80081e8 <_strtod_l+0xbe8>)
 8008134:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008138:	4640      	mov	r0, r8
 800813a:	4649      	mov	r1, r9
 800813c:	f7f8 fce0 	bl	8000b00 <__aeabi_dcmple>
 8008140:	b1a0      	cbz	r0, 800816c <_strtod_l+0xb6c>
 8008142:	4649      	mov	r1, r9
 8008144:	4640      	mov	r0, r8
 8008146:	f7f8 fd37 	bl	8000bb8 <__aeabi_d2uiz>
 800814a:	2801      	cmp	r0, #1
 800814c:	bf38      	it	cc
 800814e:	2001      	movcc	r0, #1
 8008150:	f7f8 f9e0 	bl	8000514 <__aeabi_ui2d>
 8008154:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008156:	4680      	mov	r8, r0
 8008158:	4689      	mov	r9, r1
 800815a:	bb13      	cbnz	r3, 80081a2 <_strtod_l+0xba2>
 800815c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008160:	9014      	str	r0, [sp, #80]	; 0x50
 8008162:	9315      	str	r3, [sp, #84]	; 0x54
 8008164:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8008168:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800816c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800816e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8008170:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8008174:	1a9b      	subs	r3, r3, r2
 8008176:	930d      	str	r3, [sp, #52]	; 0x34
 8008178:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800817c:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8008180:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8008184:	f001 fe46 	bl	8009e14 <__ulp>
 8008188:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800818c:	ec53 2b10 	vmov	r2, r3, d0
 8008190:	f7f8 fa3a 	bl	8000608 <__aeabi_dmul>
 8008194:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8008198:	f7f8 f880 	bl	800029c <__adddf3>
 800819c:	4682      	mov	sl, r0
 800819e:	468b      	mov	fp, r1
 80081a0:	e78f      	b.n	80080c2 <_strtod_l+0xac2>
 80081a2:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 80081a6:	e7dd      	b.n	8008164 <_strtod_l+0xb64>
 80081a8:	a311      	add	r3, pc, #68	; (adr r3, 80081f0 <_strtod_l+0xbf0>)
 80081aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081ae:	f7f8 fc9d 	bl	8000aec <__aeabi_dcmplt>
 80081b2:	e7b4      	b.n	800811e <_strtod_l+0xb1e>
 80081b4:	2300      	movs	r3, #0
 80081b6:	930e      	str	r3, [sp, #56]	; 0x38
 80081b8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80081ba:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80081bc:	6013      	str	r3, [r2, #0]
 80081be:	f7ff ba65 	b.w	800768c <_strtod_l+0x8c>
 80081c2:	2b65      	cmp	r3, #101	; 0x65
 80081c4:	f43f ab5d 	beq.w	8007882 <_strtod_l+0x282>
 80081c8:	2b45      	cmp	r3, #69	; 0x45
 80081ca:	f43f ab5a 	beq.w	8007882 <_strtod_l+0x282>
 80081ce:	2201      	movs	r2, #1
 80081d0:	f7ff bb92 	b.w	80078f8 <_strtod_l+0x2f8>
 80081d4:	f3af 8000 	nop.w
 80081d8:	94a03595 	.word	0x94a03595
 80081dc:	3fdfffff 	.word	0x3fdfffff
 80081e0:	35afe535 	.word	0x35afe535
 80081e4:	3fe00000 	.word	0x3fe00000
 80081e8:	ffc00000 	.word	0xffc00000
 80081ec:	41dfffff 	.word	0x41dfffff
 80081f0:	94a03595 	.word	0x94a03595
 80081f4:	3fcfffff 	.word	0x3fcfffff
 80081f8:	3ff00000 	.word	0x3ff00000
 80081fc:	7ff00000 	.word	0x7ff00000
 8008200:	7fe00000 	.word	0x7fe00000
 8008204:	7c9fffff 	.word	0x7c9fffff
 8008208:	3fe00000 	.word	0x3fe00000
 800820c:	bff00000 	.word	0xbff00000
 8008210:	7fefffff 	.word	0x7fefffff

08008214 <_strtod_r>:
 8008214:	4b01      	ldr	r3, [pc, #4]	; (800821c <_strtod_r+0x8>)
 8008216:	f7ff b9f3 	b.w	8007600 <_strtod_l>
 800821a:	bf00      	nop
 800821c:	20000084 	.word	0x20000084

08008220 <_strtol_l.isra.0>:
 8008220:	2b01      	cmp	r3, #1
 8008222:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008226:	d001      	beq.n	800822c <_strtol_l.isra.0+0xc>
 8008228:	2b24      	cmp	r3, #36	; 0x24
 800822a:	d906      	bls.n	800823a <_strtol_l.isra.0+0x1a>
 800822c:	f7fe faec 	bl	8006808 <__errno>
 8008230:	2316      	movs	r3, #22
 8008232:	6003      	str	r3, [r0, #0]
 8008234:	2000      	movs	r0, #0
 8008236:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800823a:	4f3a      	ldr	r7, [pc, #232]	; (8008324 <_strtol_l.isra.0+0x104>)
 800823c:	468e      	mov	lr, r1
 800823e:	4676      	mov	r6, lr
 8008240:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8008244:	5de5      	ldrb	r5, [r4, r7]
 8008246:	f015 0508 	ands.w	r5, r5, #8
 800824a:	d1f8      	bne.n	800823e <_strtol_l.isra.0+0x1e>
 800824c:	2c2d      	cmp	r4, #45	; 0x2d
 800824e:	d134      	bne.n	80082ba <_strtol_l.isra.0+0x9a>
 8008250:	f89e 4000 	ldrb.w	r4, [lr]
 8008254:	f04f 0801 	mov.w	r8, #1
 8008258:	f106 0e02 	add.w	lr, r6, #2
 800825c:	2b00      	cmp	r3, #0
 800825e:	d05c      	beq.n	800831a <_strtol_l.isra.0+0xfa>
 8008260:	2b10      	cmp	r3, #16
 8008262:	d10c      	bne.n	800827e <_strtol_l.isra.0+0x5e>
 8008264:	2c30      	cmp	r4, #48	; 0x30
 8008266:	d10a      	bne.n	800827e <_strtol_l.isra.0+0x5e>
 8008268:	f89e 4000 	ldrb.w	r4, [lr]
 800826c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8008270:	2c58      	cmp	r4, #88	; 0x58
 8008272:	d14d      	bne.n	8008310 <_strtol_l.isra.0+0xf0>
 8008274:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8008278:	2310      	movs	r3, #16
 800827a:	f10e 0e02 	add.w	lr, lr, #2
 800827e:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 8008282:	f10c 3cff 	add.w	ip, ip, #4294967295
 8008286:	2600      	movs	r6, #0
 8008288:	fbbc f9f3 	udiv	r9, ip, r3
 800828c:	4635      	mov	r5, r6
 800828e:	fb03 ca19 	mls	sl, r3, r9, ip
 8008292:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8008296:	2f09      	cmp	r7, #9
 8008298:	d818      	bhi.n	80082cc <_strtol_l.isra.0+0xac>
 800829a:	463c      	mov	r4, r7
 800829c:	42a3      	cmp	r3, r4
 800829e:	dd24      	ble.n	80082ea <_strtol_l.isra.0+0xca>
 80082a0:	2e00      	cmp	r6, #0
 80082a2:	db1f      	blt.n	80082e4 <_strtol_l.isra.0+0xc4>
 80082a4:	45a9      	cmp	r9, r5
 80082a6:	d31d      	bcc.n	80082e4 <_strtol_l.isra.0+0xc4>
 80082a8:	d101      	bne.n	80082ae <_strtol_l.isra.0+0x8e>
 80082aa:	45a2      	cmp	sl, r4
 80082ac:	db1a      	blt.n	80082e4 <_strtol_l.isra.0+0xc4>
 80082ae:	fb05 4503 	mla	r5, r5, r3, r4
 80082b2:	2601      	movs	r6, #1
 80082b4:	f81e 4b01 	ldrb.w	r4, [lr], #1
 80082b8:	e7eb      	b.n	8008292 <_strtol_l.isra.0+0x72>
 80082ba:	2c2b      	cmp	r4, #43	; 0x2b
 80082bc:	bf08      	it	eq
 80082be:	f89e 4000 	ldrbeq.w	r4, [lr]
 80082c2:	46a8      	mov	r8, r5
 80082c4:	bf08      	it	eq
 80082c6:	f106 0e02 	addeq.w	lr, r6, #2
 80082ca:	e7c7      	b.n	800825c <_strtol_l.isra.0+0x3c>
 80082cc:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 80082d0:	2f19      	cmp	r7, #25
 80082d2:	d801      	bhi.n	80082d8 <_strtol_l.isra.0+0xb8>
 80082d4:	3c37      	subs	r4, #55	; 0x37
 80082d6:	e7e1      	b.n	800829c <_strtol_l.isra.0+0x7c>
 80082d8:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 80082dc:	2f19      	cmp	r7, #25
 80082de:	d804      	bhi.n	80082ea <_strtol_l.isra.0+0xca>
 80082e0:	3c57      	subs	r4, #87	; 0x57
 80082e2:	e7db      	b.n	800829c <_strtol_l.isra.0+0x7c>
 80082e4:	f04f 36ff 	mov.w	r6, #4294967295
 80082e8:	e7e4      	b.n	80082b4 <_strtol_l.isra.0+0x94>
 80082ea:	2e00      	cmp	r6, #0
 80082ec:	da05      	bge.n	80082fa <_strtol_l.isra.0+0xda>
 80082ee:	2322      	movs	r3, #34	; 0x22
 80082f0:	6003      	str	r3, [r0, #0]
 80082f2:	4665      	mov	r5, ip
 80082f4:	b942      	cbnz	r2, 8008308 <_strtol_l.isra.0+0xe8>
 80082f6:	4628      	mov	r0, r5
 80082f8:	e79d      	b.n	8008236 <_strtol_l.isra.0+0x16>
 80082fa:	f1b8 0f00 	cmp.w	r8, #0
 80082fe:	d000      	beq.n	8008302 <_strtol_l.isra.0+0xe2>
 8008300:	426d      	negs	r5, r5
 8008302:	2a00      	cmp	r2, #0
 8008304:	d0f7      	beq.n	80082f6 <_strtol_l.isra.0+0xd6>
 8008306:	b10e      	cbz	r6, 800830c <_strtol_l.isra.0+0xec>
 8008308:	f10e 31ff 	add.w	r1, lr, #4294967295
 800830c:	6011      	str	r1, [r2, #0]
 800830e:	e7f2      	b.n	80082f6 <_strtol_l.isra.0+0xd6>
 8008310:	2430      	movs	r4, #48	; 0x30
 8008312:	2b00      	cmp	r3, #0
 8008314:	d1b3      	bne.n	800827e <_strtol_l.isra.0+0x5e>
 8008316:	2308      	movs	r3, #8
 8008318:	e7b1      	b.n	800827e <_strtol_l.isra.0+0x5e>
 800831a:	2c30      	cmp	r4, #48	; 0x30
 800831c:	d0a4      	beq.n	8008268 <_strtol_l.isra.0+0x48>
 800831e:	230a      	movs	r3, #10
 8008320:	e7ad      	b.n	800827e <_strtol_l.isra.0+0x5e>
 8008322:	bf00      	nop
 8008324:	0800b511 	.word	0x0800b511

08008328 <_strtol_r>:
 8008328:	f7ff bf7a 	b.w	8008220 <_strtol_l.isra.0>

0800832c <quorem>:
 800832c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008330:	6903      	ldr	r3, [r0, #16]
 8008332:	690c      	ldr	r4, [r1, #16]
 8008334:	42a3      	cmp	r3, r4
 8008336:	4607      	mov	r7, r0
 8008338:	f2c0 8081 	blt.w	800843e <quorem+0x112>
 800833c:	3c01      	subs	r4, #1
 800833e:	f101 0814 	add.w	r8, r1, #20
 8008342:	f100 0514 	add.w	r5, r0, #20
 8008346:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800834a:	9301      	str	r3, [sp, #4]
 800834c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008350:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008354:	3301      	adds	r3, #1
 8008356:	429a      	cmp	r2, r3
 8008358:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800835c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008360:	fbb2 f6f3 	udiv	r6, r2, r3
 8008364:	d331      	bcc.n	80083ca <quorem+0x9e>
 8008366:	f04f 0e00 	mov.w	lr, #0
 800836a:	4640      	mov	r0, r8
 800836c:	46ac      	mov	ip, r5
 800836e:	46f2      	mov	sl, lr
 8008370:	f850 2b04 	ldr.w	r2, [r0], #4
 8008374:	b293      	uxth	r3, r2
 8008376:	fb06 e303 	mla	r3, r6, r3, lr
 800837a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800837e:	b29b      	uxth	r3, r3
 8008380:	ebaa 0303 	sub.w	r3, sl, r3
 8008384:	0c12      	lsrs	r2, r2, #16
 8008386:	f8dc a000 	ldr.w	sl, [ip]
 800838a:	fb06 e202 	mla	r2, r6, r2, lr
 800838e:	fa13 f38a 	uxtah	r3, r3, sl
 8008392:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008396:	fa1f fa82 	uxth.w	sl, r2
 800839a:	f8dc 2000 	ldr.w	r2, [ip]
 800839e:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 80083a2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80083a6:	b29b      	uxth	r3, r3
 80083a8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80083ac:	4581      	cmp	r9, r0
 80083ae:	f84c 3b04 	str.w	r3, [ip], #4
 80083b2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80083b6:	d2db      	bcs.n	8008370 <quorem+0x44>
 80083b8:	f855 300b 	ldr.w	r3, [r5, fp]
 80083bc:	b92b      	cbnz	r3, 80083ca <quorem+0x9e>
 80083be:	9b01      	ldr	r3, [sp, #4]
 80083c0:	3b04      	subs	r3, #4
 80083c2:	429d      	cmp	r5, r3
 80083c4:	461a      	mov	r2, r3
 80083c6:	d32e      	bcc.n	8008426 <quorem+0xfa>
 80083c8:	613c      	str	r4, [r7, #16]
 80083ca:	4638      	mov	r0, r7
 80083cc:	f001 fc7e 	bl	8009ccc <__mcmp>
 80083d0:	2800      	cmp	r0, #0
 80083d2:	db24      	blt.n	800841e <quorem+0xf2>
 80083d4:	3601      	adds	r6, #1
 80083d6:	4628      	mov	r0, r5
 80083d8:	f04f 0c00 	mov.w	ip, #0
 80083dc:	f858 2b04 	ldr.w	r2, [r8], #4
 80083e0:	f8d0 e000 	ldr.w	lr, [r0]
 80083e4:	b293      	uxth	r3, r2
 80083e6:	ebac 0303 	sub.w	r3, ip, r3
 80083ea:	0c12      	lsrs	r2, r2, #16
 80083ec:	fa13 f38e 	uxtah	r3, r3, lr
 80083f0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80083f4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80083f8:	b29b      	uxth	r3, r3
 80083fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80083fe:	45c1      	cmp	r9, r8
 8008400:	f840 3b04 	str.w	r3, [r0], #4
 8008404:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008408:	d2e8      	bcs.n	80083dc <quorem+0xb0>
 800840a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800840e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008412:	b922      	cbnz	r2, 800841e <quorem+0xf2>
 8008414:	3b04      	subs	r3, #4
 8008416:	429d      	cmp	r5, r3
 8008418:	461a      	mov	r2, r3
 800841a:	d30a      	bcc.n	8008432 <quorem+0x106>
 800841c:	613c      	str	r4, [r7, #16]
 800841e:	4630      	mov	r0, r6
 8008420:	b003      	add	sp, #12
 8008422:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008426:	6812      	ldr	r2, [r2, #0]
 8008428:	3b04      	subs	r3, #4
 800842a:	2a00      	cmp	r2, #0
 800842c:	d1cc      	bne.n	80083c8 <quorem+0x9c>
 800842e:	3c01      	subs	r4, #1
 8008430:	e7c7      	b.n	80083c2 <quorem+0x96>
 8008432:	6812      	ldr	r2, [r2, #0]
 8008434:	3b04      	subs	r3, #4
 8008436:	2a00      	cmp	r2, #0
 8008438:	d1f0      	bne.n	800841c <quorem+0xf0>
 800843a:	3c01      	subs	r4, #1
 800843c:	e7eb      	b.n	8008416 <quorem+0xea>
 800843e:	2000      	movs	r0, #0
 8008440:	e7ee      	b.n	8008420 <quorem+0xf4>
 8008442:	0000      	movs	r0, r0
 8008444:	0000      	movs	r0, r0
	...

08008448 <_dtoa_r>:
 8008448:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800844c:	ed2d 8b02 	vpush	{d8}
 8008450:	ec57 6b10 	vmov	r6, r7, d0
 8008454:	b095      	sub	sp, #84	; 0x54
 8008456:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008458:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800845c:	9105      	str	r1, [sp, #20]
 800845e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8008462:	4604      	mov	r4, r0
 8008464:	9209      	str	r2, [sp, #36]	; 0x24
 8008466:	930f      	str	r3, [sp, #60]	; 0x3c
 8008468:	b975      	cbnz	r5, 8008488 <_dtoa_r+0x40>
 800846a:	2010      	movs	r0, #16
 800846c:	f001 f94c 	bl	8009708 <malloc>
 8008470:	4602      	mov	r2, r0
 8008472:	6260      	str	r0, [r4, #36]	; 0x24
 8008474:	b920      	cbnz	r0, 8008480 <_dtoa_r+0x38>
 8008476:	4bb2      	ldr	r3, [pc, #712]	; (8008740 <_dtoa_r+0x2f8>)
 8008478:	21ea      	movs	r1, #234	; 0xea
 800847a:	48b2      	ldr	r0, [pc, #712]	; (8008744 <_dtoa_r+0x2fc>)
 800847c:	f002 f868 	bl	800a550 <__assert_func>
 8008480:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008484:	6005      	str	r5, [r0, #0]
 8008486:	60c5      	str	r5, [r0, #12]
 8008488:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800848a:	6819      	ldr	r1, [r3, #0]
 800848c:	b151      	cbz	r1, 80084a4 <_dtoa_r+0x5c>
 800848e:	685a      	ldr	r2, [r3, #4]
 8008490:	604a      	str	r2, [r1, #4]
 8008492:	2301      	movs	r3, #1
 8008494:	4093      	lsls	r3, r2
 8008496:	608b      	str	r3, [r1, #8]
 8008498:	4620      	mov	r0, r4
 800849a:	f001 f98f 	bl	80097bc <_Bfree>
 800849e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80084a0:	2200      	movs	r2, #0
 80084a2:	601a      	str	r2, [r3, #0]
 80084a4:	1e3b      	subs	r3, r7, #0
 80084a6:	bfb9      	ittee	lt
 80084a8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80084ac:	9303      	strlt	r3, [sp, #12]
 80084ae:	2300      	movge	r3, #0
 80084b0:	f8c8 3000 	strge.w	r3, [r8]
 80084b4:	f8dd 900c 	ldr.w	r9, [sp, #12]
 80084b8:	4ba3      	ldr	r3, [pc, #652]	; (8008748 <_dtoa_r+0x300>)
 80084ba:	bfbc      	itt	lt
 80084bc:	2201      	movlt	r2, #1
 80084be:	f8c8 2000 	strlt.w	r2, [r8]
 80084c2:	ea33 0309 	bics.w	r3, r3, r9
 80084c6:	d11b      	bne.n	8008500 <_dtoa_r+0xb8>
 80084c8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80084ca:	f242 730f 	movw	r3, #9999	; 0x270f
 80084ce:	6013      	str	r3, [r2, #0]
 80084d0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80084d4:	4333      	orrs	r3, r6
 80084d6:	f000 857a 	beq.w	8008fce <_dtoa_r+0xb86>
 80084da:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80084dc:	b963      	cbnz	r3, 80084f8 <_dtoa_r+0xb0>
 80084de:	4b9b      	ldr	r3, [pc, #620]	; (800874c <_dtoa_r+0x304>)
 80084e0:	e024      	b.n	800852c <_dtoa_r+0xe4>
 80084e2:	4b9b      	ldr	r3, [pc, #620]	; (8008750 <_dtoa_r+0x308>)
 80084e4:	9300      	str	r3, [sp, #0]
 80084e6:	3308      	adds	r3, #8
 80084e8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80084ea:	6013      	str	r3, [r2, #0]
 80084ec:	9800      	ldr	r0, [sp, #0]
 80084ee:	b015      	add	sp, #84	; 0x54
 80084f0:	ecbd 8b02 	vpop	{d8}
 80084f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80084f8:	4b94      	ldr	r3, [pc, #592]	; (800874c <_dtoa_r+0x304>)
 80084fa:	9300      	str	r3, [sp, #0]
 80084fc:	3303      	adds	r3, #3
 80084fe:	e7f3      	b.n	80084e8 <_dtoa_r+0xa0>
 8008500:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008504:	2200      	movs	r2, #0
 8008506:	ec51 0b17 	vmov	r0, r1, d7
 800850a:	2300      	movs	r3, #0
 800850c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8008510:	f7f8 fae2 	bl	8000ad8 <__aeabi_dcmpeq>
 8008514:	4680      	mov	r8, r0
 8008516:	b158      	cbz	r0, 8008530 <_dtoa_r+0xe8>
 8008518:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800851a:	2301      	movs	r3, #1
 800851c:	6013      	str	r3, [r2, #0]
 800851e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008520:	2b00      	cmp	r3, #0
 8008522:	f000 8551 	beq.w	8008fc8 <_dtoa_r+0xb80>
 8008526:	488b      	ldr	r0, [pc, #556]	; (8008754 <_dtoa_r+0x30c>)
 8008528:	6018      	str	r0, [r3, #0]
 800852a:	1e43      	subs	r3, r0, #1
 800852c:	9300      	str	r3, [sp, #0]
 800852e:	e7dd      	b.n	80084ec <_dtoa_r+0xa4>
 8008530:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8008534:	aa12      	add	r2, sp, #72	; 0x48
 8008536:	a913      	add	r1, sp, #76	; 0x4c
 8008538:	4620      	mov	r0, r4
 800853a:	f001 fce7 	bl	8009f0c <__d2b>
 800853e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008542:	4683      	mov	fp, r0
 8008544:	2d00      	cmp	r5, #0
 8008546:	d07c      	beq.n	8008642 <_dtoa_r+0x1fa>
 8008548:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800854a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800854e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008552:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8008556:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800855a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800855e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8008562:	4b7d      	ldr	r3, [pc, #500]	; (8008758 <_dtoa_r+0x310>)
 8008564:	2200      	movs	r2, #0
 8008566:	4630      	mov	r0, r6
 8008568:	4639      	mov	r1, r7
 800856a:	f7f7 fe95 	bl	8000298 <__aeabi_dsub>
 800856e:	a36e      	add	r3, pc, #440	; (adr r3, 8008728 <_dtoa_r+0x2e0>)
 8008570:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008574:	f7f8 f848 	bl	8000608 <__aeabi_dmul>
 8008578:	a36d      	add	r3, pc, #436	; (adr r3, 8008730 <_dtoa_r+0x2e8>)
 800857a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800857e:	f7f7 fe8d 	bl	800029c <__adddf3>
 8008582:	4606      	mov	r6, r0
 8008584:	4628      	mov	r0, r5
 8008586:	460f      	mov	r7, r1
 8008588:	f7f7 ffd4 	bl	8000534 <__aeabi_i2d>
 800858c:	a36a      	add	r3, pc, #424	; (adr r3, 8008738 <_dtoa_r+0x2f0>)
 800858e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008592:	f7f8 f839 	bl	8000608 <__aeabi_dmul>
 8008596:	4602      	mov	r2, r0
 8008598:	460b      	mov	r3, r1
 800859a:	4630      	mov	r0, r6
 800859c:	4639      	mov	r1, r7
 800859e:	f7f7 fe7d 	bl	800029c <__adddf3>
 80085a2:	4606      	mov	r6, r0
 80085a4:	460f      	mov	r7, r1
 80085a6:	f7f8 fadf 	bl	8000b68 <__aeabi_d2iz>
 80085aa:	2200      	movs	r2, #0
 80085ac:	4682      	mov	sl, r0
 80085ae:	2300      	movs	r3, #0
 80085b0:	4630      	mov	r0, r6
 80085b2:	4639      	mov	r1, r7
 80085b4:	f7f8 fa9a 	bl	8000aec <__aeabi_dcmplt>
 80085b8:	b148      	cbz	r0, 80085ce <_dtoa_r+0x186>
 80085ba:	4650      	mov	r0, sl
 80085bc:	f7f7 ffba 	bl	8000534 <__aeabi_i2d>
 80085c0:	4632      	mov	r2, r6
 80085c2:	463b      	mov	r3, r7
 80085c4:	f7f8 fa88 	bl	8000ad8 <__aeabi_dcmpeq>
 80085c8:	b908      	cbnz	r0, 80085ce <_dtoa_r+0x186>
 80085ca:	f10a 3aff 	add.w	sl, sl, #4294967295
 80085ce:	f1ba 0f16 	cmp.w	sl, #22
 80085d2:	d854      	bhi.n	800867e <_dtoa_r+0x236>
 80085d4:	4b61      	ldr	r3, [pc, #388]	; (800875c <_dtoa_r+0x314>)
 80085d6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80085da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085de:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80085e2:	f7f8 fa83 	bl	8000aec <__aeabi_dcmplt>
 80085e6:	2800      	cmp	r0, #0
 80085e8:	d04b      	beq.n	8008682 <_dtoa_r+0x23a>
 80085ea:	f10a 3aff 	add.w	sl, sl, #4294967295
 80085ee:	2300      	movs	r3, #0
 80085f0:	930e      	str	r3, [sp, #56]	; 0x38
 80085f2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80085f4:	1b5d      	subs	r5, r3, r5
 80085f6:	1e6b      	subs	r3, r5, #1
 80085f8:	9304      	str	r3, [sp, #16]
 80085fa:	bf43      	ittte	mi
 80085fc:	2300      	movmi	r3, #0
 80085fe:	f1c5 0801 	rsbmi	r8, r5, #1
 8008602:	9304      	strmi	r3, [sp, #16]
 8008604:	f04f 0800 	movpl.w	r8, #0
 8008608:	f1ba 0f00 	cmp.w	sl, #0
 800860c:	db3b      	blt.n	8008686 <_dtoa_r+0x23e>
 800860e:	9b04      	ldr	r3, [sp, #16]
 8008610:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8008614:	4453      	add	r3, sl
 8008616:	9304      	str	r3, [sp, #16]
 8008618:	2300      	movs	r3, #0
 800861a:	9306      	str	r3, [sp, #24]
 800861c:	9b05      	ldr	r3, [sp, #20]
 800861e:	2b09      	cmp	r3, #9
 8008620:	d869      	bhi.n	80086f6 <_dtoa_r+0x2ae>
 8008622:	2b05      	cmp	r3, #5
 8008624:	bfc4      	itt	gt
 8008626:	3b04      	subgt	r3, #4
 8008628:	9305      	strgt	r3, [sp, #20]
 800862a:	9b05      	ldr	r3, [sp, #20]
 800862c:	f1a3 0302 	sub.w	r3, r3, #2
 8008630:	bfcc      	ite	gt
 8008632:	2500      	movgt	r5, #0
 8008634:	2501      	movle	r5, #1
 8008636:	2b03      	cmp	r3, #3
 8008638:	d869      	bhi.n	800870e <_dtoa_r+0x2c6>
 800863a:	e8df f003 	tbb	[pc, r3]
 800863e:	4e2c      	.short	0x4e2c
 8008640:	5a4c      	.short	0x5a4c
 8008642:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8008646:	441d      	add	r5, r3
 8008648:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800864c:	2b20      	cmp	r3, #32
 800864e:	bfc1      	itttt	gt
 8008650:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008654:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8008658:	fa09 f303 	lslgt.w	r3, r9, r3
 800865c:	fa26 f000 	lsrgt.w	r0, r6, r0
 8008660:	bfda      	itte	le
 8008662:	f1c3 0320 	rsble	r3, r3, #32
 8008666:	fa06 f003 	lslle.w	r0, r6, r3
 800866a:	4318      	orrgt	r0, r3
 800866c:	f7f7 ff52 	bl	8000514 <__aeabi_ui2d>
 8008670:	2301      	movs	r3, #1
 8008672:	4606      	mov	r6, r0
 8008674:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8008678:	3d01      	subs	r5, #1
 800867a:	9310      	str	r3, [sp, #64]	; 0x40
 800867c:	e771      	b.n	8008562 <_dtoa_r+0x11a>
 800867e:	2301      	movs	r3, #1
 8008680:	e7b6      	b.n	80085f0 <_dtoa_r+0x1a8>
 8008682:	900e      	str	r0, [sp, #56]	; 0x38
 8008684:	e7b5      	b.n	80085f2 <_dtoa_r+0x1aa>
 8008686:	f1ca 0300 	rsb	r3, sl, #0
 800868a:	9306      	str	r3, [sp, #24]
 800868c:	2300      	movs	r3, #0
 800868e:	eba8 080a 	sub.w	r8, r8, sl
 8008692:	930d      	str	r3, [sp, #52]	; 0x34
 8008694:	e7c2      	b.n	800861c <_dtoa_r+0x1d4>
 8008696:	2300      	movs	r3, #0
 8008698:	9308      	str	r3, [sp, #32]
 800869a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800869c:	2b00      	cmp	r3, #0
 800869e:	dc39      	bgt.n	8008714 <_dtoa_r+0x2cc>
 80086a0:	f04f 0901 	mov.w	r9, #1
 80086a4:	f8cd 9004 	str.w	r9, [sp, #4]
 80086a8:	464b      	mov	r3, r9
 80086aa:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 80086ae:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80086b0:	2200      	movs	r2, #0
 80086b2:	6042      	str	r2, [r0, #4]
 80086b4:	2204      	movs	r2, #4
 80086b6:	f102 0614 	add.w	r6, r2, #20
 80086ba:	429e      	cmp	r6, r3
 80086bc:	6841      	ldr	r1, [r0, #4]
 80086be:	d92f      	bls.n	8008720 <_dtoa_r+0x2d8>
 80086c0:	4620      	mov	r0, r4
 80086c2:	f001 f83b 	bl	800973c <_Balloc>
 80086c6:	9000      	str	r0, [sp, #0]
 80086c8:	2800      	cmp	r0, #0
 80086ca:	d14b      	bne.n	8008764 <_dtoa_r+0x31c>
 80086cc:	4b24      	ldr	r3, [pc, #144]	; (8008760 <_dtoa_r+0x318>)
 80086ce:	4602      	mov	r2, r0
 80086d0:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80086d4:	e6d1      	b.n	800847a <_dtoa_r+0x32>
 80086d6:	2301      	movs	r3, #1
 80086d8:	e7de      	b.n	8008698 <_dtoa_r+0x250>
 80086da:	2300      	movs	r3, #0
 80086dc:	9308      	str	r3, [sp, #32]
 80086de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80086e0:	eb0a 0903 	add.w	r9, sl, r3
 80086e4:	f109 0301 	add.w	r3, r9, #1
 80086e8:	2b01      	cmp	r3, #1
 80086ea:	9301      	str	r3, [sp, #4]
 80086ec:	bfb8      	it	lt
 80086ee:	2301      	movlt	r3, #1
 80086f0:	e7dd      	b.n	80086ae <_dtoa_r+0x266>
 80086f2:	2301      	movs	r3, #1
 80086f4:	e7f2      	b.n	80086dc <_dtoa_r+0x294>
 80086f6:	2501      	movs	r5, #1
 80086f8:	2300      	movs	r3, #0
 80086fa:	9305      	str	r3, [sp, #20]
 80086fc:	9508      	str	r5, [sp, #32]
 80086fe:	f04f 39ff 	mov.w	r9, #4294967295
 8008702:	2200      	movs	r2, #0
 8008704:	f8cd 9004 	str.w	r9, [sp, #4]
 8008708:	2312      	movs	r3, #18
 800870a:	9209      	str	r2, [sp, #36]	; 0x24
 800870c:	e7cf      	b.n	80086ae <_dtoa_r+0x266>
 800870e:	2301      	movs	r3, #1
 8008710:	9308      	str	r3, [sp, #32]
 8008712:	e7f4      	b.n	80086fe <_dtoa_r+0x2b6>
 8008714:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8008718:	f8cd 9004 	str.w	r9, [sp, #4]
 800871c:	464b      	mov	r3, r9
 800871e:	e7c6      	b.n	80086ae <_dtoa_r+0x266>
 8008720:	3101      	adds	r1, #1
 8008722:	6041      	str	r1, [r0, #4]
 8008724:	0052      	lsls	r2, r2, #1
 8008726:	e7c6      	b.n	80086b6 <_dtoa_r+0x26e>
 8008728:	636f4361 	.word	0x636f4361
 800872c:	3fd287a7 	.word	0x3fd287a7
 8008730:	8b60c8b3 	.word	0x8b60c8b3
 8008734:	3fc68a28 	.word	0x3fc68a28
 8008738:	509f79fb 	.word	0x509f79fb
 800873c:	3fd34413 	.word	0x3fd34413
 8008740:	0800b61e 	.word	0x0800b61e
 8008744:	0800b635 	.word	0x0800b635
 8008748:	7ff00000 	.word	0x7ff00000
 800874c:	0800b61a 	.word	0x0800b61a
 8008750:	0800b611 	.word	0x0800b611
 8008754:	0800b495 	.word	0x0800b495
 8008758:	3ff80000 	.word	0x3ff80000
 800875c:	0800b7b0 	.word	0x0800b7b0
 8008760:	0800b694 	.word	0x0800b694
 8008764:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008766:	9a00      	ldr	r2, [sp, #0]
 8008768:	601a      	str	r2, [r3, #0]
 800876a:	9b01      	ldr	r3, [sp, #4]
 800876c:	2b0e      	cmp	r3, #14
 800876e:	f200 80ad 	bhi.w	80088cc <_dtoa_r+0x484>
 8008772:	2d00      	cmp	r5, #0
 8008774:	f000 80aa 	beq.w	80088cc <_dtoa_r+0x484>
 8008778:	f1ba 0f00 	cmp.w	sl, #0
 800877c:	dd36      	ble.n	80087ec <_dtoa_r+0x3a4>
 800877e:	4ac3      	ldr	r2, [pc, #780]	; (8008a8c <_dtoa_r+0x644>)
 8008780:	f00a 030f 	and.w	r3, sl, #15
 8008784:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008788:	ed93 7b00 	vldr	d7, [r3]
 800878c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8008790:	ea4f 172a 	mov.w	r7, sl, asr #4
 8008794:	eeb0 8a47 	vmov.f32	s16, s14
 8008798:	eef0 8a67 	vmov.f32	s17, s15
 800879c:	d016      	beq.n	80087cc <_dtoa_r+0x384>
 800879e:	4bbc      	ldr	r3, [pc, #752]	; (8008a90 <_dtoa_r+0x648>)
 80087a0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80087a4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80087a8:	f7f8 f858 	bl	800085c <__aeabi_ddiv>
 80087ac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80087b0:	f007 070f 	and.w	r7, r7, #15
 80087b4:	2503      	movs	r5, #3
 80087b6:	4eb6      	ldr	r6, [pc, #728]	; (8008a90 <_dtoa_r+0x648>)
 80087b8:	b957      	cbnz	r7, 80087d0 <_dtoa_r+0x388>
 80087ba:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80087be:	ec53 2b18 	vmov	r2, r3, d8
 80087c2:	f7f8 f84b 	bl	800085c <__aeabi_ddiv>
 80087c6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80087ca:	e029      	b.n	8008820 <_dtoa_r+0x3d8>
 80087cc:	2502      	movs	r5, #2
 80087ce:	e7f2      	b.n	80087b6 <_dtoa_r+0x36e>
 80087d0:	07f9      	lsls	r1, r7, #31
 80087d2:	d508      	bpl.n	80087e6 <_dtoa_r+0x39e>
 80087d4:	ec51 0b18 	vmov	r0, r1, d8
 80087d8:	e9d6 2300 	ldrd	r2, r3, [r6]
 80087dc:	f7f7 ff14 	bl	8000608 <__aeabi_dmul>
 80087e0:	ec41 0b18 	vmov	d8, r0, r1
 80087e4:	3501      	adds	r5, #1
 80087e6:	107f      	asrs	r7, r7, #1
 80087e8:	3608      	adds	r6, #8
 80087ea:	e7e5      	b.n	80087b8 <_dtoa_r+0x370>
 80087ec:	f000 80a6 	beq.w	800893c <_dtoa_r+0x4f4>
 80087f0:	f1ca 0600 	rsb	r6, sl, #0
 80087f4:	4ba5      	ldr	r3, [pc, #660]	; (8008a8c <_dtoa_r+0x644>)
 80087f6:	4fa6      	ldr	r7, [pc, #664]	; (8008a90 <_dtoa_r+0x648>)
 80087f8:	f006 020f 	and.w	r2, r6, #15
 80087fc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008800:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008804:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008808:	f7f7 fefe 	bl	8000608 <__aeabi_dmul>
 800880c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008810:	1136      	asrs	r6, r6, #4
 8008812:	2300      	movs	r3, #0
 8008814:	2502      	movs	r5, #2
 8008816:	2e00      	cmp	r6, #0
 8008818:	f040 8085 	bne.w	8008926 <_dtoa_r+0x4de>
 800881c:	2b00      	cmp	r3, #0
 800881e:	d1d2      	bne.n	80087c6 <_dtoa_r+0x37e>
 8008820:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008822:	2b00      	cmp	r3, #0
 8008824:	f000 808c 	beq.w	8008940 <_dtoa_r+0x4f8>
 8008828:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800882c:	4b99      	ldr	r3, [pc, #612]	; (8008a94 <_dtoa_r+0x64c>)
 800882e:	2200      	movs	r2, #0
 8008830:	4630      	mov	r0, r6
 8008832:	4639      	mov	r1, r7
 8008834:	f7f8 f95a 	bl	8000aec <__aeabi_dcmplt>
 8008838:	2800      	cmp	r0, #0
 800883a:	f000 8081 	beq.w	8008940 <_dtoa_r+0x4f8>
 800883e:	9b01      	ldr	r3, [sp, #4]
 8008840:	2b00      	cmp	r3, #0
 8008842:	d07d      	beq.n	8008940 <_dtoa_r+0x4f8>
 8008844:	f1b9 0f00 	cmp.w	r9, #0
 8008848:	dd3c      	ble.n	80088c4 <_dtoa_r+0x47c>
 800884a:	f10a 33ff 	add.w	r3, sl, #4294967295
 800884e:	9307      	str	r3, [sp, #28]
 8008850:	2200      	movs	r2, #0
 8008852:	4b91      	ldr	r3, [pc, #580]	; (8008a98 <_dtoa_r+0x650>)
 8008854:	4630      	mov	r0, r6
 8008856:	4639      	mov	r1, r7
 8008858:	f7f7 fed6 	bl	8000608 <__aeabi_dmul>
 800885c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008860:	3501      	adds	r5, #1
 8008862:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8008866:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800886a:	4628      	mov	r0, r5
 800886c:	f7f7 fe62 	bl	8000534 <__aeabi_i2d>
 8008870:	4632      	mov	r2, r6
 8008872:	463b      	mov	r3, r7
 8008874:	f7f7 fec8 	bl	8000608 <__aeabi_dmul>
 8008878:	4b88      	ldr	r3, [pc, #544]	; (8008a9c <_dtoa_r+0x654>)
 800887a:	2200      	movs	r2, #0
 800887c:	f7f7 fd0e 	bl	800029c <__adddf3>
 8008880:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8008884:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008888:	9303      	str	r3, [sp, #12]
 800888a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800888c:	2b00      	cmp	r3, #0
 800888e:	d15c      	bne.n	800894a <_dtoa_r+0x502>
 8008890:	4b83      	ldr	r3, [pc, #524]	; (8008aa0 <_dtoa_r+0x658>)
 8008892:	2200      	movs	r2, #0
 8008894:	4630      	mov	r0, r6
 8008896:	4639      	mov	r1, r7
 8008898:	f7f7 fcfe 	bl	8000298 <__aeabi_dsub>
 800889c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80088a0:	4606      	mov	r6, r0
 80088a2:	460f      	mov	r7, r1
 80088a4:	f7f8 f940 	bl	8000b28 <__aeabi_dcmpgt>
 80088a8:	2800      	cmp	r0, #0
 80088aa:	f040 8296 	bne.w	8008dda <_dtoa_r+0x992>
 80088ae:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80088b2:	4630      	mov	r0, r6
 80088b4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80088b8:	4639      	mov	r1, r7
 80088ba:	f7f8 f917 	bl	8000aec <__aeabi_dcmplt>
 80088be:	2800      	cmp	r0, #0
 80088c0:	f040 8288 	bne.w	8008dd4 <_dtoa_r+0x98c>
 80088c4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80088c8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80088cc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	f2c0 8158 	blt.w	8008b84 <_dtoa_r+0x73c>
 80088d4:	f1ba 0f0e 	cmp.w	sl, #14
 80088d8:	f300 8154 	bgt.w	8008b84 <_dtoa_r+0x73c>
 80088dc:	4b6b      	ldr	r3, [pc, #428]	; (8008a8c <_dtoa_r+0x644>)
 80088de:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80088e2:	e9d3 8900 	ldrd	r8, r9, [r3]
 80088e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	f280 80e3 	bge.w	8008ab4 <_dtoa_r+0x66c>
 80088ee:	9b01      	ldr	r3, [sp, #4]
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	f300 80df 	bgt.w	8008ab4 <_dtoa_r+0x66c>
 80088f6:	f040 826d 	bne.w	8008dd4 <_dtoa_r+0x98c>
 80088fa:	4b69      	ldr	r3, [pc, #420]	; (8008aa0 <_dtoa_r+0x658>)
 80088fc:	2200      	movs	r2, #0
 80088fe:	4640      	mov	r0, r8
 8008900:	4649      	mov	r1, r9
 8008902:	f7f7 fe81 	bl	8000608 <__aeabi_dmul>
 8008906:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800890a:	f7f8 f903 	bl	8000b14 <__aeabi_dcmpge>
 800890e:	9e01      	ldr	r6, [sp, #4]
 8008910:	4637      	mov	r7, r6
 8008912:	2800      	cmp	r0, #0
 8008914:	f040 8243 	bne.w	8008d9e <_dtoa_r+0x956>
 8008918:	9d00      	ldr	r5, [sp, #0]
 800891a:	2331      	movs	r3, #49	; 0x31
 800891c:	f805 3b01 	strb.w	r3, [r5], #1
 8008920:	f10a 0a01 	add.w	sl, sl, #1
 8008924:	e23f      	b.n	8008da6 <_dtoa_r+0x95e>
 8008926:	07f2      	lsls	r2, r6, #31
 8008928:	d505      	bpl.n	8008936 <_dtoa_r+0x4ee>
 800892a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800892e:	f7f7 fe6b 	bl	8000608 <__aeabi_dmul>
 8008932:	3501      	adds	r5, #1
 8008934:	2301      	movs	r3, #1
 8008936:	1076      	asrs	r6, r6, #1
 8008938:	3708      	adds	r7, #8
 800893a:	e76c      	b.n	8008816 <_dtoa_r+0x3ce>
 800893c:	2502      	movs	r5, #2
 800893e:	e76f      	b.n	8008820 <_dtoa_r+0x3d8>
 8008940:	9b01      	ldr	r3, [sp, #4]
 8008942:	f8cd a01c 	str.w	sl, [sp, #28]
 8008946:	930c      	str	r3, [sp, #48]	; 0x30
 8008948:	e78d      	b.n	8008866 <_dtoa_r+0x41e>
 800894a:	9900      	ldr	r1, [sp, #0]
 800894c:	980c      	ldr	r0, [sp, #48]	; 0x30
 800894e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008950:	4b4e      	ldr	r3, [pc, #312]	; (8008a8c <_dtoa_r+0x644>)
 8008952:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008956:	4401      	add	r1, r0
 8008958:	9102      	str	r1, [sp, #8]
 800895a:	9908      	ldr	r1, [sp, #32]
 800895c:	eeb0 8a47 	vmov.f32	s16, s14
 8008960:	eef0 8a67 	vmov.f32	s17, s15
 8008964:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008968:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800896c:	2900      	cmp	r1, #0
 800896e:	d045      	beq.n	80089fc <_dtoa_r+0x5b4>
 8008970:	494c      	ldr	r1, [pc, #304]	; (8008aa4 <_dtoa_r+0x65c>)
 8008972:	2000      	movs	r0, #0
 8008974:	f7f7 ff72 	bl	800085c <__aeabi_ddiv>
 8008978:	ec53 2b18 	vmov	r2, r3, d8
 800897c:	f7f7 fc8c 	bl	8000298 <__aeabi_dsub>
 8008980:	9d00      	ldr	r5, [sp, #0]
 8008982:	ec41 0b18 	vmov	d8, r0, r1
 8008986:	4639      	mov	r1, r7
 8008988:	4630      	mov	r0, r6
 800898a:	f7f8 f8ed 	bl	8000b68 <__aeabi_d2iz>
 800898e:	900c      	str	r0, [sp, #48]	; 0x30
 8008990:	f7f7 fdd0 	bl	8000534 <__aeabi_i2d>
 8008994:	4602      	mov	r2, r0
 8008996:	460b      	mov	r3, r1
 8008998:	4630      	mov	r0, r6
 800899a:	4639      	mov	r1, r7
 800899c:	f7f7 fc7c 	bl	8000298 <__aeabi_dsub>
 80089a0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80089a2:	3330      	adds	r3, #48	; 0x30
 80089a4:	f805 3b01 	strb.w	r3, [r5], #1
 80089a8:	ec53 2b18 	vmov	r2, r3, d8
 80089ac:	4606      	mov	r6, r0
 80089ae:	460f      	mov	r7, r1
 80089b0:	f7f8 f89c 	bl	8000aec <__aeabi_dcmplt>
 80089b4:	2800      	cmp	r0, #0
 80089b6:	d165      	bne.n	8008a84 <_dtoa_r+0x63c>
 80089b8:	4632      	mov	r2, r6
 80089ba:	463b      	mov	r3, r7
 80089bc:	4935      	ldr	r1, [pc, #212]	; (8008a94 <_dtoa_r+0x64c>)
 80089be:	2000      	movs	r0, #0
 80089c0:	f7f7 fc6a 	bl	8000298 <__aeabi_dsub>
 80089c4:	ec53 2b18 	vmov	r2, r3, d8
 80089c8:	f7f8 f890 	bl	8000aec <__aeabi_dcmplt>
 80089cc:	2800      	cmp	r0, #0
 80089ce:	f040 80b9 	bne.w	8008b44 <_dtoa_r+0x6fc>
 80089d2:	9b02      	ldr	r3, [sp, #8]
 80089d4:	429d      	cmp	r5, r3
 80089d6:	f43f af75 	beq.w	80088c4 <_dtoa_r+0x47c>
 80089da:	4b2f      	ldr	r3, [pc, #188]	; (8008a98 <_dtoa_r+0x650>)
 80089dc:	ec51 0b18 	vmov	r0, r1, d8
 80089e0:	2200      	movs	r2, #0
 80089e2:	f7f7 fe11 	bl	8000608 <__aeabi_dmul>
 80089e6:	4b2c      	ldr	r3, [pc, #176]	; (8008a98 <_dtoa_r+0x650>)
 80089e8:	ec41 0b18 	vmov	d8, r0, r1
 80089ec:	2200      	movs	r2, #0
 80089ee:	4630      	mov	r0, r6
 80089f0:	4639      	mov	r1, r7
 80089f2:	f7f7 fe09 	bl	8000608 <__aeabi_dmul>
 80089f6:	4606      	mov	r6, r0
 80089f8:	460f      	mov	r7, r1
 80089fa:	e7c4      	b.n	8008986 <_dtoa_r+0x53e>
 80089fc:	ec51 0b17 	vmov	r0, r1, d7
 8008a00:	f7f7 fe02 	bl	8000608 <__aeabi_dmul>
 8008a04:	9b02      	ldr	r3, [sp, #8]
 8008a06:	9d00      	ldr	r5, [sp, #0]
 8008a08:	930c      	str	r3, [sp, #48]	; 0x30
 8008a0a:	ec41 0b18 	vmov	d8, r0, r1
 8008a0e:	4639      	mov	r1, r7
 8008a10:	4630      	mov	r0, r6
 8008a12:	f7f8 f8a9 	bl	8000b68 <__aeabi_d2iz>
 8008a16:	9011      	str	r0, [sp, #68]	; 0x44
 8008a18:	f7f7 fd8c 	bl	8000534 <__aeabi_i2d>
 8008a1c:	4602      	mov	r2, r0
 8008a1e:	460b      	mov	r3, r1
 8008a20:	4630      	mov	r0, r6
 8008a22:	4639      	mov	r1, r7
 8008a24:	f7f7 fc38 	bl	8000298 <__aeabi_dsub>
 8008a28:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008a2a:	3330      	adds	r3, #48	; 0x30
 8008a2c:	f805 3b01 	strb.w	r3, [r5], #1
 8008a30:	9b02      	ldr	r3, [sp, #8]
 8008a32:	429d      	cmp	r5, r3
 8008a34:	4606      	mov	r6, r0
 8008a36:	460f      	mov	r7, r1
 8008a38:	f04f 0200 	mov.w	r2, #0
 8008a3c:	d134      	bne.n	8008aa8 <_dtoa_r+0x660>
 8008a3e:	4b19      	ldr	r3, [pc, #100]	; (8008aa4 <_dtoa_r+0x65c>)
 8008a40:	ec51 0b18 	vmov	r0, r1, d8
 8008a44:	f7f7 fc2a 	bl	800029c <__adddf3>
 8008a48:	4602      	mov	r2, r0
 8008a4a:	460b      	mov	r3, r1
 8008a4c:	4630      	mov	r0, r6
 8008a4e:	4639      	mov	r1, r7
 8008a50:	f7f8 f86a 	bl	8000b28 <__aeabi_dcmpgt>
 8008a54:	2800      	cmp	r0, #0
 8008a56:	d175      	bne.n	8008b44 <_dtoa_r+0x6fc>
 8008a58:	ec53 2b18 	vmov	r2, r3, d8
 8008a5c:	4911      	ldr	r1, [pc, #68]	; (8008aa4 <_dtoa_r+0x65c>)
 8008a5e:	2000      	movs	r0, #0
 8008a60:	f7f7 fc1a 	bl	8000298 <__aeabi_dsub>
 8008a64:	4602      	mov	r2, r0
 8008a66:	460b      	mov	r3, r1
 8008a68:	4630      	mov	r0, r6
 8008a6a:	4639      	mov	r1, r7
 8008a6c:	f7f8 f83e 	bl	8000aec <__aeabi_dcmplt>
 8008a70:	2800      	cmp	r0, #0
 8008a72:	f43f af27 	beq.w	80088c4 <_dtoa_r+0x47c>
 8008a76:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008a78:	1e6b      	subs	r3, r5, #1
 8008a7a:	930c      	str	r3, [sp, #48]	; 0x30
 8008a7c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008a80:	2b30      	cmp	r3, #48	; 0x30
 8008a82:	d0f8      	beq.n	8008a76 <_dtoa_r+0x62e>
 8008a84:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8008a88:	e04a      	b.n	8008b20 <_dtoa_r+0x6d8>
 8008a8a:	bf00      	nop
 8008a8c:	0800b7b0 	.word	0x0800b7b0
 8008a90:	0800b788 	.word	0x0800b788
 8008a94:	3ff00000 	.word	0x3ff00000
 8008a98:	40240000 	.word	0x40240000
 8008a9c:	401c0000 	.word	0x401c0000
 8008aa0:	40140000 	.word	0x40140000
 8008aa4:	3fe00000 	.word	0x3fe00000
 8008aa8:	4baf      	ldr	r3, [pc, #700]	; (8008d68 <_dtoa_r+0x920>)
 8008aaa:	f7f7 fdad 	bl	8000608 <__aeabi_dmul>
 8008aae:	4606      	mov	r6, r0
 8008ab0:	460f      	mov	r7, r1
 8008ab2:	e7ac      	b.n	8008a0e <_dtoa_r+0x5c6>
 8008ab4:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8008ab8:	9d00      	ldr	r5, [sp, #0]
 8008aba:	4642      	mov	r2, r8
 8008abc:	464b      	mov	r3, r9
 8008abe:	4630      	mov	r0, r6
 8008ac0:	4639      	mov	r1, r7
 8008ac2:	f7f7 fecb 	bl	800085c <__aeabi_ddiv>
 8008ac6:	f7f8 f84f 	bl	8000b68 <__aeabi_d2iz>
 8008aca:	9002      	str	r0, [sp, #8]
 8008acc:	f7f7 fd32 	bl	8000534 <__aeabi_i2d>
 8008ad0:	4642      	mov	r2, r8
 8008ad2:	464b      	mov	r3, r9
 8008ad4:	f7f7 fd98 	bl	8000608 <__aeabi_dmul>
 8008ad8:	4602      	mov	r2, r0
 8008ada:	460b      	mov	r3, r1
 8008adc:	4630      	mov	r0, r6
 8008ade:	4639      	mov	r1, r7
 8008ae0:	f7f7 fbda 	bl	8000298 <__aeabi_dsub>
 8008ae4:	9e02      	ldr	r6, [sp, #8]
 8008ae6:	9f01      	ldr	r7, [sp, #4]
 8008ae8:	3630      	adds	r6, #48	; 0x30
 8008aea:	f805 6b01 	strb.w	r6, [r5], #1
 8008aee:	9e00      	ldr	r6, [sp, #0]
 8008af0:	1bae      	subs	r6, r5, r6
 8008af2:	42b7      	cmp	r7, r6
 8008af4:	4602      	mov	r2, r0
 8008af6:	460b      	mov	r3, r1
 8008af8:	d137      	bne.n	8008b6a <_dtoa_r+0x722>
 8008afa:	f7f7 fbcf 	bl	800029c <__adddf3>
 8008afe:	4642      	mov	r2, r8
 8008b00:	464b      	mov	r3, r9
 8008b02:	4606      	mov	r6, r0
 8008b04:	460f      	mov	r7, r1
 8008b06:	f7f8 f80f 	bl	8000b28 <__aeabi_dcmpgt>
 8008b0a:	b9c8      	cbnz	r0, 8008b40 <_dtoa_r+0x6f8>
 8008b0c:	4642      	mov	r2, r8
 8008b0e:	464b      	mov	r3, r9
 8008b10:	4630      	mov	r0, r6
 8008b12:	4639      	mov	r1, r7
 8008b14:	f7f7 ffe0 	bl	8000ad8 <__aeabi_dcmpeq>
 8008b18:	b110      	cbz	r0, 8008b20 <_dtoa_r+0x6d8>
 8008b1a:	9b02      	ldr	r3, [sp, #8]
 8008b1c:	07d9      	lsls	r1, r3, #31
 8008b1e:	d40f      	bmi.n	8008b40 <_dtoa_r+0x6f8>
 8008b20:	4620      	mov	r0, r4
 8008b22:	4659      	mov	r1, fp
 8008b24:	f000 fe4a 	bl	80097bc <_Bfree>
 8008b28:	2300      	movs	r3, #0
 8008b2a:	702b      	strb	r3, [r5, #0]
 8008b2c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008b2e:	f10a 0001 	add.w	r0, sl, #1
 8008b32:	6018      	str	r0, [r3, #0]
 8008b34:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	f43f acd8 	beq.w	80084ec <_dtoa_r+0xa4>
 8008b3c:	601d      	str	r5, [r3, #0]
 8008b3e:	e4d5      	b.n	80084ec <_dtoa_r+0xa4>
 8008b40:	f8cd a01c 	str.w	sl, [sp, #28]
 8008b44:	462b      	mov	r3, r5
 8008b46:	461d      	mov	r5, r3
 8008b48:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008b4c:	2a39      	cmp	r2, #57	; 0x39
 8008b4e:	d108      	bne.n	8008b62 <_dtoa_r+0x71a>
 8008b50:	9a00      	ldr	r2, [sp, #0]
 8008b52:	429a      	cmp	r2, r3
 8008b54:	d1f7      	bne.n	8008b46 <_dtoa_r+0x6fe>
 8008b56:	9a07      	ldr	r2, [sp, #28]
 8008b58:	9900      	ldr	r1, [sp, #0]
 8008b5a:	3201      	adds	r2, #1
 8008b5c:	9207      	str	r2, [sp, #28]
 8008b5e:	2230      	movs	r2, #48	; 0x30
 8008b60:	700a      	strb	r2, [r1, #0]
 8008b62:	781a      	ldrb	r2, [r3, #0]
 8008b64:	3201      	adds	r2, #1
 8008b66:	701a      	strb	r2, [r3, #0]
 8008b68:	e78c      	b.n	8008a84 <_dtoa_r+0x63c>
 8008b6a:	4b7f      	ldr	r3, [pc, #508]	; (8008d68 <_dtoa_r+0x920>)
 8008b6c:	2200      	movs	r2, #0
 8008b6e:	f7f7 fd4b 	bl	8000608 <__aeabi_dmul>
 8008b72:	2200      	movs	r2, #0
 8008b74:	2300      	movs	r3, #0
 8008b76:	4606      	mov	r6, r0
 8008b78:	460f      	mov	r7, r1
 8008b7a:	f7f7 ffad 	bl	8000ad8 <__aeabi_dcmpeq>
 8008b7e:	2800      	cmp	r0, #0
 8008b80:	d09b      	beq.n	8008aba <_dtoa_r+0x672>
 8008b82:	e7cd      	b.n	8008b20 <_dtoa_r+0x6d8>
 8008b84:	9a08      	ldr	r2, [sp, #32]
 8008b86:	2a00      	cmp	r2, #0
 8008b88:	f000 80c4 	beq.w	8008d14 <_dtoa_r+0x8cc>
 8008b8c:	9a05      	ldr	r2, [sp, #20]
 8008b8e:	2a01      	cmp	r2, #1
 8008b90:	f300 80a8 	bgt.w	8008ce4 <_dtoa_r+0x89c>
 8008b94:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008b96:	2a00      	cmp	r2, #0
 8008b98:	f000 80a0 	beq.w	8008cdc <_dtoa_r+0x894>
 8008b9c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008ba0:	9e06      	ldr	r6, [sp, #24]
 8008ba2:	4645      	mov	r5, r8
 8008ba4:	9a04      	ldr	r2, [sp, #16]
 8008ba6:	2101      	movs	r1, #1
 8008ba8:	441a      	add	r2, r3
 8008baa:	4620      	mov	r0, r4
 8008bac:	4498      	add	r8, r3
 8008bae:	9204      	str	r2, [sp, #16]
 8008bb0:	f000 ff0a 	bl	80099c8 <__i2b>
 8008bb4:	4607      	mov	r7, r0
 8008bb6:	2d00      	cmp	r5, #0
 8008bb8:	dd0b      	ble.n	8008bd2 <_dtoa_r+0x78a>
 8008bba:	9b04      	ldr	r3, [sp, #16]
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	dd08      	ble.n	8008bd2 <_dtoa_r+0x78a>
 8008bc0:	42ab      	cmp	r3, r5
 8008bc2:	9a04      	ldr	r2, [sp, #16]
 8008bc4:	bfa8      	it	ge
 8008bc6:	462b      	movge	r3, r5
 8008bc8:	eba8 0803 	sub.w	r8, r8, r3
 8008bcc:	1aed      	subs	r5, r5, r3
 8008bce:	1ad3      	subs	r3, r2, r3
 8008bd0:	9304      	str	r3, [sp, #16]
 8008bd2:	9b06      	ldr	r3, [sp, #24]
 8008bd4:	b1fb      	cbz	r3, 8008c16 <_dtoa_r+0x7ce>
 8008bd6:	9b08      	ldr	r3, [sp, #32]
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	f000 809f 	beq.w	8008d1c <_dtoa_r+0x8d4>
 8008bde:	2e00      	cmp	r6, #0
 8008be0:	dd11      	ble.n	8008c06 <_dtoa_r+0x7be>
 8008be2:	4639      	mov	r1, r7
 8008be4:	4632      	mov	r2, r6
 8008be6:	4620      	mov	r0, r4
 8008be8:	f000 ffaa 	bl	8009b40 <__pow5mult>
 8008bec:	465a      	mov	r2, fp
 8008bee:	4601      	mov	r1, r0
 8008bf0:	4607      	mov	r7, r0
 8008bf2:	4620      	mov	r0, r4
 8008bf4:	f000 fefe 	bl	80099f4 <__multiply>
 8008bf8:	4659      	mov	r1, fp
 8008bfa:	9007      	str	r0, [sp, #28]
 8008bfc:	4620      	mov	r0, r4
 8008bfe:	f000 fddd 	bl	80097bc <_Bfree>
 8008c02:	9b07      	ldr	r3, [sp, #28]
 8008c04:	469b      	mov	fp, r3
 8008c06:	9b06      	ldr	r3, [sp, #24]
 8008c08:	1b9a      	subs	r2, r3, r6
 8008c0a:	d004      	beq.n	8008c16 <_dtoa_r+0x7ce>
 8008c0c:	4659      	mov	r1, fp
 8008c0e:	4620      	mov	r0, r4
 8008c10:	f000 ff96 	bl	8009b40 <__pow5mult>
 8008c14:	4683      	mov	fp, r0
 8008c16:	2101      	movs	r1, #1
 8008c18:	4620      	mov	r0, r4
 8008c1a:	f000 fed5 	bl	80099c8 <__i2b>
 8008c1e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	4606      	mov	r6, r0
 8008c24:	dd7c      	ble.n	8008d20 <_dtoa_r+0x8d8>
 8008c26:	461a      	mov	r2, r3
 8008c28:	4601      	mov	r1, r0
 8008c2a:	4620      	mov	r0, r4
 8008c2c:	f000 ff88 	bl	8009b40 <__pow5mult>
 8008c30:	9b05      	ldr	r3, [sp, #20]
 8008c32:	2b01      	cmp	r3, #1
 8008c34:	4606      	mov	r6, r0
 8008c36:	dd76      	ble.n	8008d26 <_dtoa_r+0x8de>
 8008c38:	2300      	movs	r3, #0
 8008c3a:	9306      	str	r3, [sp, #24]
 8008c3c:	6933      	ldr	r3, [r6, #16]
 8008c3e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8008c42:	6918      	ldr	r0, [r3, #16]
 8008c44:	f000 fe70 	bl	8009928 <__hi0bits>
 8008c48:	f1c0 0020 	rsb	r0, r0, #32
 8008c4c:	9b04      	ldr	r3, [sp, #16]
 8008c4e:	4418      	add	r0, r3
 8008c50:	f010 001f 	ands.w	r0, r0, #31
 8008c54:	f000 8086 	beq.w	8008d64 <_dtoa_r+0x91c>
 8008c58:	f1c0 0320 	rsb	r3, r0, #32
 8008c5c:	2b04      	cmp	r3, #4
 8008c5e:	dd7f      	ble.n	8008d60 <_dtoa_r+0x918>
 8008c60:	f1c0 001c 	rsb	r0, r0, #28
 8008c64:	9b04      	ldr	r3, [sp, #16]
 8008c66:	4403      	add	r3, r0
 8008c68:	4480      	add	r8, r0
 8008c6a:	4405      	add	r5, r0
 8008c6c:	9304      	str	r3, [sp, #16]
 8008c6e:	f1b8 0f00 	cmp.w	r8, #0
 8008c72:	dd05      	ble.n	8008c80 <_dtoa_r+0x838>
 8008c74:	4659      	mov	r1, fp
 8008c76:	4642      	mov	r2, r8
 8008c78:	4620      	mov	r0, r4
 8008c7a:	f000 ffbb 	bl	8009bf4 <__lshift>
 8008c7e:	4683      	mov	fp, r0
 8008c80:	9b04      	ldr	r3, [sp, #16]
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	dd05      	ble.n	8008c92 <_dtoa_r+0x84a>
 8008c86:	4631      	mov	r1, r6
 8008c88:	461a      	mov	r2, r3
 8008c8a:	4620      	mov	r0, r4
 8008c8c:	f000 ffb2 	bl	8009bf4 <__lshift>
 8008c90:	4606      	mov	r6, r0
 8008c92:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	d069      	beq.n	8008d6c <_dtoa_r+0x924>
 8008c98:	4631      	mov	r1, r6
 8008c9a:	4658      	mov	r0, fp
 8008c9c:	f001 f816 	bl	8009ccc <__mcmp>
 8008ca0:	2800      	cmp	r0, #0
 8008ca2:	da63      	bge.n	8008d6c <_dtoa_r+0x924>
 8008ca4:	2300      	movs	r3, #0
 8008ca6:	4659      	mov	r1, fp
 8008ca8:	220a      	movs	r2, #10
 8008caa:	4620      	mov	r0, r4
 8008cac:	f000 fda8 	bl	8009800 <__multadd>
 8008cb0:	9b08      	ldr	r3, [sp, #32]
 8008cb2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008cb6:	4683      	mov	fp, r0
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	f000 818f 	beq.w	8008fdc <_dtoa_r+0xb94>
 8008cbe:	4639      	mov	r1, r7
 8008cc0:	2300      	movs	r3, #0
 8008cc2:	220a      	movs	r2, #10
 8008cc4:	4620      	mov	r0, r4
 8008cc6:	f000 fd9b 	bl	8009800 <__multadd>
 8008cca:	f1b9 0f00 	cmp.w	r9, #0
 8008cce:	4607      	mov	r7, r0
 8008cd0:	f300 808e 	bgt.w	8008df0 <_dtoa_r+0x9a8>
 8008cd4:	9b05      	ldr	r3, [sp, #20]
 8008cd6:	2b02      	cmp	r3, #2
 8008cd8:	dc50      	bgt.n	8008d7c <_dtoa_r+0x934>
 8008cda:	e089      	b.n	8008df0 <_dtoa_r+0x9a8>
 8008cdc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008cde:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008ce2:	e75d      	b.n	8008ba0 <_dtoa_r+0x758>
 8008ce4:	9b01      	ldr	r3, [sp, #4]
 8008ce6:	1e5e      	subs	r6, r3, #1
 8008ce8:	9b06      	ldr	r3, [sp, #24]
 8008cea:	42b3      	cmp	r3, r6
 8008cec:	bfbf      	itttt	lt
 8008cee:	9b06      	ldrlt	r3, [sp, #24]
 8008cf0:	9606      	strlt	r6, [sp, #24]
 8008cf2:	1af2      	sublt	r2, r6, r3
 8008cf4:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8008cf6:	bfb6      	itet	lt
 8008cf8:	189b      	addlt	r3, r3, r2
 8008cfa:	1b9e      	subge	r6, r3, r6
 8008cfc:	930d      	strlt	r3, [sp, #52]	; 0x34
 8008cfe:	9b01      	ldr	r3, [sp, #4]
 8008d00:	bfb8      	it	lt
 8008d02:	2600      	movlt	r6, #0
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	bfb5      	itete	lt
 8008d08:	eba8 0503 	sublt.w	r5, r8, r3
 8008d0c:	9b01      	ldrge	r3, [sp, #4]
 8008d0e:	2300      	movlt	r3, #0
 8008d10:	4645      	movge	r5, r8
 8008d12:	e747      	b.n	8008ba4 <_dtoa_r+0x75c>
 8008d14:	9e06      	ldr	r6, [sp, #24]
 8008d16:	9f08      	ldr	r7, [sp, #32]
 8008d18:	4645      	mov	r5, r8
 8008d1a:	e74c      	b.n	8008bb6 <_dtoa_r+0x76e>
 8008d1c:	9a06      	ldr	r2, [sp, #24]
 8008d1e:	e775      	b.n	8008c0c <_dtoa_r+0x7c4>
 8008d20:	9b05      	ldr	r3, [sp, #20]
 8008d22:	2b01      	cmp	r3, #1
 8008d24:	dc18      	bgt.n	8008d58 <_dtoa_r+0x910>
 8008d26:	9b02      	ldr	r3, [sp, #8]
 8008d28:	b9b3      	cbnz	r3, 8008d58 <_dtoa_r+0x910>
 8008d2a:	9b03      	ldr	r3, [sp, #12]
 8008d2c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008d30:	b9a3      	cbnz	r3, 8008d5c <_dtoa_r+0x914>
 8008d32:	9b03      	ldr	r3, [sp, #12]
 8008d34:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008d38:	0d1b      	lsrs	r3, r3, #20
 8008d3a:	051b      	lsls	r3, r3, #20
 8008d3c:	b12b      	cbz	r3, 8008d4a <_dtoa_r+0x902>
 8008d3e:	9b04      	ldr	r3, [sp, #16]
 8008d40:	3301      	adds	r3, #1
 8008d42:	9304      	str	r3, [sp, #16]
 8008d44:	f108 0801 	add.w	r8, r8, #1
 8008d48:	2301      	movs	r3, #1
 8008d4a:	9306      	str	r3, [sp, #24]
 8008d4c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	f47f af74 	bne.w	8008c3c <_dtoa_r+0x7f4>
 8008d54:	2001      	movs	r0, #1
 8008d56:	e779      	b.n	8008c4c <_dtoa_r+0x804>
 8008d58:	2300      	movs	r3, #0
 8008d5a:	e7f6      	b.n	8008d4a <_dtoa_r+0x902>
 8008d5c:	9b02      	ldr	r3, [sp, #8]
 8008d5e:	e7f4      	b.n	8008d4a <_dtoa_r+0x902>
 8008d60:	d085      	beq.n	8008c6e <_dtoa_r+0x826>
 8008d62:	4618      	mov	r0, r3
 8008d64:	301c      	adds	r0, #28
 8008d66:	e77d      	b.n	8008c64 <_dtoa_r+0x81c>
 8008d68:	40240000 	.word	0x40240000
 8008d6c:	9b01      	ldr	r3, [sp, #4]
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	dc38      	bgt.n	8008de4 <_dtoa_r+0x99c>
 8008d72:	9b05      	ldr	r3, [sp, #20]
 8008d74:	2b02      	cmp	r3, #2
 8008d76:	dd35      	ble.n	8008de4 <_dtoa_r+0x99c>
 8008d78:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8008d7c:	f1b9 0f00 	cmp.w	r9, #0
 8008d80:	d10d      	bne.n	8008d9e <_dtoa_r+0x956>
 8008d82:	4631      	mov	r1, r6
 8008d84:	464b      	mov	r3, r9
 8008d86:	2205      	movs	r2, #5
 8008d88:	4620      	mov	r0, r4
 8008d8a:	f000 fd39 	bl	8009800 <__multadd>
 8008d8e:	4601      	mov	r1, r0
 8008d90:	4606      	mov	r6, r0
 8008d92:	4658      	mov	r0, fp
 8008d94:	f000 ff9a 	bl	8009ccc <__mcmp>
 8008d98:	2800      	cmp	r0, #0
 8008d9a:	f73f adbd 	bgt.w	8008918 <_dtoa_r+0x4d0>
 8008d9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008da0:	9d00      	ldr	r5, [sp, #0]
 8008da2:	ea6f 0a03 	mvn.w	sl, r3
 8008da6:	f04f 0800 	mov.w	r8, #0
 8008daa:	4631      	mov	r1, r6
 8008dac:	4620      	mov	r0, r4
 8008dae:	f000 fd05 	bl	80097bc <_Bfree>
 8008db2:	2f00      	cmp	r7, #0
 8008db4:	f43f aeb4 	beq.w	8008b20 <_dtoa_r+0x6d8>
 8008db8:	f1b8 0f00 	cmp.w	r8, #0
 8008dbc:	d005      	beq.n	8008dca <_dtoa_r+0x982>
 8008dbe:	45b8      	cmp	r8, r7
 8008dc0:	d003      	beq.n	8008dca <_dtoa_r+0x982>
 8008dc2:	4641      	mov	r1, r8
 8008dc4:	4620      	mov	r0, r4
 8008dc6:	f000 fcf9 	bl	80097bc <_Bfree>
 8008dca:	4639      	mov	r1, r7
 8008dcc:	4620      	mov	r0, r4
 8008dce:	f000 fcf5 	bl	80097bc <_Bfree>
 8008dd2:	e6a5      	b.n	8008b20 <_dtoa_r+0x6d8>
 8008dd4:	2600      	movs	r6, #0
 8008dd6:	4637      	mov	r7, r6
 8008dd8:	e7e1      	b.n	8008d9e <_dtoa_r+0x956>
 8008dda:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8008ddc:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8008de0:	4637      	mov	r7, r6
 8008de2:	e599      	b.n	8008918 <_dtoa_r+0x4d0>
 8008de4:	9b08      	ldr	r3, [sp, #32]
 8008de6:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	f000 80fd 	beq.w	8008fea <_dtoa_r+0xba2>
 8008df0:	2d00      	cmp	r5, #0
 8008df2:	dd05      	ble.n	8008e00 <_dtoa_r+0x9b8>
 8008df4:	4639      	mov	r1, r7
 8008df6:	462a      	mov	r2, r5
 8008df8:	4620      	mov	r0, r4
 8008dfa:	f000 fefb 	bl	8009bf4 <__lshift>
 8008dfe:	4607      	mov	r7, r0
 8008e00:	9b06      	ldr	r3, [sp, #24]
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	d05c      	beq.n	8008ec0 <_dtoa_r+0xa78>
 8008e06:	6879      	ldr	r1, [r7, #4]
 8008e08:	4620      	mov	r0, r4
 8008e0a:	f000 fc97 	bl	800973c <_Balloc>
 8008e0e:	4605      	mov	r5, r0
 8008e10:	b928      	cbnz	r0, 8008e1e <_dtoa_r+0x9d6>
 8008e12:	4b80      	ldr	r3, [pc, #512]	; (8009014 <_dtoa_r+0xbcc>)
 8008e14:	4602      	mov	r2, r0
 8008e16:	f240 21ea 	movw	r1, #746	; 0x2ea
 8008e1a:	f7ff bb2e 	b.w	800847a <_dtoa_r+0x32>
 8008e1e:	693a      	ldr	r2, [r7, #16]
 8008e20:	3202      	adds	r2, #2
 8008e22:	0092      	lsls	r2, r2, #2
 8008e24:	f107 010c 	add.w	r1, r7, #12
 8008e28:	300c      	adds	r0, #12
 8008e2a:	f7fd fd17 	bl	800685c <memcpy>
 8008e2e:	2201      	movs	r2, #1
 8008e30:	4629      	mov	r1, r5
 8008e32:	4620      	mov	r0, r4
 8008e34:	f000 fede 	bl	8009bf4 <__lshift>
 8008e38:	9b00      	ldr	r3, [sp, #0]
 8008e3a:	3301      	adds	r3, #1
 8008e3c:	9301      	str	r3, [sp, #4]
 8008e3e:	9b00      	ldr	r3, [sp, #0]
 8008e40:	444b      	add	r3, r9
 8008e42:	9307      	str	r3, [sp, #28]
 8008e44:	9b02      	ldr	r3, [sp, #8]
 8008e46:	f003 0301 	and.w	r3, r3, #1
 8008e4a:	46b8      	mov	r8, r7
 8008e4c:	9306      	str	r3, [sp, #24]
 8008e4e:	4607      	mov	r7, r0
 8008e50:	9b01      	ldr	r3, [sp, #4]
 8008e52:	4631      	mov	r1, r6
 8008e54:	3b01      	subs	r3, #1
 8008e56:	4658      	mov	r0, fp
 8008e58:	9302      	str	r3, [sp, #8]
 8008e5a:	f7ff fa67 	bl	800832c <quorem>
 8008e5e:	4603      	mov	r3, r0
 8008e60:	3330      	adds	r3, #48	; 0x30
 8008e62:	9004      	str	r0, [sp, #16]
 8008e64:	4641      	mov	r1, r8
 8008e66:	4658      	mov	r0, fp
 8008e68:	9308      	str	r3, [sp, #32]
 8008e6a:	f000 ff2f 	bl	8009ccc <__mcmp>
 8008e6e:	463a      	mov	r2, r7
 8008e70:	4681      	mov	r9, r0
 8008e72:	4631      	mov	r1, r6
 8008e74:	4620      	mov	r0, r4
 8008e76:	f000 ff45 	bl	8009d04 <__mdiff>
 8008e7a:	68c2      	ldr	r2, [r0, #12]
 8008e7c:	9b08      	ldr	r3, [sp, #32]
 8008e7e:	4605      	mov	r5, r0
 8008e80:	bb02      	cbnz	r2, 8008ec4 <_dtoa_r+0xa7c>
 8008e82:	4601      	mov	r1, r0
 8008e84:	4658      	mov	r0, fp
 8008e86:	f000 ff21 	bl	8009ccc <__mcmp>
 8008e8a:	9b08      	ldr	r3, [sp, #32]
 8008e8c:	4602      	mov	r2, r0
 8008e8e:	4629      	mov	r1, r5
 8008e90:	4620      	mov	r0, r4
 8008e92:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8008e96:	f000 fc91 	bl	80097bc <_Bfree>
 8008e9a:	9b05      	ldr	r3, [sp, #20]
 8008e9c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008e9e:	9d01      	ldr	r5, [sp, #4]
 8008ea0:	ea43 0102 	orr.w	r1, r3, r2
 8008ea4:	9b06      	ldr	r3, [sp, #24]
 8008ea6:	430b      	orrs	r3, r1
 8008ea8:	9b08      	ldr	r3, [sp, #32]
 8008eaa:	d10d      	bne.n	8008ec8 <_dtoa_r+0xa80>
 8008eac:	2b39      	cmp	r3, #57	; 0x39
 8008eae:	d029      	beq.n	8008f04 <_dtoa_r+0xabc>
 8008eb0:	f1b9 0f00 	cmp.w	r9, #0
 8008eb4:	dd01      	ble.n	8008eba <_dtoa_r+0xa72>
 8008eb6:	9b04      	ldr	r3, [sp, #16]
 8008eb8:	3331      	adds	r3, #49	; 0x31
 8008eba:	9a02      	ldr	r2, [sp, #8]
 8008ebc:	7013      	strb	r3, [r2, #0]
 8008ebe:	e774      	b.n	8008daa <_dtoa_r+0x962>
 8008ec0:	4638      	mov	r0, r7
 8008ec2:	e7b9      	b.n	8008e38 <_dtoa_r+0x9f0>
 8008ec4:	2201      	movs	r2, #1
 8008ec6:	e7e2      	b.n	8008e8e <_dtoa_r+0xa46>
 8008ec8:	f1b9 0f00 	cmp.w	r9, #0
 8008ecc:	db06      	blt.n	8008edc <_dtoa_r+0xa94>
 8008ece:	9905      	ldr	r1, [sp, #20]
 8008ed0:	ea41 0909 	orr.w	r9, r1, r9
 8008ed4:	9906      	ldr	r1, [sp, #24]
 8008ed6:	ea59 0101 	orrs.w	r1, r9, r1
 8008eda:	d120      	bne.n	8008f1e <_dtoa_r+0xad6>
 8008edc:	2a00      	cmp	r2, #0
 8008ede:	ddec      	ble.n	8008eba <_dtoa_r+0xa72>
 8008ee0:	4659      	mov	r1, fp
 8008ee2:	2201      	movs	r2, #1
 8008ee4:	4620      	mov	r0, r4
 8008ee6:	9301      	str	r3, [sp, #4]
 8008ee8:	f000 fe84 	bl	8009bf4 <__lshift>
 8008eec:	4631      	mov	r1, r6
 8008eee:	4683      	mov	fp, r0
 8008ef0:	f000 feec 	bl	8009ccc <__mcmp>
 8008ef4:	2800      	cmp	r0, #0
 8008ef6:	9b01      	ldr	r3, [sp, #4]
 8008ef8:	dc02      	bgt.n	8008f00 <_dtoa_r+0xab8>
 8008efa:	d1de      	bne.n	8008eba <_dtoa_r+0xa72>
 8008efc:	07da      	lsls	r2, r3, #31
 8008efe:	d5dc      	bpl.n	8008eba <_dtoa_r+0xa72>
 8008f00:	2b39      	cmp	r3, #57	; 0x39
 8008f02:	d1d8      	bne.n	8008eb6 <_dtoa_r+0xa6e>
 8008f04:	9a02      	ldr	r2, [sp, #8]
 8008f06:	2339      	movs	r3, #57	; 0x39
 8008f08:	7013      	strb	r3, [r2, #0]
 8008f0a:	462b      	mov	r3, r5
 8008f0c:	461d      	mov	r5, r3
 8008f0e:	3b01      	subs	r3, #1
 8008f10:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8008f14:	2a39      	cmp	r2, #57	; 0x39
 8008f16:	d050      	beq.n	8008fba <_dtoa_r+0xb72>
 8008f18:	3201      	adds	r2, #1
 8008f1a:	701a      	strb	r2, [r3, #0]
 8008f1c:	e745      	b.n	8008daa <_dtoa_r+0x962>
 8008f1e:	2a00      	cmp	r2, #0
 8008f20:	dd03      	ble.n	8008f2a <_dtoa_r+0xae2>
 8008f22:	2b39      	cmp	r3, #57	; 0x39
 8008f24:	d0ee      	beq.n	8008f04 <_dtoa_r+0xabc>
 8008f26:	3301      	adds	r3, #1
 8008f28:	e7c7      	b.n	8008eba <_dtoa_r+0xa72>
 8008f2a:	9a01      	ldr	r2, [sp, #4]
 8008f2c:	9907      	ldr	r1, [sp, #28]
 8008f2e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8008f32:	428a      	cmp	r2, r1
 8008f34:	d02a      	beq.n	8008f8c <_dtoa_r+0xb44>
 8008f36:	4659      	mov	r1, fp
 8008f38:	2300      	movs	r3, #0
 8008f3a:	220a      	movs	r2, #10
 8008f3c:	4620      	mov	r0, r4
 8008f3e:	f000 fc5f 	bl	8009800 <__multadd>
 8008f42:	45b8      	cmp	r8, r7
 8008f44:	4683      	mov	fp, r0
 8008f46:	f04f 0300 	mov.w	r3, #0
 8008f4a:	f04f 020a 	mov.w	r2, #10
 8008f4e:	4641      	mov	r1, r8
 8008f50:	4620      	mov	r0, r4
 8008f52:	d107      	bne.n	8008f64 <_dtoa_r+0xb1c>
 8008f54:	f000 fc54 	bl	8009800 <__multadd>
 8008f58:	4680      	mov	r8, r0
 8008f5a:	4607      	mov	r7, r0
 8008f5c:	9b01      	ldr	r3, [sp, #4]
 8008f5e:	3301      	adds	r3, #1
 8008f60:	9301      	str	r3, [sp, #4]
 8008f62:	e775      	b.n	8008e50 <_dtoa_r+0xa08>
 8008f64:	f000 fc4c 	bl	8009800 <__multadd>
 8008f68:	4639      	mov	r1, r7
 8008f6a:	4680      	mov	r8, r0
 8008f6c:	2300      	movs	r3, #0
 8008f6e:	220a      	movs	r2, #10
 8008f70:	4620      	mov	r0, r4
 8008f72:	f000 fc45 	bl	8009800 <__multadd>
 8008f76:	4607      	mov	r7, r0
 8008f78:	e7f0      	b.n	8008f5c <_dtoa_r+0xb14>
 8008f7a:	f1b9 0f00 	cmp.w	r9, #0
 8008f7e:	9a00      	ldr	r2, [sp, #0]
 8008f80:	bfcc      	ite	gt
 8008f82:	464d      	movgt	r5, r9
 8008f84:	2501      	movle	r5, #1
 8008f86:	4415      	add	r5, r2
 8008f88:	f04f 0800 	mov.w	r8, #0
 8008f8c:	4659      	mov	r1, fp
 8008f8e:	2201      	movs	r2, #1
 8008f90:	4620      	mov	r0, r4
 8008f92:	9301      	str	r3, [sp, #4]
 8008f94:	f000 fe2e 	bl	8009bf4 <__lshift>
 8008f98:	4631      	mov	r1, r6
 8008f9a:	4683      	mov	fp, r0
 8008f9c:	f000 fe96 	bl	8009ccc <__mcmp>
 8008fa0:	2800      	cmp	r0, #0
 8008fa2:	dcb2      	bgt.n	8008f0a <_dtoa_r+0xac2>
 8008fa4:	d102      	bne.n	8008fac <_dtoa_r+0xb64>
 8008fa6:	9b01      	ldr	r3, [sp, #4]
 8008fa8:	07db      	lsls	r3, r3, #31
 8008faa:	d4ae      	bmi.n	8008f0a <_dtoa_r+0xac2>
 8008fac:	462b      	mov	r3, r5
 8008fae:	461d      	mov	r5, r3
 8008fb0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008fb4:	2a30      	cmp	r2, #48	; 0x30
 8008fb6:	d0fa      	beq.n	8008fae <_dtoa_r+0xb66>
 8008fb8:	e6f7      	b.n	8008daa <_dtoa_r+0x962>
 8008fba:	9a00      	ldr	r2, [sp, #0]
 8008fbc:	429a      	cmp	r2, r3
 8008fbe:	d1a5      	bne.n	8008f0c <_dtoa_r+0xac4>
 8008fc0:	f10a 0a01 	add.w	sl, sl, #1
 8008fc4:	2331      	movs	r3, #49	; 0x31
 8008fc6:	e779      	b.n	8008ebc <_dtoa_r+0xa74>
 8008fc8:	4b13      	ldr	r3, [pc, #76]	; (8009018 <_dtoa_r+0xbd0>)
 8008fca:	f7ff baaf 	b.w	800852c <_dtoa_r+0xe4>
 8008fce:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	f47f aa86 	bne.w	80084e2 <_dtoa_r+0x9a>
 8008fd6:	4b11      	ldr	r3, [pc, #68]	; (800901c <_dtoa_r+0xbd4>)
 8008fd8:	f7ff baa8 	b.w	800852c <_dtoa_r+0xe4>
 8008fdc:	f1b9 0f00 	cmp.w	r9, #0
 8008fe0:	dc03      	bgt.n	8008fea <_dtoa_r+0xba2>
 8008fe2:	9b05      	ldr	r3, [sp, #20]
 8008fe4:	2b02      	cmp	r3, #2
 8008fe6:	f73f aec9 	bgt.w	8008d7c <_dtoa_r+0x934>
 8008fea:	9d00      	ldr	r5, [sp, #0]
 8008fec:	4631      	mov	r1, r6
 8008fee:	4658      	mov	r0, fp
 8008ff0:	f7ff f99c 	bl	800832c <quorem>
 8008ff4:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8008ff8:	f805 3b01 	strb.w	r3, [r5], #1
 8008ffc:	9a00      	ldr	r2, [sp, #0]
 8008ffe:	1aaa      	subs	r2, r5, r2
 8009000:	4591      	cmp	r9, r2
 8009002:	ddba      	ble.n	8008f7a <_dtoa_r+0xb32>
 8009004:	4659      	mov	r1, fp
 8009006:	2300      	movs	r3, #0
 8009008:	220a      	movs	r2, #10
 800900a:	4620      	mov	r0, r4
 800900c:	f000 fbf8 	bl	8009800 <__multadd>
 8009010:	4683      	mov	fp, r0
 8009012:	e7eb      	b.n	8008fec <_dtoa_r+0xba4>
 8009014:	0800b694 	.word	0x0800b694
 8009018:	0800b494 	.word	0x0800b494
 800901c:	0800b611 	.word	0x0800b611

08009020 <rshift>:
 8009020:	6903      	ldr	r3, [r0, #16]
 8009022:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8009026:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800902a:	ea4f 1261 	mov.w	r2, r1, asr #5
 800902e:	f100 0414 	add.w	r4, r0, #20
 8009032:	dd45      	ble.n	80090c0 <rshift+0xa0>
 8009034:	f011 011f 	ands.w	r1, r1, #31
 8009038:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800903c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8009040:	d10c      	bne.n	800905c <rshift+0x3c>
 8009042:	f100 0710 	add.w	r7, r0, #16
 8009046:	4629      	mov	r1, r5
 8009048:	42b1      	cmp	r1, r6
 800904a:	d334      	bcc.n	80090b6 <rshift+0x96>
 800904c:	1a9b      	subs	r3, r3, r2
 800904e:	009b      	lsls	r3, r3, #2
 8009050:	1eea      	subs	r2, r5, #3
 8009052:	4296      	cmp	r6, r2
 8009054:	bf38      	it	cc
 8009056:	2300      	movcc	r3, #0
 8009058:	4423      	add	r3, r4
 800905a:	e015      	b.n	8009088 <rshift+0x68>
 800905c:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8009060:	f1c1 0820 	rsb	r8, r1, #32
 8009064:	40cf      	lsrs	r7, r1
 8009066:	f105 0e04 	add.w	lr, r5, #4
 800906a:	46a1      	mov	r9, r4
 800906c:	4576      	cmp	r6, lr
 800906e:	46f4      	mov	ip, lr
 8009070:	d815      	bhi.n	800909e <rshift+0x7e>
 8009072:	1a9b      	subs	r3, r3, r2
 8009074:	009a      	lsls	r2, r3, #2
 8009076:	3a04      	subs	r2, #4
 8009078:	3501      	adds	r5, #1
 800907a:	42ae      	cmp	r6, r5
 800907c:	bf38      	it	cc
 800907e:	2200      	movcc	r2, #0
 8009080:	18a3      	adds	r3, r4, r2
 8009082:	50a7      	str	r7, [r4, r2]
 8009084:	b107      	cbz	r7, 8009088 <rshift+0x68>
 8009086:	3304      	adds	r3, #4
 8009088:	1b1a      	subs	r2, r3, r4
 800908a:	42a3      	cmp	r3, r4
 800908c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8009090:	bf08      	it	eq
 8009092:	2300      	moveq	r3, #0
 8009094:	6102      	str	r2, [r0, #16]
 8009096:	bf08      	it	eq
 8009098:	6143      	streq	r3, [r0, #20]
 800909a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800909e:	f8dc c000 	ldr.w	ip, [ip]
 80090a2:	fa0c fc08 	lsl.w	ip, ip, r8
 80090a6:	ea4c 0707 	orr.w	r7, ip, r7
 80090aa:	f849 7b04 	str.w	r7, [r9], #4
 80090ae:	f85e 7b04 	ldr.w	r7, [lr], #4
 80090b2:	40cf      	lsrs	r7, r1
 80090b4:	e7da      	b.n	800906c <rshift+0x4c>
 80090b6:	f851 cb04 	ldr.w	ip, [r1], #4
 80090ba:	f847 cf04 	str.w	ip, [r7, #4]!
 80090be:	e7c3      	b.n	8009048 <rshift+0x28>
 80090c0:	4623      	mov	r3, r4
 80090c2:	e7e1      	b.n	8009088 <rshift+0x68>

080090c4 <__hexdig_fun>:
 80090c4:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80090c8:	2b09      	cmp	r3, #9
 80090ca:	d802      	bhi.n	80090d2 <__hexdig_fun+0xe>
 80090cc:	3820      	subs	r0, #32
 80090ce:	b2c0      	uxtb	r0, r0
 80090d0:	4770      	bx	lr
 80090d2:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80090d6:	2b05      	cmp	r3, #5
 80090d8:	d801      	bhi.n	80090de <__hexdig_fun+0x1a>
 80090da:	3847      	subs	r0, #71	; 0x47
 80090dc:	e7f7      	b.n	80090ce <__hexdig_fun+0xa>
 80090de:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80090e2:	2b05      	cmp	r3, #5
 80090e4:	d801      	bhi.n	80090ea <__hexdig_fun+0x26>
 80090e6:	3827      	subs	r0, #39	; 0x27
 80090e8:	e7f1      	b.n	80090ce <__hexdig_fun+0xa>
 80090ea:	2000      	movs	r0, #0
 80090ec:	4770      	bx	lr
	...

080090f0 <__gethex>:
 80090f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090f4:	ed2d 8b02 	vpush	{d8}
 80090f8:	b089      	sub	sp, #36	; 0x24
 80090fa:	ee08 0a10 	vmov	s16, r0
 80090fe:	9304      	str	r3, [sp, #16]
 8009100:	4bbc      	ldr	r3, [pc, #752]	; (80093f4 <__gethex+0x304>)
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	9301      	str	r3, [sp, #4]
 8009106:	4618      	mov	r0, r3
 8009108:	468b      	mov	fp, r1
 800910a:	4690      	mov	r8, r2
 800910c:	f7f7 f868 	bl	80001e0 <strlen>
 8009110:	9b01      	ldr	r3, [sp, #4]
 8009112:	f8db 2000 	ldr.w	r2, [fp]
 8009116:	4403      	add	r3, r0
 8009118:	4682      	mov	sl, r0
 800911a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800911e:	9305      	str	r3, [sp, #20]
 8009120:	1c93      	adds	r3, r2, #2
 8009122:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8009126:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800912a:	32fe      	adds	r2, #254	; 0xfe
 800912c:	18d1      	adds	r1, r2, r3
 800912e:	461f      	mov	r7, r3
 8009130:	f813 0b01 	ldrb.w	r0, [r3], #1
 8009134:	9100      	str	r1, [sp, #0]
 8009136:	2830      	cmp	r0, #48	; 0x30
 8009138:	d0f8      	beq.n	800912c <__gethex+0x3c>
 800913a:	f7ff ffc3 	bl	80090c4 <__hexdig_fun>
 800913e:	4604      	mov	r4, r0
 8009140:	2800      	cmp	r0, #0
 8009142:	d13a      	bne.n	80091ba <__gethex+0xca>
 8009144:	9901      	ldr	r1, [sp, #4]
 8009146:	4652      	mov	r2, sl
 8009148:	4638      	mov	r0, r7
 800914a:	f001 f9e1 	bl	800a510 <strncmp>
 800914e:	4605      	mov	r5, r0
 8009150:	2800      	cmp	r0, #0
 8009152:	d168      	bne.n	8009226 <__gethex+0x136>
 8009154:	f817 000a 	ldrb.w	r0, [r7, sl]
 8009158:	eb07 060a 	add.w	r6, r7, sl
 800915c:	f7ff ffb2 	bl	80090c4 <__hexdig_fun>
 8009160:	2800      	cmp	r0, #0
 8009162:	d062      	beq.n	800922a <__gethex+0x13a>
 8009164:	4633      	mov	r3, r6
 8009166:	7818      	ldrb	r0, [r3, #0]
 8009168:	2830      	cmp	r0, #48	; 0x30
 800916a:	461f      	mov	r7, r3
 800916c:	f103 0301 	add.w	r3, r3, #1
 8009170:	d0f9      	beq.n	8009166 <__gethex+0x76>
 8009172:	f7ff ffa7 	bl	80090c4 <__hexdig_fun>
 8009176:	2301      	movs	r3, #1
 8009178:	fab0 f480 	clz	r4, r0
 800917c:	0964      	lsrs	r4, r4, #5
 800917e:	4635      	mov	r5, r6
 8009180:	9300      	str	r3, [sp, #0]
 8009182:	463a      	mov	r2, r7
 8009184:	4616      	mov	r6, r2
 8009186:	3201      	adds	r2, #1
 8009188:	7830      	ldrb	r0, [r6, #0]
 800918a:	f7ff ff9b 	bl	80090c4 <__hexdig_fun>
 800918e:	2800      	cmp	r0, #0
 8009190:	d1f8      	bne.n	8009184 <__gethex+0x94>
 8009192:	9901      	ldr	r1, [sp, #4]
 8009194:	4652      	mov	r2, sl
 8009196:	4630      	mov	r0, r6
 8009198:	f001 f9ba 	bl	800a510 <strncmp>
 800919c:	b980      	cbnz	r0, 80091c0 <__gethex+0xd0>
 800919e:	b94d      	cbnz	r5, 80091b4 <__gethex+0xc4>
 80091a0:	eb06 050a 	add.w	r5, r6, sl
 80091a4:	462a      	mov	r2, r5
 80091a6:	4616      	mov	r6, r2
 80091a8:	3201      	adds	r2, #1
 80091aa:	7830      	ldrb	r0, [r6, #0]
 80091ac:	f7ff ff8a 	bl	80090c4 <__hexdig_fun>
 80091b0:	2800      	cmp	r0, #0
 80091b2:	d1f8      	bne.n	80091a6 <__gethex+0xb6>
 80091b4:	1bad      	subs	r5, r5, r6
 80091b6:	00ad      	lsls	r5, r5, #2
 80091b8:	e004      	b.n	80091c4 <__gethex+0xd4>
 80091ba:	2400      	movs	r4, #0
 80091bc:	4625      	mov	r5, r4
 80091be:	e7e0      	b.n	8009182 <__gethex+0x92>
 80091c0:	2d00      	cmp	r5, #0
 80091c2:	d1f7      	bne.n	80091b4 <__gethex+0xc4>
 80091c4:	7833      	ldrb	r3, [r6, #0]
 80091c6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80091ca:	2b50      	cmp	r3, #80	; 0x50
 80091cc:	d13b      	bne.n	8009246 <__gethex+0x156>
 80091ce:	7873      	ldrb	r3, [r6, #1]
 80091d0:	2b2b      	cmp	r3, #43	; 0x2b
 80091d2:	d02c      	beq.n	800922e <__gethex+0x13e>
 80091d4:	2b2d      	cmp	r3, #45	; 0x2d
 80091d6:	d02e      	beq.n	8009236 <__gethex+0x146>
 80091d8:	1c71      	adds	r1, r6, #1
 80091da:	f04f 0900 	mov.w	r9, #0
 80091de:	7808      	ldrb	r0, [r1, #0]
 80091e0:	f7ff ff70 	bl	80090c4 <__hexdig_fun>
 80091e4:	1e43      	subs	r3, r0, #1
 80091e6:	b2db      	uxtb	r3, r3
 80091e8:	2b18      	cmp	r3, #24
 80091ea:	d82c      	bhi.n	8009246 <__gethex+0x156>
 80091ec:	f1a0 0210 	sub.w	r2, r0, #16
 80091f0:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80091f4:	f7ff ff66 	bl	80090c4 <__hexdig_fun>
 80091f8:	1e43      	subs	r3, r0, #1
 80091fa:	b2db      	uxtb	r3, r3
 80091fc:	2b18      	cmp	r3, #24
 80091fe:	d91d      	bls.n	800923c <__gethex+0x14c>
 8009200:	f1b9 0f00 	cmp.w	r9, #0
 8009204:	d000      	beq.n	8009208 <__gethex+0x118>
 8009206:	4252      	negs	r2, r2
 8009208:	4415      	add	r5, r2
 800920a:	f8cb 1000 	str.w	r1, [fp]
 800920e:	b1e4      	cbz	r4, 800924a <__gethex+0x15a>
 8009210:	9b00      	ldr	r3, [sp, #0]
 8009212:	2b00      	cmp	r3, #0
 8009214:	bf14      	ite	ne
 8009216:	2700      	movne	r7, #0
 8009218:	2706      	moveq	r7, #6
 800921a:	4638      	mov	r0, r7
 800921c:	b009      	add	sp, #36	; 0x24
 800921e:	ecbd 8b02 	vpop	{d8}
 8009222:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009226:	463e      	mov	r6, r7
 8009228:	4625      	mov	r5, r4
 800922a:	2401      	movs	r4, #1
 800922c:	e7ca      	b.n	80091c4 <__gethex+0xd4>
 800922e:	f04f 0900 	mov.w	r9, #0
 8009232:	1cb1      	adds	r1, r6, #2
 8009234:	e7d3      	b.n	80091de <__gethex+0xee>
 8009236:	f04f 0901 	mov.w	r9, #1
 800923a:	e7fa      	b.n	8009232 <__gethex+0x142>
 800923c:	230a      	movs	r3, #10
 800923e:	fb03 0202 	mla	r2, r3, r2, r0
 8009242:	3a10      	subs	r2, #16
 8009244:	e7d4      	b.n	80091f0 <__gethex+0x100>
 8009246:	4631      	mov	r1, r6
 8009248:	e7df      	b.n	800920a <__gethex+0x11a>
 800924a:	1bf3      	subs	r3, r6, r7
 800924c:	3b01      	subs	r3, #1
 800924e:	4621      	mov	r1, r4
 8009250:	2b07      	cmp	r3, #7
 8009252:	dc0b      	bgt.n	800926c <__gethex+0x17c>
 8009254:	ee18 0a10 	vmov	r0, s16
 8009258:	f000 fa70 	bl	800973c <_Balloc>
 800925c:	4604      	mov	r4, r0
 800925e:	b940      	cbnz	r0, 8009272 <__gethex+0x182>
 8009260:	4b65      	ldr	r3, [pc, #404]	; (80093f8 <__gethex+0x308>)
 8009262:	4602      	mov	r2, r0
 8009264:	21de      	movs	r1, #222	; 0xde
 8009266:	4865      	ldr	r0, [pc, #404]	; (80093fc <__gethex+0x30c>)
 8009268:	f001 f972 	bl	800a550 <__assert_func>
 800926c:	3101      	adds	r1, #1
 800926e:	105b      	asrs	r3, r3, #1
 8009270:	e7ee      	b.n	8009250 <__gethex+0x160>
 8009272:	f100 0914 	add.w	r9, r0, #20
 8009276:	f04f 0b00 	mov.w	fp, #0
 800927a:	f1ca 0301 	rsb	r3, sl, #1
 800927e:	f8cd 9008 	str.w	r9, [sp, #8]
 8009282:	f8cd b000 	str.w	fp, [sp]
 8009286:	9306      	str	r3, [sp, #24]
 8009288:	42b7      	cmp	r7, r6
 800928a:	d340      	bcc.n	800930e <__gethex+0x21e>
 800928c:	9802      	ldr	r0, [sp, #8]
 800928e:	9b00      	ldr	r3, [sp, #0]
 8009290:	f840 3b04 	str.w	r3, [r0], #4
 8009294:	eba0 0009 	sub.w	r0, r0, r9
 8009298:	1080      	asrs	r0, r0, #2
 800929a:	0146      	lsls	r6, r0, #5
 800929c:	6120      	str	r0, [r4, #16]
 800929e:	4618      	mov	r0, r3
 80092a0:	f000 fb42 	bl	8009928 <__hi0bits>
 80092a4:	1a30      	subs	r0, r6, r0
 80092a6:	f8d8 6000 	ldr.w	r6, [r8]
 80092aa:	42b0      	cmp	r0, r6
 80092ac:	dd63      	ble.n	8009376 <__gethex+0x286>
 80092ae:	1b87      	subs	r7, r0, r6
 80092b0:	4639      	mov	r1, r7
 80092b2:	4620      	mov	r0, r4
 80092b4:	f000 fedc 	bl	800a070 <__any_on>
 80092b8:	4682      	mov	sl, r0
 80092ba:	b1a8      	cbz	r0, 80092e8 <__gethex+0x1f8>
 80092bc:	1e7b      	subs	r3, r7, #1
 80092be:	1159      	asrs	r1, r3, #5
 80092c0:	f003 021f 	and.w	r2, r3, #31
 80092c4:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80092c8:	f04f 0a01 	mov.w	sl, #1
 80092cc:	fa0a f202 	lsl.w	r2, sl, r2
 80092d0:	420a      	tst	r2, r1
 80092d2:	d009      	beq.n	80092e8 <__gethex+0x1f8>
 80092d4:	4553      	cmp	r3, sl
 80092d6:	dd05      	ble.n	80092e4 <__gethex+0x1f4>
 80092d8:	1eb9      	subs	r1, r7, #2
 80092da:	4620      	mov	r0, r4
 80092dc:	f000 fec8 	bl	800a070 <__any_on>
 80092e0:	2800      	cmp	r0, #0
 80092e2:	d145      	bne.n	8009370 <__gethex+0x280>
 80092e4:	f04f 0a02 	mov.w	sl, #2
 80092e8:	4639      	mov	r1, r7
 80092ea:	4620      	mov	r0, r4
 80092ec:	f7ff fe98 	bl	8009020 <rshift>
 80092f0:	443d      	add	r5, r7
 80092f2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80092f6:	42ab      	cmp	r3, r5
 80092f8:	da4c      	bge.n	8009394 <__gethex+0x2a4>
 80092fa:	ee18 0a10 	vmov	r0, s16
 80092fe:	4621      	mov	r1, r4
 8009300:	f000 fa5c 	bl	80097bc <_Bfree>
 8009304:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009306:	2300      	movs	r3, #0
 8009308:	6013      	str	r3, [r2, #0]
 800930a:	27a3      	movs	r7, #163	; 0xa3
 800930c:	e785      	b.n	800921a <__gethex+0x12a>
 800930e:	1e73      	subs	r3, r6, #1
 8009310:	9a05      	ldr	r2, [sp, #20]
 8009312:	9303      	str	r3, [sp, #12]
 8009314:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8009318:	4293      	cmp	r3, r2
 800931a:	d019      	beq.n	8009350 <__gethex+0x260>
 800931c:	f1bb 0f20 	cmp.w	fp, #32
 8009320:	d107      	bne.n	8009332 <__gethex+0x242>
 8009322:	9b02      	ldr	r3, [sp, #8]
 8009324:	9a00      	ldr	r2, [sp, #0]
 8009326:	f843 2b04 	str.w	r2, [r3], #4
 800932a:	9302      	str	r3, [sp, #8]
 800932c:	2300      	movs	r3, #0
 800932e:	9300      	str	r3, [sp, #0]
 8009330:	469b      	mov	fp, r3
 8009332:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8009336:	f7ff fec5 	bl	80090c4 <__hexdig_fun>
 800933a:	9b00      	ldr	r3, [sp, #0]
 800933c:	f000 000f 	and.w	r0, r0, #15
 8009340:	fa00 f00b 	lsl.w	r0, r0, fp
 8009344:	4303      	orrs	r3, r0
 8009346:	9300      	str	r3, [sp, #0]
 8009348:	f10b 0b04 	add.w	fp, fp, #4
 800934c:	9b03      	ldr	r3, [sp, #12]
 800934e:	e00d      	b.n	800936c <__gethex+0x27c>
 8009350:	9b03      	ldr	r3, [sp, #12]
 8009352:	9a06      	ldr	r2, [sp, #24]
 8009354:	4413      	add	r3, r2
 8009356:	42bb      	cmp	r3, r7
 8009358:	d3e0      	bcc.n	800931c <__gethex+0x22c>
 800935a:	4618      	mov	r0, r3
 800935c:	9901      	ldr	r1, [sp, #4]
 800935e:	9307      	str	r3, [sp, #28]
 8009360:	4652      	mov	r2, sl
 8009362:	f001 f8d5 	bl	800a510 <strncmp>
 8009366:	9b07      	ldr	r3, [sp, #28]
 8009368:	2800      	cmp	r0, #0
 800936a:	d1d7      	bne.n	800931c <__gethex+0x22c>
 800936c:	461e      	mov	r6, r3
 800936e:	e78b      	b.n	8009288 <__gethex+0x198>
 8009370:	f04f 0a03 	mov.w	sl, #3
 8009374:	e7b8      	b.n	80092e8 <__gethex+0x1f8>
 8009376:	da0a      	bge.n	800938e <__gethex+0x29e>
 8009378:	1a37      	subs	r7, r6, r0
 800937a:	4621      	mov	r1, r4
 800937c:	ee18 0a10 	vmov	r0, s16
 8009380:	463a      	mov	r2, r7
 8009382:	f000 fc37 	bl	8009bf4 <__lshift>
 8009386:	1bed      	subs	r5, r5, r7
 8009388:	4604      	mov	r4, r0
 800938a:	f100 0914 	add.w	r9, r0, #20
 800938e:	f04f 0a00 	mov.w	sl, #0
 8009392:	e7ae      	b.n	80092f2 <__gethex+0x202>
 8009394:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8009398:	42a8      	cmp	r0, r5
 800939a:	dd72      	ble.n	8009482 <__gethex+0x392>
 800939c:	1b45      	subs	r5, r0, r5
 800939e:	42ae      	cmp	r6, r5
 80093a0:	dc36      	bgt.n	8009410 <__gethex+0x320>
 80093a2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80093a6:	2b02      	cmp	r3, #2
 80093a8:	d02a      	beq.n	8009400 <__gethex+0x310>
 80093aa:	2b03      	cmp	r3, #3
 80093ac:	d02c      	beq.n	8009408 <__gethex+0x318>
 80093ae:	2b01      	cmp	r3, #1
 80093b0:	d115      	bne.n	80093de <__gethex+0x2ee>
 80093b2:	42ae      	cmp	r6, r5
 80093b4:	d113      	bne.n	80093de <__gethex+0x2ee>
 80093b6:	2e01      	cmp	r6, #1
 80093b8:	d10b      	bne.n	80093d2 <__gethex+0x2e2>
 80093ba:	9a04      	ldr	r2, [sp, #16]
 80093bc:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80093c0:	6013      	str	r3, [r2, #0]
 80093c2:	2301      	movs	r3, #1
 80093c4:	6123      	str	r3, [r4, #16]
 80093c6:	f8c9 3000 	str.w	r3, [r9]
 80093ca:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80093cc:	2762      	movs	r7, #98	; 0x62
 80093ce:	601c      	str	r4, [r3, #0]
 80093d0:	e723      	b.n	800921a <__gethex+0x12a>
 80093d2:	1e71      	subs	r1, r6, #1
 80093d4:	4620      	mov	r0, r4
 80093d6:	f000 fe4b 	bl	800a070 <__any_on>
 80093da:	2800      	cmp	r0, #0
 80093dc:	d1ed      	bne.n	80093ba <__gethex+0x2ca>
 80093de:	ee18 0a10 	vmov	r0, s16
 80093e2:	4621      	mov	r1, r4
 80093e4:	f000 f9ea 	bl	80097bc <_Bfree>
 80093e8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80093ea:	2300      	movs	r3, #0
 80093ec:	6013      	str	r3, [r2, #0]
 80093ee:	2750      	movs	r7, #80	; 0x50
 80093f0:	e713      	b.n	800921a <__gethex+0x12a>
 80093f2:	bf00      	nop
 80093f4:	0800b710 	.word	0x0800b710
 80093f8:	0800b694 	.word	0x0800b694
 80093fc:	0800b6a5 	.word	0x0800b6a5
 8009400:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009402:	2b00      	cmp	r3, #0
 8009404:	d1eb      	bne.n	80093de <__gethex+0x2ee>
 8009406:	e7d8      	b.n	80093ba <__gethex+0x2ca>
 8009408:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800940a:	2b00      	cmp	r3, #0
 800940c:	d1d5      	bne.n	80093ba <__gethex+0x2ca>
 800940e:	e7e6      	b.n	80093de <__gethex+0x2ee>
 8009410:	1e6f      	subs	r7, r5, #1
 8009412:	f1ba 0f00 	cmp.w	sl, #0
 8009416:	d131      	bne.n	800947c <__gethex+0x38c>
 8009418:	b127      	cbz	r7, 8009424 <__gethex+0x334>
 800941a:	4639      	mov	r1, r7
 800941c:	4620      	mov	r0, r4
 800941e:	f000 fe27 	bl	800a070 <__any_on>
 8009422:	4682      	mov	sl, r0
 8009424:	117b      	asrs	r3, r7, #5
 8009426:	2101      	movs	r1, #1
 8009428:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800942c:	f007 071f 	and.w	r7, r7, #31
 8009430:	fa01 f707 	lsl.w	r7, r1, r7
 8009434:	421f      	tst	r7, r3
 8009436:	4629      	mov	r1, r5
 8009438:	4620      	mov	r0, r4
 800943a:	bf18      	it	ne
 800943c:	f04a 0a02 	orrne.w	sl, sl, #2
 8009440:	1b76      	subs	r6, r6, r5
 8009442:	f7ff fded 	bl	8009020 <rshift>
 8009446:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800944a:	2702      	movs	r7, #2
 800944c:	f1ba 0f00 	cmp.w	sl, #0
 8009450:	d048      	beq.n	80094e4 <__gethex+0x3f4>
 8009452:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009456:	2b02      	cmp	r3, #2
 8009458:	d015      	beq.n	8009486 <__gethex+0x396>
 800945a:	2b03      	cmp	r3, #3
 800945c:	d017      	beq.n	800948e <__gethex+0x39e>
 800945e:	2b01      	cmp	r3, #1
 8009460:	d109      	bne.n	8009476 <__gethex+0x386>
 8009462:	f01a 0f02 	tst.w	sl, #2
 8009466:	d006      	beq.n	8009476 <__gethex+0x386>
 8009468:	f8d9 0000 	ldr.w	r0, [r9]
 800946c:	ea4a 0a00 	orr.w	sl, sl, r0
 8009470:	f01a 0f01 	tst.w	sl, #1
 8009474:	d10e      	bne.n	8009494 <__gethex+0x3a4>
 8009476:	f047 0710 	orr.w	r7, r7, #16
 800947a:	e033      	b.n	80094e4 <__gethex+0x3f4>
 800947c:	f04f 0a01 	mov.w	sl, #1
 8009480:	e7d0      	b.n	8009424 <__gethex+0x334>
 8009482:	2701      	movs	r7, #1
 8009484:	e7e2      	b.n	800944c <__gethex+0x35c>
 8009486:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009488:	f1c3 0301 	rsb	r3, r3, #1
 800948c:	9315      	str	r3, [sp, #84]	; 0x54
 800948e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009490:	2b00      	cmp	r3, #0
 8009492:	d0f0      	beq.n	8009476 <__gethex+0x386>
 8009494:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8009498:	f104 0314 	add.w	r3, r4, #20
 800949c:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80094a0:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80094a4:	f04f 0c00 	mov.w	ip, #0
 80094a8:	4618      	mov	r0, r3
 80094aa:	f853 2b04 	ldr.w	r2, [r3], #4
 80094ae:	f1b2 3fff 	cmp.w	r2, #4294967295
 80094b2:	d01c      	beq.n	80094ee <__gethex+0x3fe>
 80094b4:	3201      	adds	r2, #1
 80094b6:	6002      	str	r2, [r0, #0]
 80094b8:	2f02      	cmp	r7, #2
 80094ba:	f104 0314 	add.w	r3, r4, #20
 80094be:	d13f      	bne.n	8009540 <__gethex+0x450>
 80094c0:	f8d8 2000 	ldr.w	r2, [r8]
 80094c4:	3a01      	subs	r2, #1
 80094c6:	42b2      	cmp	r2, r6
 80094c8:	d10a      	bne.n	80094e0 <__gethex+0x3f0>
 80094ca:	1171      	asrs	r1, r6, #5
 80094cc:	2201      	movs	r2, #1
 80094ce:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80094d2:	f006 061f 	and.w	r6, r6, #31
 80094d6:	fa02 f606 	lsl.w	r6, r2, r6
 80094da:	421e      	tst	r6, r3
 80094dc:	bf18      	it	ne
 80094de:	4617      	movne	r7, r2
 80094e0:	f047 0720 	orr.w	r7, r7, #32
 80094e4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80094e6:	601c      	str	r4, [r3, #0]
 80094e8:	9b04      	ldr	r3, [sp, #16]
 80094ea:	601d      	str	r5, [r3, #0]
 80094ec:	e695      	b.n	800921a <__gethex+0x12a>
 80094ee:	4299      	cmp	r1, r3
 80094f0:	f843 cc04 	str.w	ip, [r3, #-4]
 80094f4:	d8d8      	bhi.n	80094a8 <__gethex+0x3b8>
 80094f6:	68a3      	ldr	r3, [r4, #8]
 80094f8:	459b      	cmp	fp, r3
 80094fa:	db19      	blt.n	8009530 <__gethex+0x440>
 80094fc:	6861      	ldr	r1, [r4, #4]
 80094fe:	ee18 0a10 	vmov	r0, s16
 8009502:	3101      	adds	r1, #1
 8009504:	f000 f91a 	bl	800973c <_Balloc>
 8009508:	4681      	mov	r9, r0
 800950a:	b918      	cbnz	r0, 8009514 <__gethex+0x424>
 800950c:	4b1a      	ldr	r3, [pc, #104]	; (8009578 <__gethex+0x488>)
 800950e:	4602      	mov	r2, r0
 8009510:	2184      	movs	r1, #132	; 0x84
 8009512:	e6a8      	b.n	8009266 <__gethex+0x176>
 8009514:	6922      	ldr	r2, [r4, #16]
 8009516:	3202      	adds	r2, #2
 8009518:	f104 010c 	add.w	r1, r4, #12
 800951c:	0092      	lsls	r2, r2, #2
 800951e:	300c      	adds	r0, #12
 8009520:	f7fd f99c 	bl	800685c <memcpy>
 8009524:	4621      	mov	r1, r4
 8009526:	ee18 0a10 	vmov	r0, s16
 800952a:	f000 f947 	bl	80097bc <_Bfree>
 800952e:	464c      	mov	r4, r9
 8009530:	6923      	ldr	r3, [r4, #16]
 8009532:	1c5a      	adds	r2, r3, #1
 8009534:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009538:	6122      	str	r2, [r4, #16]
 800953a:	2201      	movs	r2, #1
 800953c:	615a      	str	r2, [r3, #20]
 800953e:	e7bb      	b.n	80094b8 <__gethex+0x3c8>
 8009540:	6922      	ldr	r2, [r4, #16]
 8009542:	455a      	cmp	r2, fp
 8009544:	dd0b      	ble.n	800955e <__gethex+0x46e>
 8009546:	2101      	movs	r1, #1
 8009548:	4620      	mov	r0, r4
 800954a:	f7ff fd69 	bl	8009020 <rshift>
 800954e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009552:	3501      	adds	r5, #1
 8009554:	42ab      	cmp	r3, r5
 8009556:	f6ff aed0 	blt.w	80092fa <__gethex+0x20a>
 800955a:	2701      	movs	r7, #1
 800955c:	e7c0      	b.n	80094e0 <__gethex+0x3f0>
 800955e:	f016 061f 	ands.w	r6, r6, #31
 8009562:	d0fa      	beq.n	800955a <__gethex+0x46a>
 8009564:	449a      	add	sl, r3
 8009566:	f1c6 0620 	rsb	r6, r6, #32
 800956a:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800956e:	f000 f9db 	bl	8009928 <__hi0bits>
 8009572:	42b0      	cmp	r0, r6
 8009574:	dbe7      	blt.n	8009546 <__gethex+0x456>
 8009576:	e7f0      	b.n	800955a <__gethex+0x46a>
 8009578:	0800b694 	.word	0x0800b694

0800957c <L_shift>:
 800957c:	f1c2 0208 	rsb	r2, r2, #8
 8009580:	0092      	lsls	r2, r2, #2
 8009582:	b570      	push	{r4, r5, r6, lr}
 8009584:	f1c2 0620 	rsb	r6, r2, #32
 8009588:	6843      	ldr	r3, [r0, #4]
 800958a:	6804      	ldr	r4, [r0, #0]
 800958c:	fa03 f506 	lsl.w	r5, r3, r6
 8009590:	432c      	orrs	r4, r5
 8009592:	40d3      	lsrs	r3, r2
 8009594:	6004      	str	r4, [r0, #0]
 8009596:	f840 3f04 	str.w	r3, [r0, #4]!
 800959a:	4288      	cmp	r0, r1
 800959c:	d3f4      	bcc.n	8009588 <L_shift+0xc>
 800959e:	bd70      	pop	{r4, r5, r6, pc}

080095a0 <__match>:
 80095a0:	b530      	push	{r4, r5, lr}
 80095a2:	6803      	ldr	r3, [r0, #0]
 80095a4:	3301      	adds	r3, #1
 80095a6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80095aa:	b914      	cbnz	r4, 80095b2 <__match+0x12>
 80095ac:	6003      	str	r3, [r0, #0]
 80095ae:	2001      	movs	r0, #1
 80095b0:	bd30      	pop	{r4, r5, pc}
 80095b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80095b6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80095ba:	2d19      	cmp	r5, #25
 80095bc:	bf98      	it	ls
 80095be:	3220      	addls	r2, #32
 80095c0:	42a2      	cmp	r2, r4
 80095c2:	d0f0      	beq.n	80095a6 <__match+0x6>
 80095c4:	2000      	movs	r0, #0
 80095c6:	e7f3      	b.n	80095b0 <__match+0x10>

080095c8 <__hexnan>:
 80095c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095cc:	680b      	ldr	r3, [r1, #0]
 80095ce:	6801      	ldr	r1, [r0, #0]
 80095d0:	115e      	asrs	r6, r3, #5
 80095d2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80095d6:	f013 031f 	ands.w	r3, r3, #31
 80095da:	b087      	sub	sp, #28
 80095dc:	bf18      	it	ne
 80095de:	3604      	addne	r6, #4
 80095e0:	2500      	movs	r5, #0
 80095e2:	1f37      	subs	r7, r6, #4
 80095e4:	4682      	mov	sl, r0
 80095e6:	4690      	mov	r8, r2
 80095e8:	9301      	str	r3, [sp, #4]
 80095ea:	f846 5c04 	str.w	r5, [r6, #-4]
 80095ee:	46b9      	mov	r9, r7
 80095f0:	463c      	mov	r4, r7
 80095f2:	9502      	str	r5, [sp, #8]
 80095f4:	46ab      	mov	fp, r5
 80095f6:	784a      	ldrb	r2, [r1, #1]
 80095f8:	1c4b      	adds	r3, r1, #1
 80095fa:	9303      	str	r3, [sp, #12]
 80095fc:	b342      	cbz	r2, 8009650 <__hexnan+0x88>
 80095fe:	4610      	mov	r0, r2
 8009600:	9105      	str	r1, [sp, #20]
 8009602:	9204      	str	r2, [sp, #16]
 8009604:	f7ff fd5e 	bl	80090c4 <__hexdig_fun>
 8009608:	2800      	cmp	r0, #0
 800960a:	d14f      	bne.n	80096ac <__hexnan+0xe4>
 800960c:	9a04      	ldr	r2, [sp, #16]
 800960e:	9905      	ldr	r1, [sp, #20]
 8009610:	2a20      	cmp	r2, #32
 8009612:	d818      	bhi.n	8009646 <__hexnan+0x7e>
 8009614:	9b02      	ldr	r3, [sp, #8]
 8009616:	459b      	cmp	fp, r3
 8009618:	dd13      	ble.n	8009642 <__hexnan+0x7a>
 800961a:	454c      	cmp	r4, r9
 800961c:	d206      	bcs.n	800962c <__hexnan+0x64>
 800961e:	2d07      	cmp	r5, #7
 8009620:	dc04      	bgt.n	800962c <__hexnan+0x64>
 8009622:	462a      	mov	r2, r5
 8009624:	4649      	mov	r1, r9
 8009626:	4620      	mov	r0, r4
 8009628:	f7ff ffa8 	bl	800957c <L_shift>
 800962c:	4544      	cmp	r4, r8
 800962e:	d950      	bls.n	80096d2 <__hexnan+0x10a>
 8009630:	2300      	movs	r3, #0
 8009632:	f1a4 0904 	sub.w	r9, r4, #4
 8009636:	f844 3c04 	str.w	r3, [r4, #-4]
 800963a:	f8cd b008 	str.w	fp, [sp, #8]
 800963e:	464c      	mov	r4, r9
 8009640:	461d      	mov	r5, r3
 8009642:	9903      	ldr	r1, [sp, #12]
 8009644:	e7d7      	b.n	80095f6 <__hexnan+0x2e>
 8009646:	2a29      	cmp	r2, #41	; 0x29
 8009648:	d156      	bne.n	80096f8 <__hexnan+0x130>
 800964a:	3102      	adds	r1, #2
 800964c:	f8ca 1000 	str.w	r1, [sl]
 8009650:	f1bb 0f00 	cmp.w	fp, #0
 8009654:	d050      	beq.n	80096f8 <__hexnan+0x130>
 8009656:	454c      	cmp	r4, r9
 8009658:	d206      	bcs.n	8009668 <__hexnan+0xa0>
 800965a:	2d07      	cmp	r5, #7
 800965c:	dc04      	bgt.n	8009668 <__hexnan+0xa0>
 800965e:	462a      	mov	r2, r5
 8009660:	4649      	mov	r1, r9
 8009662:	4620      	mov	r0, r4
 8009664:	f7ff ff8a 	bl	800957c <L_shift>
 8009668:	4544      	cmp	r4, r8
 800966a:	d934      	bls.n	80096d6 <__hexnan+0x10e>
 800966c:	f1a8 0204 	sub.w	r2, r8, #4
 8009670:	4623      	mov	r3, r4
 8009672:	f853 1b04 	ldr.w	r1, [r3], #4
 8009676:	f842 1f04 	str.w	r1, [r2, #4]!
 800967a:	429f      	cmp	r7, r3
 800967c:	d2f9      	bcs.n	8009672 <__hexnan+0xaa>
 800967e:	1b3b      	subs	r3, r7, r4
 8009680:	f023 0303 	bic.w	r3, r3, #3
 8009684:	3304      	adds	r3, #4
 8009686:	3401      	adds	r4, #1
 8009688:	3e03      	subs	r6, #3
 800968a:	42b4      	cmp	r4, r6
 800968c:	bf88      	it	hi
 800968e:	2304      	movhi	r3, #4
 8009690:	4443      	add	r3, r8
 8009692:	2200      	movs	r2, #0
 8009694:	f843 2b04 	str.w	r2, [r3], #4
 8009698:	429f      	cmp	r7, r3
 800969a:	d2fb      	bcs.n	8009694 <__hexnan+0xcc>
 800969c:	683b      	ldr	r3, [r7, #0]
 800969e:	b91b      	cbnz	r3, 80096a8 <__hexnan+0xe0>
 80096a0:	4547      	cmp	r7, r8
 80096a2:	d127      	bne.n	80096f4 <__hexnan+0x12c>
 80096a4:	2301      	movs	r3, #1
 80096a6:	603b      	str	r3, [r7, #0]
 80096a8:	2005      	movs	r0, #5
 80096aa:	e026      	b.n	80096fa <__hexnan+0x132>
 80096ac:	3501      	adds	r5, #1
 80096ae:	2d08      	cmp	r5, #8
 80096b0:	f10b 0b01 	add.w	fp, fp, #1
 80096b4:	dd06      	ble.n	80096c4 <__hexnan+0xfc>
 80096b6:	4544      	cmp	r4, r8
 80096b8:	d9c3      	bls.n	8009642 <__hexnan+0x7a>
 80096ba:	2300      	movs	r3, #0
 80096bc:	f844 3c04 	str.w	r3, [r4, #-4]
 80096c0:	2501      	movs	r5, #1
 80096c2:	3c04      	subs	r4, #4
 80096c4:	6822      	ldr	r2, [r4, #0]
 80096c6:	f000 000f 	and.w	r0, r0, #15
 80096ca:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 80096ce:	6022      	str	r2, [r4, #0]
 80096d0:	e7b7      	b.n	8009642 <__hexnan+0x7a>
 80096d2:	2508      	movs	r5, #8
 80096d4:	e7b5      	b.n	8009642 <__hexnan+0x7a>
 80096d6:	9b01      	ldr	r3, [sp, #4]
 80096d8:	2b00      	cmp	r3, #0
 80096da:	d0df      	beq.n	800969c <__hexnan+0xd4>
 80096dc:	f04f 32ff 	mov.w	r2, #4294967295
 80096e0:	f1c3 0320 	rsb	r3, r3, #32
 80096e4:	fa22 f303 	lsr.w	r3, r2, r3
 80096e8:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80096ec:	401a      	ands	r2, r3
 80096ee:	f846 2c04 	str.w	r2, [r6, #-4]
 80096f2:	e7d3      	b.n	800969c <__hexnan+0xd4>
 80096f4:	3f04      	subs	r7, #4
 80096f6:	e7d1      	b.n	800969c <__hexnan+0xd4>
 80096f8:	2004      	movs	r0, #4
 80096fa:	b007      	add	sp, #28
 80096fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009700 <_localeconv_r>:
 8009700:	4800      	ldr	r0, [pc, #0]	; (8009704 <_localeconv_r+0x4>)
 8009702:	4770      	bx	lr
 8009704:	20000174 	.word	0x20000174

08009708 <malloc>:
 8009708:	4b02      	ldr	r3, [pc, #8]	; (8009714 <malloc+0xc>)
 800970a:	4601      	mov	r1, r0
 800970c:	6818      	ldr	r0, [r3, #0]
 800970e:	f000 bd2f 	b.w	800a170 <_malloc_r>
 8009712:	bf00      	nop
 8009714:	2000001c 	.word	0x2000001c

08009718 <__ascii_mbtowc>:
 8009718:	b082      	sub	sp, #8
 800971a:	b901      	cbnz	r1, 800971e <__ascii_mbtowc+0x6>
 800971c:	a901      	add	r1, sp, #4
 800971e:	b142      	cbz	r2, 8009732 <__ascii_mbtowc+0x1a>
 8009720:	b14b      	cbz	r3, 8009736 <__ascii_mbtowc+0x1e>
 8009722:	7813      	ldrb	r3, [r2, #0]
 8009724:	600b      	str	r3, [r1, #0]
 8009726:	7812      	ldrb	r2, [r2, #0]
 8009728:	1e10      	subs	r0, r2, #0
 800972a:	bf18      	it	ne
 800972c:	2001      	movne	r0, #1
 800972e:	b002      	add	sp, #8
 8009730:	4770      	bx	lr
 8009732:	4610      	mov	r0, r2
 8009734:	e7fb      	b.n	800972e <__ascii_mbtowc+0x16>
 8009736:	f06f 0001 	mvn.w	r0, #1
 800973a:	e7f8      	b.n	800972e <__ascii_mbtowc+0x16>

0800973c <_Balloc>:
 800973c:	b570      	push	{r4, r5, r6, lr}
 800973e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009740:	4604      	mov	r4, r0
 8009742:	460d      	mov	r5, r1
 8009744:	b976      	cbnz	r6, 8009764 <_Balloc+0x28>
 8009746:	2010      	movs	r0, #16
 8009748:	f7ff ffde 	bl	8009708 <malloc>
 800974c:	4602      	mov	r2, r0
 800974e:	6260      	str	r0, [r4, #36]	; 0x24
 8009750:	b920      	cbnz	r0, 800975c <_Balloc+0x20>
 8009752:	4b18      	ldr	r3, [pc, #96]	; (80097b4 <_Balloc+0x78>)
 8009754:	4818      	ldr	r0, [pc, #96]	; (80097b8 <_Balloc+0x7c>)
 8009756:	2166      	movs	r1, #102	; 0x66
 8009758:	f000 fefa 	bl	800a550 <__assert_func>
 800975c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009760:	6006      	str	r6, [r0, #0]
 8009762:	60c6      	str	r6, [r0, #12]
 8009764:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8009766:	68f3      	ldr	r3, [r6, #12]
 8009768:	b183      	cbz	r3, 800978c <_Balloc+0x50>
 800976a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800976c:	68db      	ldr	r3, [r3, #12]
 800976e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009772:	b9b8      	cbnz	r0, 80097a4 <_Balloc+0x68>
 8009774:	2101      	movs	r1, #1
 8009776:	fa01 f605 	lsl.w	r6, r1, r5
 800977a:	1d72      	adds	r2, r6, #5
 800977c:	0092      	lsls	r2, r2, #2
 800977e:	4620      	mov	r0, r4
 8009780:	f000 fc97 	bl	800a0b2 <_calloc_r>
 8009784:	b160      	cbz	r0, 80097a0 <_Balloc+0x64>
 8009786:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800978a:	e00e      	b.n	80097aa <_Balloc+0x6e>
 800978c:	2221      	movs	r2, #33	; 0x21
 800978e:	2104      	movs	r1, #4
 8009790:	4620      	mov	r0, r4
 8009792:	f000 fc8e 	bl	800a0b2 <_calloc_r>
 8009796:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009798:	60f0      	str	r0, [r6, #12]
 800979a:	68db      	ldr	r3, [r3, #12]
 800979c:	2b00      	cmp	r3, #0
 800979e:	d1e4      	bne.n	800976a <_Balloc+0x2e>
 80097a0:	2000      	movs	r0, #0
 80097a2:	bd70      	pop	{r4, r5, r6, pc}
 80097a4:	6802      	ldr	r2, [r0, #0]
 80097a6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80097aa:	2300      	movs	r3, #0
 80097ac:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80097b0:	e7f7      	b.n	80097a2 <_Balloc+0x66>
 80097b2:	bf00      	nop
 80097b4:	0800b61e 	.word	0x0800b61e
 80097b8:	0800b724 	.word	0x0800b724

080097bc <_Bfree>:
 80097bc:	b570      	push	{r4, r5, r6, lr}
 80097be:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80097c0:	4605      	mov	r5, r0
 80097c2:	460c      	mov	r4, r1
 80097c4:	b976      	cbnz	r6, 80097e4 <_Bfree+0x28>
 80097c6:	2010      	movs	r0, #16
 80097c8:	f7ff ff9e 	bl	8009708 <malloc>
 80097cc:	4602      	mov	r2, r0
 80097ce:	6268      	str	r0, [r5, #36]	; 0x24
 80097d0:	b920      	cbnz	r0, 80097dc <_Bfree+0x20>
 80097d2:	4b09      	ldr	r3, [pc, #36]	; (80097f8 <_Bfree+0x3c>)
 80097d4:	4809      	ldr	r0, [pc, #36]	; (80097fc <_Bfree+0x40>)
 80097d6:	218a      	movs	r1, #138	; 0x8a
 80097d8:	f000 feba 	bl	800a550 <__assert_func>
 80097dc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80097e0:	6006      	str	r6, [r0, #0]
 80097e2:	60c6      	str	r6, [r0, #12]
 80097e4:	b13c      	cbz	r4, 80097f6 <_Bfree+0x3a>
 80097e6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80097e8:	6862      	ldr	r2, [r4, #4]
 80097ea:	68db      	ldr	r3, [r3, #12]
 80097ec:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80097f0:	6021      	str	r1, [r4, #0]
 80097f2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80097f6:	bd70      	pop	{r4, r5, r6, pc}
 80097f8:	0800b61e 	.word	0x0800b61e
 80097fc:	0800b724 	.word	0x0800b724

08009800 <__multadd>:
 8009800:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009804:	690e      	ldr	r6, [r1, #16]
 8009806:	4607      	mov	r7, r0
 8009808:	4698      	mov	r8, r3
 800980a:	460c      	mov	r4, r1
 800980c:	f101 0014 	add.w	r0, r1, #20
 8009810:	2300      	movs	r3, #0
 8009812:	6805      	ldr	r5, [r0, #0]
 8009814:	b2a9      	uxth	r1, r5
 8009816:	fb02 8101 	mla	r1, r2, r1, r8
 800981a:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800981e:	0c2d      	lsrs	r5, r5, #16
 8009820:	fb02 c505 	mla	r5, r2, r5, ip
 8009824:	b289      	uxth	r1, r1
 8009826:	3301      	adds	r3, #1
 8009828:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800982c:	429e      	cmp	r6, r3
 800982e:	f840 1b04 	str.w	r1, [r0], #4
 8009832:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8009836:	dcec      	bgt.n	8009812 <__multadd+0x12>
 8009838:	f1b8 0f00 	cmp.w	r8, #0
 800983c:	d022      	beq.n	8009884 <__multadd+0x84>
 800983e:	68a3      	ldr	r3, [r4, #8]
 8009840:	42b3      	cmp	r3, r6
 8009842:	dc19      	bgt.n	8009878 <__multadd+0x78>
 8009844:	6861      	ldr	r1, [r4, #4]
 8009846:	4638      	mov	r0, r7
 8009848:	3101      	adds	r1, #1
 800984a:	f7ff ff77 	bl	800973c <_Balloc>
 800984e:	4605      	mov	r5, r0
 8009850:	b928      	cbnz	r0, 800985e <__multadd+0x5e>
 8009852:	4602      	mov	r2, r0
 8009854:	4b0d      	ldr	r3, [pc, #52]	; (800988c <__multadd+0x8c>)
 8009856:	480e      	ldr	r0, [pc, #56]	; (8009890 <__multadd+0x90>)
 8009858:	21b5      	movs	r1, #181	; 0xb5
 800985a:	f000 fe79 	bl	800a550 <__assert_func>
 800985e:	6922      	ldr	r2, [r4, #16]
 8009860:	3202      	adds	r2, #2
 8009862:	f104 010c 	add.w	r1, r4, #12
 8009866:	0092      	lsls	r2, r2, #2
 8009868:	300c      	adds	r0, #12
 800986a:	f7fc fff7 	bl	800685c <memcpy>
 800986e:	4621      	mov	r1, r4
 8009870:	4638      	mov	r0, r7
 8009872:	f7ff ffa3 	bl	80097bc <_Bfree>
 8009876:	462c      	mov	r4, r5
 8009878:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800987c:	3601      	adds	r6, #1
 800987e:	f8c3 8014 	str.w	r8, [r3, #20]
 8009882:	6126      	str	r6, [r4, #16]
 8009884:	4620      	mov	r0, r4
 8009886:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800988a:	bf00      	nop
 800988c:	0800b694 	.word	0x0800b694
 8009890:	0800b724 	.word	0x0800b724

08009894 <__s2b>:
 8009894:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009898:	460c      	mov	r4, r1
 800989a:	4615      	mov	r5, r2
 800989c:	461f      	mov	r7, r3
 800989e:	2209      	movs	r2, #9
 80098a0:	3308      	adds	r3, #8
 80098a2:	4606      	mov	r6, r0
 80098a4:	fb93 f3f2 	sdiv	r3, r3, r2
 80098a8:	2100      	movs	r1, #0
 80098aa:	2201      	movs	r2, #1
 80098ac:	429a      	cmp	r2, r3
 80098ae:	db09      	blt.n	80098c4 <__s2b+0x30>
 80098b0:	4630      	mov	r0, r6
 80098b2:	f7ff ff43 	bl	800973c <_Balloc>
 80098b6:	b940      	cbnz	r0, 80098ca <__s2b+0x36>
 80098b8:	4602      	mov	r2, r0
 80098ba:	4b19      	ldr	r3, [pc, #100]	; (8009920 <__s2b+0x8c>)
 80098bc:	4819      	ldr	r0, [pc, #100]	; (8009924 <__s2b+0x90>)
 80098be:	21ce      	movs	r1, #206	; 0xce
 80098c0:	f000 fe46 	bl	800a550 <__assert_func>
 80098c4:	0052      	lsls	r2, r2, #1
 80098c6:	3101      	adds	r1, #1
 80098c8:	e7f0      	b.n	80098ac <__s2b+0x18>
 80098ca:	9b08      	ldr	r3, [sp, #32]
 80098cc:	6143      	str	r3, [r0, #20]
 80098ce:	2d09      	cmp	r5, #9
 80098d0:	f04f 0301 	mov.w	r3, #1
 80098d4:	6103      	str	r3, [r0, #16]
 80098d6:	dd16      	ble.n	8009906 <__s2b+0x72>
 80098d8:	f104 0909 	add.w	r9, r4, #9
 80098dc:	46c8      	mov	r8, r9
 80098de:	442c      	add	r4, r5
 80098e0:	f818 3b01 	ldrb.w	r3, [r8], #1
 80098e4:	4601      	mov	r1, r0
 80098e6:	3b30      	subs	r3, #48	; 0x30
 80098e8:	220a      	movs	r2, #10
 80098ea:	4630      	mov	r0, r6
 80098ec:	f7ff ff88 	bl	8009800 <__multadd>
 80098f0:	45a0      	cmp	r8, r4
 80098f2:	d1f5      	bne.n	80098e0 <__s2b+0x4c>
 80098f4:	f1a5 0408 	sub.w	r4, r5, #8
 80098f8:	444c      	add	r4, r9
 80098fa:	1b2d      	subs	r5, r5, r4
 80098fc:	1963      	adds	r3, r4, r5
 80098fe:	42bb      	cmp	r3, r7
 8009900:	db04      	blt.n	800990c <__s2b+0x78>
 8009902:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009906:	340a      	adds	r4, #10
 8009908:	2509      	movs	r5, #9
 800990a:	e7f6      	b.n	80098fa <__s2b+0x66>
 800990c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009910:	4601      	mov	r1, r0
 8009912:	3b30      	subs	r3, #48	; 0x30
 8009914:	220a      	movs	r2, #10
 8009916:	4630      	mov	r0, r6
 8009918:	f7ff ff72 	bl	8009800 <__multadd>
 800991c:	e7ee      	b.n	80098fc <__s2b+0x68>
 800991e:	bf00      	nop
 8009920:	0800b694 	.word	0x0800b694
 8009924:	0800b724 	.word	0x0800b724

08009928 <__hi0bits>:
 8009928:	0c03      	lsrs	r3, r0, #16
 800992a:	041b      	lsls	r3, r3, #16
 800992c:	b9d3      	cbnz	r3, 8009964 <__hi0bits+0x3c>
 800992e:	0400      	lsls	r0, r0, #16
 8009930:	2310      	movs	r3, #16
 8009932:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8009936:	bf04      	itt	eq
 8009938:	0200      	lsleq	r0, r0, #8
 800993a:	3308      	addeq	r3, #8
 800993c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009940:	bf04      	itt	eq
 8009942:	0100      	lsleq	r0, r0, #4
 8009944:	3304      	addeq	r3, #4
 8009946:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800994a:	bf04      	itt	eq
 800994c:	0080      	lsleq	r0, r0, #2
 800994e:	3302      	addeq	r3, #2
 8009950:	2800      	cmp	r0, #0
 8009952:	db05      	blt.n	8009960 <__hi0bits+0x38>
 8009954:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8009958:	f103 0301 	add.w	r3, r3, #1
 800995c:	bf08      	it	eq
 800995e:	2320      	moveq	r3, #32
 8009960:	4618      	mov	r0, r3
 8009962:	4770      	bx	lr
 8009964:	2300      	movs	r3, #0
 8009966:	e7e4      	b.n	8009932 <__hi0bits+0xa>

08009968 <__lo0bits>:
 8009968:	6803      	ldr	r3, [r0, #0]
 800996a:	f013 0207 	ands.w	r2, r3, #7
 800996e:	4601      	mov	r1, r0
 8009970:	d00b      	beq.n	800998a <__lo0bits+0x22>
 8009972:	07da      	lsls	r2, r3, #31
 8009974:	d424      	bmi.n	80099c0 <__lo0bits+0x58>
 8009976:	0798      	lsls	r0, r3, #30
 8009978:	bf49      	itett	mi
 800997a:	085b      	lsrmi	r3, r3, #1
 800997c:	089b      	lsrpl	r3, r3, #2
 800997e:	2001      	movmi	r0, #1
 8009980:	600b      	strmi	r3, [r1, #0]
 8009982:	bf5c      	itt	pl
 8009984:	600b      	strpl	r3, [r1, #0]
 8009986:	2002      	movpl	r0, #2
 8009988:	4770      	bx	lr
 800998a:	b298      	uxth	r0, r3
 800998c:	b9b0      	cbnz	r0, 80099bc <__lo0bits+0x54>
 800998e:	0c1b      	lsrs	r3, r3, #16
 8009990:	2010      	movs	r0, #16
 8009992:	f013 0fff 	tst.w	r3, #255	; 0xff
 8009996:	bf04      	itt	eq
 8009998:	0a1b      	lsreq	r3, r3, #8
 800999a:	3008      	addeq	r0, #8
 800999c:	071a      	lsls	r2, r3, #28
 800999e:	bf04      	itt	eq
 80099a0:	091b      	lsreq	r3, r3, #4
 80099a2:	3004      	addeq	r0, #4
 80099a4:	079a      	lsls	r2, r3, #30
 80099a6:	bf04      	itt	eq
 80099a8:	089b      	lsreq	r3, r3, #2
 80099aa:	3002      	addeq	r0, #2
 80099ac:	07da      	lsls	r2, r3, #31
 80099ae:	d403      	bmi.n	80099b8 <__lo0bits+0x50>
 80099b0:	085b      	lsrs	r3, r3, #1
 80099b2:	f100 0001 	add.w	r0, r0, #1
 80099b6:	d005      	beq.n	80099c4 <__lo0bits+0x5c>
 80099b8:	600b      	str	r3, [r1, #0]
 80099ba:	4770      	bx	lr
 80099bc:	4610      	mov	r0, r2
 80099be:	e7e8      	b.n	8009992 <__lo0bits+0x2a>
 80099c0:	2000      	movs	r0, #0
 80099c2:	4770      	bx	lr
 80099c4:	2020      	movs	r0, #32
 80099c6:	4770      	bx	lr

080099c8 <__i2b>:
 80099c8:	b510      	push	{r4, lr}
 80099ca:	460c      	mov	r4, r1
 80099cc:	2101      	movs	r1, #1
 80099ce:	f7ff feb5 	bl	800973c <_Balloc>
 80099d2:	4602      	mov	r2, r0
 80099d4:	b928      	cbnz	r0, 80099e2 <__i2b+0x1a>
 80099d6:	4b05      	ldr	r3, [pc, #20]	; (80099ec <__i2b+0x24>)
 80099d8:	4805      	ldr	r0, [pc, #20]	; (80099f0 <__i2b+0x28>)
 80099da:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80099de:	f000 fdb7 	bl	800a550 <__assert_func>
 80099e2:	2301      	movs	r3, #1
 80099e4:	6144      	str	r4, [r0, #20]
 80099e6:	6103      	str	r3, [r0, #16]
 80099e8:	bd10      	pop	{r4, pc}
 80099ea:	bf00      	nop
 80099ec:	0800b694 	.word	0x0800b694
 80099f0:	0800b724 	.word	0x0800b724

080099f4 <__multiply>:
 80099f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80099f8:	4614      	mov	r4, r2
 80099fa:	690a      	ldr	r2, [r1, #16]
 80099fc:	6923      	ldr	r3, [r4, #16]
 80099fe:	429a      	cmp	r2, r3
 8009a00:	bfb8      	it	lt
 8009a02:	460b      	movlt	r3, r1
 8009a04:	460d      	mov	r5, r1
 8009a06:	bfbc      	itt	lt
 8009a08:	4625      	movlt	r5, r4
 8009a0a:	461c      	movlt	r4, r3
 8009a0c:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8009a10:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8009a14:	68ab      	ldr	r3, [r5, #8]
 8009a16:	6869      	ldr	r1, [r5, #4]
 8009a18:	eb0a 0709 	add.w	r7, sl, r9
 8009a1c:	42bb      	cmp	r3, r7
 8009a1e:	b085      	sub	sp, #20
 8009a20:	bfb8      	it	lt
 8009a22:	3101      	addlt	r1, #1
 8009a24:	f7ff fe8a 	bl	800973c <_Balloc>
 8009a28:	b930      	cbnz	r0, 8009a38 <__multiply+0x44>
 8009a2a:	4602      	mov	r2, r0
 8009a2c:	4b42      	ldr	r3, [pc, #264]	; (8009b38 <__multiply+0x144>)
 8009a2e:	4843      	ldr	r0, [pc, #268]	; (8009b3c <__multiply+0x148>)
 8009a30:	f240 115d 	movw	r1, #349	; 0x15d
 8009a34:	f000 fd8c 	bl	800a550 <__assert_func>
 8009a38:	f100 0614 	add.w	r6, r0, #20
 8009a3c:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8009a40:	4633      	mov	r3, r6
 8009a42:	2200      	movs	r2, #0
 8009a44:	4543      	cmp	r3, r8
 8009a46:	d31e      	bcc.n	8009a86 <__multiply+0x92>
 8009a48:	f105 0c14 	add.w	ip, r5, #20
 8009a4c:	f104 0314 	add.w	r3, r4, #20
 8009a50:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8009a54:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8009a58:	9202      	str	r2, [sp, #8]
 8009a5a:	ebac 0205 	sub.w	r2, ip, r5
 8009a5e:	3a15      	subs	r2, #21
 8009a60:	f022 0203 	bic.w	r2, r2, #3
 8009a64:	3204      	adds	r2, #4
 8009a66:	f105 0115 	add.w	r1, r5, #21
 8009a6a:	458c      	cmp	ip, r1
 8009a6c:	bf38      	it	cc
 8009a6e:	2204      	movcc	r2, #4
 8009a70:	9201      	str	r2, [sp, #4]
 8009a72:	9a02      	ldr	r2, [sp, #8]
 8009a74:	9303      	str	r3, [sp, #12]
 8009a76:	429a      	cmp	r2, r3
 8009a78:	d808      	bhi.n	8009a8c <__multiply+0x98>
 8009a7a:	2f00      	cmp	r7, #0
 8009a7c:	dc55      	bgt.n	8009b2a <__multiply+0x136>
 8009a7e:	6107      	str	r7, [r0, #16]
 8009a80:	b005      	add	sp, #20
 8009a82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a86:	f843 2b04 	str.w	r2, [r3], #4
 8009a8a:	e7db      	b.n	8009a44 <__multiply+0x50>
 8009a8c:	f8b3 a000 	ldrh.w	sl, [r3]
 8009a90:	f1ba 0f00 	cmp.w	sl, #0
 8009a94:	d020      	beq.n	8009ad8 <__multiply+0xe4>
 8009a96:	f105 0e14 	add.w	lr, r5, #20
 8009a9a:	46b1      	mov	r9, r6
 8009a9c:	2200      	movs	r2, #0
 8009a9e:	f85e 4b04 	ldr.w	r4, [lr], #4
 8009aa2:	f8d9 b000 	ldr.w	fp, [r9]
 8009aa6:	b2a1      	uxth	r1, r4
 8009aa8:	fa1f fb8b 	uxth.w	fp, fp
 8009aac:	fb0a b101 	mla	r1, sl, r1, fp
 8009ab0:	4411      	add	r1, r2
 8009ab2:	f8d9 2000 	ldr.w	r2, [r9]
 8009ab6:	0c24      	lsrs	r4, r4, #16
 8009ab8:	0c12      	lsrs	r2, r2, #16
 8009aba:	fb0a 2404 	mla	r4, sl, r4, r2
 8009abe:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8009ac2:	b289      	uxth	r1, r1
 8009ac4:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8009ac8:	45f4      	cmp	ip, lr
 8009aca:	f849 1b04 	str.w	r1, [r9], #4
 8009ace:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8009ad2:	d8e4      	bhi.n	8009a9e <__multiply+0xaa>
 8009ad4:	9901      	ldr	r1, [sp, #4]
 8009ad6:	5072      	str	r2, [r6, r1]
 8009ad8:	9a03      	ldr	r2, [sp, #12]
 8009ada:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009ade:	3304      	adds	r3, #4
 8009ae0:	f1b9 0f00 	cmp.w	r9, #0
 8009ae4:	d01f      	beq.n	8009b26 <__multiply+0x132>
 8009ae6:	6834      	ldr	r4, [r6, #0]
 8009ae8:	f105 0114 	add.w	r1, r5, #20
 8009aec:	46b6      	mov	lr, r6
 8009aee:	f04f 0a00 	mov.w	sl, #0
 8009af2:	880a      	ldrh	r2, [r1, #0]
 8009af4:	f8be b002 	ldrh.w	fp, [lr, #2]
 8009af8:	fb09 b202 	mla	r2, r9, r2, fp
 8009afc:	4492      	add	sl, r2
 8009afe:	b2a4      	uxth	r4, r4
 8009b00:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8009b04:	f84e 4b04 	str.w	r4, [lr], #4
 8009b08:	f851 4b04 	ldr.w	r4, [r1], #4
 8009b0c:	f8be 2000 	ldrh.w	r2, [lr]
 8009b10:	0c24      	lsrs	r4, r4, #16
 8009b12:	fb09 2404 	mla	r4, r9, r4, r2
 8009b16:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8009b1a:	458c      	cmp	ip, r1
 8009b1c:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8009b20:	d8e7      	bhi.n	8009af2 <__multiply+0xfe>
 8009b22:	9a01      	ldr	r2, [sp, #4]
 8009b24:	50b4      	str	r4, [r6, r2]
 8009b26:	3604      	adds	r6, #4
 8009b28:	e7a3      	b.n	8009a72 <__multiply+0x7e>
 8009b2a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	d1a5      	bne.n	8009a7e <__multiply+0x8a>
 8009b32:	3f01      	subs	r7, #1
 8009b34:	e7a1      	b.n	8009a7a <__multiply+0x86>
 8009b36:	bf00      	nop
 8009b38:	0800b694 	.word	0x0800b694
 8009b3c:	0800b724 	.word	0x0800b724

08009b40 <__pow5mult>:
 8009b40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009b44:	4615      	mov	r5, r2
 8009b46:	f012 0203 	ands.w	r2, r2, #3
 8009b4a:	4606      	mov	r6, r0
 8009b4c:	460f      	mov	r7, r1
 8009b4e:	d007      	beq.n	8009b60 <__pow5mult+0x20>
 8009b50:	4c25      	ldr	r4, [pc, #148]	; (8009be8 <__pow5mult+0xa8>)
 8009b52:	3a01      	subs	r2, #1
 8009b54:	2300      	movs	r3, #0
 8009b56:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009b5a:	f7ff fe51 	bl	8009800 <__multadd>
 8009b5e:	4607      	mov	r7, r0
 8009b60:	10ad      	asrs	r5, r5, #2
 8009b62:	d03d      	beq.n	8009be0 <__pow5mult+0xa0>
 8009b64:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8009b66:	b97c      	cbnz	r4, 8009b88 <__pow5mult+0x48>
 8009b68:	2010      	movs	r0, #16
 8009b6a:	f7ff fdcd 	bl	8009708 <malloc>
 8009b6e:	4602      	mov	r2, r0
 8009b70:	6270      	str	r0, [r6, #36]	; 0x24
 8009b72:	b928      	cbnz	r0, 8009b80 <__pow5mult+0x40>
 8009b74:	4b1d      	ldr	r3, [pc, #116]	; (8009bec <__pow5mult+0xac>)
 8009b76:	481e      	ldr	r0, [pc, #120]	; (8009bf0 <__pow5mult+0xb0>)
 8009b78:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8009b7c:	f000 fce8 	bl	800a550 <__assert_func>
 8009b80:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009b84:	6004      	str	r4, [r0, #0]
 8009b86:	60c4      	str	r4, [r0, #12]
 8009b88:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009b8c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009b90:	b94c      	cbnz	r4, 8009ba6 <__pow5mult+0x66>
 8009b92:	f240 2171 	movw	r1, #625	; 0x271
 8009b96:	4630      	mov	r0, r6
 8009b98:	f7ff ff16 	bl	80099c8 <__i2b>
 8009b9c:	2300      	movs	r3, #0
 8009b9e:	f8c8 0008 	str.w	r0, [r8, #8]
 8009ba2:	4604      	mov	r4, r0
 8009ba4:	6003      	str	r3, [r0, #0]
 8009ba6:	f04f 0900 	mov.w	r9, #0
 8009baa:	07eb      	lsls	r3, r5, #31
 8009bac:	d50a      	bpl.n	8009bc4 <__pow5mult+0x84>
 8009bae:	4639      	mov	r1, r7
 8009bb0:	4622      	mov	r2, r4
 8009bb2:	4630      	mov	r0, r6
 8009bb4:	f7ff ff1e 	bl	80099f4 <__multiply>
 8009bb8:	4639      	mov	r1, r7
 8009bba:	4680      	mov	r8, r0
 8009bbc:	4630      	mov	r0, r6
 8009bbe:	f7ff fdfd 	bl	80097bc <_Bfree>
 8009bc2:	4647      	mov	r7, r8
 8009bc4:	106d      	asrs	r5, r5, #1
 8009bc6:	d00b      	beq.n	8009be0 <__pow5mult+0xa0>
 8009bc8:	6820      	ldr	r0, [r4, #0]
 8009bca:	b938      	cbnz	r0, 8009bdc <__pow5mult+0x9c>
 8009bcc:	4622      	mov	r2, r4
 8009bce:	4621      	mov	r1, r4
 8009bd0:	4630      	mov	r0, r6
 8009bd2:	f7ff ff0f 	bl	80099f4 <__multiply>
 8009bd6:	6020      	str	r0, [r4, #0]
 8009bd8:	f8c0 9000 	str.w	r9, [r0]
 8009bdc:	4604      	mov	r4, r0
 8009bde:	e7e4      	b.n	8009baa <__pow5mult+0x6a>
 8009be0:	4638      	mov	r0, r7
 8009be2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009be6:	bf00      	nop
 8009be8:	0800b878 	.word	0x0800b878
 8009bec:	0800b61e 	.word	0x0800b61e
 8009bf0:	0800b724 	.word	0x0800b724

08009bf4 <__lshift>:
 8009bf4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009bf8:	460c      	mov	r4, r1
 8009bfa:	6849      	ldr	r1, [r1, #4]
 8009bfc:	6923      	ldr	r3, [r4, #16]
 8009bfe:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009c02:	68a3      	ldr	r3, [r4, #8]
 8009c04:	4607      	mov	r7, r0
 8009c06:	4691      	mov	r9, r2
 8009c08:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009c0c:	f108 0601 	add.w	r6, r8, #1
 8009c10:	42b3      	cmp	r3, r6
 8009c12:	db0b      	blt.n	8009c2c <__lshift+0x38>
 8009c14:	4638      	mov	r0, r7
 8009c16:	f7ff fd91 	bl	800973c <_Balloc>
 8009c1a:	4605      	mov	r5, r0
 8009c1c:	b948      	cbnz	r0, 8009c32 <__lshift+0x3e>
 8009c1e:	4602      	mov	r2, r0
 8009c20:	4b28      	ldr	r3, [pc, #160]	; (8009cc4 <__lshift+0xd0>)
 8009c22:	4829      	ldr	r0, [pc, #164]	; (8009cc8 <__lshift+0xd4>)
 8009c24:	f240 11d9 	movw	r1, #473	; 0x1d9
 8009c28:	f000 fc92 	bl	800a550 <__assert_func>
 8009c2c:	3101      	adds	r1, #1
 8009c2e:	005b      	lsls	r3, r3, #1
 8009c30:	e7ee      	b.n	8009c10 <__lshift+0x1c>
 8009c32:	2300      	movs	r3, #0
 8009c34:	f100 0114 	add.w	r1, r0, #20
 8009c38:	f100 0210 	add.w	r2, r0, #16
 8009c3c:	4618      	mov	r0, r3
 8009c3e:	4553      	cmp	r3, sl
 8009c40:	db33      	blt.n	8009caa <__lshift+0xb6>
 8009c42:	6920      	ldr	r0, [r4, #16]
 8009c44:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009c48:	f104 0314 	add.w	r3, r4, #20
 8009c4c:	f019 091f 	ands.w	r9, r9, #31
 8009c50:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009c54:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009c58:	d02b      	beq.n	8009cb2 <__lshift+0xbe>
 8009c5a:	f1c9 0e20 	rsb	lr, r9, #32
 8009c5e:	468a      	mov	sl, r1
 8009c60:	2200      	movs	r2, #0
 8009c62:	6818      	ldr	r0, [r3, #0]
 8009c64:	fa00 f009 	lsl.w	r0, r0, r9
 8009c68:	4302      	orrs	r2, r0
 8009c6a:	f84a 2b04 	str.w	r2, [sl], #4
 8009c6e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009c72:	459c      	cmp	ip, r3
 8009c74:	fa22 f20e 	lsr.w	r2, r2, lr
 8009c78:	d8f3      	bhi.n	8009c62 <__lshift+0x6e>
 8009c7a:	ebac 0304 	sub.w	r3, ip, r4
 8009c7e:	3b15      	subs	r3, #21
 8009c80:	f023 0303 	bic.w	r3, r3, #3
 8009c84:	3304      	adds	r3, #4
 8009c86:	f104 0015 	add.w	r0, r4, #21
 8009c8a:	4584      	cmp	ip, r0
 8009c8c:	bf38      	it	cc
 8009c8e:	2304      	movcc	r3, #4
 8009c90:	50ca      	str	r2, [r1, r3]
 8009c92:	b10a      	cbz	r2, 8009c98 <__lshift+0xa4>
 8009c94:	f108 0602 	add.w	r6, r8, #2
 8009c98:	3e01      	subs	r6, #1
 8009c9a:	4638      	mov	r0, r7
 8009c9c:	612e      	str	r6, [r5, #16]
 8009c9e:	4621      	mov	r1, r4
 8009ca0:	f7ff fd8c 	bl	80097bc <_Bfree>
 8009ca4:	4628      	mov	r0, r5
 8009ca6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009caa:	f842 0f04 	str.w	r0, [r2, #4]!
 8009cae:	3301      	adds	r3, #1
 8009cb0:	e7c5      	b.n	8009c3e <__lshift+0x4a>
 8009cb2:	3904      	subs	r1, #4
 8009cb4:	f853 2b04 	ldr.w	r2, [r3], #4
 8009cb8:	f841 2f04 	str.w	r2, [r1, #4]!
 8009cbc:	459c      	cmp	ip, r3
 8009cbe:	d8f9      	bhi.n	8009cb4 <__lshift+0xc0>
 8009cc0:	e7ea      	b.n	8009c98 <__lshift+0xa4>
 8009cc2:	bf00      	nop
 8009cc4:	0800b694 	.word	0x0800b694
 8009cc8:	0800b724 	.word	0x0800b724

08009ccc <__mcmp>:
 8009ccc:	b530      	push	{r4, r5, lr}
 8009cce:	6902      	ldr	r2, [r0, #16]
 8009cd0:	690c      	ldr	r4, [r1, #16]
 8009cd2:	1b12      	subs	r2, r2, r4
 8009cd4:	d10e      	bne.n	8009cf4 <__mcmp+0x28>
 8009cd6:	f100 0314 	add.w	r3, r0, #20
 8009cda:	3114      	adds	r1, #20
 8009cdc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8009ce0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8009ce4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8009ce8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8009cec:	42a5      	cmp	r5, r4
 8009cee:	d003      	beq.n	8009cf8 <__mcmp+0x2c>
 8009cf0:	d305      	bcc.n	8009cfe <__mcmp+0x32>
 8009cf2:	2201      	movs	r2, #1
 8009cf4:	4610      	mov	r0, r2
 8009cf6:	bd30      	pop	{r4, r5, pc}
 8009cf8:	4283      	cmp	r3, r0
 8009cfa:	d3f3      	bcc.n	8009ce4 <__mcmp+0x18>
 8009cfc:	e7fa      	b.n	8009cf4 <__mcmp+0x28>
 8009cfe:	f04f 32ff 	mov.w	r2, #4294967295
 8009d02:	e7f7      	b.n	8009cf4 <__mcmp+0x28>

08009d04 <__mdiff>:
 8009d04:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d08:	460c      	mov	r4, r1
 8009d0a:	4606      	mov	r6, r0
 8009d0c:	4611      	mov	r1, r2
 8009d0e:	4620      	mov	r0, r4
 8009d10:	4617      	mov	r7, r2
 8009d12:	f7ff ffdb 	bl	8009ccc <__mcmp>
 8009d16:	1e05      	subs	r5, r0, #0
 8009d18:	d110      	bne.n	8009d3c <__mdiff+0x38>
 8009d1a:	4629      	mov	r1, r5
 8009d1c:	4630      	mov	r0, r6
 8009d1e:	f7ff fd0d 	bl	800973c <_Balloc>
 8009d22:	b930      	cbnz	r0, 8009d32 <__mdiff+0x2e>
 8009d24:	4b39      	ldr	r3, [pc, #228]	; (8009e0c <__mdiff+0x108>)
 8009d26:	4602      	mov	r2, r0
 8009d28:	f240 2132 	movw	r1, #562	; 0x232
 8009d2c:	4838      	ldr	r0, [pc, #224]	; (8009e10 <__mdiff+0x10c>)
 8009d2e:	f000 fc0f 	bl	800a550 <__assert_func>
 8009d32:	2301      	movs	r3, #1
 8009d34:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009d38:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d3c:	bfa4      	itt	ge
 8009d3e:	463b      	movge	r3, r7
 8009d40:	4627      	movge	r7, r4
 8009d42:	4630      	mov	r0, r6
 8009d44:	6879      	ldr	r1, [r7, #4]
 8009d46:	bfa6      	itte	ge
 8009d48:	461c      	movge	r4, r3
 8009d4a:	2500      	movge	r5, #0
 8009d4c:	2501      	movlt	r5, #1
 8009d4e:	f7ff fcf5 	bl	800973c <_Balloc>
 8009d52:	b920      	cbnz	r0, 8009d5e <__mdiff+0x5a>
 8009d54:	4b2d      	ldr	r3, [pc, #180]	; (8009e0c <__mdiff+0x108>)
 8009d56:	4602      	mov	r2, r0
 8009d58:	f44f 7110 	mov.w	r1, #576	; 0x240
 8009d5c:	e7e6      	b.n	8009d2c <__mdiff+0x28>
 8009d5e:	693e      	ldr	r6, [r7, #16]
 8009d60:	60c5      	str	r5, [r0, #12]
 8009d62:	6925      	ldr	r5, [r4, #16]
 8009d64:	f107 0114 	add.w	r1, r7, #20
 8009d68:	f104 0914 	add.w	r9, r4, #20
 8009d6c:	f100 0e14 	add.w	lr, r0, #20
 8009d70:	f107 0210 	add.w	r2, r7, #16
 8009d74:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8009d78:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8009d7c:	46f2      	mov	sl, lr
 8009d7e:	2700      	movs	r7, #0
 8009d80:	f859 3b04 	ldr.w	r3, [r9], #4
 8009d84:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8009d88:	fa1f f883 	uxth.w	r8, r3
 8009d8c:	fa17 f78b 	uxtah	r7, r7, fp
 8009d90:	0c1b      	lsrs	r3, r3, #16
 8009d92:	eba7 0808 	sub.w	r8, r7, r8
 8009d96:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009d9a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8009d9e:	fa1f f888 	uxth.w	r8, r8
 8009da2:	141f      	asrs	r7, r3, #16
 8009da4:	454d      	cmp	r5, r9
 8009da6:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8009daa:	f84a 3b04 	str.w	r3, [sl], #4
 8009dae:	d8e7      	bhi.n	8009d80 <__mdiff+0x7c>
 8009db0:	1b2b      	subs	r3, r5, r4
 8009db2:	3b15      	subs	r3, #21
 8009db4:	f023 0303 	bic.w	r3, r3, #3
 8009db8:	3304      	adds	r3, #4
 8009dba:	3415      	adds	r4, #21
 8009dbc:	42a5      	cmp	r5, r4
 8009dbe:	bf38      	it	cc
 8009dc0:	2304      	movcc	r3, #4
 8009dc2:	4419      	add	r1, r3
 8009dc4:	4473      	add	r3, lr
 8009dc6:	469e      	mov	lr, r3
 8009dc8:	460d      	mov	r5, r1
 8009dca:	4565      	cmp	r5, ip
 8009dcc:	d30e      	bcc.n	8009dec <__mdiff+0xe8>
 8009dce:	f10c 0203 	add.w	r2, ip, #3
 8009dd2:	1a52      	subs	r2, r2, r1
 8009dd4:	f022 0203 	bic.w	r2, r2, #3
 8009dd8:	3903      	subs	r1, #3
 8009dda:	458c      	cmp	ip, r1
 8009ddc:	bf38      	it	cc
 8009dde:	2200      	movcc	r2, #0
 8009de0:	441a      	add	r2, r3
 8009de2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8009de6:	b17b      	cbz	r3, 8009e08 <__mdiff+0x104>
 8009de8:	6106      	str	r6, [r0, #16]
 8009dea:	e7a5      	b.n	8009d38 <__mdiff+0x34>
 8009dec:	f855 8b04 	ldr.w	r8, [r5], #4
 8009df0:	fa17 f488 	uxtah	r4, r7, r8
 8009df4:	1422      	asrs	r2, r4, #16
 8009df6:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8009dfa:	b2a4      	uxth	r4, r4
 8009dfc:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8009e00:	f84e 4b04 	str.w	r4, [lr], #4
 8009e04:	1417      	asrs	r7, r2, #16
 8009e06:	e7e0      	b.n	8009dca <__mdiff+0xc6>
 8009e08:	3e01      	subs	r6, #1
 8009e0a:	e7ea      	b.n	8009de2 <__mdiff+0xde>
 8009e0c:	0800b694 	.word	0x0800b694
 8009e10:	0800b724 	.word	0x0800b724

08009e14 <__ulp>:
 8009e14:	b082      	sub	sp, #8
 8009e16:	ed8d 0b00 	vstr	d0, [sp]
 8009e1a:	9b01      	ldr	r3, [sp, #4]
 8009e1c:	4912      	ldr	r1, [pc, #72]	; (8009e68 <__ulp+0x54>)
 8009e1e:	4019      	ands	r1, r3
 8009e20:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8009e24:	2900      	cmp	r1, #0
 8009e26:	dd05      	ble.n	8009e34 <__ulp+0x20>
 8009e28:	2200      	movs	r2, #0
 8009e2a:	460b      	mov	r3, r1
 8009e2c:	ec43 2b10 	vmov	d0, r2, r3
 8009e30:	b002      	add	sp, #8
 8009e32:	4770      	bx	lr
 8009e34:	4249      	negs	r1, r1
 8009e36:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8009e3a:	ea4f 5021 	mov.w	r0, r1, asr #20
 8009e3e:	f04f 0200 	mov.w	r2, #0
 8009e42:	f04f 0300 	mov.w	r3, #0
 8009e46:	da04      	bge.n	8009e52 <__ulp+0x3e>
 8009e48:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8009e4c:	fa41 f300 	asr.w	r3, r1, r0
 8009e50:	e7ec      	b.n	8009e2c <__ulp+0x18>
 8009e52:	f1a0 0114 	sub.w	r1, r0, #20
 8009e56:	291e      	cmp	r1, #30
 8009e58:	bfda      	itte	le
 8009e5a:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8009e5e:	fa20 f101 	lsrle.w	r1, r0, r1
 8009e62:	2101      	movgt	r1, #1
 8009e64:	460a      	mov	r2, r1
 8009e66:	e7e1      	b.n	8009e2c <__ulp+0x18>
 8009e68:	7ff00000 	.word	0x7ff00000

08009e6c <__b2d>:
 8009e6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e6e:	6905      	ldr	r5, [r0, #16]
 8009e70:	f100 0714 	add.w	r7, r0, #20
 8009e74:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8009e78:	1f2e      	subs	r6, r5, #4
 8009e7a:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8009e7e:	4620      	mov	r0, r4
 8009e80:	f7ff fd52 	bl	8009928 <__hi0bits>
 8009e84:	f1c0 0320 	rsb	r3, r0, #32
 8009e88:	280a      	cmp	r0, #10
 8009e8a:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8009f08 <__b2d+0x9c>
 8009e8e:	600b      	str	r3, [r1, #0]
 8009e90:	dc14      	bgt.n	8009ebc <__b2d+0x50>
 8009e92:	f1c0 0e0b 	rsb	lr, r0, #11
 8009e96:	fa24 f10e 	lsr.w	r1, r4, lr
 8009e9a:	42b7      	cmp	r7, r6
 8009e9c:	ea41 030c 	orr.w	r3, r1, ip
 8009ea0:	bf34      	ite	cc
 8009ea2:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8009ea6:	2100      	movcs	r1, #0
 8009ea8:	3015      	adds	r0, #21
 8009eaa:	fa04 f000 	lsl.w	r0, r4, r0
 8009eae:	fa21 f10e 	lsr.w	r1, r1, lr
 8009eb2:	ea40 0201 	orr.w	r2, r0, r1
 8009eb6:	ec43 2b10 	vmov	d0, r2, r3
 8009eba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009ebc:	42b7      	cmp	r7, r6
 8009ebe:	bf3a      	itte	cc
 8009ec0:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8009ec4:	f1a5 0608 	subcc.w	r6, r5, #8
 8009ec8:	2100      	movcs	r1, #0
 8009eca:	380b      	subs	r0, #11
 8009ecc:	d017      	beq.n	8009efe <__b2d+0x92>
 8009ece:	f1c0 0c20 	rsb	ip, r0, #32
 8009ed2:	fa04 f500 	lsl.w	r5, r4, r0
 8009ed6:	42be      	cmp	r6, r7
 8009ed8:	fa21 f40c 	lsr.w	r4, r1, ip
 8009edc:	ea45 0504 	orr.w	r5, r5, r4
 8009ee0:	bf8c      	ite	hi
 8009ee2:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8009ee6:	2400      	movls	r4, #0
 8009ee8:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8009eec:	fa01 f000 	lsl.w	r0, r1, r0
 8009ef0:	fa24 f40c 	lsr.w	r4, r4, ip
 8009ef4:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8009ef8:	ea40 0204 	orr.w	r2, r0, r4
 8009efc:	e7db      	b.n	8009eb6 <__b2d+0x4a>
 8009efe:	ea44 030c 	orr.w	r3, r4, ip
 8009f02:	460a      	mov	r2, r1
 8009f04:	e7d7      	b.n	8009eb6 <__b2d+0x4a>
 8009f06:	bf00      	nop
 8009f08:	3ff00000 	.word	0x3ff00000

08009f0c <__d2b>:
 8009f0c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009f10:	4689      	mov	r9, r1
 8009f12:	2101      	movs	r1, #1
 8009f14:	ec57 6b10 	vmov	r6, r7, d0
 8009f18:	4690      	mov	r8, r2
 8009f1a:	f7ff fc0f 	bl	800973c <_Balloc>
 8009f1e:	4604      	mov	r4, r0
 8009f20:	b930      	cbnz	r0, 8009f30 <__d2b+0x24>
 8009f22:	4602      	mov	r2, r0
 8009f24:	4b25      	ldr	r3, [pc, #148]	; (8009fbc <__d2b+0xb0>)
 8009f26:	4826      	ldr	r0, [pc, #152]	; (8009fc0 <__d2b+0xb4>)
 8009f28:	f240 310a 	movw	r1, #778	; 0x30a
 8009f2c:	f000 fb10 	bl	800a550 <__assert_func>
 8009f30:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8009f34:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009f38:	bb35      	cbnz	r5, 8009f88 <__d2b+0x7c>
 8009f3a:	2e00      	cmp	r6, #0
 8009f3c:	9301      	str	r3, [sp, #4]
 8009f3e:	d028      	beq.n	8009f92 <__d2b+0x86>
 8009f40:	4668      	mov	r0, sp
 8009f42:	9600      	str	r6, [sp, #0]
 8009f44:	f7ff fd10 	bl	8009968 <__lo0bits>
 8009f48:	9900      	ldr	r1, [sp, #0]
 8009f4a:	b300      	cbz	r0, 8009f8e <__d2b+0x82>
 8009f4c:	9a01      	ldr	r2, [sp, #4]
 8009f4e:	f1c0 0320 	rsb	r3, r0, #32
 8009f52:	fa02 f303 	lsl.w	r3, r2, r3
 8009f56:	430b      	orrs	r3, r1
 8009f58:	40c2      	lsrs	r2, r0
 8009f5a:	6163      	str	r3, [r4, #20]
 8009f5c:	9201      	str	r2, [sp, #4]
 8009f5e:	9b01      	ldr	r3, [sp, #4]
 8009f60:	61a3      	str	r3, [r4, #24]
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	bf14      	ite	ne
 8009f66:	2202      	movne	r2, #2
 8009f68:	2201      	moveq	r2, #1
 8009f6a:	6122      	str	r2, [r4, #16]
 8009f6c:	b1d5      	cbz	r5, 8009fa4 <__d2b+0x98>
 8009f6e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009f72:	4405      	add	r5, r0
 8009f74:	f8c9 5000 	str.w	r5, [r9]
 8009f78:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009f7c:	f8c8 0000 	str.w	r0, [r8]
 8009f80:	4620      	mov	r0, r4
 8009f82:	b003      	add	sp, #12
 8009f84:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009f88:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009f8c:	e7d5      	b.n	8009f3a <__d2b+0x2e>
 8009f8e:	6161      	str	r1, [r4, #20]
 8009f90:	e7e5      	b.n	8009f5e <__d2b+0x52>
 8009f92:	a801      	add	r0, sp, #4
 8009f94:	f7ff fce8 	bl	8009968 <__lo0bits>
 8009f98:	9b01      	ldr	r3, [sp, #4]
 8009f9a:	6163      	str	r3, [r4, #20]
 8009f9c:	2201      	movs	r2, #1
 8009f9e:	6122      	str	r2, [r4, #16]
 8009fa0:	3020      	adds	r0, #32
 8009fa2:	e7e3      	b.n	8009f6c <__d2b+0x60>
 8009fa4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009fa8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009fac:	f8c9 0000 	str.w	r0, [r9]
 8009fb0:	6918      	ldr	r0, [r3, #16]
 8009fb2:	f7ff fcb9 	bl	8009928 <__hi0bits>
 8009fb6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009fba:	e7df      	b.n	8009f7c <__d2b+0x70>
 8009fbc:	0800b694 	.word	0x0800b694
 8009fc0:	0800b724 	.word	0x0800b724

08009fc4 <__ratio>:
 8009fc4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009fc8:	4688      	mov	r8, r1
 8009fca:	4669      	mov	r1, sp
 8009fcc:	4681      	mov	r9, r0
 8009fce:	f7ff ff4d 	bl	8009e6c <__b2d>
 8009fd2:	a901      	add	r1, sp, #4
 8009fd4:	4640      	mov	r0, r8
 8009fd6:	ec55 4b10 	vmov	r4, r5, d0
 8009fda:	f7ff ff47 	bl	8009e6c <__b2d>
 8009fde:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009fe2:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8009fe6:	eba3 0c02 	sub.w	ip, r3, r2
 8009fea:	e9dd 3200 	ldrd	r3, r2, [sp]
 8009fee:	1a9b      	subs	r3, r3, r2
 8009ff0:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8009ff4:	ec51 0b10 	vmov	r0, r1, d0
 8009ff8:	2b00      	cmp	r3, #0
 8009ffa:	bfd6      	itet	le
 8009ffc:	460a      	movle	r2, r1
 8009ffe:	462a      	movgt	r2, r5
 800a000:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800a004:	468b      	mov	fp, r1
 800a006:	462f      	mov	r7, r5
 800a008:	bfd4      	ite	le
 800a00a:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800a00e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800a012:	4620      	mov	r0, r4
 800a014:	ee10 2a10 	vmov	r2, s0
 800a018:	465b      	mov	r3, fp
 800a01a:	4639      	mov	r1, r7
 800a01c:	f7f6 fc1e 	bl	800085c <__aeabi_ddiv>
 800a020:	ec41 0b10 	vmov	d0, r0, r1
 800a024:	b003      	add	sp, #12
 800a026:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a02a <__copybits>:
 800a02a:	3901      	subs	r1, #1
 800a02c:	b570      	push	{r4, r5, r6, lr}
 800a02e:	1149      	asrs	r1, r1, #5
 800a030:	6914      	ldr	r4, [r2, #16]
 800a032:	3101      	adds	r1, #1
 800a034:	f102 0314 	add.w	r3, r2, #20
 800a038:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800a03c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800a040:	1f05      	subs	r5, r0, #4
 800a042:	42a3      	cmp	r3, r4
 800a044:	d30c      	bcc.n	800a060 <__copybits+0x36>
 800a046:	1aa3      	subs	r3, r4, r2
 800a048:	3b11      	subs	r3, #17
 800a04a:	f023 0303 	bic.w	r3, r3, #3
 800a04e:	3211      	adds	r2, #17
 800a050:	42a2      	cmp	r2, r4
 800a052:	bf88      	it	hi
 800a054:	2300      	movhi	r3, #0
 800a056:	4418      	add	r0, r3
 800a058:	2300      	movs	r3, #0
 800a05a:	4288      	cmp	r0, r1
 800a05c:	d305      	bcc.n	800a06a <__copybits+0x40>
 800a05e:	bd70      	pop	{r4, r5, r6, pc}
 800a060:	f853 6b04 	ldr.w	r6, [r3], #4
 800a064:	f845 6f04 	str.w	r6, [r5, #4]!
 800a068:	e7eb      	b.n	800a042 <__copybits+0x18>
 800a06a:	f840 3b04 	str.w	r3, [r0], #4
 800a06e:	e7f4      	b.n	800a05a <__copybits+0x30>

0800a070 <__any_on>:
 800a070:	f100 0214 	add.w	r2, r0, #20
 800a074:	6900      	ldr	r0, [r0, #16]
 800a076:	114b      	asrs	r3, r1, #5
 800a078:	4298      	cmp	r0, r3
 800a07a:	b510      	push	{r4, lr}
 800a07c:	db11      	blt.n	800a0a2 <__any_on+0x32>
 800a07e:	dd0a      	ble.n	800a096 <__any_on+0x26>
 800a080:	f011 011f 	ands.w	r1, r1, #31
 800a084:	d007      	beq.n	800a096 <__any_on+0x26>
 800a086:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800a08a:	fa24 f001 	lsr.w	r0, r4, r1
 800a08e:	fa00 f101 	lsl.w	r1, r0, r1
 800a092:	428c      	cmp	r4, r1
 800a094:	d10b      	bne.n	800a0ae <__any_on+0x3e>
 800a096:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a09a:	4293      	cmp	r3, r2
 800a09c:	d803      	bhi.n	800a0a6 <__any_on+0x36>
 800a09e:	2000      	movs	r0, #0
 800a0a0:	bd10      	pop	{r4, pc}
 800a0a2:	4603      	mov	r3, r0
 800a0a4:	e7f7      	b.n	800a096 <__any_on+0x26>
 800a0a6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a0aa:	2900      	cmp	r1, #0
 800a0ac:	d0f5      	beq.n	800a09a <__any_on+0x2a>
 800a0ae:	2001      	movs	r0, #1
 800a0b0:	e7f6      	b.n	800a0a0 <__any_on+0x30>

0800a0b2 <_calloc_r>:
 800a0b2:	b513      	push	{r0, r1, r4, lr}
 800a0b4:	434a      	muls	r2, r1
 800a0b6:	4611      	mov	r1, r2
 800a0b8:	9201      	str	r2, [sp, #4]
 800a0ba:	f000 f859 	bl	800a170 <_malloc_r>
 800a0be:	4604      	mov	r4, r0
 800a0c0:	b118      	cbz	r0, 800a0ca <_calloc_r+0x18>
 800a0c2:	9a01      	ldr	r2, [sp, #4]
 800a0c4:	2100      	movs	r1, #0
 800a0c6:	f7fc fbd7 	bl	8006878 <memset>
 800a0ca:	4620      	mov	r0, r4
 800a0cc:	b002      	add	sp, #8
 800a0ce:	bd10      	pop	{r4, pc}

0800a0d0 <_free_r>:
 800a0d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a0d2:	2900      	cmp	r1, #0
 800a0d4:	d048      	beq.n	800a168 <_free_r+0x98>
 800a0d6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a0da:	9001      	str	r0, [sp, #4]
 800a0dc:	2b00      	cmp	r3, #0
 800a0de:	f1a1 0404 	sub.w	r4, r1, #4
 800a0e2:	bfb8      	it	lt
 800a0e4:	18e4      	addlt	r4, r4, r3
 800a0e6:	f000 fa7d 	bl	800a5e4 <__malloc_lock>
 800a0ea:	4a20      	ldr	r2, [pc, #128]	; (800a16c <_free_r+0x9c>)
 800a0ec:	9801      	ldr	r0, [sp, #4]
 800a0ee:	6813      	ldr	r3, [r2, #0]
 800a0f0:	4615      	mov	r5, r2
 800a0f2:	b933      	cbnz	r3, 800a102 <_free_r+0x32>
 800a0f4:	6063      	str	r3, [r4, #4]
 800a0f6:	6014      	str	r4, [r2, #0]
 800a0f8:	b003      	add	sp, #12
 800a0fa:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a0fe:	f000 ba77 	b.w	800a5f0 <__malloc_unlock>
 800a102:	42a3      	cmp	r3, r4
 800a104:	d90b      	bls.n	800a11e <_free_r+0x4e>
 800a106:	6821      	ldr	r1, [r4, #0]
 800a108:	1862      	adds	r2, r4, r1
 800a10a:	4293      	cmp	r3, r2
 800a10c:	bf04      	itt	eq
 800a10e:	681a      	ldreq	r2, [r3, #0]
 800a110:	685b      	ldreq	r3, [r3, #4]
 800a112:	6063      	str	r3, [r4, #4]
 800a114:	bf04      	itt	eq
 800a116:	1852      	addeq	r2, r2, r1
 800a118:	6022      	streq	r2, [r4, #0]
 800a11a:	602c      	str	r4, [r5, #0]
 800a11c:	e7ec      	b.n	800a0f8 <_free_r+0x28>
 800a11e:	461a      	mov	r2, r3
 800a120:	685b      	ldr	r3, [r3, #4]
 800a122:	b10b      	cbz	r3, 800a128 <_free_r+0x58>
 800a124:	42a3      	cmp	r3, r4
 800a126:	d9fa      	bls.n	800a11e <_free_r+0x4e>
 800a128:	6811      	ldr	r1, [r2, #0]
 800a12a:	1855      	adds	r5, r2, r1
 800a12c:	42a5      	cmp	r5, r4
 800a12e:	d10b      	bne.n	800a148 <_free_r+0x78>
 800a130:	6824      	ldr	r4, [r4, #0]
 800a132:	4421      	add	r1, r4
 800a134:	1854      	adds	r4, r2, r1
 800a136:	42a3      	cmp	r3, r4
 800a138:	6011      	str	r1, [r2, #0]
 800a13a:	d1dd      	bne.n	800a0f8 <_free_r+0x28>
 800a13c:	681c      	ldr	r4, [r3, #0]
 800a13e:	685b      	ldr	r3, [r3, #4]
 800a140:	6053      	str	r3, [r2, #4]
 800a142:	4421      	add	r1, r4
 800a144:	6011      	str	r1, [r2, #0]
 800a146:	e7d7      	b.n	800a0f8 <_free_r+0x28>
 800a148:	d902      	bls.n	800a150 <_free_r+0x80>
 800a14a:	230c      	movs	r3, #12
 800a14c:	6003      	str	r3, [r0, #0]
 800a14e:	e7d3      	b.n	800a0f8 <_free_r+0x28>
 800a150:	6825      	ldr	r5, [r4, #0]
 800a152:	1961      	adds	r1, r4, r5
 800a154:	428b      	cmp	r3, r1
 800a156:	bf04      	itt	eq
 800a158:	6819      	ldreq	r1, [r3, #0]
 800a15a:	685b      	ldreq	r3, [r3, #4]
 800a15c:	6063      	str	r3, [r4, #4]
 800a15e:	bf04      	itt	eq
 800a160:	1949      	addeq	r1, r1, r5
 800a162:	6021      	streq	r1, [r4, #0]
 800a164:	6054      	str	r4, [r2, #4]
 800a166:	e7c7      	b.n	800a0f8 <_free_r+0x28>
 800a168:	b003      	add	sp, #12
 800a16a:	bd30      	pop	{r4, r5, pc}
 800a16c:	200002e0 	.word	0x200002e0

0800a170 <_malloc_r>:
 800a170:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a172:	1ccd      	adds	r5, r1, #3
 800a174:	f025 0503 	bic.w	r5, r5, #3
 800a178:	3508      	adds	r5, #8
 800a17a:	2d0c      	cmp	r5, #12
 800a17c:	bf38      	it	cc
 800a17e:	250c      	movcc	r5, #12
 800a180:	2d00      	cmp	r5, #0
 800a182:	4606      	mov	r6, r0
 800a184:	db01      	blt.n	800a18a <_malloc_r+0x1a>
 800a186:	42a9      	cmp	r1, r5
 800a188:	d903      	bls.n	800a192 <_malloc_r+0x22>
 800a18a:	230c      	movs	r3, #12
 800a18c:	6033      	str	r3, [r6, #0]
 800a18e:	2000      	movs	r0, #0
 800a190:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a192:	f000 fa27 	bl	800a5e4 <__malloc_lock>
 800a196:	4921      	ldr	r1, [pc, #132]	; (800a21c <_malloc_r+0xac>)
 800a198:	680a      	ldr	r2, [r1, #0]
 800a19a:	4614      	mov	r4, r2
 800a19c:	b99c      	cbnz	r4, 800a1c6 <_malloc_r+0x56>
 800a19e:	4f20      	ldr	r7, [pc, #128]	; (800a220 <_malloc_r+0xb0>)
 800a1a0:	683b      	ldr	r3, [r7, #0]
 800a1a2:	b923      	cbnz	r3, 800a1ae <_malloc_r+0x3e>
 800a1a4:	4621      	mov	r1, r4
 800a1a6:	4630      	mov	r0, r6
 800a1a8:	f000 f9a2 	bl	800a4f0 <_sbrk_r>
 800a1ac:	6038      	str	r0, [r7, #0]
 800a1ae:	4629      	mov	r1, r5
 800a1b0:	4630      	mov	r0, r6
 800a1b2:	f000 f99d 	bl	800a4f0 <_sbrk_r>
 800a1b6:	1c43      	adds	r3, r0, #1
 800a1b8:	d123      	bne.n	800a202 <_malloc_r+0x92>
 800a1ba:	230c      	movs	r3, #12
 800a1bc:	6033      	str	r3, [r6, #0]
 800a1be:	4630      	mov	r0, r6
 800a1c0:	f000 fa16 	bl	800a5f0 <__malloc_unlock>
 800a1c4:	e7e3      	b.n	800a18e <_malloc_r+0x1e>
 800a1c6:	6823      	ldr	r3, [r4, #0]
 800a1c8:	1b5b      	subs	r3, r3, r5
 800a1ca:	d417      	bmi.n	800a1fc <_malloc_r+0x8c>
 800a1cc:	2b0b      	cmp	r3, #11
 800a1ce:	d903      	bls.n	800a1d8 <_malloc_r+0x68>
 800a1d0:	6023      	str	r3, [r4, #0]
 800a1d2:	441c      	add	r4, r3
 800a1d4:	6025      	str	r5, [r4, #0]
 800a1d6:	e004      	b.n	800a1e2 <_malloc_r+0x72>
 800a1d8:	6863      	ldr	r3, [r4, #4]
 800a1da:	42a2      	cmp	r2, r4
 800a1dc:	bf0c      	ite	eq
 800a1de:	600b      	streq	r3, [r1, #0]
 800a1e0:	6053      	strne	r3, [r2, #4]
 800a1e2:	4630      	mov	r0, r6
 800a1e4:	f000 fa04 	bl	800a5f0 <__malloc_unlock>
 800a1e8:	f104 000b 	add.w	r0, r4, #11
 800a1ec:	1d23      	adds	r3, r4, #4
 800a1ee:	f020 0007 	bic.w	r0, r0, #7
 800a1f2:	1ac2      	subs	r2, r0, r3
 800a1f4:	d0cc      	beq.n	800a190 <_malloc_r+0x20>
 800a1f6:	1a1b      	subs	r3, r3, r0
 800a1f8:	50a3      	str	r3, [r4, r2]
 800a1fa:	e7c9      	b.n	800a190 <_malloc_r+0x20>
 800a1fc:	4622      	mov	r2, r4
 800a1fe:	6864      	ldr	r4, [r4, #4]
 800a200:	e7cc      	b.n	800a19c <_malloc_r+0x2c>
 800a202:	1cc4      	adds	r4, r0, #3
 800a204:	f024 0403 	bic.w	r4, r4, #3
 800a208:	42a0      	cmp	r0, r4
 800a20a:	d0e3      	beq.n	800a1d4 <_malloc_r+0x64>
 800a20c:	1a21      	subs	r1, r4, r0
 800a20e:	4630      	mov	r0, r6
 800a210:	f000 f96e 	bl	800a4f0 <_sbrk_r>
 800a214:	3001      	adds	r0, #1
 800a216:	d1dd      	bne.n	800a1d4 <_malloc_r+0x64>
 800a218:	e7cf      	b.n	800a1ba <_malloc_r+0x4a>
 800a21a:	bf00      	nop
 800a21c:	200002e0 	.word	0x200002e0
 800a220:	200002e4 	.word	0x200002e4

0800a224 <__ssputs_r>:
 800a224:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a228:	688e      	ldr	r6, [r1, #8]
 800a22a:	429e      	cmp	r6, r3
 800a22c:	4682      	mov	sl, r0
 800a22e:	460c      	mov	r4, r1
 800a230:	4690      	mov	r8, r2
 800a232:	461f      	mov	r7, r3
 800a234:	d838      	bhi.n	800a2a8 <__ssputs_r+0x84>
 800a236:	898a      	ldrh	r2, [r1, #12]
 800a238:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a23c:	d032      	beq.n	800a2a4 <__ssputs_r+0x80>
 800a23e:	6825      	ldr	r5, [r4, #0]
 800a240:	6909      	ldr	r1, [r1, #16]
 800a242:	eba5 0901 	sub.w	r9, r5, r1
 800a246:	6965      	ldr	r5, [r4, #20]
 800a248:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a24c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a250:	3301      	adds	r3, #1
 800a252:	444b      	add	r3, r9
 800a254:	106d      	asrs	r5, r5, #1
 800a256:	429d      	cmp	r5, r3
 800a258:	bf38      	it	cc
 800a25a:	461d      	movcc	r5, r3
 800a25c:	0553      	lsls	r3, r2, #21
 800a25e:	d531      	bpl.n	800a2c4 <__ssputs_r+0xa0>
 800a260:	4629      	mov	r1, r5
 800a262:	f7ff ff85 	bl	800a170 <_malloc_r>
 800a266:	4606      	mov	r6, r0
 800a268:	b950      	cbnz	r0, 800a280 <__ssputs_r+0x5c>
 800a26a:	230c      	movs	r3, #12
 800a26c:	f8ca 3000 	str.w	r3, [sl]
 800a270:	89a3      	ldrh	r3, [r4, #12]
 800a272:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a276:	81a3      	strh	r3, [r4, #12]
 800a278:	f04f 30ff 	mov.w	r0, #4294967295
 800a27c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a280:	6921      	ldr	r1, [r4, #16]
 800a282:	464a      	mov	r2, r9
 800a284:	f7fc faea 	bl	800685c <memcpy>
 800a288:	89a3      	ldrh	r3, [r4, #12]
 800a28a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a28e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a292:	81a3      	strh	r3, [r4, #12]
 800a294:	6126      	str	r6, [r4, #16]
 800a296:	6165      	str	r5, [r4, #20]
 800a298:	444e      	add	r6, r9
 800a29a:	eba5 0509 	sub.w	r5, r5, r9
 800a29e:	6026      	str	r6, [r4, #0]
 800a2a0:	60a5      	str	r5, [r4, #8]
 800a2a2:	463e      	mov	r6, r7
 800a2a4:	42be      	cmp	r6, r7
 800a2a6:	d900      	bls.n	800a2aa <__ssputs_r+0x86>
 800a2a8:	463e      	mov	r6, r7
 800a2aa:	4632      	mov	r2, r6
 800a2ac:	6820      	ldr	r0, [r4, #0]
 800a2ae:	4641      	mov	r1, r8
 800a2b0:	f000 f97e 	bl	800a5b0 <memmove>
 800a2b4:	68a3      	ldr	r3, [r4, #8]
 800a2b6:	6822      	ldr	r2, [r4, #0]
 800a2b8:	1b9b      	subs	r3, r3, r6
 800a2ba:	4432      	add	r2, r6
 800a2bc:	60a3      	str	r3, [r4, #8]
 800a2be:	6022      	str	r2, [r4, #0]
 800a2c0:	2000      	movs	r0, #0
 800a2c2:	e7db      	b.n	800a27c <__ssputs_r+0x58>
 800a2c4:	462a      	mov	r2, r5
 800a2c6:	f000 f999 	bl	800a5fc <_realloc_r>
 800a2ca:	4606      	mov	r6, r0
 800a2cc:	2800      	cmp	r0, #0
 800a2ce:	d1e1      	bne.n	800a294 <__ssputs_r+0x70>
 800a2d0:	6921      	ldr	r1, [r4, #16]
 800a2d2:	4650      	mov	r0, sl
 800a2d4:	f7ff fefc 	bl	800a0d0 <_free_r>
 800a2d8:	e7c7      	b.n	800a26a <__ssputs_r+0x46>
	...

0800a2dc <_svfiprintf_r>:
 800a2dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a2e0:	4698      	mov	r8, r3
 800a2e2:	898b      	ldrh	r3, [r1, #12]
 800a2e4:	061b      	lsls	r3, r3, #24
 800a2e6:	b09d      	sub	sp, #116	; 0x74
 800a2e8:	4607      	mov	r7, r0
 800a2ea:	460d      	mov	r5, r1
 800a2ec:	4614      	mov	r4, r2
 800a2ee:	d50e      	bpl.n	800a30e <_svfiprintf_r+0x32>
 800a2f0:	690b      	ldr	r3, [r1, #16]
 800a2f2:	b963      	cbnz	r3, 800a30e <_svfiprintf_r+0x32>
 800a2f4:	2140      	movs	r1, #64	; 0x40
 800a2f6:	f7ff ff3b 	bl	800a170 <_malloc_r>
 800a2fa:	6028      	str	r0, [r5, #0]
 800a2fc:	6128      	str	r0, [r5, #16]
 800a2fe:	b920      	cbnz	r0, 800a30a <_svfiprintf_r+0x2e>
 800a300:	230c      	movs	r3, #12
 800a302:	603b      	str	r3, [r7, #0]
 800a304:	f04f 30ff 	mov.w	r0, #4294967295
 800a308:	e0d1      	b.n	800a4ae <_svfiprintf_r+0x1d2>
 800a30a:	2340      	movs	r3, #64	; 0x40
 800a30c:	616b      	str	r3, [r5, #20]
 800a30e:	2300      	movs	r3, #0
 800a310:	9309      	str	r3, [sp, #36]	; 0x24
 800a312:	2320      	movs	r3, #32
 800a314:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a318:	f8cd 800c 	str.w	r8, [sp, #12]
 800a31c:	2330      	movs	r3, #48	; 0x30
 800a31e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800a4c8 <_svfiprintf_r+0x1ec>
 800a322:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a326:	f04f 0901 	mov.w	r9, #1
 800a32a:	4623      	mov	r3, r4
 800a32c:	469a      	mov	sl, r3
 800a32e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a332:	b10a      	cbz	r2, 800a338 <_svfiprintf_r+0x5c>
 800a334:	2a25      	cmp	r2, #37	; 0x25
 800a336:	d1f9      	bne.n	800a32c <_svfiprintf_r+0x50>
 800a338:	ebba 0b04 	subs.w	fp, sl, r4
 800a33c:	d00b      	beq.n	800a356 <_svfiprintf_r+0x7a>
 800a33e:	465b      	mov	r3, fp
 800a340:	4622      	mov	r2, r4
 800a342:	4629      	mov	r1, r5
 800a344:	4638      	mov	r0, r7
 800a346:	f7ff ff6d 	bl	800a224 <__ssputs_r>
 800a34a:	3001      	adds	r0, #1
 800a34c:	f000 80aa 	beq.w	800a4a4 <_svfiprintf_r+0x1c8>
 800a350:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a352:	445a      	add	r2, fp
 800a354:	9209      	str	r2, [sp, #36]	; 0x24
 800a356:	f89a 3000 	ldrb.w	r3, [sl]
 800a35a:	2b00      	cmp	r3, #0
 800a35c:	f000 80a2 	beq.w	800a4a4 <_svfiprintf_r+0x1c8>
 800a360:	2300      	movs	r3, #0
 800a362:	f04f 32ff 	mov.w	r2, #4294967295
 800a366:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a36a:	f10a 0a01 	add.w	sl, sl, #1
 800a36e:	9304      	str	r3, [sp, #16]
 800a370:	9307      	str	r3, [sp, #28]
 800a372:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a376:	931a      	str	r3, [sp, #104]	; 0x68
 800a378:	4654      	mov	r4, sl
 800a37a:	2205      	movs	r2, #5
 800a37c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a380:	4851      	ldr	r0, [pc, #324]	; (800a4c8 <_svfiprintf_r+0x1ec>)
 800a382:	f7f5 ff35 	bl	80001f0 <memchr>
 800a386:	9a04      	ldr	r2, [sp, #16]
 800a388:	b9d8      	cbnz	r0, 800a3c2 <_svfiprintf_r+0xe6>
 800a38a:	06d0      	lsls	r0, r2, #27
 800a38c:	bf44      	itt	mi
 800a38e:	2320      	movmi	r3, #32
 800a390:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a394:	0711      	lsls	r1, r2, #28
 800a396:	bf44      	itt	mi
 800a398:	232b      	movmi	r3, #43	; 0x2b
 800a39a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a39e:	f89a 3000 	ldrb.w	r3, [sl]
 800a3a2:	2b2a      	cmp	r3, #42	; 0x2a
 800a3a4:	d015      	beq.n	800a3d2 <_svfiprintf_r+0xf6>
 800a3a6:	9a07      	ldr	r2, [sp, #28]
 800a3a8:	4654      	mov	r4, sl
 800a3aa:	2000      	movs	r0, #0
 800a3ac:	f04f 0c0a 	mov.w	ip, #10
 800a3b0:	4621      	mov	r1, r4
 800a3b2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a3b6:	3b30      	subs	r3, #48	; 0x30
 800a3b8:	2b09      	cmp	r3, #9
 800a3ba:	d94e      	bls.n	800a45a <_svfiprintf_r+0x17e>
 800a3bc:	b1b0      	cbz	r0, 800a3ec <_svfiprintf_r+0x110>
 800a3be:	9207      	str	r2, [sp, #28]
 800a3c0:	e014      	b.n	800a3ec <_svfiprintf_r+0x110>
 800a3c2:	eba0 0308 	sub.w	r3, r0, r8
 800a3c6:	fa09 f303 	lsl.w	r3, r9, r3
 800a3ca:	4313      	orrs	r3, r2
 800a3cc:	9304      	str	r3, [sp, #16]
 800a3ce:	46a2      	mov	sl, r4
 800a3d0:	e7d2      	b.n	800a378 <_svfiprintf_r+0x9c>
 800a3d2:	9b03      	ldr	r3, [sp, #12]
 800a3d4:	1d19      	adds	r1, r3, #4
 800a3d6:	681b      	ldr	r3, [r3, #0]
 800a3d8:	9103      	str	r1, [sp, #12]
 800a3da:	2b00      	cmp	r3, #0
 800a3dc:	bfbb      	ittet	lt
 800a3de:	425b      	neglt	r3, r3
 800a3e0:	f042 0202 	orrlt.w	r2, r2, #2
 800a3e4:	9307      	strge	r3, [sp, #28]
 800a3e6:	9307      	strlt	r3, [sp, #28]
 800a3e8:	bfb8      	it	lt
 800a3ea:	9204      	strlt	r2, [sp, #16]
 800a3ec:	7823      	ldrb	r3, [r4, #0]
 800a3ee:	2b2e      	cmp	r3, #46	; 0x2e
 800a3f0:	d10c      	bne.n	800a40c <_svfiprintf_r+0x130>
 800a3f2:	7863      	ldrb	r3, [r4, #1]
 800a3f4:	2b2a      	cmp	r3, #42	; 0x2a
 800a3f6:	d135      	bne.n	800a464 <_svfiprintf_r+0x188>
 800a3f8:	9b03      	ldr	r3, [sp, #12]
 800a3fa:	1d1a      	adds	r2, r3, #4
 800a3fc:	681b      	ldr	r3, [r3, #0]
 800a3fe:	9203      	str	r2, [sp, #12]
 800a400:	2b00      	cmp	r3, #0
 800a402:	bfb8      	it	lt
 800a404:	f04f 33ff 	movlt.w	r3, #4294967295
 800a408:	3402      	adds	r4, #2
 800a40a:	9305      	str	r3, [sp, #20]
 800a40c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a4d8 <_svfiprintf_r+0x1fc>
 800a410:	7821      	ldrb	r1, [r4, #0]
 800a412:	2203      	movs	r2, #3
 800a414:	4650      	mov	r0, sl
 800a416:	f7f5 feeb 	bl	80001f0 <memchr>
 800a41a:	b140      	cbz	r0, 800a42e <_svfiprintf_r+0x152>
 800a41c:	2340      	movs	r3, #64	; 0x40
 800a41e:	eba0 000a 	sub.w	r0, r0, sl
 800a422:	fa03 f000 	lsl.w	r0, r3, r0
 800a426:	9b04      	ldr	r3, [sp, #16]
 800a428:	4303      	orrs	r3, r0
 800a42a:	3401      	adds	r4, #1
 800a42c:	9304      	str	r3, [sp, #16]
 800a42e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a432:	4826      	ldr	r0, [pc, #152]	; (800a4cc <_svfiprintf_r+0x1f0>)
 800a434:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a438:	2206      	movs	r2, #6
 800a43a:	f7f5 fed9 	bl	80001f0 <memchr>
 800a43e:	2800      	cmp	r0, #0
 800a440:	d038      	beq.n	800a4b4 <_svfiprintf_r+0x1d8>
 800a442:	4b23      	ldr	r3, [pc, #140]	; (800a4d0 <_svfiprintf_r+0x1f4>)
 800a444:	bb1b      	cbnz	r3, 800a48e <_svfiprintf_r+0x1b2>
 800a446:	9b03      	ldr	r3, [sp, #12]
 800a448:	3307      	adds	r3, #7
 800a44a:	f023 0307 	bic.w	r3, r3, #7
 800a44e:	3308      	adds	r3, #8
 800a450:	9303      	str	r3, [sp, #12]
 800a452:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a454:	4433      	add	r3, r6
 800a456:	9309      	str	r3, [sp, #36]	; 0x24
 800a458:	e767      	b.n	800a32a <_svfiprintf_r+0x4e>
 800a45a:	fb0c 3202 	mla	r2, ip, r2, r3
 800a45e:	460c      	mov	r4, r1
 800a460:	2001      	movs	r0, #1
 800a462:	e7a5      	b.n	800a3b0 <_svfiprintf_r+0xd4>
 800a464:	2300      	movs	r3, #0
 800a466:	3401      	adds	r4, #1
 800a468:	9305      	str	r3, [sp, #20]
 800a46a:	4619      	mov	r1, r3
 800a46c:	f04f 0c0a 	mov.w	ip, #10
 800a470:	4620      	mov	r0, r4
 800a472:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a476:	3a30      	subs	r2, #48	; 0x30
 800a478:	2a09      	cmp	r2, #9
 800a47a:	d903      	bls.n	800a484 <_svfiprintf_r+0x1a8>
 800a47c:	2b00      	cmp	r3, #0
 800a47e:	d0c5      	beq.n	800a40c <_svfiprintf_r+0x130>
 800a480:	9105      	str	r1, [sp, #20]
 800a482:	e7c3      	b.n	800a40c <_svfiprintf_r+0x130>
 800a484:	fb0c 2101 	mla	r1, ip, r1, r2
 800a488:	4604      	mov	r4, r0
 800a48a:	2301      	movs	r3, #1
 800a48c:	e7f0      	b.n	800a470 <_svfiprintf_r+0x194>
 800a48e:	ab03      	add	r3, sp, #12
 800a490:	9300      	str	r3, [sp, #0]
 800a492:	462a      	mov	r2, r5
 800a494:	4b0f      	ldr	r3, [pc, #60]	; (800a4d4 <_svfiprintf_r+0x1f8>)
 800a496:	a904      	add	r1, sp, #16
 800a498:	4638      	mov	r0, r7
 800a49a:	f7fc fa95 	bl	80069c8 <_printf_float>
 800a49e:	1c42      	adds	r2, r0, #1
 800a4a0:	4606      	mov	r6, r0
 800a4a2:	d1d6      	bne.n	800a452 <_svfiprintf_r+0x176>
 800a4a4:	89ab      	ldrh	r3, [r5, #12]
 800a4a6:	065b      	lsls	r3, r3, #25
 800a4a8:	f53f af2c 	bmi.w	800a304 <_svfiprintf_r+0x28>
 800a4ac:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a4ae:	b01d      	add	sp, #116	; 0x74
 800a4b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a4b4:	ab03      	add	r3, sp, #12
 800a4b6:	9300      	str	r3, [sp, #0]
 800a4b8:	462a      	mov	r2, r5
 800a4ba:	4b06      	ldr	r3, [pc, #24]	; (800a4d4 <_svfiprintf_r+0x1f8>)
 800a4bc:	a904      	add	r1, sp, #16
 800a4be:	4638      	mov	r0, r7
 800a4c0:	f7fc fd26 	bl	8006f10 <_printf_i>
 800a4c4:	e7eb      	b.n	800a49e <_svfiprintf_r+0x1c2>
 800a4c6:	bf00      	nop
 800a4c8:	0800b884 	.word	0x0800b884
 800a4cc:	0800b88e 	.word	0x0800b88e
 800a4d0:	080069c9 	.word	0x080069c9
 800a4d4:	0800a225 	.word	0x0800a225
 800a4d8:	0800b88a 	.word	0x0800b88a
 800a4dc:	00000000 	.word	0x00000000

0800a4e0 <nan>:
 800a4e0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800a4e8 <nan+0x8>
 800a4e4:	4770      	bx	lr
 800a4e6:	bf00      	nop
 800a4e8:	00000000 	.word	0x00000000
 800a4ec:	7ff80000 	.word	0x7ff80000

0800a4f0 <_sbrk_r>:
 800a4f0:	b538      	push	{r3, r4, r5, lr}
 800a4f2:	4d06      	ldr	r5, [pc, #24]	; (800a50c <_sbrk_r+0x1c>)
 800a4f4:	2300      	movs	r3, #0
 800a4f6:	4604      	mov	r4, r0
 800a4f8:	4608      	mov	r0, r1
 800a4fa:	602b      	str	r3, [r5, #0]
 800a4fc:	f7f8 fb1a 	bl	8002b34 <_sbrk>
 800a500:	1c43      	adds	r3, r0, #1
 800a502:	d102      	bne.n	800a50a <_sbrk_r+0x1a>
 800a504:	682b      	ldr	r3, [r5, #0]
 800a506:	b103      	cbz	r3, 800a50a <_sbrk_r+0x1a>
 800a508:	6023      	str	r3, [r4, #0]
 800a50a:	bd38      	pop	{r3, r4, r5, pc}
 800a50c:	200004ac 	.word	0x200004ac

0800a510 <strncmp>:
 800a510:	b510      	push	{r4, lr}
 800a512:	b16a      	cbz	r2, 800a530 <strncmp+0x20>
 800a514:	3901      	subs	r1, #1
 800a516:	1884      	adds	r4, r0, r2
 800a518:	f810 3b01 	ldrb.w	r3, [r0], #1
 800a51c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800a520:	4293      	cmp	r3, r2
 800a522:	d103      	bne.n	800a52c <strncmp+0x1c>
 800a524:	42a0      	cmp	r0, r4
 800a526:	d001      	beq.n	800a52c <strncmp+0x1c>
 800a528:	2b00      	cmp	r3, #0
 800a52a:	d1f5      	bne.n	800a518 <strncmp+0x8>
 800a52c:	1a98      	subs	r0, r3, r2
 800a52e:	bd10      	pop	{r4, pc}
 800a530:	4610      	mov	r0, r2
 800a532:	e7fc      	b.n	800a52e <strncmp+0x1e>

0800a534 <__ascii_wctomb>:
 800a534:	b149      	cbz	r1, 800a54a <__ascii_wctomb+0x16>
 800a536:	2aff      	cmp	r2, #255	; 0xff
 800a538:	bf85      	ittet	hi
 800a53a:	238a      	movhi	r3, #138	; 0x8a
 800a53c:	6003      	strhi	r3, [r0, #0]
 800a53e:	700a      	strbls	r2, [r1, #0]
 800a540:	f04f 30ff 	movhi.w	r0, #4294967295
 800a544:	bf98      	it	ls
 800a546:	2001      	movls	r0, #1
 800a548:	4770      	bx	lr
 800a54a:	4608      	mov	r0, r1
 800a54c:	4770      	bx	lr
	...

0800a550 <__assert_func>:
 800a550:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a552:	4614      	mov	r4, r2
 800a554:	461a      	mov	r2, r3
 800a556:	4b09      	ldr	r3, [pc, #36]	; (800a57c <__assert_func+0x2c>)
 800a558:	681b      	ldr	r3, [r3, #0]
 800a55a:	4605      	mov	r5, r0
 800a55c:	68d8      	ldr	r0, [r3, #12]
 800a55e:	b14c      	cbz	r4, 800a574 <__assert_func+0x24>
 800a560:	4b07      	ldr	r3, [pc, #28]	; (800a580 <__assert_func+0x30>)
 800a562:	9100      	str	r1, [sp, #0]
 800a564:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a568:	4906      	ldr	r1, [pc, #24]	; (800a584 <__assert_func+0x34>)
 800a56a:	462b      	mov	r3, r5
 800a56c:	f000 f80e 	bl	800a58c <fiprintf>
 800a570:	f000 fa84 	bl	800aa7c <abort>
 800a574:	4b04      	ldr	r3, [pc, #16]	; (800a588 <__assert_func+0x38>)
 800a576:	461c      	mov	r4, r3
 800a578:	e7f3      	b.n	800a562 <__assert_func+0x12>
 800a57a:	bf00      	nop
 800a57c:	2000001c 	.word	0x2000001c
 800a580:	0800b895 	.word	0x0800b895
 800a584:	0800b8a2 	.word	0x0800b8a2
 800a588:	0800b8d0 	.word	0x0800b8d0

0800a58c <fiprintf>:
 800a58c:	b40e      	push	{r1, r2, r3}
 800a58e:	b503      	push	{r0, r1, lr}
 800a590:	4601      	mov	r1, r0
 800a592:	ab03      	add	r3, sp, #12
 800a594:	4805      	ldr	r0, [pc, #20]	; (800a5ac <fiprintf+0x20>)
 800a596:	f853 2b04 	ldr.w	r2, [r3], #4
 800a59a:	6800      	ldr	r0, [r0, #0]
 800a59c:	9301      	str	r3, [sp, #4]
 800a59e:	f000 f87d 	bl	800a69c <_vfiprintf_r>
 800a5a2:	b002      	add	sp, #8
 800a5a4:	f85d eb04 	ldr.w	lr, [sp], #4
 800a5a8:	b003      	add	sp, #12
 800a5aa:	4770      	bx	lr
 800a5ac:	2000001c 	.word	0x2000001c

0800a5b0 <memmove>:
 800a5b0:	4288      	cmp	r0, r1
 800a5b2:	b510      	push	{r4, lr}
 800a5b4:	eb01 0402 	add.w	r4, r1, r2
 800a5b8:	d902      	bls.n	800a5c0 <memmove+0x10>
 800a5ba:	4284      	cmp	r4, r0
 800a5bc:	4623      	mov	r3, r4
 800a5be:	d807      	bhi.n	800a5d0 <memmove+0x20>
 800a5c0:	1e43      	subs	r3, r0, #1
 800a5c2:	42a1      	cmp	r1, r4
 800a5c4:	d008      	beq.n	800a5d8 <memmove+0x28>
 800a5c6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a5ca:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a5ce:	e7f8      	b.n	800a5c2 <memmove+0x12>
 800a5d0:	4402      	add	r2, r0
 800a5d2:	4601      	mov	r1, r0
 800a5d4:	428a      	cmp	r2, r1
 800a5d6:	d100      	bne.n	800a5da <memmove+0x2a>
 800a5d8:	bd10      	pop	{r4, pc}
 800a5da:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a5de:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a5e2:	e7f7      	b.n	800a5d4 <memmove+0x24>

0800a5e4 <__malloc_lock>:
 800a5e4:	4801      	ldr	r0, [pc, #4]	; (800a5ec <__malloc_lock+0x8>)
 800a5e6:	f000 bc09 	b.w	800adfc <__retarget_lock_acquire_recursive>
 800a5ea:	bf00      	nop
 800a5ec:	200004b4 	.word	0x200004b4

0800a5f0 <__malloc_unlock>:
 800a5f0:	4801      	ldr	r0, [pc, #4]	; (800a5f8 <__malloc_unlock+0x8>)
 800a5f2:	f000 bc04 	b.w	800adfe <__retarget_lock_release_recursive>
 800a5f6:	bf00      	nop
 800a5f8:	200004b4 	.word	0x200004b4

0800a5fc <_realloc_r>:
 800a5fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a5fe:	4607      	mov	r7, r0
 800a600:	4614      	mov	r4, r2
 800a602:	460e      	mov	r6, r1
 800a604:	b921      	cbnz	r1, 800a610 <_realloc_r+0x14>
 800a606:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800a60a:	4611      	mov	r1, r2
 800a60c:	f7ff bdb0 	b.w	800a170 <_malloc_r>
 800a610:	b922      	cbnz	r2, 800a61c <_realloc_r+0x20>
 800a612:	f7ff fd5d 	bl	800a0d0 <_free_r>
 800a616:	4625      	mov	r5, r4
 800a618:	4628      	mov	r0, r5
 800a61a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a61c:	f000 fc54 	bl	800aec8 <_malloc_usable_size_r>
 800a620:	42a0      	cmp	r0, r4
 800a622:	d20f      	bcs.n	800a644 <_realloc_r+0x48>
 800a624:	4621      	mov	r1, r4
 800a626:	4638      	mov	r0, r7
 800a628:	f7ff fda2 	bl	800a170 <_malloc_r>
 800a62c:	4605      	mov	r5, r0
 800a62e:	2800      	cmp	r0, #0
 800a630:	d0f2      	beq.n	800a618 <_realloc_r+0x1c>
 800a632:	4631      	mov	r1, r6
 800a634:	4622      	mov	r2, r4
 800a636:	f7fc f911 	bl	800685c <memcpy>
 800a63a:	4631      	mov	r1, r6
 800a63c:	4638      	mov	r0, r7
 800a63e:	f7ff fd47 	bl	800a0d0 <_free_r>
 800a642:	e7e9      	b.n	800a618 <_realloc_r+0x1c>
 800a644:	4635      	mov	r5, r6
 800a646:	e7e7      	b.n	800a618 <_realloc_r+0x1c>

0800a648 <__sfputc_r>:
 800a648:	6893      	ldr	r3, [r2, #8]
 800a64a:	3b01      	subs	r3, #1
 800a64c:	2b00      	cmp	r3, #0
 800a64e:	b410      	push	{r4}
 800a650:	6093      	str	r3, [r2, #8]
 800a652:	da08      	bge.n	800a666 <__sfputc_r+0x1e>
 800a654:	6994      	ldr	r4, [r2, #24]
 800a656:	42a3      	cmp	r3, r4
 800a658:	db01      	blt.n	800a65e <__sfputc_r+0x16>
 800a65a:	290a      	cmp	r1, #10
 800a65c:	d103      	bne.n	800a666 <__sfputc_r+0x1e>
 800a65e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a662:	f000 b94b 	b.w	800a8fc <__swbuf_r>
 800a666:	6813      	ldr	r3, [r2, #0]
 800a668:	1c58      	adds	r0, r3, #1
 800a66a:	6010      	str	r0, [r2, #0]
 800a66c:	7019      	strb	r1, [r3, #0]
 800a66e:	4608      	mov	r0, r1
 800a670:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a674:	4770      	bx	lr

0800a676 <__sfputs_r>:
 800a676:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a678:	4606      	mov	r6, r0
 800a67a:	460f      	mov	r7, r1
 800a67c:	4614      	mov	r4, r2
 800a67e:	18d5      	adds	r5, r2, r3
 800a680:	42ac      	cmp	r4, r5
 800a682:	d101      	bne.n	800a688 <__sfputs_r+0x12>
 800a684:	2000      	movs	r0, #0
 800a686:	e007      	b.n	800a698 <__sfputs_r+0x22>
 800a688:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a68c:	463a      	mov	r2, r7
 800a68e:	4630      	mov	r0, r6
 800a690:	f7ff ffda 	bl	800a648 <__sfputc_r>
 800a694:	1c43      	adds	r3, r0, #1
 800a696:	d1f3      	bne.n	800a680 <__sfputs_r+0xa>
 800a698:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a69c <_vfiprintf_r>:
 800a69c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a6a0:	460d      	mov	r5, r1
 800a6a2:	b09d      	sub	sp, #116	; 0x74
 800a6a4:	4614      	mov	r4, r2
 800a6a6:	4698      	mov	r8, r3
 800a6a8:	4606      	mov	r6, r0
 800a6aa:	b118      	cbz	r0, 800a6b4 <_vfiprintf_r+0x18>
 800a6ac:	6983      	ldr	r3, [r0, #24]
 800a6ae:	b90b      	cbnz	r3, 800a6b4 <_vfiprintf_r+0x18>
 800a6b0:	f000 fb06 	bl	800acc0 <__sinit>
 800a6b4:	4b89      	ldr	r3, [pc, #548]	; (800a8dc <_vfiprintf_r+0x240>)
 800a6b6:	429d      	cmp	r5, r3
 800a6b8:	d11b      	bne.n	800a6f2 <_vfiprintf_r+0x56>
 800a6ba:	6875      	ldr	r5, [r6, #4]
 800a6bc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a6be:	07d9      	lsls	r1, r3, #31
 800a6c0:	d405      	bmi.n	800a6ce <_vfiprintf_r+0x32>
 800a6c2:	89ab      	ldrh	r3, [r5, #12]
 800a6c4:	059a      	lsls	r2, r3, #22
 800a6c6:	d402      	bmi.n	800a6ce <_vfiprintf_r+0x32>
 800a6c8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a6ca:	f000 fb97 	bl	800adfc <__retarget_lock_acquire_recursive>
 800a6ce:	89ab      	ldrh	r3, [r5, #12]
 800a6d0:	071b      	lsls	r3, r3, #28
 800a6d2:	d501      	bpl.n	800a6d8 <_vfiprintf_r+0x3c>
 800a6d4:	692b      	ldr	r3, [r5, #16]
 800a6d6:	b9eb      	cbnz	r3, 800a714 <_vfiprintf_r+0x78>
 800a6d8:	4629      	mov	r1, r5
 800a6da:	4630      	mov	r0, r6
 800a6dc:	f000 f960 	bl	800a9a0 <__swsetup_r>
 800a6e0:	b1c0      	cbz	r0, 800a714 <_vfiprintf_r+0x78>
 800a6e2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a6e4:	07dc      	lsls	r4, r3, #31
 800a6e6:	d50e      	bpl.n	800a706 <_vfiprintf_r+0x6a>
 800a6e8:	f04f 30ff 	mov.w	r0, #4294967295
 800a6ec:	b01d      	add	sp, #116	; 0x74
 800a6ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a6f2:	4b7b      	ldr	r3, [pc, #492]	; (800a8e0 <_vfiprintf_r+0x244>)
 800a6f4:	429d      	cmp	r5, r3
 800a6f6:	d101      	bne.n	800a6fc <_vfiprintf_r+0x60>
 800a6f8:	68b5      	ldr	r5, [r6, #8]
 800a6fa:	e7df      	b.n	800a6bc <_vfiprintf_r+0x20>
 800a6fc:	4b79      	ldr	r3, [pc, #484]	; (800a8e4 <_vfiprintf_r+0x248>)
 800a6fe:	429d      	cmp	r5, r3
 800a700:	bf08      	it	eq
 800a702:	68f5      	ldreq	r5, [r6, #12]
 800a704:	e7da      	b.n	800a6bc <_vfiprintf_r+0x20>
 800a706:	89ab      	ldrh	r3, [r5, #12]
 800a708:	0598      	lsls	r0, r3, #22
 800a70a:	d4ed      	bmi.n	800a6e8 <_vfiprintf_r+0x4c>
 800a70c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a70e:	f000 fb76 	bl	800adfe <__retarget_lock_release_recursive>
 800a712:	e7e9      	b.n	800a6e8 <_vfiprintf_r+0x4c>
 800a714:	2300      	movs	r3, #0
 800a716:	9309      	str	r3, [sp, #36]	; 0x24
 800a718:	2320      	movs	r3, #32
 800a71a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a71e:	f8cd 800c 	str.w	r8, [sp, #12]
 800a722:	2330      	movs	r3, #48	; 0x30
 800a724:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a8e8 <_vfiprintf_r+0x24c>
 800a728:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a72c:	f04f 0901 	mov.w	r9, #1
 800a730:	4623      	mov	r3, r4
 800a732:	469a      	mov	sl, r3
 800a734:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a738:	b10a      	cbz	r2, 800a73e <_vfiprintf_r+0xa2>
 800a73a:	2a25      	cmp	r2, #37	; 0x25
 800a73c:	d1f9      	bne.n	800a732 <_vfiprintf_r+0x96>
 800a73e:	ebba 0b04 	subs.w	fp, sl, r4
 800a742:	d00b      	beq.n	800a75c <_vfiprintf_r+0xc0>
 800a744:	465b      	mov	r3, fp
 800a746:	4622      	mov	r2, r4
 800a748:	4629      	mov	r1, r5
 800a74a:	4630      	mov	r0, r6
 800a74c:	f7ff ff93 	bl	800a676 <__sfputs_r>
 800a750:	3001      	adds	r0, #1
 800a752:	f000 80aa 	beq.w	800a8aa <_vfiprintf_r+0x20e>
 800a756:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a758:	445a      	add	r2, fp
 800a75a:	9209      	str	r2, [sp, #36]	; 0x24
 800a75c:	f89a 3000 	ldrb.w	r3, [sl]
 800a760:	2b00      	cmp	r3, #0
 800a762:	f000 80a2 	beq.w	800a8aa <_vfiprintf_r+0x20e>
 800a766:	2300      	movs	r3, #0
 800a768:	f04f 32ff 	mov.w	r2, #4294967295
 800a76c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a770:	f10a 0a01 	add.w	sl, sl, #1
 800a774:	9304      	str	r3, [sp, #16]
 800a776:	9307      	str	r3, [sp, #28]
 800a778:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a77c:	931a      	str	r3, [sp, #104]	; 0x68
 800a77e:	4654      	mov	r4, sl
 800a780:	2205      	movs	r2, #5
 800a782:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a786:	4858      	ldr	r0, [pc, #352]	; (800a8e8 <_vfiprintf_r+0x24c>)
 800a788:	f7f5 fd32 	bl	80001f0 <memchr>
 800a78c:	9a04      	ldr	r2, [sp, #16]
 800a78e:	b9d8      	cbnz	r0, 800a7c8 <_vfiprintf_r+0x12c>
 800a790:	06d1      	lsls	r1, r2, #27
 800a792:	bf44      	itt	mi
 800a794:	2320      	movmi	r3, #32
 800a796:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a79a:	0713      	lsls	r3, r2, #28
 800a79c:	bf44      	itt	mi
 800a79e:	232b      	movmi	r3, #43	; 0x2b
 800a7a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a7a4:	f89a 3000 	ldrb.w	r3, [sl]
 800a7a8:	2b2a      	cmp	r3, #42	; 0x2a
 800a7aa:	d015      	beq.n	800a7d8 <_vfiprintf_r+0x13c>
 800a7ac:	9a07      	ldr	r2, [sp, #28]
 800a7ae:	4654      	mov	r4, sl
 800a7b0:	2000      	movs	r0, #0
 800a7b2:	f04f 0c0a 	mov.w	ip, #10
 800a7b6:	4621      	mov	r1, r4
 800a7b8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a7bc:	3b30      	subs	r3, #48	; 0x30
 800a7be:	2b09      	cmp	r3, #9
 800a7c0:	d94e      	bls.n	800a860 <_vfiprintf_r+0x1c4>
 800a7c2:	b1b0      	cbz	r0, 800a7f2 <_vfiprintf_r+0x156>
 800a7c4:	9207      	str	r2, [sp, #28]
 800a7c6:	e014      	b.n	800a7f2 <_vfiprintf_r+0x156>
 800a7c8:	eba0 0308 	sub.w	r3, r0, r8
 800a7cc:	fa09 f303 	lsl.w	r3, r9, r3
 800a7d0:	4313      	orrs	r3, r2
 800a7d2:	9304      	str	r3, [sp, #16]
 800a7d4:	46a2      	mov	sl, r4
 800a7d6:	e7d2      	b.n	800a77e <_vfiprintf_r+0xe2>
 800a7d8:	9b03      	ldr	r3, [sp, #12]
 800a7da:	1d19      	adds	r1, r3, #4
 800a7dc:	681b      	ldr	r3, [r3, #0]
 800a7de:	9103      	str	r1, [sp, #12]
 800a7e0:	2b00      	cmp	r3, #0
 800a7e2:	bfbb      	ittet	lt
 800a7e4:	425b      	neglt	r3, r3
 800a7e6:	f042 0202 	orrlt.w	r2, r2, #2
 800a7ea:	9307      	strge	r3, [sp, #28]
 800a7ec:	9307      	strlt	r3, [sp, #28]
 800a7ee:	bfb8      	it	lt
 800a7f0:	9204      	strlt	r2, [sp, #16]
 800a7f2:	7823      	ldrb	r3, [r4, #0]
 800a7f4:	2b2e      	cmp	r3, #46	; 0x2e
 800a7f6:	d10c      	bne.n	800a812 <_vfiprintf_r+0x176>
 800a7f8:	7863      	ldrb	r3, [r4, #1]
 800a7fa:	2b2a      	cmp	r3, #42	; 0x2a
 800a7fc:	d135      	bne.n	800a86a <_vfiprintf_r+0x1ce>
 800a7fe:	9b03      	ldr	r3, [sp, #12]
 800a800:	1d1a      	adds	r2, r3, #4
 800a802:	681b      	ldr	r3, [r3, #0]
 800a804:	9203      	str	r2, [sp, #12]
 800a806:	2b00      	cmp	r3, #0
 800a808:	bfb8      	it	lt
 800a80a:	f04f 33ff 	movlt.w	r3, #4294967295
 800a80e:	3402      	adds	r4, #2
 800a810:	9305      	str	r3, [sp, #20]
 800a812:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a8f8 <_vfiprintf_r+0x25c>
 800a816:	7821      	ldrb	r1, [r4, #0]
 800a818:	2203      	movs	r2, #3
 800a81a:	4650      	mov	r0, sl
 800a81c:	f7f5 fce8 	bl	80001f0 <memchr>
 800a820:	b140      	cbz	r0, 800a834 <_vfiprintf_r+0x198>
 800a822:	2340      	movs	r3, #64	; 0x40
 800a824:	eba0 000a 	sub.w	r0, r0, sl
 800a828:	fa03 f000 	lsl.w	r0, r3, r0
 800a82c:	9b04      	ldr	r3, [sp, #16]
 800a82e:	4303      	orrs	r3, r0
 800a830:	3401      	adds	r4, #1
 800a832:	9304      	str	r3, [sp, #16]
 800a834:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a838:	482c      	ldr	r0, [pc, #176]	; (800a8ec <_vfiprintf_r+0x250>)
 800a83a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a83e:	2206      	movs	r2, #6
 800a840:	f7f5 fcd6 	bl	80001f0 <memchr>
 800a844:	2800      	cmp	r0, #0
 800a846:	d03f      	beq.n	800a8c8 <_vfiprintf_r+0x22c>
 800a848:	4b29      	ldr	r3, [pc, #164]	; (800a8f0 <_vfiprintf_r+0x254>)
 800a84a:	bb1b      	cbnz	r3, 800a894 <_vfiprintf_r+0x1f8>
 800a84c:	9b03      	ldr	r3, [sp, #12]
 800a84e:	3307      	adds	r3, #7
 800a850:	f023 0307 	bic.w	r3, r3, #7
 800a854:	3308      	adds	r3, #8
 800a856:	9303      	str	r3, [sp, #12]
 800a858:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a85a:	443b      	add	r3, r7
 800a85c:	9309      	str	r3, [sp, #36]	; 0x24
 800a85e:	e767      	b.n	800a730 <_vfiprintf_r+0x94>
 800a860:	fb0c 3202 	mla	r2, ip, r2, r3
 800a864:	460c      	mov	r4, r1
 800a866:	2001      	movs	r0, #1
 800a868:	e7a5      	b.n	800a7b6 <_vfiprintf_r+0x11a>
 800a86a:	2300      	movs	r3, #0
 800a86c:	3401      	adds	r4, #1
 800a86e:	9305      	str	r3, [sp, #20]
 800a870:	4619      	mov	r1, r3
 800a872:	f04f 0c0a 	mov.w	ip, #10
 800a876:	4620      	mov	r0, r4
 800a878:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a87c:	3a30      	subs	r2, #48	; 0x30
 800a87e:	2a09      	cmp	r2, #9
 800a880:	d903      	bls.n	800a88a <_vfiprintf_r+0x1ee>
 800a882:	2b00      	cmp	r3, #0
 800a884:	d0c5      	beq.n	800a812 <_vfiprintf_r+0x176>
 800a886:	9105      	str	r1, [sp, #20]
 800a888:	e7c3      	b.n	800a812 <_vfiprintf_r+0x176>
 800a88a:	fb0c 2101 	mla	r1, ip, r1, r2
 800a88e:	4604      	mov	r4, r0
 800a890:	2301      	movs	r3, #1
 800a892:	e7f0      	b.n	800a876 <_vfiprintf_r+0x1da>
 800a894:	ab03      	add	r3, sp, #12
 800a896:	9300      	str	r3, [sp, #0]
 800a898:	462a      	mov	r2, r5
 800a89a:	4b16      	ldr	r3, [pc, #88]	; (800a8f4 <_vfiprintf_r+0x258>)
 800a89c:	a904      	add	r1, sp, #16
 800a89e:	4630      	mov	r0, r6
 800a8a0:	f7fc f892 	bl	80069c8 <_printf_float>
 800a8a4:	4607      	mov	r7, r0
 800a8a6:	1c78      	adds	r0, r7, #1
 800a8a8:	d1d6      	bne.n	800a858 <_vfiprintf_r+0x1bc>
 800a8aa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a8ac:	07d9      	lsls	r1, r3, #31
 800a8ae:	d405      	bmi.n	800a8bc <_vfiprintf_r+0x220>
 800a8b0:	89ab      	ldrh	r3, [r5, #12]
 800a8b2:	059a      	lsls	r2, r3, #22
 800a8b4:	d402      	bmi.n	800a8bc <_vfiprintf_r+0x220>
 800a8b6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a8b8:	f000 faa1 	bl	800adfe <__retarget_lock_release_recursive>
 800a8bc:	89ab      	ldrh	r3, [r5, #12]
 800a8be:	065b      	lsls	r3, r3, #25
 800a8c0:	f53f af12 	bmi.w	800a6e8 <_vfiprintf_r+0x4c>
 800a8c4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a8c6:	e711      	b.n	800a6ec <_vfiprintf_r+0x50>
 800a8c8:	ab03      	add	r3, sp, #12
 800a8ca:	9300      	str	r3, [sp, #0]
 800a8cc:	462a      	mov	r2, r5
 800a8ce:	4b09      	ldr	r3, [pc, #36]	; (800a8f4 <_vfiprintf_r+0x258>)
 800a8d0:	a904      	add	r1, sp, #16
 800a8d2:	4630      	mov	r0, r6
 800a8d4:	f7fc fb1c 	bl	8006f10 <_printf_i>
 800a8d8:	e7e4      	b.n	800a8a4 <_vfiprintf_r+0x208>
 800a8da:	bf00      	nop
 800a8dc:	0800b8f4 	.word	0x0800b8f4
 800a8e0:	0800b914 	.word	0x0800b914
 800a8e4:	0800b8d4 	.word	0x0800b8d4
 800a8e8:	0800b884 	.word	0x0800b884
 800a8ec:	0800b88e 	.word	0x0800b88e
 800a8f0:	080069c9 	.word	0x080069c9
 800a8f4:	0800a677 	.word	0x0800a677
 800a8f8:	0800b88a 	.word	0x0800b88a

0800a8fc <__swbuf_r>:
 800a8fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a8fe:	460e      	mov	r6, r1
 800a900:	4614      	mov	r4, r2
 800a902:	4605      	mov	r5, r0
 800a904:	b118      	cbz	r0, 800a90e <__swbuf_r+0x12>
 800a906:	6983      	ldr	r3, [r0, #24]
 800a908:	b90b      	cbnz	r3, 800a90e <__swbuf_r+0x12>
 800a90a:	f000 f9d9 	bl	800acc0 <__sinit>
 800a90e:	4b21      	ldr	r3, [pc, #132]	; (800a994 <__swbuf_r+0x98>)
 800a910:	429c      	cmp	r4, r3
 800a912:	d12b      	bne.n	800a96c <__swbuf_r+0x70>
 800a914:	686c      	ldr	r4, [r5, #4]
 800a916:	69a3      	ldr	r3, [r4, #24]
 800a918:	60a3      	str	r3, [r4, #8]
 800a91a:	89a3      	ldrh	r3, [r4, #12]
 800a91c:	071a      	lsls	r2, r3, #28
 800a91e:	d52f      	bpl.n	800a980 <__swbuf_r+0x84>
 800a920:	6923      	ldr	r3, [r4, #16]
 800a922:	b36b      	cbz	r3, 800a980 <__swbuf_r+0x84>
 800a924:	6923      	ldr	r3, [r4, #16]
 800a926:	6820      	ldr	r0, [r4, #0]
 800a928:	1ac0      	subs	r0, r0, r3
 800a92a:	6963      	ldr	r3, [r4, #20]
 800a92c:	b2f6      	uxtb	r6, r6
 800a92e:	4283      	cmp	r3, r0
 800a930:	4637      	mov	r7, r6
 800a932:	dc04      	bgt.n	800a93e <__swbuf_r+0x42>
 800a934:	4621      	mov	r1, r4
 800a936:	4628      	mov	r0, r5
 800a938:	f000 f92e 	bl	800ab98 <_fflush_r>
 800a93c:	bb30      	cbnz	r0, 800a98c <__swbuf_r+0x90>
 800a93e:	68a3      	ldr	r3, [r4, #8]
 800a940:	3b01      	subs	r3, #1
 800a942:	60a3      	str	r3, [r4, #8]
 800a944:	6823      	ldr	r3, [r4, #0]
 800a946:	1c5a      	adds	r2, r3, #1
 800a948:	6022      	str	r2, [r4, #0]
 800a94a:	701e      	strb	r6, [r3, #0]
 800a94c:	6963      	ldr	r3, [r4, #20]
 800a94e:	3001      	adds	r0, #1
 800a950:	4283      	cmp	r3, r0
 800a952:	d004      	beq.n	800a95e <__swbuf_r+0x62>
 800a954:	89a3      	ldrh	r3, [r4, #12]
 800a956:	07db      	lsls	r3, r3, #31
 800a958:	d506      	bpl.n	800a968 <__swbuf_r+0x6c>
 800a95a:	2e0a      	cmp	r6, #10
 800a95c:	d104      	bne.n	800a968 <__swbuf_r+0x6c>
 800a95e:	4621      	mov	r1, r4
 800a960:	4628      	mov	r0, r5
 800a962:	f000 f919 	bl	800ab98 <_fflush_r>
 800a966:	b988      	cbnz	r0, 800a98c <__swbuf_r+0x90>
 800a968:	4638      	mov	r0, r7
 800a96a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a96c:	4b0a      	ldr	r3, [pc, #40]	; (800a998 <__swbuf_r+0x9c>)
 800a96e:	429c      	cmp	r4, r3
 800a970:	d101      	bne.n	800a976 <__swbuf_r+0x7a>
 800a972:	68ac      	ldr	r4, [r5, #8]
 800a974:	e7cf      	b.n	800a916 <__swbuf_r+0x1a>
 800a976:	4b09      	ldr	r3, [pc, #36]	; (800a99c <__swbuf_r+0xa0>)
 800a978:	429c      	cmp	r4, r3
 800a97a:	bf08      	it	eq
 800a97c:	68ec      	ldreq	r4, [r5, #12]
 800a97e:	e7ca      	b.n	800a916 <__swbuf_r+0x1a>
 800a980:	4621      	mov	r1, r4
 800a982:	4628      	mov	r0, r5
 800a984:	f000 f80c 	bl	800a9a0 <__swsetup_r>
 800a988:	2800      	cmp	r0, #0
 800a98a:	d0cb      	beq.n	800a924 <__swbuf_r+0x28>
 800a98c:	f04f 37ff 	mov.w	r7, #4294967295
 800a990:	e7ea      	b.n	800a968 <__swbuf_r+0x6c>
 800a992:	bf00      	nop
 800a994:	0800b8f4 	.word	0x0800b8f4
 800a998:	0800b914 	.word	0x0800b914
 800a99c:	0800b8d4 	.word	0x0800b8d4

0800a9a0 <__swsetup_r>:
 800a9a0:	4b32      	ldr	r3, [pc, #200]	; (800aa6c <__swsetup_r+0xcc>)
 800a9a2:	b570      	push	{r4, r5, r6, lr}
 800a9a4:	681d      	ldr	r5, [r3, #0]
 800a9a6:	4606      	mov	r6, r0
 800a9a8:	460c      	mov	r4, r1
 800a9aa:	b125      	cbz	r5, 800a9b6 <__swsetup_r+0x16>
 800a9ac:	69ab      	ldr	r3, [r5, #24]
 800a9ae:	b913      	cbnz	r3, 800a9b6 <__swsetup_r+0x16>
 800a9b0:	4628      	mov	r0, r5
 800a9b2:	f000 f985 	bl	800acc0 <__sinit>
 800a9b6:	4b2e      	ldr	r3, [pc, #184]	; (800aa70 <__swsetup_r+0xd0>)
 800a9b8:	429c      	cmp	r4, r3
 800a9ba:	d10f      	bne.n	800a9dc <__swsetup_r+0x3c>
 800a9bc:	686c      	ldr	r4, [r5, #4]
 800a9be:	89a3      	ldrh	r3, [r4, #12]
 800a9c0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a9c4:	0719      	lsls	r1, r3, #28
 800a9c6:	d42c      	bmi.n	800aa22 <__swsetup_r+0x82>
 800a9c8:	06dd      	lsls	r5, r3, #27
 800a9ca:	d411      	bmi.n	800a9f0 <__swsetup_r+0x50>
 800a9cc:	2309      	movs	r3, #9
 800a9ce:	6033      	str	r3, [r6, #0]
 800a9d0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a9d4:	81a3      	strh	r3, [r4, #12]
 800a9d6:	f04f 30ff 	mov.w	r0, #4294967295
 800a9da:	e03e      	b.n	800aa5a <__swsetup_r+0xba>
 800a9dc:	4b25      	ldr	r3, [pc, #148]	; (800aa74 <__swsetup_r+0xd4>)
 800a9de:	429c      	cmp	r4, r3
 800a9e0:	d101      	bne.n	800a9e6 <__swsetup_r+0x46>
 800a9e2:	68ac      	ldr	r4, [r5, #8]
 800a9e4:	e7eb      	b.n	800a9be <__swsetup_r+0x1e>
 800a9e6:	4b24      	ldr	r3, [pc, #144]	; (800aa78 <__swsetup_r+0xd8>)
 800a9e8:	429c      	cmp	r4, r3
 800a9ea:	bf08      	it	eq
 800a9ec:	68ec      	ldreq	r4, [r5, #12]
 800a9ee:	e7e6      	b.n	800a9be <__swsetup_r+0x1e>
 800a9f0:	0758      	lsls	r0, r3, #29
 800a9f2:	d512      	bpl.n	800aa1a <__swsetup_r+0x7a>
 800a9f4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a9f6:	b141      	cbz	r1, 800aa0a <__swsetup_r+0x6a>
 800a9f8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a9fc:	4299      	cmp	r1, r3
 800a9fe:	d002      	beq.n	800aa06 <__swsetup_r+0x66>
 800aa00:	4630      	mov	r0, r6
 800aa02:	f7ff fb65 	bl	800a0d0 <_free_r>
 800aa06:	2300      	movs	r3, #0
 800aa08:	6363      	str	r3, [r4, #52]	; 0x34
 800aa0a:	89a3      	ldrh	r3, [r4, #12]
 800aa0c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800aa10:	81a3      	strh	r3, [r4, #12]
 800aa12:	2300      	movs	r3, #0
 800aa14:	6063      	str	r3, [r4, #4]
 800aa16:	6923      	ldr	r3, [r4, #16]
 800aa18:	6023      	str	r3, [r4, #0]
 800aa1a:	89a3      	ldrh	r3, [r4, #12]
 800aa1c:	f043 0308 	orr.w	r3, r3, #8
 800aa20:	81a3      	strh	r3, [r4, #12]
 800aa22:	6923      	ldr	r3, [r4, #16]
 800aa24:	b94b      	cbnz	r3, 800aa3a <__swsetup_r+0x9a>
 800aa26:	89a3      	ldrh	r3, [r4, #12]
 800aa28:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800aa2c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800aa30:	d003      	beq.n	800aa3a <__swsetup_r+0x9a>
 800aa32:	4621      	mov	r1, r4
 800aa34:	4630      	mov	r0, r6
 800aa36:	f000 fa07 	bl	800ae48 <__smakebuf_r>
 800aa3a:	89a0      	ldrh	r0, [r4, #12]
 800aa3c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800aa40:	f010 0301 	ands.w	r3, r0, #1
 800aa44:	d00a      	beq.n	800aa5c <__swsetup_r+0xbc>
 800aa46:	2300      	movs	r3, #0
 800aa48:	60a3      	str	r3, [r4, #8]
 800aa4a:	6963      	ldr	r3, [r4, #20]
 800aa4c:	425b      	negs	r3, r3
 800aa4e:	61a3      	str	r3, [r4, #24]
 800aa50:	6923      	ldr	r3, [r4, #16]
 800aa52:	b943      	cbnz	r3, 800aa66 <__swsetup_r+0xc6>
 800aa54:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800aa58:	d1ba      	bne.n	800a9d0 <__swsetup_r+0x30>
 800aa5a:	bd70      	pop	{r4, r5, r6, pc}
 800aa5c:	0781      	lsls	r1, r0, #30
 800aa5e:	bf58      	it	pl
 800aa60:	6963      	ldrpl	r3, [r4, #20]
 800aa62:	60a3      	str	r3, [r4, #8]
 800aa64:	e7f4      	b.n	800aa50 <__swsetup_r+0xb0>
 800aa66:	2000      	movs	r0, #0
 800aa68:	e7f7      	b.n	800aa5a <__swsetup_r+0xba>
 800aa6a:	bf00      	nop
 800aa6c:	2000001c 	.word	0x2000001c
 800aa70:	0800b8f4 	.word	0x0800b8f4
 800aa74:	0800b914 	.word	0x0800b914
 800aa78:	0800b8d4 	.word	0x0800b8d4

0800aa7c <abort>:
 800aa7c:	b508      	push	{r3, lr}
 800aa7e:	2006      	movs	r0, #6
 800aa80:	f000 fa52 	bl	800af28 <raise>
 800aa84:	2001      	movs	r0, #1
 800aa86:	f7f7 ffdd 	bl	8002a44 <_exit>
	...

0800aa8c <__sflush_r>:
 800aa8c:	898a      	ldrh	r2, [r1, #12]
 800aa8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aa92:	4605      	mov	r5, r0
 800aa94:	0710      	lsls	r0, r2, #28
 800aa96:	460c      	mov	r4, r1
 800aa98:	d458      	bmi.n	800ab4c <__sflush_r+0xc0>
 800aa9a:	684b      	ldr	r3, [r1, #4]
 800aa9c:	2b00      	cmp	r3, #0
 800aa9e:	dc05      	bgt.n	800aaac <__sflush_r+0x20>
 800aaa0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800aaa2:	2b00      	cmp	r3, #0
 800aaa4:	dc02      	bgt.n	800aaac <__sflush_r+0x20>
 800aaa6:	2000      	movs	r0, #0
 800aaa8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aaac:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800aaae:	2e00      	cmp	r6, #0
 800aab0:	d0f9      	beq.n	800aaa6 <__sflush_r+0x1a>
 800aab2:	2300      	movs	r3, #0
 800aab4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800aab8:	682f      	ldr	r7, [r5, #0]
 800aaba:	602b      	str	r3, [r5, #0]
 800aabc:	d032      	beq.n	800ab24 <__sflush_r+0x98>
 800aabe:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800aac0:	89a3      	ldrh	r3, [r4, #12]
 800aac2:	075a      	lsls	r2, r3, #29
 800aac4:	d505      	bpl.n	800aad2 <__sflush_r+0x46>
 800aac6:	6863      	ldr	r3, [r4, #4]
 800aac8:	1ac0      	subs	r0, r0, r3
 800aaca:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800aacc:	b10b      	cbz	r3, 800aad2 <__sflush_r+0x46>
 800aace:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800aad0:	1ac0      	subs	r0, r0, r3
 800aad2:	2300      	movs	r3, #0
 800aad4:	4602      	mov	r2, r0
 800aad6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800aad8:	6a21      	ldr	r1, [r4, #32]
 800aada:	4628      	mov	r0, r5
 800aadc:	47b0      	blx	r6
 800aade:	1c43      	adds	r3, r0, #1
 800aae0:	89a3      	ldrh	r3, [r4, #12]
 800aae2:	d106      	bne.n	800aaf2 <__sflush_r+0x66>
 800aae4:	6829      	ldr	r1, [r5, #0]
 800aae6:	291d      	cmp	r1, #29
 800aae8:	d82c      	bhi.n	800ab44 <__sflush_r+0xb8>
 800aaea:	4a2a      	ldr	r2, [pc, #168]	; (800ab94 <__sflush_r+0x108>)
 800aaec:	40ca      	lsrs	r2, r1
 800aaee:	07d6      	lsls	r6, r2, #31
 800aaf0:	d528      	bpl.n	800ab44 <__sflush_r+0xb8>
 800aaf2:	2200      	movs	r2, #0
 800aaf4:	6062      	str	r2, [r4, #4]
 800aaf6:	04d9      	lsls	r1, r3, #19
 800aaf8:	6922      	ldr	r2, [r4, #16]
 800aafa:	6022      	str	r2, [r4, #0]
 800aafc:	d504      	bpl.n	800ab08 <__sflush_r+0x7c>
 800aafe:	1c42      	adds	r2, r0, #1
 800ab00:	d101      	bne.n	800ab06 <__sflush_r+0x7a>
 800ab02:	682b      	ldr	r3, [r5, #0]
 800ab04:	b903      	cbnz	r3, 800ab08 <__sflush_r+0x7c>
 800ab06:	6560      	str	r0, [r4, #84]	; 0x54
 800ab08:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ab0a:	602f      	str	r7, [r5, #0]
 800ab0c:	2900      	cmp	r1, #0
 800ab0e:	d0ca      	beq.n	800aaa6 <__sflush_r+0x1a>
 800ab10:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ab14:	4299      	cmp	r1, r3
 800ab16:	d002      	beq.n	800ab1e <__sflush_r+0x92>
 800ab18:	4628      	mov	r0, r5
 800ab1a:	f7ff fad9 	bl	800a0d0 <_free_r>
 800ab1e:	2000      	movs	r0, #0
 800ab20:	6360      	str	r0, [r4, #52]	; 0x34
 800ab22:	e7c1      	b.n	800aaa8 <__sflush_r+0x1c>
 800ab24:	6a21      	ldr	r1, [r4, #32]
 800ab26:	2301      	movs	r3, #1
 800ab28:	4628      	mov	r0, r5
 800ab2a:	47b0      	blx	r6
 800ab2c:	1c41      	adds	r1, r0, #1
 800ab2e:	d1c7      	bne.n	800aac0 <__sflush_r+0x34>
 800ab30:	682b      	ldr	r3, [r5, #0]
 800ab32:	2b00      	cmp	r3, #0
 800ab34:	d0c4      	beq.n	800aac0 <__sflush_r+0x34>
 800ab36:	2b1d      	cmp	r3, #29
 800ab38:	d001      	beq.n	800ab3e <__sflush_r+0xb2>
 800ab3a:	2b16      	cmp	r3, #22
 800ab3c:	d101      	bne.n	800ab42 <__sflush_r+0xb6>
 800ab3e:	602f      	str	r7, [r5, #0]
 800ab40:	e7b1      	b.n	800aaa6 <__sflush_r+0x1a>
 800ab42:	89a3      	ldrh	r3, [r4, #12]
 800ab44:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ab48:	81a3      	strh	r3, [r4, #12]
 800ab4a:	e7ad      	b.n	800aaa8 <__sflush_r+0x1c>
 800ab4c:	690f      	ldr	r7, [r1, #16]
 800ab4e:	2f00      	cmp	r7, #0
 800ab50:	d0a9      	beq.n	800aaa6 <__sflush_r+0x1a>
 800ab52:	0793      	lsls	r3, r2, #30
 800ab54:	680e      	ldr	r6, [r1, #0]
 800ab56:	bf08      	it	eq
 800ab58:	694b      	ldreq	r3, [r1, #20]
 800ab5a:	600f      	str	r7, [r1, #0]
 800ab5c:	bf18      	it	ne
 800ab5e:	2300      	movne	r3, #0
 800ab60:	eba6 0807 	sub.w	r8, r6, r7
 800ab64:	608b      	str	r3, [r1, #8]
 800ab66:	f1b8 0f00 	cmp.w	r8, #0
 800ab6a:	dd9c      	ble.n	800aaa6 <__sflush_r+0x1a>
 800ab6c:	6a21      	ldr	r1, [r4, #32]
 800ab6e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ab70:	4643      	mov	r3, r8
 800ab72:	463a      	mov	r2, r7
 800ab74:	4628      	mov	r0, r5
 800ab76:	47b0      	blx	r6
 800ab78:	2800      	cmp	r0, #0
 800ab7a:	dc06      	bgt.n	800ab8a <__sflush_r+0xfe>
 800ab7c:	89a3      	ldrh	r3, [r4, #12]
 800ab7e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ab82:	81a3      	strh	r3, [r4, #12]
 800ab84:	f04f 30ff 	mov.w	r0, #4294967295
 800ab88:	e78e      	b.n	800aaa8 <__sflush_r+0x1c>
 800ab8a:	4407      	add	r7, r0
 800ab8c:	eba8 0800 	sub.w	r8, r8, r0
 800ab90:	e7e9      	b.n	800ab66 <__sflush_r+0xda>
 800ab92:	bf00      	nop
 800ab94:	20400001 	.word	0x20400001

0800ab98 <_fflush_r>:
 800ab98:	b538      	push	{r3, r4, r5, lr}
 800ab9a:	690b      	ldr	r3, [r1, #16]
 800ab9c:	4605      	mov	r5, r0
 800ab9e:	460c      	mov	r4, r1
 800aba0:	b913      	cbnz	r3, 800aba8 <_fflush_r+0x10>
 800aba2:	2500      	movs	r5, #0
 800aba4:	4628      	mov	r0, r5
 800aba6:	bd38      	pop	{r3, r4, r5, pc}
 800aba8:	b118      	cbz	r0, 800abb2 <_fflush_r+0x1a>
 800abaa:	6983      	ldr	r3, [r0, #24]
 800abac:	b90b      	cbnz	r3, 800abb2 <_fflush_r+0x1a>
 800abae:	f000 f887 	bl	800acc0 <__sinit>
 800abb2:	4b14      	ldr	r3, [pc, #80]	; (800ac04 <_fflush_r+0x6c>)
 800abb4:	429c      	cmp	r4, r3
 800abb6:	d11b      	bne.n	800abf0 <_fflush_r+0x58>
 800abb8:	686c      	ldr	r4, [r5, #4]
 800abba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800abbe:	2b00      	cmp	r3, #0
 800abc0:	d0ef      	beq.n	800aba2 <_fflush_r+0xa>
 800abc2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800abc4:	07d0      	lsls	r0, r2, #31
 800abc6:	d404      	bmi.n	800abd2 <_fflush_r+0x3a>
 800abc8:	0599      	lsls	r1, r3, #22
 800abca:	d402      	bmi.n	800abd2 <_fflush_r+0x3a>
 800abcc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800abce:	f000 f915 	bl	800adfc <__retarget_lock_acquire_recursive>
 800abd2:	4628      	mov	r0, r5
 800abd4:	4621      	mov	r1, r4
 800abd6:	f7ff ff59 	bl	800aa8c <__sflush_r>
 800abda:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800abdc:	07da      	lsls	r2, r3, #31
 800abde:	4605      	mov	r5, r0
 800abe0:	d4e0      	bmi.n	800aba4 <_fflush_r+0xc>
 800abe2:	89a3      	ldrh	r3, [r4, #12]
 800abe4:	059b      	lsls	r3, r3, #22
 800abe6:	d4dd      	bmi.n	800aba4 <_fflush_r+0xc>
 800abe8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800abea:	f000 f908 	bl	800adfe <__retarget_lock_release_recursive>
 800abee:	e7d9      	b.n	800aba4 <_fflush_r+0xc>
 800abf0:	4b05      	ldr	r3, [pc, #20]	; (800ac08 <_fflush_r+0x70>)
 800abf2:	429c      	cmp	r4, r3
 800abf4:	d101      	bne.n	800abfa <_fflush_r+0x62>
 800abf6:	68ac      	ldr	r4, [r5, #8]
 800abf8:	e7df      	b.n	800abba <_fflush_r+0x22>
 800abfa:	4b04      	ldr	r3, [pc, #16]	; (800ac0c <_fflush_r+0x74>)
 800abfc:	429c      	cmp	r4, r3
 800abfe:	bf08      	it	eq
 800ac00:	68ec      	ldreq	r4, [r5, #12]
 800ac02:	e7da      	b.n	800abba <_fflush_r+0x22>
 800ac04:	0800b8f4 	.word	0x0800b8f4
 800ac08:	0800b914 	.word	0x0800b914
 800ac0c:	0800b8d4 	.word	0x0800b8d4

0800ac10 <std>:
 800ac10:	2300      	movs	r3, #0
 800ac12:	b510      	push	{r4, lr}
 800ac14:	4604      	mov	r4, r0
 800ac16:	e9c0 3300 	strd	r3, r3, [r0]
 800ac1a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ac1e:	6083      	str	r3, [r0, #8]
 800ac20:	8181      	strh	r1, [r0, #12]
 800ac22:	6643      	str	r3, [r0, #100]	; 0x64
 800ac24:	81c2      	strh	r2, [r0, #14]
 800ac26:	6183      	str	r3, [r0, #24]
 800ac28:	4619      	mov	r1, r3
 800ac2a:	2208      	movs	r2, #8
 800ac2c:	305c      	adds	r0, #92	; 0x5c
 800ac2e:	f7fb fe23 	bl	8006878 <memset>
 800ac32:	4b05      	ldr	r3, [pc, #20]	; (800ac48 <std+0x38>)
 800ac34:	6263      	str	r3, [r4, #36]	; 0x24
 800ac36:	4b05      	ldr	r3, [pc, #20]	; (800ac4c <std+0x3c>)
 800ac38:	62a3      	str	r3, [r4, #40]	; 0x28
 800ac3a:	4b05      	ldr	r3, [pc, #20]	; (800ac50 <std+0x40>)
 800ac3c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ac3e:	4b05      	ldr	r3, [pc, #20]	; (800ac54 <std+0x44>)
 800ac40:	6224      	str	r4, [r4, #32]
 800ac42:	6323      	str	r3, [r4, #48]	; 0x30
 800ac44:	bd10      	pop	{r4, pc}
 800ac46:	bf00      	nop
 800ac48:	0800af61 	.word	0x0800af61
 800ac4c:	0800af83 	.word	0x0800af83
 800ac50:	0800afbb 	.word	0x0800afbb
 800ac54:	0800afdf 	.word	0x0800afdf

0800ac58 <_cleanup_r>:
 800ac58:	4901      	ldr	r1, [pc, #4]	; (800ac60 <_cleanup_r+0x8>)
 800ac5a:	f000 b8af 	b.w	800adbc <_fwalk_reent>
 800ac5e:	bf00      	nop
 800ac60:	0800ab99 	.word	0x0800ab99

0800ac64 <__sfmoreglue>:
 800ac64:	b570      	push	{r4, r5, r6, lr}
 800ac66:	1e4a      	subs	r2, r1, #1
 800ac68:	2568      	movs	r5, #104	; 0x68
 800ac6a:	4355      	muls	r5, r2
 800ac6c:	460e      	mov	r6, r1
 800ac6e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800ac72:	f7ff fa7d 	bl	800a170 <_malloc_r>
 800ac76:	4604      	mov	r4, r0
 800ac78:	b140      	cbz	r0, 800ac8c <__sfmoreglue+0x28>
 800ac7a:	2100      	movs	r1, #0
 800ac7c:	e9c0 1600 	strd	r1, r6, [r0]
 800ac80:	300c      	adds	r0, #12
 800ac82:	60a0      	str	r0, [r4, #8]
 800ac84:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800ac88:	f7fb fdf6 	bl	8006878 <memset>
 800ac8c:	4620      	mov	r0, r4
 800ac8e:	bd70      	pop	{r4, r5, r6, pc}

0800ac90 <__sfp_lock_acquire>:
 800ac90:	4801      	ldr	r0, [pc, #4]	; (800ac98 <__sfp_lock_acquire+0x8>)
 800ac92:	f000 b8b3 	b.w	800adfc <__retarget_lock_acquire_recursive>
 800ac96:	bf00      	nop
 800ac98:	200004b8 	.word	0x200004b8

0800ac9c <__sfp_lock_release>:
 800ac9c:	4801      	ldr	r0, [pc, #4]	; (800aca4 <__sfp_lock_release+0x8>)
 800ac9e:	f000 b8ae 	b.w	800adfe <__retarget_lock_release_recursive>
 800aca2:	bf00      	nop
 800aca4:	200004b8 	.word	0x200004b8

0800aca8 <__sinit_lock_acquire>:
 800aca8:	4801      	ldr	r0, [pc, #4]	; (800acb0 <__sinit_lock_acquire+0x8>)
 800acaa:	f000 b8a7 	b.w	800adfc <__retarget_lock_acquire_recursive>
 800acae:	bf00      	nop
 800acb0:	200004b3 	.word	0x200004b3

0800acb4 <__sinit_lock_release>:
 800acb4:	4801      	ldr	r0, [pc, #4]	; (800acbc <__sinit_lock_release+0x8>)
 800acb6:	f000 b8a2 	b.w	800adfe <__retarget_lock_release_recursive>
 800acba:	bf00      	nop
 800acbc:	200004b3 	.word	0x200004b3

0800acc0 <__sinit>:
 800acc0:	b510      	push	{r4, lr}
 800acc2:	4604      	mov	r4, r0
 800acc4:	f7ff fff0 	bl	800aca8 <__sinit_lock_acquire>
 800acc8:	69a3      	ldr	r3, [r4, #24]
 800acca:	b11b      	cbz	r3, 800acd4 <__sinit+0x14>
 800accc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800acd0:	f7ff bff0 	b.w	800acb4 <__sinit_lock_release>
 800acd4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800acd8:	6523      	str	r3, [r4, #80]	; 0x50
 800acda:	4b13      	ldr	r3, [pc, #76]	; (800ad28 <__sinit+0x68>)
 800acdc:	4a13      	ldr	r2, [pc, #76]	; (800ad2c <__sinit+0x6c>)
 800acde:	681b      	ldr	r3, [r3, #0]
 800ace0:	62a2      	str	r2, [r4, #40]	; 0x28
 800ace2:	42a3      	cmp	r3, r4
 800ace4:	bf04      	itt	eq
 800ace6:	2301      	moveq	r3, #1
 800ace8:	61a3      	streq	r3, [r4, #24]
 800acea:	4620      	mov	r0, r4
 800acec:	f000 f820 	bl	800ad30 <__sfp>
 800acf0:	6060      	str	r0, [r4, #4]
 800acf2:	4620      	mov	r0, r4
 800acf4:	f000 f81c 	bl	800ad30 <__sfp>
 800acf8:	60a0      	str	r0, [r4, #8]
 800acfa:	4620      	mov	r0, r4
 800acfc:	f000 f818 	bl	800ad30 <__sfp>
 800ad00:	2200      	movs	r2, #0
 800ad02:	60e0      	str	r0, [r4, #12]
 800ad04:	2104      	movs	r1, #4
 800ad06:	6860      	ldr	r0, [r4, #4]
 800ad08:	f7ff ff82 	bl	800ac10 <std>
 800ad0c:	68a0      	ldr	r0, [r4, #8]
 800ad0e:	2201      	movs	r2, #1
 800ad10:	2109      	movs	r1, #9
 800ad12:	f7ff ff7d 	bl	800ac10 <std>
 800ad16:	68e0      	ldr	r0, [r4, #12]
 800ad18:	2202      	movs	r2, #2
 800ad1a:	2112      	movs	r1, #18
 800ad1c:	f7ff ff78 	bl	800ac10 <std>
 800ad20:	2301      	movs	r3, #1
 800ad22:	61a3      	str	r3, [r4, #24]
 800ad24:	e7d2      	b.n	800accc <__sinit+0xc>
 800ad26:	bf00      	nop
 800ad28:	0800b480 	.word	0x0800b480
 800ad2c:	0800ac59 	.word	0x0800ac59

0800ad30 <__sfp>:
 800ad30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad32:	4607      	mov	r7, r0
 800ad34:	f7ff ffac 	bl	800ac90 <__sfp_lock_acquire>
 800ad38:	4b1e      	ldr	r3, [pc, #120]	; (800adb4 <__sfp+0x84>)
 800ad3a:	681e      	ldr	r6, [r3, #0]
 800ad3c:	69b3      	ldr	r3, [r6, #24]
 800ad3e:	b913      	cbnz	r3, 800ad46 <__sfp+0x16>
 800ad40:	4630      	mov	r0, r6
 800ad42:	f7ff ffbd 	bl	800acc0 <__sinit>
 800ad46:	3648      	adds	r6, #72	; 0x48
 800ad48:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800ad4c:	3b01      	subs	r3, #1
 800ad4e:	d503      	bpl.n	800ad58 <__sfp+0x28>
 800ad50:	6833      	ldr	r3, [r6, #0]
 800ad52:	b30b      	cbz	r3, 800ad98 <__sfp+0x68>
 800ad54:	6836      	ldr	r6, [r6, #0]
 800ad56:	e7f7      	b.n	800ad48 <__sfp+0x18>
 800ad58:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800ad5c:	b9d5      	cbnz	r5, 800ad94 <__sfp+0x64>
 800ad5e:	4b16      	ldr	r3, [pc, #88]	; (800adb8 <__sfp+0x88>)
 800ad60:	60e3      	str	r3, [r4, #12]
 800ad62:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800ad66:	6665      	str	r5, [r4, #100]	; 0x64
 800ad68:	f000 f847 	bl	800adfa <__retarget_lock_init_recursive>
 800ad6c:	f7ff ff96 	bl	800ac9c <__sfp_lock_release>
 800ad70:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800ad74:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800ad78:	6025      	str	r5, [r4, #0]
 800ad7a:	61a5      	str	r5, [r4, #24]
 800ad7c:	2208      	movs	r2, #8
 800ad7e:	4629      	mov	r1, r5
 800ad80:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800ad84:	f7fb fd78 	bl	8006878 <memset>
 800ad88:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800ad8c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800ad90:	4620      	mov	r0, r4
 800ad92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ad94:	3468      	adds	r4, #104	; 0x68
 800ad96:	e7d9      	b.n	800ad4c <__sfp+0x1c>
 800ad98:	2104      	movs	r1, #4
 800ad9a:	4638      	mov	r0, r7
 800ad9c:	f7ff ff62 	bl	800ac64 <__sfmoreglue>
 800ada0:	4604      	mov	r4, r0
 800ada2:	6030      	str	r0, [r6, #0]
 800ada4:	2800      	cmp	r0, #0
 800ada6:	d1d5      	bne.n	800ad54 <__sfp+0x24>
 800ada8:	f7ff ff78 	bl	800ac9c <__sfp_lock_release>
 800adac:	230c      	movs	r3, #12
 800adae:	603b      	str	r3, [r7, #0]
 800adb0:	e7ee      	b.n	800ad90 <__sfp+0x60>
 800adb2:	bf00      	nop
 800adb4:	0800b480 	.word	0x0800b480
 800adb8:	ffff0001 	.word	0xffff0001

0800adbc <_fwalk_reent>:
 800adbc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800adc0:	4606      	mov	r6, r0
 800adc2:	4688      	mov	r8, r1
 800adc4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800adc8:	2700      	movs	r7, #0
 800adca:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800adce:	f1b9 0901 	subs.w	r9, r9, #1
 800add2:	d505      	bpl.n	800ade0 <_fwalk_reent+0x24>
 800add4:	6824      	ldr	r4, [r4, #0]
 800add6:	2c00      	cmp	r4, #0
 800add8:	d1f7      	bne.n	800adca <_fwalk_reent+0xe>
 800adda:	4638      	mov	r0, r7
 800addc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ade0:	89ab      	ldrh	r3, [r5, #12]
 800ade2:	2b01      	cmp	r3, #1
 800ade4:	d907      	bls.n	800adf6 <_fwalk_reent+0x3a>
 800ade6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800adea:	3301      	adds	r3, #1
 800adec:	d003      	beq.n	800adf6 <_fwalk_reent+0x3a>
 800adee:	4629      	mov	r1, r5
 800adf0:	4630      	mov	r0, r6
 800adf2:	47c0      	blx	r8
 800adf4:	4307      	orrs	r7, r0
 800adf6:	3568      	adds	r5, #104	; 0x68
 800adf8:	e7e9      	b.n	800adce <_fwalk_reent+0x12>

0800adfa <__retarget_lock_init_recursive>:
 800adfa:	4770      	bx	lr

0800adfc <__retarget_lock_acquire_recursive>:
 800adfc:	4770      	bx	lr

0800adfe <__retarget_lock_release_recursive>:
 800adfe:	4770      	bx	lr

0800ae00 <__swhatbuf_r>:
 800ae00:	b570      	push	{r4, r5, r6, lr}
 800ae02:	460e      	mov	r6, r1
 800ae04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ae08:	2900      	cmp	r1, #0
 800ae0a:	b096      	sub	sp, #88	; 0x58
 800ae0c:	4614      	mov	r4, r2
 800ae0e:	461d      	mov	r5, r3
 800ae10:	da07      	bge.n	800ae22 <__swhatbuf_r+0x22>
 800ae12:	2300      	movs	r3, #0
 800ae14:	602b      	str	r3, [r5, #0]
 800ae16:	89b3      	ldrh	r3, [r6, #12]
 800ae18:	061a      	lsls	r2, r3, #24
 800ae1a:	d410      	bmi.n	800ae3e <__swhatbuf_r+0x3e>
 800ae1c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ae20:	e00e      	b.n	800ae40 <__swhatbuf_r+0x40>
 800ae22:	466a      	mov	r2, sp
 800ae24:	f000 f902 	bl	800b02c <_fstat_r>
 800ae28:	2800      	cmp	r0, #0
 800ae2a:	dbf2      	blt.n	800ae12 <__swhatbuf_r+0x12>
 800ae2c:	9a01      	ldr	r2, [sp, #4]
 800ae2e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800ae32:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800ae36:	425a      	negs	r2, r3
 800ae38:	415a      	adcs	r2, r3
 800ae3a:	602a      	str	r2, [r5, #0]
 800ae3c:	e7ee      	b.n	800ae1c <__swhatbuf_r+0x1c>
 800ae3e:	2340      	movs	r3, #64	; 0x40
 800ae40:	2000      	movs	r0, #0
 800ae42:	6023      	str	r3, [r4, #0]
 800ae44:	b016      	add	sp, #88	; 0x58
 800ae46:	bd70      	pop	{r4, r5, r6, pc}

0800ae48 <__smakebuf_r>:
 800ae48:	898b      	ldrh	r3, [r1, #12]
 800ae4a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ae4c:	079d      	lsls	r5, r3, #30
 800ae4e:	4606      	mov	r6, r0
 800ae50:	460c      	mov	r4, r1
 800ae52:	d507      	bpl.n	800ae64 <__smakebuf_r+0x1c>
 800ae54:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ae58:	6023      	str	r3, [r4, #0]
 800ae5a:	6123      	str	r3, [r4, #16]
 800ae5c:	2301      	movs	r3, #1
 800ae5e:	6163      	str	r3, [r4, #20]
 800ae60:	b002      	add	sp, #8
 800ae62:	bd70      	pop	{r4, r5, r6, pc}
 800ae64:	ab01      	add	r3, sp, #4
 800ae66:	466a      	mov	r2, sp
 800ae68:	f7ff ffca 	bl	800ae00 <__swhatbuf_r>
 800ae6c:	9900      	ldr	r1, [sp, #0]
 800ae6e:	4605      	mov	r5, r0
 800ae70:	4630      	mov	r0, r6
 800ae72:	f7ff f97d 	bl	800a170 <_malloc_r>
 800ae76:	b948      	cbnz	r0, 800ae8c <__smakebuf_r+0x44>
 800ae78:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ae7c:	059a      	lsls	r2, r3, #22
 800ae7e:	d4ef      	bmi.n	800ae60 <__smakebuf_r+0x18>
 800ae80:	f023 0303 	bic.w	r3, r3, #3
 800ae84:	f043 0302 	orr.w	r3, r3, #2
 800ae88:	81a3      	strh	r3, [r4, #12]
 800ae8a:	e7e3      	b.n	800ae54 <__smakebuf_r+0xc>
 800ae8c:	4b0d      	ldr	r3, [pc, #52]	; (800aec4 <__smakebuf_r+0x7c>)
 800ae8e:	62b3      	str	r3, [r6, #40]	; 0x28
 800ae90:	89a3      	ldrh	r3, [r4, #12]
 800ae92:	6020      	str	r0, [r4, #0]
 800ae94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ae98:	81a3      	strh	r3, [r4, #12]
 800ae9a:	9b00      	ldr	r3, [sp, #0]
 800ae9c:	6163      	str	r3, [r4, #20]
 800ae9e:	9b01      	ldr	r3, [sp, #4]
 800aea0:	6120      	str	r0, [r4, #16]
 800aea2:	b15b      	cbz	r3, 800aebc <__smakebuf_r+0x74>
 800aea4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800aea8:	4630      	mov	r0, r6
 800aeaa:	f000 f8d1 	bl	800b050 <_isatty_r>
 800aeae:	b128      	cbz	r0, 800aebc <__smakebuf_r+0x74>
 800aeb0:	89a3      	ldrh	r3, [r4, #12]
 800aeb2:	f023 0303 	bic.w	r3, r3, #3
 800aeb6:	f043 0301 	orr.w	r3, r3, #1
 800aeba:	81a3      	strh	r3, [r4, #12]
 800aebc:	89a0      	ldrh	r0, [r4, #12]
 800aebe:	4305      	orrs	r5, r0
 800aec0:	81a5      	strh	r5, [r4, #12]
 800aec2:	e7cd      	b.n	800ae60 <__smakebuf_r+0x18>
 800aec4:	0800ac59 	.word	0x0800ac59

0800aec8 <_malloc_usable_size_r>:
 800aec8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800aecc:	1f18      	subs	r0, r3, #4
 800aece:	2b00      	cmp	r3, #0
 800aed0:	bfbc      	itt	lt
 800aed2:	580b      	ldrlt	r3, [r1, r0]
 800aed4:	18c0      	addlt	r0, r0, r3
 800aed6:	4770      	bx	lr

0800aed8 <_raise_r>:
 800aed8:	291f      	cmp	r1, #31
 800aeda:	b538      	push	{r3, r4, r5, lr}
 800aedc:	4604      	mov	r4, r0
 800aede:	460d      	mov	r5, r1
 800aee0:	d904      	bls.n	800aeec <_raise_r+0x14>
 800aee2:	2316      	movs	r3, #22
 800aee4:	6003      	str	r3, [r0, #0]
 800aee6:	f04f 30ff 	mov.w	r0, #4294967295
 800aeea:	bd38      	pop	{r3, r4, r5, pc}
 800aeec:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800aeee:	b112      	cbz	r2, 800aef6 <_raise_r+0x1e>
 800aef0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800aef4:	b94b      	cbnz	r3, 800af0a <_raise_r+0x32>
 800aef6:	4620      	mov	r0, r4
 800aef8:	f000 f830 	bl	800af5c <_getpid_r>
 800aefc:	462a      	mov	r2, r5
 800aefe:	4601      	mov	r1, r0
 800af00:	4620      	mov	r0, r4
 800af02:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800af06:	f000 b817 	b.w	800af38 <_kill_r>
 800af0a:	2b01      	cmp	r3, #1
 800af0c:	d00a      	beq.n	800af24 <_raise_r+0x4c>
 800af0e:	1c59      	adds	r1, r3, #1
 800af10:	d103      	bne.n	800af1a <_raise_r+0x42>
 800af12:	2316      	movs	r3, #22
 800af14:	6003      	str	r3, [r0, #0]
 800af16:	2001      	movs	r0, #1
 800af18:	e7e7      	b.n	800aeea <_raise_r+0x12>
 800af1a:	2400      	movs	r4, #0
 800af1c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800af20:	4628      	mov	r0, r5
 800af22:	4798      	blx	r3
 800af24:	2000      	movs	r0, #0
 800af26:	e7e0      	b.n	800aeea <_raise_r+0x12>

0800af28 <raise>:
 800af28:	4b02      	ldr	r3, [pc, #8]	; (800af34 <raise+0xc>)
 800af2a:	4601      	mov	r1, r0
 800af2c:	6818      	ldr	r0, [r3, #0]
 800af2e:	f7ff bfd3 	b.w	800aed8 <_raise_r>
 800af32:	bf00      	nop
 800af34:	2000001c 	.word	0x2000001c

0800af38 <_kill_r>:
 800af38:	b538      	push	{r3, r4, r5, lr}
 800af3a:	4d07      	ldr	r5, [pc, #28]	; (800af58 <_kill_r+0x20>)
 800af3c:	2300      	movs	r3, #0
 800af3e:	4604      	mov	r4, r0
 800af40:	4608      	mov	r0, r1
 800af42:	4611      	mov	r1, r2
 800af44:	602b      	str	r3, [r5, #0]
 800af46:	f7f7 fd6d 	bl	8002a24 <_kill>
 800af4a:	1c43      	adds	r3, r0, #1
 800af4c:	d102      	bne.n	800af54 <_kill_r+0x1c>
 800af4e:	682b      	ldr	r3, [r5, #0]
 800af50:	b103      	cbz	r3, 800af54 <_kill_r+0x1c>
 800af52:	6023      	str	r3, [r4, #0]
 800af54:	bd38      	pop	{r3, r4, r5, pc}
 800af56:	bf00      	nop
 800af58:	200004ac 	.word	0x200004ac

0800af5c <_getpid_r>:
 800af5c:	f7f7 bd5a 	b.w	8002a14 <_getpid>

0800af60 <__sread>:
 800af60:	b510      	push	{r4, lr}
 800af62:	460c      	mov	r4, r1
 800af64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800af68:	f000 f894 	bl	800b094 <_read_r>
 800af6c:	2800      	cmp	r0, #0
 800af6e:	bfab      	itete	ge
 800af70:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800af72:	89a3      	ldrhlt	r3, [r4, #12]
 800af74:	181b      	addge	r3, r3, r0
 800af76:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800af7a:	bfac      	ite	ge
 800af7c:	6563      	strge	r3, [r4, #84]	; 0x54
 800af7e:	81a3      	strhlt	r3, [r4, #12]
 800af80:	bd10      	pop	{r4, pc}

0800af82 <__swrite>:
 800af82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800af86:	461f      	mov	r7, r3
 800af88:	898b      	ldrh	r3, [r1, #12]
 800af8a:	05db      	lsls	r3, r3, #23
 800af8c:	4605      	mov	r5, r0
 800af8e:	460c      	mov	r4, r1
 800af90:	4616      	mov	r6, r2
 800af92:	d505      	bpl.n	800afa0 <__swrite+0x1e>
 800af94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800af98:	2302      	movs	r3, #2
 800af9a:	2200      	movs	r2, #0
 800af9c:	f000 f868 	bl	800b070 <_lseek_r>
 800afa0:	89a3      	ldrh	r3, [r4, #12]
 800afa2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800afa6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800afaa:	81a3      	strh	r3, [r4, #12]
 800afac:	4632      	mov	r2, r6
 800afae:	463b      	mov	r3, r7
 800afb0:	4628      	mov	r0, r5
 800afb2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800afb6:	f000 b817 	b.w	800afe8 <_write_r>

0800afba <__sseek>:
 800afba:	b510      	push	{r4, lr}
 800afbc:	460c      	mov	r4, r1
 800afbe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800afc2:	f000 f855 	bl	800b070 <_lseek_r>
 800afc6:	1c43      	adds	r3, r0, #1
 800afc8:	89a3      	ldrh	r3, [r4, #12]
 800afca:	bf15      	itete	ne
 800afcc:	6560      	strne	r0, [r4, #84]	; 0x54
 800afce:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800afd2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800afd6:	81a3      	strheq	r3, [r4, #12]
 800afd8:	bf18      	it	ne
 800afda:	81a3      	strhne	r3, [r4, #12]
 800afdc:	bd10      	pop	{r4, pc}

0800afde <__sclose>:
 800afde:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800afe2:	f000 b813 	b.w	800b00c <_close_r>
	...

0800afe8 <_write_r>:
 800afe8:	b538      	push	{r3, r4, r5, lr}
 800afea:	4d07      	ldr	r5, [pc, #28]	; (800b008 <_write_r+0x20>)
 800afec:	4604      	mov	r4, r0
 800afee:	4608      	mov	r0, r1
 800aff0:	4611      	mov	r1, r2
 800aff2:	2200      	movs	r2, #0
 800aff4:	602a      	str	r2, [r5, #0]
 800aff6:	461a      	mov	r2, r3
 800aff8:	f7f7 fd4b 	bl	8002a92 <_write>
 800affc:	1c43      	adds	r3, r0, #1
 800affe:	d102      	bne.n	800b006 <_write_r+0x1e>
 800b000:	682b      	ldr	r3, [r5, #0]
 800b002:	b103      	cbz	r3, 800b006 <_write_r+0x1e>
 800b004:	6023      	str	r3, [r4, #0]
 800b006:	bd38      	pop	{r3, r4, r5, pc}
 800b008:	200004ac 	.word	0x200004ac

0800b00c <_close_r>:
 800b00c:	b538      	push	{r3, r4, r5, lr}
 800b00e:	4d06      	ldr	r5, [pc, #24]	; (800b028 <_close_r+0x1c>)
 800b010:	2300      	movs	r3, #0
 800b012:	4604      	mov	r4, r0
 800b014:	4608      	mov	r0, r1
 800b016:	602b      	str	r3, [r5, #0]
 800b018:	f7f7 fd57 	bl	8002aca <_close>
 800b01c:	1c43      	adds	r3, r0, #1
 800b01e:	d102      	bne.n	800b026 <_close_r+0x1a>
 800b020:	682b      	ldr	r3, [r5, #0]
 800b022:	b103      	cbz	r3, 800b026 <_close_r+0x1a>
 800b024:	6023      	str	r3, [r4, #0]
 800b026:	bd38      	pop	{r3, r4, r5, pc}
 800b028:	200004ac 	.word	0x200004ac

0800b02c <_fstat_r>:
 800b02c:	b538      	push	{r3, r4, r5, lr}
 800b02e:	4d07      	ldr	r5, [pc, #28]	; (800b04c <_fstat_r+0x20>)
 800b030:	2300      	movs	r3, #0
 800b032:	4604      	mov	r4, r0
 800b034:	4608      	mov	r0, r1
 800b036:	4611      	mov	r1, r2
 800b038:	602b      	str	r3, [r5, #0]
 800b03a:	f7f7 fd52 	bl	8002ae2 <_fstat>
 800b03e:	1c43      	adds	r3, r0, #1
 800b040:	d102      	bne.n	800b048 <_fstat_r+0x1c>
 800b042:	682b      	ldr	r3, [r5, #0]
 800b044:	b103      	cbz	r3, 800b048 <_fstat_r+0x1c>
 800b046:	6023      	str	r3, [r4, #0]
 800b048:	bd38      	pop	{r3, r4, r5, pc}
 800b04a:	bf00      	nop
 800b04c:	200004ac 	.word	0x200004ac

0800b050 <_isatty_r>:
 800b050:	b538      	push	{r3, r4, r5, lr}
 800b052:	4d06      	ldr	r5, [pc, #24]	; (800b06c <_isatty_r+0x1c>)
 800b054:	2300      	movs	r3, #0
 800b056:	4604      	mov	r4, r0
 800b058:	4608      	mov	r0, r1
 800b05a:	602b      	str	r3, [r5, #0]
 800b05c:	f7f7 fd51 	bl	8002b02 <_isatty>
 800b060:	1c43      	adds	r3, r0, #1
 800b062:	d102      	bne.n	800b06a <_isatty_r+0x1a>
 800b064:	682b      	ldr	r3, [r5, #0]
 800b066:	b103      	cbz	r3, 800b06a <_isatty_r+0x1a>
 800b068:	6023      	str	r3, [r4, #0]
 800b06a:	bd38      	pop	{r3, r4, r5, pc}
 800b06c:	200004ac 	.word	0x200004ac

0800b070 <_lseek_r>:
 800b070:	b538      	push	{r3, r4, r5, lr}
 800b072:	4d07      	ldr	r5, [pc, #28]	; (800b090 <_lseek_r+0x20>)
 800b074:	4604      	mov	r4, r0
 800b076:	4608      	mov	r0, r1
 800b078:	4611      	mov	r1, r2
 800b07a:	2200      	movs	r2, #0
 800b07c:	602a      	str	r2, [r5, #0]
 800b07e:	461a      	mov	r2, r3
 800b080:	f7f7 fd4a 	bl	8002b18 <_lseek>
 800b084:	1c43      	adds	r3, r0, #1
 800b086:	d102      	bne.n	800b08e <_lseek_r+0x1e>
 800b088:	682b      	ldr	r3, [r5, #0]
 800b08a:	b103      	cbz	r3, 800b08e <_lseek_r+0x1e>
 800b08c:	6023      	str	r3, [r4, #0]
 800b08e:	bd38      	pop	{r3, r4, r5, pc}
 800b090:	200004ac 	.word	0x200004ac

0800b094 <_read_r>:
 800b094:	b538      	push	{r3, r4, r5, lr}
 800b096:	4d07      	ldr	r5, [pc, #28]	; (800b0b4 <_read_r+0x20>)
 800b098:	4604      	mov	r4, r0
 800b09a:	4608      	mov	r0, r1
 800b09c:	4611      	mov	r1, r2
 800b09e:	2200      	movs	r2, #0
 800b0a0:	602a      	str	r2, [r5, #0]
 800b0a2:	461a      	mov	r2, r3
 800b0a4:	f7f7 fcd8 	bl	8002a58 <_read>
 800b0a8:	1c43      	adds	r3, r0, #1
 800b0aa:	d102      	bne.n	800b0b2 <_read_r+0x1e>
 800b0ac:	682b      	ldr	r3, [r5, #0]
 800b0ae:	b103      	cbz	r3, 800b0b2 <_read_r+0x1e>
 800b0b0:	6023      	str	r3, [r4, #0]
 800b0b2:	bd38      	pop	{r3, r4, r5, pc}
 800b0b4:	200004ac 	.word	0x200004ac

0800b0b8 <_init>:
 800b0b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b0ba:	bf00      	nop
 800b0bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b0be:	bc08      	pop	{r3}
 800b0c0:	469e      	mov	lr, r3
 800b0c2:	4770      	bx	lr

0800b0c4 <_fini>:
 800b0c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b0c6:	bf00      	nop
 800b0c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b0ca:	bc08      	pop	{r3}
 800b0cc:	469e      	mov	lr, r3
 800b0ce:	4770      	bx	lr
