
LAB 10.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007074  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003e4  08007214  08007214  00017214  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080075f8  080075f8  00020080  2**0
                  CONTENTS
  4 .ARM          00000008  080075f8  080075f8  000175f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007600  08007600  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007600  08007600  00017600  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007604  08007604  00017604  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  08007608  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002c4  20000080  08007688  00020080  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000344  08007688  00020344  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010a03  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002390  00000000  00000000  00030ab3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f80  00000000  00000000  00032e48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e78  00000000  00000000  00033dc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000177a0  00000000  00000000  00034c40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fb20  00000000  00000000  0004c3e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000945af  00000000  00000000  0005bf00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000f04af  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000047a0  00000000  00000000  000f0504  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000080 	.word	0x20000080
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080071fc 	.word	0x080071fc

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000084 	.word	0x20000084
 80001dc:	080071fc 	.word	0x080071fc

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_d2iz>:
 8000b3c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b40:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b44:	d215      	bcs.n	8000b72 <__aeabi_d2iz+0x36>
 8000b46:	d511      	bpl.n	8000b6c <__aeabi_d2iz+0x30>
 8000b48:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b4c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b50:	d912      	bls.n	8000b78 <__aeabi_d2iz+0x3c>
 8000b52:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b56:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b5a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b5e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b62:	fa23 f002 	lsr.w	r0, r3, r2
 8000b66:	bf18      	it	ne
 8000b68:	4240      	negne	r0, r0
 8000b6a:	4770      	bx	lr
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b76:	d105      	bne.n	8000b84 <__aeabi_d2iz+0x48>
 8000b78:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b7c:	bf08      	it	eq
 8000b7e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b82:	4770      	bx	lr
 8000b84:	f04f 0000 	mov.w	r0, #0
 8000b88:	4770      	bx	lr
 8000b8a:	bf00      	nop

08000b8c <__aeabi_d2uiz>:
 8000b8c:	004a      	lsls	r2, r1, #1
 8000b8e:	d211      	bcs.n	8000bb4 <__aeabi_d2uiz+0x28>
 8000b90:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b94:	d211      	bcs.n	8000bba <__aeabi_d2uiz+0x2e>
 8000b96:	d50d      	bpl.n	8000bb4 <__aeabi_d2uiz+0x28>
 8000b98:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b9c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ba0:	d40e      	bmi.n	8000bc0 <__aeabi_d2uiz+0x34>
 8000ba2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000baa:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	4770      	bx	lr
 8000bb4:	f04f 0000 	mov.w	r0, #0
 8000bb8:	4770      	bx	lr
 8000bba:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bbe:	d102      	bne.n	8000bc6 <__aeabi_d2uiz+0x3a>
 8000bc0:	f04f 30ff 	mov.w	r0, #4294967295
 8000bc4:	4770      	bx	lr
 8000bc6:	f04f 0000 	mov.w	r0, #0
 8000bca:	4770      	bx	lr

08000bcc <__aeabi_d2f>:
 8000bcc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bd0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bd4:	bf24      	itt	cs
 8000bd6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bda:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bde:	d90d      	bls.n	8000bfc <__aeabi_d2f+0x30>
 8000be0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000be4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000be8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bec:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bf0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bf4:	bf08      	it	eq
 8000bf6:	f020 0001 	biceq.w	r0, r0, #1
 8000bfa:	4770      	bx	lr
 8000bfc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c00:	d121      	bne.n	8000c46 <__aeabi_d2f+0x7a>
 8000c02:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c06:	bfbc      	itt	lt
 8000c08:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c0c:	4770      	bxlt	lr
 8000c0e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c12:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c16:	f1c2 0218 	rsb	r2, r2, #24
 8000c1a:	f1c2 0c20 	rsb	ip, r2, #32
 8000c1e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c22:	fa20 f002 	lsr.w	r0, r0, r2
 8000c26:	bf18      	it	ne
 8000c28:	f040 0001 	orrne.w	r0, r0, #1
 8000c2c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c30:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c34:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c38:	ea40 000c 	orr.w	r0, r0, ip
 8000c3c:	fa23 f302 	lsr.w	r3, r3, r2
 8000c40:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c44:	e7cc      	b.n	8000be0 <__aeabi_d2f+0x14>
 8000c46:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c4a:	d107      	bne.n	8000c5c <__aeabi_d2f+0x90>
 8000c4c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c50:	bf1e      	ittt	ne
 8000c52:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c56:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c5a:	4770      	bxne	lr
 8000c5c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c60:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c64:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c68:	4770      	bx	lr
 8000c6a:	bf00      	nop

08000c6c <__aeabi_uldivmod>:
 8000c6c:	b953      	cbnz	r3, 8000c84 <__aeabi_uldivmod+0x18>
 8000c6e:	b94a      	cbnz	r2, 8000c84 <__aeabi_uldivmod+0x18>
 8000c70:	2900      	cmp	r1, #0
 8000c72:	bf08      	it	eq
 8000c74:	2800      	cmpeq	r0, #0
 8000c76:	bf1c      	itt	ne
 8000c78:	f04f 31ff 	movne.w	r1, #4294967295
 8000c7c:	f04f 30ff 	movne.w	r0, #4294967295
 8000c80:	f000 b96e 	b.w	8000f60 <__aeabi_idiv0>
 8000c84:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c88:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c8c:	f000 f806 	bl	8000c9c <__udivmoddi4>
 8000c90:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c94:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c98:	b004      	add	sp, #16
 8000c9a:	4770      	bx	lr

08000c9c <__udivmoddi4>:
 8000c9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ca0:	9d08      	ldr	r5, [sp, #32]
 8000ca2:	4604      	mov	r4, r0
 8000ca4:	468c      	mov	ip, r1
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	f040 8083 	bne.w	8000db2 <__udivmoddi4+0x116>
 8000cac:	428a      	cmp	r2, r1
 8000cae:	4617      	mov	r7, r2
 8000cb0:	d947      	bls.n	8000d42 <__udivmoddi4+0xa6>
 8000cb2:	fab2 f282 	clz	r2, r2
 8000cb6:	b142      	cbz	r2, 8000cca <__udivmoddi4+0x2e>
 8000cb8:	f1c2 0020 	rsb	r0, r2, #32
 8000cbc:	fa24 f000 	lsr.w	r0, r4, r0
 8000cc0:	4091      	lsls	r1, r2
 8000cc2:	4097      	lsls	r7, r2
 8000cc4:	ea40 0c01 	orr.w	ip, r0, r1
 8000cc8:	4094      	lsls	r4, r2
 8000cca:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000cce:	0c23      	lsrs	r3, r4, #16
 8000cd0:	fbbc f6f8 	udiv	r6, ip, r8
 8000cd4:	fa1f fe87 	uxth.w	lr, r7
 8000cd8:	fb08 c116 	mls	r1, r8, r6, ip
 8000cdc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ce0:	fb06 f10e 	mul.w	r1, r6, lr
 8000ce4:	4299      	cmp	r1, r3
 8000ce6:	d909      	bls.n	8000cfc <__udivmoddi4+0x60>
 8000ce8:	18fb      	adds	r3, r7, r3
 8000cea:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cee:	f080 8119 	bcs.w	8000f24 <__udivmoddi4+0x288>
 8000cf2:	4299      	cmp	r1, r3
 8000cf4:	f240 8116 	bls.w	8000f24 <__udivmoddi4+0x288>
 8000cf8:	3e02      	subs	r6, #2
 8000cfa:	443b      	add	r3, r7
 8000cfc:	1a5b      	subs	r3, r3, r1
 8000cfe:	b2a4      	uxth	r4, r4
 8000d00:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d04:	fb08 3310 	mls	r3, r8, r0, r3
 8000d08:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d0c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d10:	45a6      	cmp	lr, r4
 8000d12:	d909      	bls.n	8000d28 <__udivmoddi4+0x8c>
 8000d14:	193c      	adds	r4, r7, r4
 8000d16:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d1a:	f080 8105 	bcs.w	8000f28 <__udivmoddi4+0x28c>
 8000d1e:	45a6      	cmp	lr, r4
 8000d20:	f240 8102 	bls.w	8000f28 <__udivmoddi4+0x28c>
 8000d24:	3802      	subs	r0, #2
 8000d26:	443c      	add	r4, r7
 8000d28:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d2c:	eba4 040e 	sub.w	r4, r4, lr
 8000d30:	2600      	movs	r6, #0
 8000d32:	b11d      	cbz	r5, 8000d3c <__udivmoddi4+0xa0>
 8000d34:	40d4      	lsrs	r4, r2
 8000d36:	2300      	movs	r3, #0
 8000d38:	e9c5 4300 	strd	r4, r3, [r5]
 8000d3c:	4631      	mov	r1, r6
 8000d3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d42:	b902      	cbnz	r2, 8000d46 <__udivmoddi4+0xaa>
 8000d44:	deff      	udf	#255	; 0xff
 8000d46:	fab2 f282 	clz	r2, r2
 8000d4a:	2a00      	cmp	r2, #0
 8000d4c:	d150      	bne.n	8000df0 <__udivmoddi4+0x154>
 8000d4e:	1bcb      	subs	r3, r1, r7
 8000d50:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d54:	fa1f f887 	uxth.w	r8, r7
 8000d58:	2601      	movs	r6, #1
 8000d5a:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d5e:	0c21      	lsrs	r1, r4, #16
 8000d60:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d64:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d68:	fb08 f30c 	mul.w	r3, r8, ip
 8000d6c:	428b      	cmp	r3, r1
 8000d6e:	d907      	bls.n	8000d80 <__udivmoddi4+0xe4>
 8000d70:	1879      	adds	r1, r7, r1
 8000d72:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d76:	d202      	bcs.n	8000d7e <__udivmoddi4+0xe2>
 8000d78:	428b      	cmp	r3, r1
 8000d7a:	f200 80e9 	bhi.w	8000f50 <__udivmoddi4+0x2b4>
 8000d7e:	4684      	mov	ip, r0
 8000d80:	1ac9      	subs	r1, r1, r3
 8000d82:	b2a3      	uxth	r3, r4
 8000d84:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d88:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d8c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d90:	fb08 f800 	mul.w	r8, r8, r0
 8000d94:	45a0      	cmp	r8, r4
 8000d96:	d907      	bls.n	8000da8 <__udivmoddi4+0x10c>
 8000d98:	193c      	adds	r4, r7, r4
 8000d9a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d9e:	d202      	bcs.n	8000da6 <__udivmoddi4+0x10a>
 8000da0:	45a0      	cmp	r8, r4
 8000da2:	f200 80d9 	bhi.w	8000f58 <__udivmoddi4+0x2bc>
 8000da6:	4618      	mov	r0, r3
 8000da8:	eba4 0408 	sub.w	r4, r4, r8
 8000dac:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000db0:	e7bf      	b.n	8000d32 <__udivmoddi4+0x96>
 8000db2:	428b      	cmp	r3, r1
 8000db4:	d909      	bls.n	8000dca <__udivmoddi4+0x12e>
 8000db6:	2d00      	cmp	r5, #0
 8000db8:	f000 80b1 	beq.w	8000f1e <__udivmoddi4+0x282>
 8000dbc:	2600      	movs	r6, #0
 8000dbe:	e9c5 0100 	strd	r0, r1, [r5]
 8000dc2:	4630      	mov	r0, r6
 8000dc4:	4631      	mov	r1, r6
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	fab3 f683 	clz	r6, r3
 8000dce:	2e00      	cmp	r6, #0
 8000dd0:	d14a      	bne.n	8000e68 <__udivmoddi4+0x1cc>
 8000dd2:	428b      	cmp	r3, r1
 8000dd4:	d302      	bcc.n	8000ddc <__udivmoddi4+0x140>
 8000dd6:	4282      	cmp	r2, r0
 8000dd8:	f200 80b8 	bhi.w	8000f4c <__udivmoddi4+0x2b0>
 8000ddc:	1a84      	subs	r4, r0, r2
 8000dde:	eb61 0103 	sbc.w	r1, r1, r3
 8000de2:	2001      	movs	r0, #1
 8000de4:	468c      	mov	ip, r1
 8000de6:	2d00      	cmp	r5, #0
 8000de8:	d0a8      	beq.n	8000d3c <__udivmoddi4+0xa0>
 8000dea:	e9c5 4c00 	strd	r4, ip, [r5]
 8000dee:	e7a5      	b.n	8000d3c <__udivmoddi4+0xa0>
 8000df0:	f1c2 0320 	rsb	r3, r2, #32
 8000df4:	fa20 f603 	lsr.w	r6, r0, r3
 8000df8:	4097      	lsls	r7, r2
 8000dfa:	fa01 f002 	lsl.w	r0, r1, r2
 8000dfe:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e02:	40d9      	lsrs	r1, r3
 8000e04:	4330      	orrs	r0, r6
 8000e06:	0c03      	lsrs	r3, r0, #16
 8000e08:	fbb1 f6fe 	udiv	r6, r1, lr
 8000e0c:	fa1f f887 	uxth.w	r8, r7
 8000e10:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e14:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e18:	fb06 f108 	mul.w	r1, r6, r8
 8000e1c:	4299      	cmp	r1, r3
 8000e1e:	fa04 f402 	lsl.w	r4, r4, r2
 8000e22:	d909      	bls.n	8000e38 <__udivmoddi4+0x19c>
 8000e24:	18fb      	adds	r3, r7, r3
 8000e26:	f106 3cff 	add.w	ip, r6, #4294967295
 8000e2a:	f080 808d 	bcs.w	8000f48 <__udivmoddi4+0x2ac>
 8000e2e:	4299      	cmp	r1, r3
 8000e30:	f240 808a 	bls.w	8000f48 <__udivmoddi4+0x2ac>
 8000e34:	3e02      	subs	r6, #2
 8000e36:	443b      	add	r3, r7
 8000e38:	1a5b      	subs	r3, r3, r1
 8000e3a:	b281      	uxth	r1, r0
 8000e3c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e40:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e44:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e48:	fb00 f308 	mul.w	r3, r0, r8
 8000e4c:	428b      	cmp	r3, r1
 8000e4e:	d907      	bls.n	8000e60 <__udivmoddi4+0x1c4>
 8000e50:	1879      	adds	r1, r7, r1
 8000e52:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e56:	d273      	bcs.n	8000f40 <__udivmoddi4+0x2a4>
 8000e58:	428b      	cmp	r3, r1
 8000e5a:	d971      	bls.n	8000f40 <__udivmoddi4+0x2a4>
 8000e5c:	3802      	subs	r0, #2
 8000e5e:	4439      	add	r1, r7
 8000e60:	1acb      	subs	r3, r1, r3
 8000e62:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e66:	e778      	b.n	8000d5a <__udivmoddi4+0xbe>
 8000e68:	f1c6 0c20 	rsb	ip, r6, #32
 8000e6c:	fa03 f406 	lsl.w	r4, r3, r6
 8000e70:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e74:	431c      	orrs	r4, r3
 8000e76:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e7a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e7e:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e82:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e86:	431f      	orrs	r7, r3
 8000e88:	0c3b      	lsrs	r3, r7, #16
 8000e8a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e8e:	fa1f f884 	uxth.w	r8, r4
 8000e92:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e96:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e9a:	fb09 fa08 	mul.w	sl, r9, r8
 8000e9e:	458a      	cmp	sl, r1
 8000ea0:	fa02 f206 	lsl.w	r2, r2, r6
 8000ea4:	fa00 f306 	lsl.w	r3, r0, r6
 8000ea8:	d908      	bls.n	8000ebc <__udivmoddi4+0x220>
 8000eaa:	1861      	adds	r1, r4, r1
 8000eac:	f109 30ff 	add.w	r0, r9, #4294967295
 8000eb0:	d248      	bcs.n	8000f44 <__udivmoddi4+0x2a8>
 8000eb2:	458a      	cmp	sl, r1
 8000eb4:	d946      	bls.n	8000f44 <__udivmoddi4+0x2a8>
 8000eb6:	f1a9 0902 	sub.w	r9, r9, #2
 8000eba:	4421      	add	r1, r4
 8000ebc:	eba1 010a 	sub.w	r1, r1, sl
 8000ec0:	b2bf      	uxth	r7, r7
 8000ec2:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ec6:	fb0e 1110 	mls	r1, lr, r0, r1
 8000eca:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000ece:	fb00 f808 	mul.w	r8, r0, r8
 8000ed2:	45b8      	cmp	r8, r7
 8000ed4:	d907      	bls.n	8000ee6 <__udivmoddi4+0x24a>
 8000ed6:	19e7      	adds	r7, r4, r7
 8000ed8:	f100 31ff 	add.w	r1, r0, #4294967295
 8000edc:	d22e      	bcs.n	8000f3c <__udivmoddi4+0x2a0>
 8000ede:	45b8      	cmp	r8, r7
 8000ee0:	d92c      	bls.n	8000f3c <__udivmoddi4+0x2a0>
 8000ee2:	3802      	subs	r0, #2
 8000ee4:	4427      	add	r7, r4
 8000ee6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000eea:	eba7 0708 	sub.w	r7, r7, r8
 8000eee:	fba0 8902 	umull	r8, r9, r0, r2
 8000ef2:	454f      	cmp	r7, r9
 8000ef4:	46c6      	mov	lr, r8
 8000ef6:	4649      	mov	r1, r9
 8000ef8:	d31a      	bcc.n	8000f30 <__udivmoddi4+0x294>
 8000efa:	d017      	beq.n	8000f2c <__udivmoddi4+0x290>
 8000efc:	b15d      	cbz	r5, 8000f16 <__udivmoddi4+0x27a>
 8000efe:	ebb3 020e 	subs.w	r2, r3, lr
 8000f02:	eb67 0701 	sbc.w	r7, r7, r1
 8000f06:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000f0a:	40f2      	lsrs	r2, r6
 8000f0c:	ea4c 0202 	orr.w	r2, ip, r2
 8000f10:	40f7      	lsrs	r7, r6
 8000f12:	e9c5 2700 	strd	r2, r7, [r5]
 8000f16:	2600      	movs	r6, #0
 8000f18:	4631      	mov	r1, r6
 8000f1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f1e:	462e      	mov	r6, r5
 8000f20:	4628      	mov	r0, r5
 8000f22:	e70b      	b.n	8000d3c <__udivmoddi4+0xa0>
 8000f24:	4606      	mov	r6, r0
 8000f26:	e6e9      	b.n	8000cfc <__udivmoddi4+0x60>
 8000f28:	4618      	mov	r0, r3
 8000f2a:	e6fd      	b.n	8000d28 <__udivmoddi4+0x8c>
 8000f2c:	4543      	cmp	r3, r8
 8000f2e:	d2e5      	bcs.n	8000efc <__udivmoddi4+0x260>
 8000f30:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f34:	eb69 0104 	sbc.w	r1, r9, r4
 8000f38:	3801      	subs	r0, #1
 8000f3a:	e7df      	b.n	8000efc <__udivmoddi4+0x260>
 8000f3c:	4608      	mov	r0, r1
 8000f3e:	e7d2      	b.n	8000ee6 <__udivmoddi4+0x24a>
 8000f40:	4660      	mov	r0, ip
 8000f42:	e78d      	b.n	8000e60 <__udivmoddi4+0x1c4>
 8000f44:	4681      	mov	r9, r0
 8000f46:	e7b9      	b.n	8000ebc <__udivmoddi4+0x220>
 8000f48:	4666      	mov	r6, ip
 8000f4a:	e775      	b.n	8000e38 <__udivmoddi4+0x19c>
 8000f4c:	4630      	mov	r0, r6
 8000f4e:	e74a      	b.n	8000de6 <__udivmoddi4+0x14a>
 8000f50:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f54:	4439      	add	r1, r7
 8000f56:	e713      	b.n	8000d80 <__udivmoddi4+0xe4>
 8000f58:	3802      	subs	r0, #2
 8000f5a:	443c      	add	r4, r7
 8000f5c:	e724      	b.n	8000da8 <__udivmoddi4+0x10c>
 8000f5e:	bf00      	nop

08000f60 <__aeabi_idiv0>:
 8000f60:	4770      	bx	lr
 8000f62:	bf00      	nop
 8000f64:	0000      	movs	r0, r0
	...

08000f68 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f68:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000f6c:	b0dc      	sub	sp, #368	; 0x170
 8000f6e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f70:	f001 fdbe 	bl	8002af0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f74:	f001 f84e 	bl	8002014 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f78:	f001 f9f8 	bl	800236c <MX_GPIO_Init>
  MX_DMA_Init();
 8000f7c:	f001 f9d6 	bl	800232c <MX_DMA_Init>
  MX_ADC1_Init();
 8000f80:	f001 f8b0 	bl	80020e4 <MX_ADC1_Init>
  MX_TIM3_Init();
 8000f84:	f001 f938 	bl	80021f8 <MX_TIM3_Init>
  MX_SPI3_Init();
 8000f88:	f001 f8fe 	bl	8002188 <MX_SPI3_Init>
  MX_TIM11_Init();
 8000f8c:	f001 f980 	bl	8002290 <MX_TIM11_Init>
  MX_USART2_UART_Init();
 8000f90:	f001 f9a2 	bl	80022d8 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start(&htim3);
 8000f94:	48b2      	ldr	r0, [pc, #712]	; (8001260 <main+0x2f8>)
 8000f96:	f004 f9a0 	bl	80052da <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start_IT(&htim11);
 8000f9a:	48b2      	ldr	r0, [pc, #712]	; (8001264 <main+0x2fc>)
 8000f9c:	f004 f9c1 	bl	8005322 <HAL_TIM_Base_Start_IT>
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) &ADCin, 1);
 8000fa0:	2201      	movs	r2, #1
 8000fa2:	49b1      	ldr	r1, [pc, #708]	; (8001268 <main+0x300>)
 8000fa4:	48b1      	ldr	r0, [pc, #708]	; (800126c <main+0x304>)
 8000fa6:	f001 ff99 	bl	8002edc <HAL_ADC_Start_DMA>

	HAL_GPIO_WritePin(LOAD_GPIO_Port, LOAD_Pin, GPIO_PIN_RESET);
 8000faa:	2200      	movs	r2, #0
 8000fac:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000fb0:	48af      	ldr	r0, [pc, #700]	; (8001270 <main+0x308>)
 8000fb2:	f003 f989 	bl	80042c8 <HAL_GPIO_WritePin>

		  	  		// UARTReceiveAndResponsePolling();


		  	  		/*Method 2 Interrupt Mode*/
		  	  		HAL_UART_Receive_IT(&huart2,  (uint8_t*)RxDataBuffer, 32);
 8000fb6:	2220      	movs	r2, #32
 8000fb8:	49ae      	ldr	r1, [pc, #696]	; (8001274 <main+0x30c>)
 8000fba:	48af      	ldr	r0, [pc, #700]	; (8001278 <main+0x310>)
 8000fbc:	f004 fe4c 	bl	8005c58 <HAL_UART_Receive_IT>

		  	  		/*Method 2 W/ 1 Char Received*/

		  	  		//read character
		  	  	    int8_t inputchar = UARTReceiveIT();
 8000fc0:	f001 fae4 	bl	800258c <UARTReceiveIT>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	f887 316f 	strb.w	r3, [r7, #367]	; 0x16f
	//	  	  		{
	//	  	  			sprintf(TxDataBuffer, "ReceivedChar:[%c]\r\n", inputchar);
	//	  	  			HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
	//	  	  		}
				static uint64_t timestamp = 0;
				switch (CurrentMode)
 8000fca:	4bac      	ldr	r3, [pc, #688]	; (800127c <main+0x314>)
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	2b1e      	cmp	r3, #30
 8000fd0:	f200 808a 	bhi.w	80010e8 <main+0x180>
 8000fd4:	e044      	b.n	8001060 <main+0xf8>
 8000fd6:	3b28      	subs	r3, #40	; 0x28
 8000fd8:	2b1e      	cmp	r3, #30
 8000fda:	f200 87d7 	bhi.w	8001f8c <main+0x1024>
 8000fde:	a201      	add	r2, pc, #4	; (adr r2, 8000fe4 <main+0x7c>)
 8000fe0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fe4:	0800183d 	.word	0x0800183d
 8000fe8:	08001f8d 	.word	0x08001f8d
 8000fec:	08001f8d 	.word	0x08001f8d
 8000ff0:	08001f8d 	.word	0x08001f8d
 8000ff4:	08001f8d 	.word	0x08001f8d
 8000ff8:	08001f8d 	.word	0x08001f8d
 8000ffc:	08001f8d 	.word	0x08001f8d
 8001000:	08001f8d 	.word	0x08001f8d
 8001004:	08001f8d 	.word	0x08001f8d
 8001008:	08001f8d 	.word	0x08001f8d
 800100c:	080018c9 	.word	0x080018c9
 8001010:	08001f8d 	.word	0x08001f8d
 8001014:	08001f8d 	.word	0x08001f8d
 8001018:	08001f8d 	.word	0x08001f8d
 800101c:	08001f8d 	.word	0x08001f8d
 8001020:	08001f8d 	.word	0x08001f8d
 8001024:	08001f8d 	.word	0x08001f8d
 8001028:	08001f8d 	.word	0x08001f8d
 800102c:	08001f8d 	.word	0x08001f8d
 8001030:	08001f8d 	.word	0x08001f8d
 8001034:	08001be5 	.word	0x08001be5
 8001038:	08001f8d 	.word	0x08001f8d
 800103c:	08001f8d 	.word	0x08001f8d
 8001040:	08001f8d 	.word	0x08001f8d
 8001044:	08001f8d 	.word	0x08001f8d
 8001048:	08001f8d 	.word	0x08001f8d
 800104c:	08001f8d 	.word	0x08001f8d
 8001050:	08001f8d 	.word	0x08001f8d
 8001054:	08001f8d 	.word	0x08001f8d
 8001058:	08001f8d 	.word	0x08001f8d
 800105c:	08001c69 	.word	0x08001c69
 8001060:	2b1e      	cmp	r3, #30
 8001062:	f200 8793 	bhi.w	8001f8c <main+0x1024>
 8001066:	a201      	add	r2, pc, #4	; (adr r2, 800106c <main+0x104>)
 8001068:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800106c:	080010f9 	.word	0x080010f9
 8001070:	08001f8d 	.word	0x08001f8d
 8001074:	08001f8d 	.word	0x08001f8d
 8001078:	08001f8d 	.word	0x08001f8d
 800107c:	08001f8d 	.word	0x08001f8d
 8001080:	08001f8d 	.word	0x08001f8d
 8001084:	08001f8d 	.word	0x08001f8d
 8001088:	08001f8d 	.word	0x08001f8d
 800108c:	08001f8d 	.word	0x08001f8d
 8001090:	08001f8d 	.word	0x08001f8d
 8001094:	08001131 	.word	0x08001131
 8001098:	08001f8d 	.word	0x08001f8d
 800109c:	08001f8d 	.word	0x08001f8d
 80010a0:	08001f8d 	.word	0x08001f8d
 80010a4:	08001f8d 	.word	0x08001f8d
 80010a8:	08001f8d 	.word	0x08001f8d
 80010ac:	08001f8d 	.word	0x08001f8d
 80010b0:	08001f8d 	.word	0x08001f8d
 80010b4:	08001f8d 	.word	0x08001f8d
 80010b8:	08001f8d 	.word	0x08001f8d
 80010bc:	0800119d 	.word	0x0800119d
 80010c0:	08001f8d 	.word	0x08001f8d
 80010c4:	08001f8d 	.word	0x08001f8d
 80010c8:	08001f8d 	.word	0x08001f8d
 80010cc:	08001f8d 	.word	0x08001f8d
 80010d0:	08001f8d 	.word	0x08001f8d
 80010d4:	08001f8d 	.word	0x08001f8d
 80010d8:	08001f8d 	.word	0x08001f8d
 80010dc:	08001f8d 	.word	0x08001f8d
 80010e0:	08001f8d 	.word	0x08001f8d
 80010e4:	080011d5 	.word	0x080011d5
 80010e8:	2b46      	cmp	r3, #70	; 0x46
 80010ea:	f200 874f 	bhi.w	8001f8c <main+0x1024>
 80010ee:	2b28      	cmp	r3, #40	; 0x28
 80010f0:	f4bf af71 	bcs.w	8000fd6 <main+0x6e>
 80010f4:	f000 bf4a 	b.w	8001f8c <main+0x1024>
				{
						case Mode_MainMenu :	//MainMENU
						{
							char temp[] = "\r\n---FUNCTION GENERATOR---\r\n"
 80010f8:	f107 0318 	add.w	r3, r7, #24
 80010fc:	4a60      	ldr	r2, [pc, #384]	; (8001280 <main+0x318>)
 80010fe:	4618      	mov	r0, r3
 8001100:	4611      	mov	r1, r2
 8001102:	2362      	movs	r3, #98	; 0x62
 8001104:	461a      	mov	r2, r3
 8001106:	f005 fc43 	bl	8006990 <memcpy>
											"---------------\r\n"
											"1 >> Saw Tooth\r\n"
											"2 >> Sine Wave\r\n"
											"3 >> Square Wave\r\n\r\n";
							HAL_UART_Transmit(&huart2, (uint8_t*) temp,strlen(temp), 1000);
 800110a:	f107 0318 	add.w	r3, r7, #24
 800110e:	4618      	mov	r0, r3
 8001110:	f7ff f866 	bl	80001e0 <strlen>
 8001114:	4603      	mov	r3, r0
 8001116:	b29a      	uxth	r2, r3
 8001118:	f107 0118 	add.w	r1, r7, #24
 800111c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001120:	4855      	ldr	r0, [pc, #340]	; (8001278 <main+0x310>)
 8001122:	f004 fd00 	bl	8005b26 <HAL_UART_Transmit>

							CurrentMode = Mode_MainMenuWait;
 8001126:	4b55      	ldr	r3, [pc, #340]	; (800127c <main+0x314>)
 8001128:	220a      	movs	r2, #10
 800112a:	601a      	str	r2, [r3, #0]
							break;
 800112c:	f000 bf2e 	b.w	8001f8c <main+0x1024>
						}

						case Mode_MainMenuWait :
							switch (inputchar)
 8001130:	f997 316f 	ldrsb.w	r3, [r7, #367]	; 0x16f
 8001134:	2b33      	cmp	r3, #51	; 0x33
 8001136:	d012      	beq.n	800115e <main+0x1f6>
 8001138:	2b33      	cmp	r3, #51	; 0x33
 800113a:	dc14      	bgt.n	8001166 <main+0x1fe>
 800113c:	2b32      	cmp	r3, #50	; 0x32
 800113e:	d00a      	beq.n	8001156 <main+0x1ee>
 8001140:	2b32      	cmp	r3, #50	; 0x32
 8001142:	dc10      	bgt.n	8001166 <main+0x1fe>
 8001144:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001148:	d025      	beq.n	8001196 <main+0x22e>
 800114a:	2b31      	cmp	r3, #49	; 0x31
 800114c:	d10b      	bne.n	8001166 <main+0x1fe>
								case -1 :	//no input
									break;

								case '1' :	//saw tooth
								{
									CurrentMode = Mode_SawTooth;
 800114e:	4b4b      	ldr	r3, [pc, #300]	; (800127c <main+0x314>)
 8001150:	2214      	movs	r2, #20
 8001152:	601a      	str	r2, [r3, #0]
									break;
 8001154:	e020      	b.n	8001198 <main+0x230>
								}

								case '2' : //sinewave
								{
									 CurrentMode = Mode_SineWave;
 8001156:	4b49      	ldr	r3, [pc, #292]	; (800127c <main+0x314>)
 8001158:	2228      	movs	r2, #40	; 0x28
 800115a:	601a      	str	r2, [r3, #0]
									 break;
 800115c:	e01c      	b.n	8001198 <main+0x230>
								}

								case '3' : //squarewave
								{
									 CurrentMode = Mode_SquareWave;
 800115e:	4b47      	ldr	r3, [pc, #284]	; (800127c <main+0x314>)
 8001160:	223c      	movs	r2, #60	; 0x3c
 8001162:	601a      	str	r2, [r3, #0]
									 break;
 8001164:	e018      	b.n	8001198 <main+0x230>
								}

								default :
								{
									char temp[] = "!!!ERROR!!!\r\n";
 8001166:	4b47      	ldr	r3, [pc, #284]	; (8001284 <main+0x31c>)
 8001168:	f507 74aa 	add.w	r4, r7, #340	; 0x154
 800116c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800116e:	c407      	stmia	r4!, {r0, r1, r2}
 8001170:	8023      	strh	r3, [r4, #0]
									HAL_UART_Transmit(&huart2, (uint8_t*)temp, strlen(temp),1000);
 8001172:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 8001176:	4618      	mov	r0, r3
 8001178:	f7ff f832 	bl	80001e0 <strlen>
 800117c:	4603      	mov	r3, r0
 800117e:	b29a      	uxth	r2, r3
 8001180:	f507 71aa 	add.w	r1, r7, #340	; 0x154
 8001184:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001188:	483b      	ldr	r0, [pc, #236]	; (8001278 <main+0x310>)
 800118a:	f004 fccc 	bl	8005b26 <HAL_UART_Transmit>
									CurrentMode = Mode_MainMenu;
 800118e:	4b3b      	ldr	r3, [pc, #236]	; (800127c <main+0x314>)
 8001190:	2200      	movs	r2, #0
 8001192:	601a      	str	r2, [r3, #0]
									break;
 8001194:	e000      	b.n	8001198 <main+0x230>
									break;
 8001196:	bf00      	nop
								}
							}
							break;
 8001198:	f000 bef8 	b.w	8001f8c <main+0x1024>

						case Mode_SawTooth :	//SawTooth
						{
							char temp[]="-------------------\r\n"
 800119c:	f107 0318 	add.w	r3, r7, #24
 80011a0:	4a39      	ldr	r2, [pc, #228]	; (8001288 <main+0x320>)
 80011a2:	4618      	mov	r0, r3
 80011a4:	4611      	mov	r1, r2
 80011a6:	23fe      	movs	r3, #254	; 0xfe
 80011a8:	461a      	mov	r2, r3
 80011aa:	f005 fbf1 	bl	8006990 <memcpy>
							"g : Set V_Low +0.1V\r\n"
							"h : Set V_Low -0.1V\r\n"
							"j : Slope DOWN\r\n"
							"k : Slope UP\r\n"
							"x : back\r\n";
							HAL_UART_Transmit(&huart2, (uint8_t*)temp, strlen(temp),1000);
 80011ae:	f107 0318 	add.w	r3, r7, #24
 80011b2:	4618      	mov	r0, r3
 80011b4:	f7ff f814 	bl	80001e0 <strlen>
 80011b8:	4603      	mov	r3, r0
 80011ba:	b29a      	uxth	r2, r3
 80011bc:	f107 0118 	add.w	r1, r7, #24
 80011c0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011c4:	482c      	ldr	r0, [pc, #176]	; (8001278 <main+0x310>)
 80011c6:	f004 fcae 	bl	8005b26 <HAL_UART_Transmit>
							CurrentMode = Mode_SawTooth_Wait;
 80011ca:	4b2c      	ldr	r3, [pc, #176]	; (800127c <main+0x314>)
 80011cc:	221e      	movs	r2, #30
 80011ce:	601a      	str	r2, [r3, #0]
							break;
 80011d0:	f000 bedc 	b.w	8001f8c <main+0x1024>
						}

						case Mode_SawTooth_Wait	:		//default 5 Hz >> range 0 - 10 Hz
							switch (inputchar)
 80011d4:	f997 316f 	ldrsb.w	r3, [r7, #367]	; 0x16f
 80011d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011dc:	d056      	beq.n	800128c <main+0x324>
 80011de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011e2:	f2c0 830f 	blt.w	8001804 <main+0x89c>
 80011e6:	2b78      	cmp	r3, #120	; 0x78
 80011e8:	f300 830c 	bgt.w	8001804 <main+0x89c>
 80011ec:	2b61      	cmp	r3, #97	; 0x61
 80011ee:	f2c0 8309 	blt.w	8001804 <main+0x89c>
 80011f2:	3b61      	subs	r3, #97	; 0x61
 80011f4:	2b17      	cmp	r3, #23
 80011f6:	f200 8305 	bhi.w	8001804 <main+0x89c>
 80011fa:	a201      	add	r2, pc, #4	; (adr r2, 8001200 <main+0x298>)
 80011fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001200:	08001549 	.word	0x08001549
 8001204:	08001805 	.word	0x08001805
 8001208:	08001805 	.word	0x08001805
 800120c:	0800161b 	.word	0x0800161b
 8001210:	08001805 	.word	0x08001805
 8001214:	0800167f 	.word	0x0800167f
 8001218:	080016e3 	.word	0x080016e3
 800121c:	08001747 	.word	0x08001747
 8001220:	08001805 	.word	0x08001805
 8001224:	080017a3 	.word	0x080017a3
 8001228:	080017d1 	.word	0x080017d1
 800122c:	08001805 	.word	0x08001805
 8001230:	08001805 	.word	0x08001805
 8001234:	08001805 	.word	0x08001805
 8001238:	08001805 	.word	0x08001805
 800123c:	08001805 	.word	0x08001805
 8001240:	08001805 	.word	0x08001805
 8001244:	08001805 	.word	0x08001805
 8001248:	080015d5 	.word	0x080015d5
 800124c:	08001805 	.word	0x08001805
 8001250:	08001805 	.word	0x08001805
 8001254:	08001805 	.word	0x08001805
 8001258:	08001805 	.word	0x08001805
 800125c:	080017fd 	.word	0x080017fd
 8001260:	20000170 	.word	0x20000170
 8001264:	20000250 	.word	0x20000250
 8001268:	2000009c 	.word	0x2000009c
 800126c:	20000208 	.word	0x20000208
 8001270:	40020000 	.word	0x40020000
 8001274:	200000d4 	.word	0x200000d4
 8001278:	200002f0 	.word	0x200002f0
 800127c:	200000ac 	.word	0x200000ac
 8001280:	08007234 	.word	0x08007234
 8001284:	08007298 	.word	0x08007298
 8001288:	080072a8 	.word	0x080072a8
							{

								case -1 :	//no input
									if (micros() - timestamp > 1000)
 800128c:	f001 f964 	bl	8002558 <micros>
 8001290:	4bc7      	ldr	r3, [pc, #796]	; (80015b0 <main+0x648>)
 8001292:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001296:	ebb0 0a02 	subs.w	sl, r0, r2
 800129a:	eb61 0b03 	sbc.w	fp, r1, r3
 800129e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80012a2:	f04f 0300 	mov.w	r3, #0
 80012a6:	455b      	cmp	r3, fp
 80012a8:	bf08      	it	eq
 80012aa:	4552      	cmpeq	r2, sl
 80012ac:	f080 82c4 	bcs.w	8001838 <main+0x8d0>
											{
												timestamp = micros();
 80012b0:	f001 f952 	bl	8002558 <micros>
 80012b4:	4602      	mov	r2, r0
 80012b6:	460b      	mov	r3, r1
 80012b8:	49bd      	ldr	r1, [pc, #756]	; (80015b0 <main+0x648>)
 80012ba:	e9c1 2300 	strd	r2, r3, [r1]
												if (Slope == 1)		//slope UP (min>>max)
 80012be:	4bbd      	ldr	r3, [pc, #756]	; (80015b4 <main+0x64c>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	2b01      	cmp	r3, #1
 80012c4:	f040 809b 	bne.w	80013fe <main+0x496>
												{
													dataOut = (MaxV - MinV) * (4096.0 * micros() / (3.3 * Frequency * 1000000.0));
 80012c8:	4bbb      	ldr	r3, [pc, #748]	; (80015b8 <main+0x650>)
 80012ca:	ed93 7a00 	vldr	s14, [r3]
 80012ce:	4bbb      	ldr	r3, [pc, #748]	; (80015bc <main+0x654>)
 80012d0:	edd3 7a00 	vldr	s15, [r3]
 80012d4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80012d8:	ee17 0a90 	vmov	r0, s15
 80012dc:	f7ff f93c 	bl	8000558 <__aeabi_f2d>
 80012e0:	4604      	mov	r4, r0
 80012e2:	460d      	mov	r5, r1
 80012e4:	f001 f938 	bl	8002558 <micros>
 80012e8:	4602      	mov	r2, r0
 80012ea:	460b      	mov	r3, r1
 80012ec:	4610      	mov	r0, r2
 80012ee:	4619      	mov	r1, r3
 80012f0:	f7ff f954 	bl	800059c <__aeabi_ul2d>
 80012f4:	f04f 0200 	mov.w	r2, #0
 80012f8:	4bb1      	ldr	r3, [pc, #708]	; (80015c0 <main+0x658>)
 80012fa:	f7ff f985 	bl	8000608 <__aeabi_dmul>
 80012fe:	4602      	mov	r2, r0
 8001300:	460b      	mov	r3, r1
 8001302:	4690      	mov	r8, r2
 8001304:	4699      	mov	r9, r3
 8001306:	4baf      	ldr	r3, [pc, #700]	; (80015c4 <main+0x65c>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	4618      	mov	r0, r3
 800130c:	f7ff f924 	bl	8000558 <__aeabi_f2d>
 8001310:	a39f      	add	r3, pc, #636	; (adr r3, 8001590 <main+0x628>)
 8001312:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001316:	f7ff f977 	bl	8000608 <__aeabi_dmul>
 800131a:	4602      	mov	r2, r0
 800131c:	460b      	mov	r3, r1
 800131e:	4610      	mov	r0, r2
 8001320:	4619      	mov	r1, r3
 8001322:	a39d      	add	r3, pc, #628	; (adr r3, 8001598 <main+0x630>)
 8001324:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001328:	f7ff f96e 	bl	8000608 <__aeabi_dmul>
 800132c:	4602      	mov	r2, r0
 800132e:	460b      	mov	r3, r1
 8001330:	4640      	mov	r0, r8
 8001332:	4649      	mov	r1, r9
 8001334:	f7ff fa92 	bl	800085c <__aeabi_ddiv>
 8001338:	4602      	mov	r2, r0
 800133a:	460b      	mov	r3, r1
 800133c:	4620      	mov	r0, r4
 800133e:	4629      	mov	r1, r5
 8001340:	f7ff f962 	bl	8000608 <__aeabi_dmul>
 8001344:	4602      	mov	r2, r0
 8001346:	460b      	mov	r3, r1
 8001348:	4610      	mov	r0, r2
 800134a:	4619      	mov	r1, r3
 800134c:	f7ff fc1e 	bl	8000b8c <__aeabi_d2uiz>
 8001350:	4603      	mov	r3, r0
 8001352:	b29a      	uxth	r2, r3
 8001354:	4b9c      	ldr	r3, [pc, #624]	; (80015c8 <main+0x660>)
 8001356:	801a      	strh	r2, [r3, #0]
													int range = ((MaxV - MinV) * (4096.0 / 3.3));
 8001358:	4b97      	ldr	r3, [pc, #604]	; (80015b8 <main+0x650>)
 800135a:	ed93 7a00 	vldr	s14, [r3]
 800135e:	4b97      	ldr	r3, [pc, #604]	; (80015bc <main+0x654>)
 8001360:	edd3 7a00 	vldr	s15, [r3]
 8001364:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001368:	ee17 0a90 	vmov	r0, s15
 800136c:	f7ff f8f4 	bl	8000558 <__aeabi_f2d>
 8001370:	a38b      	add	r3, pc, #556	; (adr r3, 80015a0 <main+0x638>)
 8001372:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001376:	f7ff f947 	bl	8000608 <__aeabi_dmul>
 800137a:	4602      	mov	r2, r0
 800137c:	460b      	mov	r3, r1
 800137e:	4610      	mov	r0, r2
 8001380:	4619      	mov	r1, r3
 8001382:	f7ff fbdb 	bl	8000b3c <__aeabi_d2iz>
 8001386:	4603      	mov	r3, r0
 8001388:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
													dataOut %= range;
 800138c:	4b8e      	ldr	r3, [pc, #568]	; (80015c8 <main+0x660>)
 800138e:	881b      	ldrh	r3, [r3, #0]
 8001390:	f8d7 2164 	ldr.w	r2, [r7, #356]	; 0x164
 8001394:	fb93 f2f2 	sdiv	r2, r3, r2
 8001398:	f8d7 1164 	ldr.w	r1, [r7, #356]	; 0x164
 800139c:	fb01 f202 	mul.w	r2, r1, r2
 80013a0:	1a9b      	subs	r3, r3, r2
 80013a2:	b29a      	uxth	r2, r3
 80013a4:	4b88      	ldr	r3, [pc, #544]	; (80015c8 <main+0x660>)
 80013a6:	801a      	strh	r2, [r3, #0]
													dataOut += (MinV * 4096.0 / 3.3);
 80013a8:	4b87      	ldr	r3, [pc, #540]	; (80015c8 <main+0x660>)
 80013aa:	881b      	ldrh	r3, [r3, #0]
 80013ac:	4618      	mov	r0, r3
 80013ae:	f7ff f8c1 	bl	8000534 <__aeabi_i2d>
 80013b2:	4604      	mov	r4, r0
 80013b4:	460d      	mov	r5, r1
 80013b6:	4b81      	ldr	r3, [pc, #516]	; (80015bc <main+0x654>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	4618      	mov	r0, r3
 80013bc:	f7ff f8cc 	bl	8000558 <__aeabi_f2d>
 80013c0:	f04f 0200 	mov.w	r2, #0
 80013c4:	4b7e      	ldr	r3, [pc, #504]	; (80015c0 <main+0x658>)
 80013c6:	f7ff f91f 	bl	8000608 <__aeabi_dmul>
 80013ca:	4602      	mov	r2, r0
 80013cc:	460b      	mov	r3, r1
 80013ce:	4610      	mov	r0, r2
 80013d0:	4619      	mov	r1, r3
 80013d2:	a36f      	add	r3, pc, #444	; (adr r3, 8001590 <main+0x628>)
 80013d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013d8:	f7ff fa40 	bl	800085c <__aeabi_ddiv>
 80013dc:	4602      	mov	r2, r0
 80013de:	460b      	mov	r3, r1
 80013e0:	4620      	mov	r0, r4
 80013e2:	4629      	mov	r1, r5
 80013e4:	f7fe ff5a 	bl	800029c <__adddf3>
 80013e8:	4602      	mov	r2, r0
 80013ea:	460b      	mov	r3, r1
 80013ec:	4610      	mov	r0, r2
 80013ee:	4619      	mov	r1, r3
 80013f0:	f7ff fbcc 	bl	8000b8c <__aeabi_d2uiz>
 80013f4:	4603      	mov	r3, r0
 80013f6:	b29a      	uxth	r2, r3
 80013f8:	4b73      	ldr	r3, [pc, #460]	; (80015c8 <main+0x660>)
 80013fa:	801a      	strh	r2, [r3, #0]
													int range = ((MinV - MaxV) * (4096.0 / 3.3));
													dataOut %= range;
													dataOut += (MaxV * 4096.0 /3.3);
												}
											}
									break;
 80013fc:	e21c      	b.n	8001838 <main+0x8d0>
												else if (Slope == -1)	//slope DOWN (max>>min)
 80013fe:	4b6d      	ldr	r3, [pc, #436]	; (80015b4 <main+0x64c>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001406:	f040 8217 	bne.w	8001838 <main+0x8d0>
													dataOut = -1 * ((MaxV - MinV) * (4096.0 * micros() / (3.3 * Frequency * 1000000.0)));
 800140a:	4b6b      	ldr	r3, [pc, #428]	; (80015b8 <main+0x650>)
 800140c:	ed93 7a00 	vldr	s14, [r3]
 8001410:	4b6a      	ldr	r3, [pc, #424]	; (80015bc <main+0x654>)
 8001412:	edd3 7a00 	vldr	s15, [r3]
 8001416:	ee77 7a67 	vsub.f32	s15, s14, s15
 800141a:	ee17 0a90 	vmov	r0, s15
 800141e:	f7ff f89b 	bl	8000558 <__aeabi_f2d>
 8001422:	4604      	mov	r4, r0
 8001424:	460d      	mov	r5, r1
 8001426:	f001 f897 	bl	8002558 <micros>
 800142a:	4602      	mov	r2, r0
 800142c:	460b      	mov	r3, r1
 800142e:	4610      	mov	r0, r2
 8001430:	4619      	mov	r1, r3
 8001432:	f7ff f8b3 	bl	800059c <__aeabi_ul2d>
 8001436:	f04f 0200 	mov.w	r2, #0
 800143a:	4b61      	ldr	r3, [pc, #388]	; (80015c0 <main+0x658>)
 800143c:	f7ff f8e4 	bl	8000608 <__aeabi_dmul>
 8001440:	4602      	mov	r2, r0
 8001442:	460b      	mov	r3, r1
 8001444:	4690      	mov	r8, r2
 8001446:	4699      	mov	r9, r3
 8001448:	4b5e      	ldr	r3, [pc, #376]	; (80015c4 <main+0x65c>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	4618      	mov	r0, r3
 800144e:	f7ff f883 	bl	8000558 <__aeabi_f2d>
 8001452:	a34f      	add	r3, pc, #316	; (adr r3, 8001590 <main+0x628>)
 8001454:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001458:	f7ff f8d6 	bl	8000608 <__aeabi_dmul>
 800145c:	4602      	mov	r2, r0
 800145e:	460b      	mov	r3, r1
 8001460:	4610      	mov	r0, r2
 8001462:	4619      	mov	r1, r3
 8001464:	a34c      	add	r3, pc, #304	; (adr r3, 8001598 <main+0x630>)
 8001466:	e9d3 2300 	ldrd	r2, r3, [r3]
 800146a:	f7ff f8cd 	bl	8000608 <__aeabi_dmul>
 800146e:	4602      	mov	r2, r0
 8001470:	460b      	mov	r3, r1
 8001472:	4640      	mov	r0, r8
 8001474:	4649      	mov	r1, r9
 8001476:	f7ff f9f1 	bl	800085c <__aeabi_ddiv>
 800147a:	4602      	mov	r2, r0
 800147c:	460b      	mov	r3, r1
 800147e:	4620      	mov	r0, r4
 8001480:	4629      	mov	r1, r5
 8001482:	f7ff f8c1 	bl	8000608 <__aeabi_dmul>
 8001486:	4602      	mov	r2, r0
 8001488:	460b      	mov	r3, r1
 800148a:	613a      	str	r2, [r7, #16]
 800148c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001490:	617b      	str	r3, [r7, #20]
 8001492:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001496:	f7ff fb79 	bl	8000b8c <__aeabi_d2uiz>
 800149a:	4603      	mov	r3, r0
 800149c:	b29a      	uxth	r2, r3
 800149e:	4b4a      	ldr	r3, [pc, #296]	; (80015c8 <main+0x660>)
 80014a0:	801a      	strh	r2, [r3, #0]
													int range = ((MinV - MaxV) * (4096.0 / 3.3));
 80014a2:	4b46      	ldr	r3, [pc, #280]	; (80015bc <main+0x654>)
 80014a4:	ed93 7a00 	vldr	s14, [r3]
 80014a8:	4b43      	ldr	r3, [pc, #268]	; (80015b8 <main+0x650>)
 80014aa:	edd3 7a00 	vldr	s15, [r3]
 80014ae:	ee77 7a67 	vsub.f32	s15, s14, s15
 80014b2:	ee17 0a90 	vmov	r0, s15
 80014b6:	f7ff f84f 	bl	8000558 <__aeabi_f2d>
 80014ba:	a339      	add	r3, pc, #228	; (adr r3, 80015a0 <main+0x638>)
 80014bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014c0:	f7ff f8a2 	bl	8000608 <__aeabi_dmul>
 80014c4:	4602      	mov	r2, r0
 80014c6:	460b      	mov	r3, r1
 80014c8:	4610      	mov	r0, r2
 80014ca:	4619      	mov	r1, r3
 80014cc:	f7ff fb36 	bl	8000b3c <__aeabi_d2iz>
 80014d0:	4603      	mov	r3, r0
 80014d2:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
													dataOut %= range;
 80014d6:	4b3c      	ldr	r3, [pc, #240]	; (80015c8 <main+0x660>)
 80014d8:	881b      	ldrh	r3, [r3, #0]
 80014da:	f8d7 2168 	ldr.w	r2, [r7, #360]	; 0x168
 80014de:	fb93 f2f2 	sdiv	r2, r3, r2
 80014e2:	f8d7 1168 	ldr.w	r1, [r7, #360]	; 0x168
 80014e6:	fb01 f202 	mul.w	r2, r1, r2
 80014ea:	1a9b      	subs	r3, r3, r2
 80014ec:	b29a      	uxth	r2, r3
 80014ee:	4b36      	ldr	r3, [pc, #216]	; (80015c8 <main+0x660>)
 80014f0:	801a      	strh	r2, [r3, #0]
													dataOut += (MaxV * 4096.0 /3.3);
 80014f2:	4b35      	ldr	r3, [pc, #212]	; (80015c8 <main+0x660>)
 80014f4:	881b      	ldrh	r3, [r3, #0]
 80014f6:	4618      	mov	r0, r3
 80014f8:	f7ff f81c 	bl	8000534 <__aeabi_i2d>
 80014fc:	4604      	mov	r4, r0
 80014fe:	460d      	mov	r5, r1
 8001500:	4b2d      	ldr	r3, [pc, #180]	; (80015b8 <main+0x650>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	4618      	mov	r0, r3
 8001506:	f7ff f827 	bl	8000558 <__aeabi_f2d>
 800150a:	f04f 0200 	mov.w	r2, #0
 800150e:	4b2c      	ldr	r3, [pc, #176]	; (80015c0 <main+0x658>)
 8001510:	f7ff f87a 	bl	8000608 <__aeabi_dmul>
 8001514:	4602      	mov	r2, r0
 8001516:	460b      	mov	r3, r1
 8001518:	4610      	mov	r0, r2
 800151a:	4619      	mov	r1, r3
 800151c:	a31c      	add	r3, pc, #112	; (adr r3, 8001590 <main+0x628>)
 800151e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001522:	f7ff f99b 	bl	800085c <__aeabi_ddiv>
 8001526:	4602      	mov	r2, r0
 8001528:	460b      	mov	r3, r1
 800152a:	4620      	mov	r0, r4
 800152c:	4629      	mov	r1, r5
 800152e:	f7fe feb5 	bl	800029c <__adddf3>
 8001532:	4602      	mov	r2, r0
 8001534:	460b      	mov	r3, r1
 8001536:	4610      	mov	r0, r2
 8001538:	4619      	mov	r1, r3
 800153a:	f7ff fb27 	bl	8000b8c <__aeabi_d2uiz>
 800153e:	4603      	mov	r3, r0
 8001540:	b29a      	uxth	r2, r3
 8001542:	4b21      	ldr	r3, [pc, #132]	; (80015c8 <main+0x660>)
 8001544:	801a      	strh	r2, [r3, #0]
									break;
 8001546:	e177      	b.n	8001838 <main+0x8d0>

								case 'a' :	//increase frequency
									Frequency += 0.1;
 8001548:	4b1e      	ldr	r3, [pc, #120]	; (80015c4 <main+0x65c>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	4618      	mov	r0, r3
 800154e:	f7ff f803 	bl	8000558 <__aeabi_f2d>
 8001552:	a315      	add	r3, pc, #84	; (adr r3, 80015a8 <main+0x640>)
 8001554:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001558:	f7fe fea0 	bl	800029c <__adddf3>
 800155c:	4602      	mov	r2, r0
 800155e:	460b      	mov	r3, r1
 8001560:	4610      	mov	r0, r2
 8001562:	4619      	mov	r1, r3
 8001564:	f7ff fb32 	bl	8000bcc <__aeabi_d2f>
 8001568:	4603      	mov	r3, r0
 800156a:	4a16      	ldr	r2, [pc, #88]	; (80015c4 <main+0x65c>)
 800156c:	6013      	str	r3, [r2, #0]
									if (Frequency >= 10)
 800156e:	4b15      	ldr	r3, [pc, #84]	; (80015c4 <main+0x65c>)
 8001570:	edd3 7a00 	vldr	s15, [r3]
 8001574:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001578:	eef4 7ac7 	vcmpe.f32	s15, s14
 800157c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001580:	db02      	blt.n	8001588 <main+0x620>
									{
										Frequency = 10;
 8001582:	4b10      	ldr	r3, [pc, #64]	; (80015c4 <main+0x65c>)
 8001584:	4a11      	ldr	r2, [pc, #68]	; (80015cc <main+0x664>)
 8001586:	601a      	str	r2, [r3, #0]
									}
									CurrentMode = Mode_SawTooth;
 8001588:	4b11      	ldr	r3, [pc, #68]	; (80015d0 <main+0x668>)
 800158a:	2214      	movs	r2, #20
 800158c:	601a      	str	r2, [r3, #0]
									break;
 800158e:	e154      	b.n	800183a <main+0x8d2>
 8001590:	66666666 	.word	0x66666666
 8001594:	400a6666 	.word	0x400a6666
 8001598:	00000000 	.word	0x00000000
 800159c:	412e8480 	.word	0x412e8480
 80015a0:	364d9365 	.word	0x364d9365
 80015a4:	409364d9 	.word	0x409364d9
 80015a8:	9999999a 	.word	0x9999999a
 80015ac:	3fb99999 	.word	0x3fb99999
 80015b0:	20000158 	.word	0x20000158
 80015b4:	2000000c 	.word	0x2000000c
 80015b8:	20000008 	.word	0x20000008
 80015bc:	200000b0 	.word	0x200000b0
 80015c0:	40b00000 	.word	0x40b00000
 80015c4:	20000004 	.word	0x20000004
 80015c8:	200000a8 	.word	0x200000a8
 80015cc:	41200000 	.word	0x41200000
 80015d0:	200000ac 	.word	0x200000ac

								case 's' :	//decrease frequency
									Frequency -= 0.1;
 80015d4:	4bae      	ldr	r3, [pc, #696]	; (8001890 <main+0x928>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	4618      	mov	r0, r3
 80015da:	f7fe ffbd 	bl	8000558 <__aeabi_f2d>
 80015de:	a3a6      	add	r3, pc, #664	; (adr r3, 8001878 <main+0x910>)
 80015e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015e4:	f7fe fe58 	bl	8000298 <__aeabi_dsub>
 80015e8:	4602      	mov	r2, r0
 80015ea:	460b      	mov	r3, r1
 80015ec:	4610      	mov	r0, r2
 80015ee:	4619      	mov	r1, r3
 80015f0:	f7ff faec 	bl	8000bcc <__aeabi_d2f>
 80015f4:	4603      	mov	r3, r0
 80015f6:	4aa6      	ldr	r2, [pc, #664]	; (8001890 <main+0x928>)
 80015f8:	6013      	str	r3, [r2, #0]
									if (Frequency <= 0)
 80015fa:	4ba5      	ldr	r3, [pc, #660]	; (8001890 <main+0x928>)
 80015fc:	edd3 7a00 	vldr	s15, [r3]
 8001600:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001604:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001608:	d803      	bhi.n	8001612 <main+0x6aa>
									{
										Frequency = 0;
 800160a:	4ba1      	ldr	r3, [pc, #644]	; (8001890 <main+0x928>)
 800160c:	f04f 0200 	mov.w	r2, #0
 8001610:	601a      	str	r2, [r3, #0]
									}
									CurrentMode = Mode_SawTooth;
 8001612:	4ba0      	ldr	r3, [pc, #640]	; (8001894 <main+0x92c>)
 8001614:	2214      	movs	r2, #20
 8001616:	601a      	str	r2, [r3, #0]
									break;
 8001618:	e10f      	b.n	800183a <main+0x8d2>

								case 'd' :	// Set V_High +0.1V
									MaxV += 0.1;
 800161a:	4b9f      	ldr	r3, [pc, #636]	; (8001898 <main+0x930>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	4618      	mov	r0, r3
 8001620:	f7fe ff9a 	bl	8000558 <__aeabi_f2d>
 8001624:	a394      	add	r3, pc, #592	; (adr r3, 8001878 <main+0x910>)
 8001626:	e9d3 2300 	ldrd	r2, r3, [r3]
 800162a:	f7fe fe37 	bl	800029c <__adddf3>
 800162e:	4602      	mov	r2, r0
 8001630:	460b      	mov	r3, r1
 8001632:	4610      	mov	r0, r2
 8001634:	4619      	mov	r1, r3
 8001636:	f7ff fac9 	bl	8000bcc <__aeabi_d2f>
 800163a:	4603      	mov	r3, r0
 800163c:	4a96      	ldr	r2, [pc, #600]	; (8001898 <main+0x930>)
 800163e:	6013      	str	r3, [r2, #0]
									if (MaxV >= 3.3 && MaxV > MinV)
 8001640:	4b95      	ldr	r3, [pc, #596]	; (8001898 <main+0x930>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	4618      	mov	r0, r3
 8001646:	f7fe ff87 	bl	8000558 <__aeabi_f2d>
 800164a:	a38d      	add	r3, pc, #564	; (adr r3, 8001880 <main+0x918>)
 800164c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001650:	f7ff fa60 	bl	8000b14 <__aeabi_dcmpge>
 8001654:	4603      	mov	r3, r0
 8001656:	2b00      	cmp	r3, #0
 8001658:	d00d      	beq.n	8001676 <main+0x70e>
 800165a:	4b8f      	ldr	r3, [pc, #572]	; (8001898 <main+0x930>)
 800165c:	ed93 7a00 	vldr	s14, [r3]
 8001660:	4b8e      	ldr	r3, [pc, #568]	; (800189c <main+0x934>)
 8001662:	edd3 7a00 	vldr	s15, [r3]
 8001666:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800166a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800166e:	dd02      	ble.n	8001676 <main+0x70e>
									{
										MaxV = 3.3;
 8001670:	4b89      	ldr	r3, [pc, #548]	; (8001898 <main+0x930>)
 8001672:	4a8b      	ldr	r2, [pc, #556]	; (80018a0 <main+0x938>)
 8001674:	601a      	str	r2, [r3, #0]
									}
									CurrentMode = Mode_SawTooth;
 8001676:	4b87      	ldr	r3, [pc, #540]	; (8001894 <main+0x92c>)
 8001678:	2214      	movs	r2, #20
 800167a:	601a      	str	r2, [r3, #0]
									break;
 800167c:	e0dd      	b.n	800183a <main+0x8d2>

								case 'f' :	// Set V_High -0.1V
									MaxV -= 0.1;
 800167e:	4b86      	ldr	r3, [pc, #536]	; (8001898 <main+0x930>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	4618      	mov	r0, r3
 8001684:	f7fe ff68 	bl	8000558 <__aeabi_f2d>
 8001688:	a37b      	add	r3, pc, #492	; (adr r3, 8001878 <main+0x910>)
 800168a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800168e:	f7fe fe03 	bl	8000298 <__aeabi_dsub>
 8001692:	4602      	mov	r2, r0
 8001694:	460b      	mov	r3, r1
 8001696:	4610      	mov	r0, r2
 8001698:	4619      	mov	r1, r3
 800169a:	f7ff fa97 	bl	8000bcc <__aeabi_d2f>
 800169e:	4603      	mov	r3, r0
 80016a0:	4a7d      	ldr	r2, [pc, #500]	; (8001898 <main+0x930>)
 80016a2:	6013      	str	r3, [r2, #0]
									if (MaxV <= 0.1 && MaxV > MinV)
 80016a4:	4b7c      	ldr	r3, [pc, #496]	; (8001898 <main+0x930>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	4618      	mov	r0, r3
 80016aa:	f7fe ff55 	bl	8000558 <__aeabi_f2d>
 80016ae:	a372      	add	r3, pc, #456	; (adr r3, 8001878 <main+0x910>)
 80016b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016b4:	f7ff fa24 	bl	8000b00 <__aeabi_dcmple>
 80016b8:	4603      	mov	r3, r0
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d00d      	beq.n	80016da <main+0x772>
 80016be:	4b76      	ldr	r3, [pc, #472]	; (8001898 <main+0x930>)
 80016c0:	ed93 7a00 	vldr	s14, [r3]
 80016c4:	4b75      	ldr	r3, [pc, #468]	; (800189c <main+0x934>)
 80016c6:	edd3 7a00 	vldr	s15, [r3]
 80016ca:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80016ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016d2:	dd02      	ble.n	80016da <main+0x772>
									{
										MaxV = 0.1;
 80016d4:	4b70      	ldr	r3, [pc, #448]	; (8001898 <main+0x930>)
 80016d6:	4a73      	ldr	r2, [pc, #460]	; (80018a4 <main+0x93c>)
 80016d8:	601a      	str	r2, [r3, #0]
									}
									CurrentMode = Mode_SawTooth;
 80016da:	4b6e      	ldr	r3, [pc, #440]	; (8001894 <main+0x92c>)
 80016dc:	2214      	movs	r2, #20
 80016de:	601a      	str	r2, [r3, #0]
									break;
 80016e0:	e0ab      	b.n	800183a <main+0x8d2>

								case 'g' :	// Set V_Low +0.1V
									MinV += 0.1;
 80016e2:	4b6e      	ldr	r3, [pc, #440]	; (800189c <main+0x934>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	4618      	mov	r0, r3
 80016e8:	f7fe ff36 	bl	8000558 <__aeabi_f2d>
 80016ec:	a362      	add	r3, pc, #392	; (adr r3, 8001878 <main+0x910>)
 80016ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016f2:	f7fe fdd3 	bl	800029c <__adddf3>
 80016f6:	4602      	mov	r2, r0
 80016f8:	460b      	mov	r3, r1
 80016fa:	4610      	mov	r0, r2
 80016fc:	4619      	mov	r1, r3
 80016fe:	f7ff fa65 	bl	8000bcc <__aeabi_d2f>
 8001702:	4603      	mov	r3, r0
 8001704:	4a65      	ldr	r2, [pc, #404]	; (800189c <main+0x934>)
 8001706:	6013      	str	r3, [r2, #0]
									if (MinV >= 3.2 && MaxV > MinV)
 8001708:	4b64      	ldr	r3, [pc, #400]	; (800189c <main+0x934>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	4618      	mov	r0, r3
 800170e:	f7fe ff23 	bl	8000558 <__aeabi_f2d>
 8001712:	a35d      	add	r3, pc, #372	; (adr r3, 8001888 <main+0x920>)
 8001714:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001718:	f7ff f9fc 	bl	8000b14 <__aeabi_dcmpge>
 800171c:	4603      	mov	r3, r0
 800171e:	2b00      	cmp	r3, #0
 8001720:	d00d      	beq.n	800173e <main+0x7d6>
 8001722:	4b5d      	ldr	r3, [pc, #372]	; (8001898 <main+0x930>)
 8001724:	ed93 7a00 	vldr	s14, [r3]
 8001728:	4b5c      	ldr	r3, [pc, #368]	; (800189c <main+0x934>)
 800172a:	edd3 7a00 	vldr	s15, [r3]
 800172e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001732:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001736:	dd02      	ble.n	800173e <main+0x7d6>
									{
										MinV = 3.2;
 8001738:	4b58      	ldr	r3, [pc, #352]	; (800189c <main+0x934>)
 800173a:	4a5b      	ldr	r2, [pc, #364]	; (80018a8 <main+0x940>)
 800173c:	601a      	str	r2, [r3, #0]
									}
									CurrentMode = Mode_SawTooth;
 800173e:	4b55      	ldr	r3, [pc, #340]	; (8001894 <main+0x92c>)
 8001740:	2214      	movs	r2, #20
 8001742:	601a      	str	r2, [r3, #0]
									break;
 8001744:	e079      	b.n	800183a <main+0x8d2>

								case 'h' :	// Set V_Low -0.1V
									MinV -= 0.1;
 8001746:	4b55      	ldr	r3, [pc, #340]	; (800189c <main+0x934>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	4618      	mov	r0, r3
 800174c:	f7fe ff04 	bl	8000558 <__aeabi_f2d>
 8001750:	a349      	add	r3, pc, #292	; (adr r3, 8001878 <main+0x910>)
 8001752:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001756:	f7fe fd9f 	bl	8000298 <__aeabi_dsub>
 800175a:	4602      	mov	r2, r0
 800175c:	460b      	mov	r3, r1
 800175e:	4610      	mov	r0, r2
 8001760:	4619      	mov	r1, r3
 8001762:	f7ff fa33 	bl	8000bcc <__aeabi_d2f>
 8001766:	4603      	mov	r3, r0
 8001768:	4a4c      	ldr	r2, [pc, #304]	; (800189c <main+0x934>)
 800176a:	6013      	str	r3, [r2, #0]
									if (MinV <= 0 && MaxV > MinV)
 800176c:	4b4b      	ldr	r3, [pc, #300]	; (800189c <main+0x934>)
 800176e:	edd3 7a00 	vldr	s15, [r3]
 8001772:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001776:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800177a:	d80e      	bhi.n	800179a <main+0x832>
 800177c:	4b46      	ldr	r3, [pc, #280]	; (8001898 <main+0x930>)
 800177e:	ed93 7a00 	vldr	s14, [r3]
 8001782:	4b46      	ldr	r3, [pc, #280]	; (800189c <main+0x934>)
 8001784:	edd3 7a00 	vldr	s15, [r3]
 8001788:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800178c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001790:	dd03      	ble.n	800179a <main+0x832>
									{
										MinV = 0;
 8001792:	4b42      	ldr	r3, [pc, #264]	; (800189c <main+0x934>)
 8001794:	f04f 0200 	mov.w	r2, #0
 8001798:	601a      	str	r2, [r3, #0]
									}
									CurrentMode = Mode_SawTooth;
 800179a:	4b3e      	ldr	r3, [pc, #248]	; (8001894 <main+0x92c>)
 800179c:	2214      	movs	r2, #20
 800179e:	601a      	str	r2, [r3, #0]
									break;
 80017a0:	e04b      	b.n	800183a <main+0x8d2>

								case 'j' :	//Slop DOWN
									Slope = -1;
 80017a2:	4b42      	ldr	r3, [pc, #264]	; (80018ac <main+0x944>)
 80017a4:	f04f 32ff 	mov.w	r2, #4294967295
 80017a8:	601a      	str	r2, [r3, #0]
									sprintf(temp, "\r\nSLOPE DOWN\r\n");
 80017aa:	4941      	ldr	r1, [pc, #260]	; (80018b0 <main+0x948>)
 80017ac:	4841      	ldr	r0, [pc, #260]	; (80018b4 <main+0x94c>)
 80017ae:	f005 f905 	bl	80069bc <siprintf>
									HAL_UART_Transmit(&huart2, (uint8_t*)temp, strlen(temp),1000);
 80017b2:	4840      	ldr	r0, [pc, #256]	; (80018b4 <main+0x94c>)
 80017b4:	f7fe fd14 	bl	80001e0 <strlen>
 80017b8:	4603      	mov	r3, r0
 80017ba:	b29a      	uxth	r2, r3
 80017bc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017c0:	493c      	ldr	r1, [pc, #240]	; (80018b4 <main+0x94c>)
 80017c2:	483d      	ldr	r0, [pc, #244]	; (80018b8 <main+0x950>)
 80017c4:	f004 f9af 	bl	8005b26 <HAL_UART_Transmit>
									CurrentMode = Mode_SawTooth;
 80017c8:	4b32      	ldr	r3, [pc, #200]	; (8001894 <main+0x92c>)
 80017ca:	2214      	movs	r2, #20
 80017cc:	601a      	str	r2, [r3, #0]
									break;
 80017ce:	e034      	b.n	800183a <main+0x8d2>

								case 'k' :	//Slop UP
									Slope = 1;
 80017d0:	4b36      	ldr	r3, [pc, #216]	; (80018ac <main+0x944>)
 80017d2:	2201      	movs	r2, #1
 80017d4:	601a      	str	r2, [r3, #0]
									sprintf(temp, "\r\nSLOPE UP\r\n");
 80017d6:	4939      	ldr	r1, [pc, #228]	; (80018bc <main+0x954>)
 80017d8:	4836      	ldr	r0, [pc, #216]	; (80018b4 <main+0x94c>)
 80017da:	f005 f8ef 	bl	80069bc <siprintf>
									HAL_UART_Transmit(&huart2, (uint8_t*)temp, strlen(temp),1000);
 80017de:	4835      	ldr	r0, [pc, #212]	; (80018b4 <main+0x94c>)
 80017e0:	f7fe fcfe 	bl	80001e0 <strlen>
 80017e4:	4603      	mov	r3, r0
 80017e6:	b29a      	uxth	r2, r3
 80017e8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017ec:	4931      	ldr	r1, [pc, #196]	; (80018b4 <main+0x94c>)
 80017ee:	4832      	ldr	r0, [pc, #200]	; (80018b8 <main+0x950>)
 80017f0:	f004 f999 	bl	8005b26 <HAL_UART_Transmit>
									CurrentMode = Mode_SawTooth;
 80017f4:	4b27      	ldr	r3, [pc, #156]	; (8001894 <main+0x92c>)
 80017f6:	2214      	movs	r2, #20
 80017f8:	601a      	str	r2, [r3, #0]
									break;
 80017fa:	e01e      	b.n	800183a <main+0x8d2>

								case 'x' :	//back
									CurrentMode = Mode_MainMenu;
 80017fc:	4b25      	ldr	r3, [pc, #148]	; (8001894 <main+0x92c>)
 80017fe:	2200      	movs	r2, #0
 8001800:	601a      	str	r2, [r3, #0]
									break;
 8001802:	e01a      	b.n	800183a <main+0x8d2>

								default :	//error
									{
										char temp[] = "\r\n\r\n!!!ERROR!!!\r\n\r\n";
 8001804:	4b2e      	ldr	r3, [pc, #184]	; (80018c0 <main+0x958>)
 8001806:	f507 74a0 	add.w	r4, r7, #320	; 0x140
 800180a:	461d      	mov	r5, r3
 800180c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800180e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001810:	682b      	ldr	r3, [r5, #0]
 8001812:	6023      	str	r3, [r4, #0]
										HAL_UART_Transmit(&huart2, (uint8_t*)temp, strlen(temp),1000);
 8001814:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8001818:	4618      	mov	r0, r3
 800181a:	f7fe fce1 	bl	80001e0 <strlen>
 800181e:	4603      	mov	r3, r0
 8001820:	b29a      	uxth	r2, r3
 8001822:	f507 71a0 	add.w	r1, r7, #320	; 0x140
 8001826:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800182a:	4823      	ldr	r0, [pc, #140]	; (80018b8 <main+0x950>)
 800182c:	f004 f97b 	bl	8005b26 <HAL_UART_Transmit>
										CurrentMode = Mode_MainMenu;
 8001830:	4b18      	ldr	r3, [pc, #96]	; (8001894 <main+0x92c>)
 8001832:	2200      	movs	r2, #0
 8001834:	601a      	str	r2, [r3, #0]
										break;
 8001836:	e000      	b.n	800183a <main+0x8d2>
									break;
 8001838:	bf00      	nop
									}
							}
							break;
 800183a:	e3a7      	b.n	8001f8c <main+0x1024>

						case Mode_SineWave :	//SineWave
						{
							char temp[]="-------------------\r\n"
 800183c:	f107 0318 	add.w	r3, r7, #24
 8001840:	4a20      	ldr	r2, [pc, #128]	; (80018c4 <main+0x95c>)
 8001842:	4618      	mov	r0, r3
 8001844:	4611      	mov	r1, r2
 8001846:	23e0      	movs	r3, #224	; 0xe0
 8001848:	461a      	mov	r2, r3
 800184a:	f005 f8a1 	bl	8006990 <memcpy>
							"d : Set V_High +0.1V\r\n"
							"f : Set V_High -0.1V\r\n"
							"g : Set V_Low +0.1V\r\n"
							"h : Set V_Low -0.1V\r\n"
							"x : back\r\n";
							HAL_UART_Transmit(&huart2, (uint8_t*)temp, strlen(temp),1000);
 800184e:	f107 0318 	add.w	r3, r7, #24
 8001852:	4618      	mov	r0, r3
 8001854:	f7fe fcc4 	bl	80001e0 <strlen>
 8001858:	4603      	mov	r3, r0
 800185a:	b29a      	uxth	r2, r3
 800185c:	f107 0118 	add.w	r1, r7, #24
 8001860:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001864:	4814      	ldr	r0, [pc, #80]	; (80018b8 <main+0x950>)
 8001866:	f004 f95e 	bl	8005b26 <HAL_UART_Transmit>
							CurrentMode = Mode_SineWave_Wait;
 800186a:	4b0a      	ldr	r3, [pc, #40]	; (8001894 <main+0x92c>)
 800186c:	2232      	movs	r2, #50	; 0x32
 800186e:	601a      	str	r2, [r3, #0]
							break;
 8001870:	e38c      	b.n	8001f8c <main+0x1024>
 8001872:	bf00      	nop
 8001874:	f3af 8000 	nop.w
 8001878:	9999999a 	.word	0x9999999a
 800187c:	3fb99999 	.word	0x3fb99999
 8001880:	66666666 	.word	0x66666666
 8001884:	400a6666 	.word	0x400a6666
 8001888:	9999999a 	.word	0x9999999a
 800188c:	40099999 	.word	0x40099999
 8001890:	20000004 	.word	0x20000004
 8001894:	200000ac 	.word	0x200000ac
 8001898:	20000008 	.word	0x20000008
 800189c:	200000b0 	.word	0x200000b0
 80018a0:	40533333 	.word	0x40533333
 80018a4:	3dcccccd 	.word	0x3dcccccd
 80018a8:	404ccccd 	.word	0x404ccccd
 80018ac:	2000000c 	.word	0x2000000c
 80018b0:	08007214 	.word	0x08007214
 80018b4:	200000f4 	.word	0x200000f4
 80018b8:	200002f0 	.word	0x200002f0
 80018bc:	08007224 	.word	0x08007224
 80018c0:	080073a8 	.word	0x080073a8
 80018c4:	080073bc 	.word	0x080073bc
						}

						case Mode_SineWave_Wait	:		//default 5 Hz >> range 0 - 10 Hz
							switch (inputchar)
 80018c8:	f997 316f 	ldrsb.w	r3, [r7, #367]	; 0x16f
 80018cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018d0:	d040      	beq.n	8001954 <main+0x9ec>
 80018d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018d6:	f2c0 8169 	blt.w	8001bac <main+0xc44>
 80018da:	2b78      	cmp	r3, #120	; 0x78
 80018dc:	f300 8166 	bgt.w	8001bac <main+0xc44>
 80018e0:	2b61      	cmp	r3, #97	; 0x61
 80018e2:	f2c0 8163 	blt.w	8001bac <main+0xc44>
 80018e6:	3b61      	subs	r3, #97	; 0x61
 80018e8:	2b17      	cmp	r3, #23
 80018ea:	f200 815f 	bhi.w	8001bac <main+0xc44>
 80018ee:	a201      	add	r2, pc, #4	; (adr r2, 80018f4 <main+0x98c>)
 80018f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018f4:	0800198f 	.word	0x0800198f
 80018f8:	08001bad 	.word	0x08001bad
 80018fc:	08001bad 	.word	0x08001bad
 8001900:	08001a1d 	.word	0x08001a1d
 8001904:	08001bad 	.word	0x08001bad
 8001908:	08001a81 	.word	0x08001a81
 800190c:	08001ae5 	.word	0x08001ae5
 8001910:	08001b49 	.word	0x08001b49
 8001914:	08001bad 	.word	0x08001bad
 8001918:	08001bad 	.word	0x08001bad
 800191c:	08001bad 	.word	0x08001bad
 8001920:	08001bad 	.word	0x08001bad
 8001924:	08001bad 	.word	0x08001bad
 8001928:	08001bad 	.word	0x08001bad
 800192c:	08001bad 	.word	0x08001bad
 8001930:	08001bad 	.word	0x08001bad
 8001934:	08001bad 	.word	0x08001bad
 8001938:	08001bad 	.word	0x08001bad
 800193c:	080019d7 	.word	0x080019d7
 8001940:	08001bad 	.word	0x08001bad
 8001944:	08001bad 	.word	0x08001bad
 8001948:	08001bad 	.word	0x08001bad
 800194c:	08001bad 	.word	0x08001bad
 8001950:	08001ba5 	.word	0x08001ba5
							{

								case -1 :	//no input
									if (micros() - timestamp > 1000)
 8001954:	f000 fe00 	bl	8002558 <micros>
 8001958:	4bb7      	ldr	r3, [pc, #732]	; (8001c38 <main+0xcd0>)
 800195a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800195e:	1a84      	subs	r4, r0, r2
 8001960:	60bc      	str	r4, [r7, #8]
 8001962:	eb61 0303 	sbc.w	r3, r1, r3
 8001966:	60fb      	str	r3, [r7, #12]
 8001968:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800196c:	f04f 0300 	mov.w	r3, #0
 8001970:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001974:	428b      	cmp	r3, r1
 8001976:	bf08      	it	eq
 8001978:	4282      	cmpeq	r2, r0
 800197a:	f080 8131 	bcs.w	8001be0 <main+0xc78>
											{
												timestamp = micros();
 800197e:	f000 fdeb 	bl	8002558 <micros>
 8001982:	4602      	mov	r2, r0
 8001984:	460b      	mov	r3, r1
 8001986:	49ac      	ldr	r1, [pc, #688]	; (8001c38 <main+0xcd0>)
 8001988:	e9c1 2300 	strd	r2, r3, [r1]
//												{
//													dataOut -= ((MaxV - MinV)*4096/3.3 - (MaxV*4096/3.3));
//													dataOut %= 4096*(MaxV-MinV);
//												}
											}
									break;
 800198c:	e128      	b.n	8001be0 <main+0xc78>

								case 'a' :	//increase frequency
									Frequency += 0.1;
 800198e:	4bab      	ldr	r3, [pc, #684]	; (8001c3c <main+0xcd4>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	4618      	mov	r0, r3
 8001994:	f7fe fde0 	bl	8000558 <__aeabi_f2d>
 8001998:	a3a1      	add	r3, pc, #644	; (adr r3, 8001c20 <main+0xcb8>)
 800199a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800199e:	f7fe fc7d 	bl	800029c <__adddf3>
 80019a2:	4602      	mov	r2, r0
 80019a4:	460b      	mov	r3, r1
 80019a6:	4610      	mov	r0, r2
 80019a8:	4619      	mov	r1, r3
 80019aa:	f7ff f90f 	bl	8000bcc <__aeabi_d2f>
 80019ae:	4603      	mov	r3, r0
 80019b0:	4aa2      	ldr	r2, [pc, #648]	; (8001c3c <main+0xcd4>)
 80019b2:	6013      	str	r3, [r2, #0]
									if (Frequency >= 10)
 80019b4:	4ba1      	ldr	r3, [pc, #644]	; (8001c3c <main+0xcd4>)
 80019b6:	edd3 7a00 	vldr	s15, [r3]
 80019ba:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80019be:	eef4 7ac7 	vcmpe.f32	s15, s14
 80019c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019c6:	db02      	blt.n	80019ce <main+0xa66>
									{
										Frequency = 10;
 80019c8:	4b9c      	ldr	r3, [pc, #624]	; (8001c3c <main+0xcd4>)
 80019ca:	4a9d      	ldr	r2, [pc, #628]	; (8001c40 <main+0xcd8>)
 80019cc:	601a      	str	r2, [r3, #0]
									}
									CurrentMode = Mode_SineWave;
 80019ce:	4b9d      	ldr	r3, [pc, #628]	; (8001c44 <main+0xcdc>)
 80019d0:	2228      	movs	r2, #40	; 0x28
 80019d2:	601a      	str	r2, [r3, #0]
									break;
 80019d4:	e105      	b.n	8001be2 <main+0xc7a>

								case 's' :	//decrease frequency
									Frequency -= 0.1;
 80019d6:	4b99      	ldr	r3, [pc, #612]	; (8001c3c <main+0xcd4>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	4618      	mov	r0, r3
 80019dc:	f7fe fdbc 	bl	8000558 <__aeabi_f2d>
 80019e0:	a38f      	add	r3, pc, #572	; (adr r3, 8001c20 <main+0xcb8>)
 80019e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019e6:	f7fe fc57 	bl	8000298 <__aeabi_dsub>
 80019ea:	4602      	mov	r2, r0
 80019ec:	460b      	mov	r3, r1
 80019ee:	4610      	mov	r0, r2
 80019f0:	4619      	mov	r1, r3
 80019f2:	f7ff f8eb 	bl	8000bcc <__aeabi_d2f>
 80019f6:	4603      	mov	r3, r0
 80019f8:	4a90      	ldr	r2, [pc, #576]	; (8001c3c <main+0xcd4>)
 80019fa:	6013      	str	r3, [r2, #0]
									if (Frequency <= 0)
 80019fc:	4b8f      	ldr	r3, [pc, #572]	; (8001c3c <main+0xcd4>)
 80019fe:	edd3 7a00 	vldr	s15, [r3]
 8001a02:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001a06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a0a:	d803      	bhi.n	8001a14 <main+0xaac>
									{
										Frequency = 0;
 8001a0c:	4b8b      	ldr	r3, [pc, #556]	; (8001c3c <main+0xcd4>)
 8001a0e:	f04f 0200 	mov.w	r2, #0
 8001a12:	601a      	str	r2, [r3, #0]
									}
									CurrentMode = Mode_SineWave;
 8001a14:	4b8b      	ldr	r3, [pc, #556]	; (8001c44 <main+0xcdc>)
 8001a16:	2228      	movs	r2, #40	; 0x28
 8001a18:	601a      	str	r2, [r3, #0]
									break;
 8001a1a:	e0e2      	b.n	8001be2 <main+0xc7a>

								case 'd' :	// Set V_High +0.1V
									MaxV += 0.1;
 8001a1c:	4b8a      	ldr	r3, [pc, #552]	; (8001c48 <main+0xce0>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	4618      	mov	r0, r3
 8001a22:	f7fe fd99 	bl	8000558 <__aeabi_f2d>
 8001a26:	a37e      	add	r3, pc, #504	; (adr r3, 8001c20 <main+0xcb8>)
 8001a28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a2c:	f7fe fc36 	bl	800029c <__adddf3>
 8001a30:	4602      	mov	r2, r0
 8001a32:	460b      	mov	r3, r1
 8001a34:	4610      	mov	r0, r2
 8001a36:	4619      	mov	r1, r3
 8001a38:	f7ff f8c8 	bl	8000bcc <__aeabi_d2f>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	4a82      	ldr	r2, [pc, #520]	; (8001c48 <main+0xce0>)
 8001a40:	6013      	str	r3, [r2, #0]
									if (MaxV >= 3.3 && MaxV > MinV)
 8001a42:	4b81      	ldr	r3, [pc, #516]	; (8001c48 <main+0xce0>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	4618      	mov	r0, r3
 8001a48:	f7fe fd86 	bl	8000558 <__aeabi_f2d>
 8001a4c:	a376      	add	r3, pc, #472	; (adr r3, 8001c28 <main+0xcc0>)
 8001a4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a52:	f7ff f85f 	bl	8000b14 <__aeabi_dcmpge>
 8001a56:	4603      	mov	r3, r0
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d00d      	beq.n	8001a78 <main+0xb10>
 8001a5c:	4b7a      	ldr	r3, [pc, #488]	; (8001c48 <main+0xce0>)
 8001a5e:	ed93 7a00 	vldr	s14, [r3]
 8001a62:	4b7a      	ldr	r3, [pc, #488]	; (8001c4c <main+0xce4>)
 8001a64:	edd3 7a00 	vldr	s15, [r3]
 8001a68:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001a6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a70:	dd02      	ble.n	8001a78 <main+0xb10>
									{
										MaxV = 3.3;
 8001a72:	4b75      	ldr	r3, [pc, #468]	; (8001c48 <main+0xce0>)
 8001a74:	4a76      	ldr	r2, [pc, #472]	; (8001c50 <main+0xce8>)
 8001a76:	601a      	str	r2, [r3, #0]
									}
									CurrentMode = Mode_SineWave;
 8001a78:	4b72      	ldr	r3, [pc, #456]	; (8001c44 <main+0xcdc>)
 8001a7a:	2228      	movs	r2, #40	; 0x28
 8001a7c:	601a      	str	r2, [r3, #0]
									break;
 8001a7e:	e0b0      	b.n	8001be2 <main+0xc7a>

								case 'f' :	// Set V_High -0.1V
									MaxV -= 0.1;
 8001a80:	4b71      	ldr	r3, [pc, #452]	; (8001c48 <main+0xce0>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	4618      	mov	r0, r3
 8001a86:	f7fe fd67 	bl	8000558 <__aeabi_f2d>
 8001a8a:	a365      	add	r3, pc, #404	; (adr r3, 8001c20 <main+0xcb8>)
 8001a8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a90:	f7fe fc02 	bl	8000298 <__aeabi_dsub>
 8001a94:	4602      	mov	r2, r0
 8001a96:	460b      	mov	r3, r1
 8001a98:	4610      	mov	r0, r2
 8001a9a:	4619      	mov	r1, r3
 8001a9c:	f7ff f896 	bl	8000bcc <__aeabi_d2f>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	4a69      	ldr	r2, [pc, #420]	; (8001c48 <main+0xce0>)
 8001aa4:	6013      	str	r3, [r2, #0]
									if (MaxV <= 0.1 && MaxV > MinV)
 8001aa6:	4b68      	ldr	r3, [pc, #416]	; (8001c48 <main+0xce0>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	4618      	mov	r0, r3
 8001aac:	f7fe fd54 	bl	8000558 <__aeabi_f2d>
 8001ab0:	a35b      	add	r3, pc, #364	; (adr r3, 8001c20 <main+0xcb8>)
 8001ab2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ab6:	f7ff f823 	bl	8000b00 <__aeabi_dcmple>
 8001aba:	4603      	mov	r3, r0
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d00d      	beq.n	8001adc <main+0xb74>
 8001ac0:	4b61      	ldr	r3, [pc, #388]	; (8001c48 <main+0xce0>)
 8001ac2:	ed93 7a00 	vldr	s14, [r3]
 8001ac6:	4b61      	ldr	r3, [pc, #388]	; (8001c4c <main+0xce4>)
 8001ac8:	edd3 7a00 	vldr	s15, [r3]
 8001acc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001ad0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ad4:	dd02      	ble.n	8001adc <main+0xb74>
									{
										MaxV = 0.1;
 8001ad6:	4b5c      	ldr	r3, [pc, #368]	; (8001c48 <main+0xce0>)
 8001ad8:	4a5e      	ldr	r2, [pc, #376]	; (8001c54 <main+0xcec>)
 8001ada:	601a      	str	r2, [r3, #0]
									}
									CurrentMode = Mode_SineWave;
 8001adc:	4b59      	ldr	r3, [pc, #356]	; (8001c44 <main+0xcdc>)
 8001ade:	2228      	movs	r2, #40	; 0x28
 8001ae0:	601a      	str	r2, [r3, #0]
									break;
 8001ae2:	e07e      	b.n	8001be2 <main+0xc7a>

								case 'g' :	// Set V_Low +0.1V
									MinV += 0.1;
 8001ae4:	4b59      	ldr	r3, [pc, #356]	; (8001c4c <main+0xce4>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	4618      	mov	r0, r3
 8001aea:	f7fe fd35 	bl	8000558 <__aeabi_f2d>
 8001aee:	a34c      	add	r3, pc, #304	; (adr r3, 8001c20 <main+0xcb8>)
 8001af0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001af4:	f7fe fbd2 	bl	800029c <__adddf3>
 8001af8:	4602      	mov	r2, r0
 8001afa:	460b      	mov	r3, r1
 8001afc:	4610      	mov	r0, r2
 8001afe:	4619      	mov	r1, r3
 8001b00:	f7ff f864 	bl	8000bcc <__aeabi_d2f>
 8001b04:	4603      	mov	r3, r0
 8001b06:	4a51      	ldr	r2, [pc, #324]	; (8001c4c <main+0xce4>)
 8001b08:	6013      	str	r3, [r2, #0]
									if (MinV >= 3.2 && MaxV > MinV)
 8001b0a:	4b50      	ldr	r3, [pc, #320]	; (8001c4c <main+0xce4>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	4618      	mov	r0, r3
 8001b10:	f7fe fd22 	bl	8000558 <__aeabi_f2d>
 8001b14:	a346      	add	r3, pc, #280	; (adr r3, 8001c30 <main+0xcc8>)
 8001b16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b1a:	f7fe fffb 	bl	8000b14 <__aeabi_dcmpge>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d00d      	beq.n	8001b40 <main+0xbd8>
 8001b24:	4b48      	ldr	r3, [pc, #288]	; (8001c48 <main+0xce0>)
 8001b26:	ed93 7a00 	vldr	s14, [r3]
 8001b2a:	4b48      	ldr	r3, [pc, #288]	; (8001c4c <main+0xce4>)
 8001b2c:	edd3 7a00 	vldr	s15, [r3]
 8001b30:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001b34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b38:	dd02      	ble.n	8001b40 <main+0xbd8>
									{
										MinV = 3.2;
 8001b3a:	4b44      	ldr	r3, [pc, #272]	; (8001c4c <main+0xce4>)
 8001b3c:	4a46      	ldr	r2, [pc, #280]	; (8001c58 <main+0xcf0>)
 8001b3e:	601a      	str	r2, [r3, #0]
									}
									CurrentMode = Mode_SineWave;
 8001b40:	4b40      	ldr	r3, [pc, #256]	; (8001c44 <main+0xcdc>)
 8001b42:	2228      	movs	r2, #40	; 0x28
 8001b44:	601a      	str	r2, [r3, #0]
									break;
 8001b46:	e04c      	b.n	8001be2 <main+0xc7a>

								case 'h' :	// Set V_Low -0.1V
									MinV -= 0.1;
 8001b48:	4b40      	ldr	r3, [pc, #256]	; (8001c4c <main+0xce4>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	f7fe fd03 	bl	8000558 <__aeabi_f2d>
 8001b52:	a333      	add	r3, pc, #204	; (adr r3, 8001c20 <main+0xcb8>)
 8001b54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b58:	f7fe fb9e 	bl	8000298 <__aeabi_dsub>
 8001b5c:	4602      	mov	r2, r0
 8001b5e:	460b      	mov	r3, r1
 8001b60:	4610      	mov	r0, r2
 8001b62:	4619      	mov	r1, r3
 8001b64:	f7ff f832 	bl	8000bcc <__aeabi_d2f>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	4a38      	ldr	r2, [pc, #224]	; (8001c4c <main+0xce4>)
 8001b6c:	6013      	str	r3, [r2, #0]
									if (MinV <= 0 && MaxV > MinV)
 8001b6e:	4b37      	ldr	r3, [pc, #220]	; (8001c4c <main+0xce4>)
 8001b70:	edd3 7a00 	vldr	s15, [r3]
 8001b74:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001b78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b7c:	d80e      	bhi.n	8001b9c <main+0xc34>
 8001b7e:	4b32      	ldr	r3, [pc, #200]	; (8001c48 <main+0xce0>)
 8001b80:	ed93 7a00 	vldr	s14, [r3]
 8001b84:	4b31      	ldr	r3, [pc, #196]	; (8001c4c <main+0xce4>)
 8001b86:	edd3 7a00 	vldr	s15, [r3]
 8001b8a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001b8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b92:	dd03      	ble.n	8001b9c <main+0xc34>
									{
										MinV = 0;
 8001b94:	4b2d      	ldr	r3, [pc, #180]	; (8001c4c <main+0xce4>)
 8001b96:	f04f 0200 	mov.w	r2, #0
 8001b9a:	601a      	str	r2, [r3, #0]
									}
									CurrentMode = Mode_SineWave;
 8001b9c:	4b29      	ldr	r3, [pc, #164]	; (8001c44 <main+0xcdc>)
 8001b9e:	2228      	movs	r2, #40	; 0x28
 8001ba0:	601a      	str	r2, [r3, #0]
									break;
 8001ba2:	e01e      	b.n	8001be2 <main+0xc7a>

								case 'x' :	//back
									CurrentMode = Mode_MainMenu;
 8001ba4:	4b27      	ldr	r3, [pc, #156]	; (8001c44 <main+0xcdc>)
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	601a      	str	r2, [r3, #0]
									break;
 8001baa:	e01a      	b.n	8001be2 <main+0xc7a>

								default :	//error
									{
										char temp[] = "\r\n\r\n!!!ERROR!!!\r\n\r\n";
 8001bac:	4b2b      	ldr	r3, [pc, #172]	; (8001c5c <main+0xcf4>)
 8001bae:	f507 7496 	add.w	r4, r7, #300	; 0x12c
 8001bb2:	461d      	mov	r5, r3
 8001bb4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001bb6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001bb8:	682b      	ldr	r3, [r5, #0]
 8001bba:	6023      	str	r3, [r4, #0]
										HAL_UART_Transmit(&huart2, (uint8_t*)temp, strlen(temp),1000);
 8001bbc:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	f7fe fb0d 	bl	80001e0 <strlen>
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	b29a      	uxth	r2, r3
 8001bca:	f507 7196 	add.w	r1, r7, #300	; 0x12c
 8001bce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001bd2:	4823      	ldr	r0, [pc, #140]	; (8001c60 <main+0xcf8>)
 8001bd4:	f003 ffa7 	bl	8005b26 <HAL_UART_Transmit>
										CurrentMode = Mode_MainMenu;
 8001bd8:	4b1a      	ldr	r3, [pc, #104]	; (8001c44 <main+0xcdc>)
 8001bda:	2200      	movs	r2, #0
 8001bdc:	601a      	str	r2, [r3, #0]
										break;
 8001bde:	e000      	b.n	8001be2 <main+0xc7a>
									break;
 8001be0:	bf00      	nop
									}
							}
							break;
 8001be2:	e1d3      	b.n	8001f8c <main+0x1024>

							case Mode_SquareWave :	//SquareWave
							{
								char temp[]="-------------------\r\n"
 8001be4:	f107 0318 	add.w	r3, r7, #24
 8001be8:	4a1e      	ldr	r2, [pc, #120]	; (8001c64 <main+0xcfc>)
 8001bea:	4618      	mov	r0, r3
 8001bec:	4611      	mov	r1, r2
 8001bee:	23f6      	movs	r3, #246	; 0xf6
 8001bf0:	461a      	mov	r2, r3
 8001bf2:	f004 fecd 	bl	8006990 <memcpy>
								"f : Set V_High -0.1V\r\n"
								"g : Set V_Low +0.1V\r\n"
								"h : Set V_Low -0.1V\r\n"
								"j : Set Duty Cycle\r\n"
								"x : back\r\n";
								HAL_UART_Transmit(&huart2, (uint8_t*)temp, strlen(temp),1000);
 8001bf6:	f107 0318 	add.w	r3, r7, #24
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	f7fe faf0 	bl	80001e0 <strlen>
 8001c00:	4603      	mov	r3, r0
 8001c02:	b29a      	uxth	r2, r3
 8001c04:	f107 0118 	add.w	r1, r7, #24
 8001c08:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c0c:	4814      	ldr	r0, [pc, #80]	; (8001c60 <main+0xcf8>)
 8001c0e:	f003 ff8a 	bl	8005b26 <HAL_UART_Transmit>
								CurrentMode = Mode_SquareWave_Wait;
 8001c12:	4b0c      	ldr	r3, [pc, #48]	; (8001c44 <main+0xcdc>)
 8001c14:	2246      	movs	r2, #70	; 0x46
 8001c16:	601a      	str	r2, [r3, #0]
								break;
 8001c18:	e1b8      	b.n	8001f8c <main+0x1024>
 8001c1a:	bf00      	nop
 8001c1c:	f3af 8000 	nop.w
 8001c20:	9999999a 	.word	0x9999999a
 8001c24:	3fb99999 	.word	0x3fb99999
 8001c28:	66666666 	.word	0x66666666
 8001c2c:	400a6666 	.word	0x400a6666
 8001c30:	9999999a 	.word	0x9999999a
 8001c34:	40099999 	.word	0x40099999
 8001c38:	20000158 	.word	0x20000158
 8001c3c:	20000004 	.word	0x20000004
 8001c40:	41200000 	.word	0x41200000
 8001c44:	200000ac 	.word	0x200000ac
 8001c48:	20000008 	.word	0x20000008
 8001c4c:	200000b0 	.word	0x200000b0
 8001c50:	40533333 	.word	0x40533333
 8001c54:	3dcccccd 	.word	0x3dcccccd
 8001c58:	404ccccd 	.word	0x404ccccd
 8001c5c:	080073a8 	.word	0x080073a8
 8001c60:	200002f0 	.word	0x200002f0
 8001c64:	0800749c 	.word	0x0800749c
							}

							case Mode_SquareWave_Wait	:		//default 5 Hz >> range 0 - 10 Hz
								switch (inputchar)
 8001c68:	f997 316f 	ldrsb.w	r3, [r7, #367]	; 0x16f
 8001c6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c70:	d040      	beq.n	8001cf4 <main+0xd8c>
 8001c72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c76:	f2c0 816d 	blt.w	8001f54 <main+0xfec>
 8001c7a:	2b78      	cmp	r3, #120	; 0x78
 8001c7c:	f300 816a 	bgt.w	8001f54 <main+0xfec>
 8001c80:	2b61      	cmp	r3, #97	; 0x61
 8001c82:	f2c0 8167 	blt.w	8001f54 <main+0xfec>
 8001c86:	3b61      	subs	r3, #97	; 0x61
 8001c88:	2b17      	cmp	r3, #23
 8001c8a:	f200 8163 	bhi.w	8001f54 <main+0xfec>
 8001c8e:	a201      	add	r2, pc, #4	; (adr r2, 8001c94 <main+0xd2c>)
 8001c90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c94:	08001d2f 	.word	0x08001d2f
 8001c98:	08001f55 	.word	0x08001f55
 8001c9c:	08001f55 	.word	0x08001f55
 8001ca0:	08001dbd 	.word	0x08001dbd
 8001ca4:	08001f55 	.word	0x08001f55
 8001ca8:	08001e21 	.word	0x08001e21
 8001cac:	08001e85 	.word	0x08001e85
 8001cb0:	08001ee9 	.word	0x08001ee9
 8001cb4:	08001f55 	.word	0x08001f55
 8001cb8:	08001f45 	.word	0x08001f45
 8001cbc:	08001f55 	.word	0x08001f55
 8001cc0:	08001f55 	.word	0x08001f55
 8001cc4:	08001f55 	.word	0x08001f55
 8001cc8:	08001f55 	.word	0x08001f55
 8001ccc:	08001f55 	.word	0x08001f55
 8001cd0:	08001f55 	.word	0x08001f55
 8001cd4:	08001f55 	.word	0x08001f55
 8001cd8:	08001f55 	.word	0x08001f55
 8001cdc:	08001d77 	.word	0x08001d77
 8001ce0:	08001f55 	.word	0x08001f55
 8001ce4:	08001f55 	.word	0x08001f55
 8001ce8:	08001f55 	.word	0x08001f55
 8001cec:	08001f55 	.word	0x08001f55
 8001cf0:	08001f4d 	.word	0x08001f4d
								{

									case -1 :	//no input
										if (micros() - timestamp > 1000)
 8001cf4:	f000 fc30 	bl	8002558 <micros>
 8001cf8:	4bb7      	ldr	r3, [pc, #732]	; (8001fd8 <main+0x1070>)
 8001cfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cfe:	1a84      	subs	r4, r0, r2
 8001d00:	603c      	str	r4, [r7, #0]
 8001d02:	eb61 0303 	sbc.w	r3, r1, r3
 8001d06:	607b      	str	r3, [r7, #4]
 8001d08:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001d0c:	f04f 0300 	mov.w	r3, #0
 8001d10:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001d14:	428b      	cmp	r3, r1
 8001d16:	bf08      	it	eq
 8001d18:	4282      	cmpeq	r2, r0
 8001d1a:	f080 8135 	bcs.w	8001f88 <main+0x1020>
												{
													timestamp = micros();
 8001d1e:	f000 fc1b 	bl	8002558 <micros>
 8001d22:	4602      	mov	r2, r0
 8001d24:	460b      	mov	r3, r1
 8001d26:	49ac      	ldr	r1, [pc, #688]	; (8001fd8 <main+0x1070>)
 8001d28:	e9c1 2300 	strd	r2, r3, [r1]
//													{
//														dataOut -= ((MaxV - MinV)*4096/3.3 - (MaxV*4096/3.3));
//														dataOut %= 4096*(MaxV-MinV);
//													}
												}
										break;
 8001d2c:	e12c      	b.n	8001f88 <main+0x1020>

									case 'a' :	//increase frequency
										Frequency += 0.1;
 8001d2e:	4bab      	ldr	r3, [pc, #684]	; (8001fdc <main+0x1074>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	4618      	mov	r0, r3
 8001d34:	f7fe fc10 	bl	8000558 <__aeabi_f2d>
 8001d38:	a3a1      	add	r3, pc, #644	; (adr r3, 8001fc0 <main+0x1058>)
 8001d3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d3e:	f7fe faad 	bl	800029c <__adddf3>
 8001d42:	4602      	mov	r2, r0
 8001d44:	460b      	mov	r3, r1
 8001d46:	4610      	mov	r0, r2
 8001d48:	4619      	mov	r1, r3
 8001d4a:	f7fe ff3f 	bl	8000bcc <__aeabi_d2f>
 8001d4e:	4603      	mov	r3, r0
 8001d50:	4aa2      	ldr	r2, [pc, #648]	; (8001fdc <main+0x1074>)
 8001d52:	6013      	str	r3, [r2, #0]
										if (Frequency >= 10)
 8001d54:	4ba1      	ldr	r3, [pc, #644]	; (8001fdc <main+0x1074>)
 8001d56:	edd3 7a00 	vldr	s15, [r3]
 8001d5a:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001d5e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d66:	db02      	blt.n	8001d6e <main+0xe06>
										{
											Frequency = 10;
 8001d68:	4b9c      	ldr	r3, [pc, #624]	; (8001fdc <main+0x1074>)
 8001d6a:	4a9d      	ldr	r2, [pc, #628]	; (8001fe0 <main+0x1078>)
 8001d6c:	601a      	str	r2, [r3, #0]
										}
										CurrentMode = Mode_SquareWave;
 8001d6e:	4b9d      	ldr	r3, [pc, #628]	; (8001fe4 <main+0x107c>)
 8001d70:	223c      	movs	r2, #60	; 0x3c
 8001d72:	601a      	str	r2, [r3, #0]
										break;
 8001d74:	e109      	b.n	8001f8a <main+0x1022>

									case 's' :	//decrease frequency
										Frequency -= 0.1;
 8001d76:	4b99      	ldr	r3, [pc, #612]	; (8001fdc <main+0x1074>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	f7fe fbec 	bl	8000558 <__aeabi_f2d>
 8001d80:	a38f      	add	r3, pc, #572	; (adr r3, 8001fc0 <main+0x1058>)
 8001d82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d86:	f7fe fa87 	bl	8000298 <__aeabi_dsub>
 8001d8a:	4602      	mov	r2, r0
 8001d8c:	460b      	mov	r3, r1
 8001d8e:	4610      	mov	r0, r2
 8001d90:	4619      	mov	r1, r3
 8001d92:	f7fe ff1b 	bl	8000bcc <__aeabi_d2f>
 8001d96:	4603      	mov	r3, r0
 8001d98:	4a90      	ldr	r2, [pc, #576]	; (8001fdc <main+0x1074>)
 8001d9a:	6013      	str	r3, [r2, #0]
										if (Frequency <= 0)
 8001d9c:	4b8f      	ldr	r3, [pc, #572]	; (8001fdc <main+0x1074>)
 8001d9e:	edd3 7a00 	vldr	s15, [r3]
 8001da2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001da6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001daa:	d803      	bhi.n	8001db4 <main+0xe4c>
										{
											Frequency = 0;
 8001dac:	4b8b      	ldr	r3, [pc, #556]	; (8001fdc <main+0x1074>)
 8001dae:	f04f 0200 	mov.w	r2, #0
 8001db2:	601a      	str	r2, [r3, #0]
										}
										CurrentMode = Mode_SquareWave;
 8001db4:	4b8b      	ldr	r3, [pc, #556]	; (8001fe4 <main+0x107c>)
 8001db6:	223c      	movs	r2, #60	; 0x3c
 8001db8:	601a      	str	r2, [r3, #0]
										break;
 8001dba:	e0e6      	b.n	8001f8a <main+0x1022>

									case 'd' :	// Set V_High +0.1V
										MaxV += 0.1;
 8001dbc:	4b8a      	ldr	r3, [pc, #552]	; (8001fe8 <main+0x1080>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	f7fe fbc9 	bl	8000558 <__aeabi_f2d>
 8001dc6:	a37e      	add	r3, pc, #504	; (adr r3, 8001fc0 <main+0x1058>)
 8001dc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dcc:	f7fe fa66 	bl	800029c <__adddf3>
 8001dd0:	4602      	mov	r2, r0
 8001dd2:	460b      	mov	r3, r1
 8001dd4:	4610      	mov	r0, r2
 8001dd6:	4619      	mov	r1, r3
 8001dd8:	f7fe fef8 	bl	8000bcc <__aeabi_d2f>
 8001ddc:	4603      	mov	r3, r0
 8001dde:	4a82      	ldr	r2, [pc, #520]	; (8001fe8 <main+0x1080>)
 8001de0:	6013      	str	r3, [r2, #0]
										if (MaxV >= 3.3 && MaxV > MinV)
 8001de2:	4b81      	ldr	r3, [pc, #516]	; (8001fe8 <main+0x1080>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	4618      	mov	r0, r3
 8001de8:	f7fe fbb6 	bl	8000558 <__aeabi_f2d>
 8001dec:	a376      	add	r3, pc, #472	; (adr r3, 8001fc8 <main+0x1060>)
 8001dee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001df2:	f7fe fe8f 	bl	8000b14 <__aeabi_dcmpge>
 8001df6:	4603      	mov	r3, r0
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d00d      	beq.n	8001e18 <main+0xeb0>
 8001dfc:	4b7a      	ldr	r3, [pc, #488]	; (8001fe8 <main+0x1080>)
 8001dfe:	ed93 7a00 	vldr	s14, [r3]
 8001e02:	4b7a      	ldr	r3, [pc, #488]	; (8001fec <main+0x1084>)
 8001e04:	edd3 7a00 	vldr	s15, [r3]
 8001e08:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001e0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e10:	dd02      	ble.n	8001e18 <main+0xeb0>
										{
											MaxV = 3.3;
 8001e12:	4b75      	ldr	r3, [pc, #468]	; (8001fe8 <main+0x1080>)
 8001e14:	4a76      	ldr	r2, [pc, #472]	; (8001ff0 <main+0x1088>)
 8001e16:	601a      	str	r2, [r3, #0]
										}
										CurrentMode = Mode_SquareWave;
 8001e18:	4b72      	ldr	r3, [pc, #456]	; (8001fe4 <main+0x107c>)
 8001e1a:	223c      	movs	r2, #60	; 0x3c
 8001e1c:	601a      	str	r2, [r3, #0]
										break;
 8001e1e:	e0b4      	b.n	8001f8a <main+0x1022>

									case 'f' :	// Set V_High -0.1V
										MaxV -= 0.1;
 8001e20:	4b71      	ldr	r3, [pc, #452]	; (8001fe8 <main+0x1080>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	4618      	mov	r0, r3
 8001e26:	f7fe fb97 	bl	8000558 <__aeabi_f2d>
 8001e2a:	a365      	add	r3, pc, #404	; (adr r3, 8001fc0 <main+0x1058>)
 8001e2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e30:	f7fe fa32 	bl	8000298 <__aeabi_dsub>
 8001e34:	4602      	mov	r2, r0
 8001e36:	460b      	mov	r3, r1
 8001e38:	4610      	mov	r0, r2
 8001e3a:	4619      	mov	r1, r3
 8001e3c:	f7fe fec6 	bl	8000bcc <__aeabi_d2f>
 8001e40:	4603      	mov	r3, r0
 8001e42:	4a69      	ldr	r2, [pc, #420]	; (8001fe8 <main+0x1080>)
 8001e44:	6013      	str	r3, [r2, #0]
										if (MaxV <= 0.1 && MaxV > MinV)
 8001e46:	4b68      	ldr	r3, [pc, #416]	; (8001fe8 <main+0x1080>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	f7fe fb84 	bl	8000558 <__aeabi_f2d>
 8001e50:	a35b      	add	r3, pc, #364	; (adr r3, 8001fc0 <main+0x1058>)
 8001e52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e56:	f7fe fe53 	bl	8000b00 <__aeabi_dcmple>
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d00d      	beq.n	8001e7c <main+0xf14>
 8001e60:	4b61      	ldr	r3, [pc, #388]	; (8001fe8 <main+0x1080>)
 8001e62:	ed93 7a00 	vldr	s14, [r3]
 8001e66:	4b61      	ldr	r3, [pc, #388]	; (8001fec <main+0x1084>)
 8001e68:	edd3 7a00 	vldr	s15, [r3]
 8001e6c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001e70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e74:	dd02      	ble.n	8001e7c <main+0xf14>
										{
											MaxV = 0.1;
 8001e76:	4b5c      	ldr	r3, [pc, #368]	; (8001fe8 <main+0x1080>)
 8001e78:	4a5e      	ldr	r2, [pc, #376]	; (8001ff4 <main+0x108c>)
 8001e7a:	601a      	str	r2, [r3, #0]
										}
										CurrentMode = Mode_SquareWave;
 8001e7c:	4b59      	ldr	r3, [pc, #356]	; (8001fe4 <main+0x107c>)
 8001e7e:	223c      	movs	r2, #60	; 0x3c
 8001e80:	601a      	str	r2, [r3, #0]
										break;
 8001e82:	e082      	b.n	8001f8a <main+0x1022>

									case 'g' :	// Set V_Low +0.1V
										MinV += 0.1;
 8001e84:	4b59      	ldr	r3, [pc, #356]	; (8001fec <main+0x1084>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	4618      	mov	r0, r3
 8001e8a:	f7fe fb65 	bl	8000558 <__aeabi_f2d>
 8001e8e:	a34c      	add	r3, pc, #304	; (adr r3, 8001fc0 <main+0x1058>)
 8001e90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e94:	f7fe fa02 	bl	800029c <__adddf3>
 8001e98:	4602      	mov	r2, r0
 8001e9a:	460b      	mov	r3, r1
 8001e9c:	4610      	mov	r0, r2
 8001e9e:	4619      	mov	r1, r3
 8001ea0:	f7fe fe94 	bl	8000bcc <__aeabi_d2f>
 8001ea4:	4603      	mov	r3, r0
 8001ea6:	4a51      	ldr	r2, [pc, #324]	; (8001fec <main+0x1084>)
 8001ea8:	6013      	str	r3, [r2, #0]
										if (MinV >= 3.2 && MaxV > MinV)
 8001eaa:	4b50      	ldr	r3, [pc, #320]	; (8001fec <main+0x1084>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	4618      	mov	r0, r3
 8001eb0:	f7fe fb52 	bl	8000558 <__aeabi_f2d>
 8001eb4:	a346      	add	r3, pc, #280	; (adr r3, 8001fd0 <main+0x1068>)
 8001eb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001eba:	f7fe fe2b 	bl	8000b14 <__aeabi_dcmpge>
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d00d      	beq.n	8001ee0 <main+0xf78>
 8001ec4:	4b48      	ldr	r3, [pc, #288]	; (8001fe8 <main+0x1080>)
 8001ec6:	ed93 7a00 	vldr	s14, [r3]
 8001eca:	4b48      	ldr	r3, [pc, #288]	; (8001fec <main+0x1084>)
 8001ecc:	edd3 7a00 	vldr	s15, [r3]
 8001ed0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001ed4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ed8:	dd02      	ble.n	8001ee0 <main+0xf78>
										{
											MinV = 3.2;
 8001eda:	4b44      	ldr	r3, [pc, #272]	; (8001fec <main+0x1084>)
 8001edc:	4a46      	ldr	r2, [pc, #280]	; (8001ff8 <main+0x1090>)
 8001ede:	601a      	str	r2, [r3, #0]
										}
										CurrentMode = Mode_SquareWave;
 8001ee0:	4b40      	ldr	r3, [pc, #256]	; (8001fe4 <main+0x107c>)
 8001ee2:	223c      	movs	r2, #60	; 0x3c
 8001ee4:	601a      	str	r2, [r3, #0]
										break;
 8001ee6:	e050      	b.n	8001f8a <main+0x1022>

									case 'h' :	// Set V_Low -0.1V
										MinV -= 0.1;
 8001ee8:	4b40      	ldr	r3, [pc, #256]	; (8001fec <main+0x1084>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	4618      	mov	r0, r3
 8001eee:	f7fe fb33 	bl	8000558 <__aeabi_f2d>
 8001ef2:	a333      	add	r3, pc, #204	; (adr r3, 8001fc0 <main+0x1058>)
 8001ef4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ef8:	f7fe f9ce 	bl	8000298 <__aeabi_dsub>
 8001efc:	4602      	mov	r2, r0
 8001efe:	460b      	mov	r3, r1
 8001f00:	4610      	mov	r0, r2
 8001f02:	4619      	mov	r1, r3
 8001f04:	f7fe fe62 	bl	8000bcc <__aeabi_d2f>
 8001f08:	4603      	mov	r3, r0
 8001f0a:	4a38      	ldr	r2, [pc, #224]	; (8001fec <main+0x1084>)
 8001f0c:	6013      	str	r3, [r2, #0]
										if (MinV <= 0 && MaxV > MinV)
 8001f0e:	4b37      	ldr	r3, [pc, #220]	; (8001fec <main+0x1084>)
 8001f10:	edd3 7a00 	vldr	s15, [r3]
 8001f14:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001f18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f1c:	d80e      	bhi.n	8001f3c <main+0xfd4>
 8001f1e:	4b32      	ldr	r3, [pc, #200]	; (8001fe8 <main+0x1080>)
 8001f20:	ed93 7a00 	vldr	s14, [r3]
 8001f24:	4b31      	ldr	r3, [pc, #196]	; (8001fec <main+0x1084>)
 8001f26:	edd3 7a00 	vldr	s15, [r3]
 8001f2a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001f2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f32:	dd03      	ble.n	8001f3c <main+0xfd4>
										{
											MinV = 0;
 8001f34:	4b2d      	ldr	r3, [pc, #180]	; (8001fec <main+0x1084>)
 8001f36:	f04f 0200 	mov.w	r2, #0
 8001f3a:	601a      	str	r2, [r3, #0]
										}
										CurrentMode = Mode_SquareWave;
 8001f3c:	4b29      	ldr	r3, [pc, #164]	; (8001fe4 <main+0x107c>)
 8001f3e:	223c      	movs	r2, #60	; 0x3c
 8001f40:	601a      	str	r2, [r3, #0]
										break;
 8001f42:	e022      	b.n	8001f8a <main+0x1022>

									case 'j' : // Set Duty Cycle
										CurrentMode = Mode_SquareWave;
 8001f44:	4b27      	ldr	r3, [pc, #156]	; (8001fe4 <main+0x107c>)
 8001f46:	223c      	movs	r2, #60	; 0x3c
 8001f48:	601a      	str	r2, [r3, #0]
										break;
 8001f4a:	e01e      	b.n	8001f8a <main+0x1022>

									case 'x' :	//back
										CurrentMode = Mode_MainMenu;
 8001f4c:	4b25      	ldr	r3, [pc, #148]	; (8001fe4 <main+0x107c>)
 8001f4e:	2200      	movs	r2, #0
 8001f50:	601a      	str	r2, [r3, #0]
										break;
 8001f52:	e01a      	b.n	8001f8a <main+0x1022>

									default :	//error
										{
											char temp[] = "\r\n\r\n!!!ERROR!!!\r\n\r\n";
 8001f54:	4b29      	ldr	r3, [pc, #164]	; (8001ffc <main+0x1094>)
 8001f56:	f507 748c 	add.w	r4, r7, #280	; 0x118
 8001f5a:	461d      	mov	r5, r3
 8001f5c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001f5e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001f60:	682b      	ldr	r3, [r5, #0]
 8001f62:	6023      	str	r3, [r4, #0]
											HAL_UART_Transmit(&huart2, (uint8_t*)temp, strlen(temp),1000);
 8001f64:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001f68:	4618      	mov	r0, r3
 8001f6a:	f7fe f939 	bl	80001e0 <strlen>
 8001f6e:	4603      	mov	r3, r0
 8001f70:	b29a      	uxth	r2, r3
 8001f72:	f507 718c 	add.w	r1, r7, #280	; 0x118
 8001f76:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f7a:	4821      	ldr	r0, [pc, #132]	; (8002000 <main+0x1098>)
 8001f7c:	f003 fdd3 	bl	8005b26 <HAL_UART_Transmit>
											CurrentMode = Mode_MainMenu;
 8001f80:	4b18      	ldr	r3, [pc, #96]	; (8001fe4 <main+0x107c>)
 8001f82:	2200      	movs	r2, #0
 8001f84:	601a      	str	r2, [r3, #0]
											break;
 8001f86:	e000      	b.n	8001f8a <main+0x1022>
										break;
 8001f88:	bf00      	nop
										}
								}
								break;
 8001f8a:	bf00      	nop
					}

			if (hspi3.State == HAL_SPI_STATE_READY && HAL_GPIO_ReadPin(SPI_SS_GPIO_Port, SPI_SS_Pin) == GPIO_PIN_SET)
 8001f8c:	4b1d      	ldr	r3, [pc, #116]	; (8002004 <main+0x109c>)
 8001f8e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001f92:	b2db      	uxtb	r3, r3
 8001f94:	2b01      	cmp	r3, #1
 8001f96:	f47f a80e 	bne.w	8000fb6 <main+0x4e>
 8001f9a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001f9e:	481a      	ldr	r0, [pc, #104]	; (8002008 <main+0x10a0>)
 8001fa0:	f002 f97a 	bl	8004298 <HAL_GPIO_ReadPin>
 8001fa4:	4603      	mov	r3, r0
 8001fa6:	2b01      	cmp	r3, #1
 8001fa8:	f47f a805 	bne.w	8000fb6 <main+0x4e>
			{
				MCP4922SetOutput(DACConfig, dataOut);
 8001fac:	4b17      	ldr	r3, [pc, #92]	; (800200c <main+0x10a4>)
 8001fae:	781b      	ldrb	r3, [r3, #0]
 8001fb0:	4a17      	ldr	r2, [pc, #92]	; (8002010 <main+0x10a8>)
 8001fb2:	8812      	ldrh	r2, [r2, #0]
 8001fb4:	4611      	mov	r1, r2
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	f000 fa74 	bl	80024a4 <MCP4922SetOutput>
	{
 8001fbc:	f7fe bffb 	b.w	8000fb6 <main+0x4e>
 8001fc0:	9999999a 	.word	0x9999999a
 8001fc4:	3fb99999 	.word	0x3fb99999
 8001fc8:	66666666 	.word	0x66666666
 8001fcc:	400a6666 	.word	0x400a6666
 8001fd0:	9999999a 	.word	0x9999999a
 8001fd4:	40099999 	.word	0x40099999
 8001fd8:	20000158 	.word	0x20000158
 8001fdc:	20000004 	.word	0x20000004
 8001fe0:	41200000 	.word	0x41200000
 8001fe4:	200000ac 	.word	0x200000ac
 8001fe8:	20000008 	.word	0x20000008
 8001fec:	200000b0 	.word	0x200000b0
 8001ff0:	40533333 	.word	0x40533333
 8001ff4:	3dcccccd 	.word	0x3dcccccd
 8001ff8:	404ccccd 	.word	0x404ccccd
 8001ffc:	080073a8 	.word	0x080073a8
 8002000:	200002f0 	.word	0x200002f0
 8002004:	200001b0 	.word	0x200001b0
 8002008:	40020400 	.word	0x40020400
 800200c:	20000000 	.word	0x20000000
 8002010:	200000a8 	.word	0x200000a8

08002014 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b094      	sub	sp, #80	; 0x50
 8002018:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800201a:	f107 0320 	add.w	r3, r7, #32
 800201e:	2230      	movs	r2, #48	; 0x30
 8002020:	2100      	movs	r1, #0
 8002022:	4618      	mov	r0, r3
 8002024:	f004 fcc2 	bl	80069ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002028:	f107 030c 	add.w	r3, r7, #12
 800202c:	2200      	movs	r2, #0
 800202e:	601a      	str	r2, [r3, #0]
 8002030:	605a      	str	r2, [r3, #4]
 8002032:	609a      	str	r2, [r3, #8]
 8002034:	60da      	str	r2, [r3, #12]
 8002036:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002038:	2300      	movs	r3, #0
 800203a:	60bb      	str	r3, [r7, #8]
 800203c:	4b27      	ldr	r3, [pc, #156]	; (80020dc <SystemClock_Config+0xc8>)
 800203e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002040:	4a26      	ldr	r2, [pc, #152]	; (80020dc <SystemClock_Config+0xc8>)
 8002042:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002046:	6413      	str	r3, [r2, #64]	; 0x40
 8002048:	4b24      	ldr	r3, [pc, #144]	; (80020dc <SystemClock_Config+0xc8>)
 800204a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800204c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002050:	60bb      	str	r3, [r7, #8]
 8002052:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002054:	2300      	movs	r3, #0
 8002056:	607b      	str	r3, [r7, #4]
 8002058:	4b21      	ldr	r3, [pc, #132]	; (80020e0 <SystemClock_Config+0xcc>)
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	4a20      	ldr	r2, [pc, #128]	; (80020e0 <SystemClock_Config+0xcc>)
 800205e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002062:	6013      	str	r3, [r2, #0]
 8002064:	4b1e      	ldr	r3, [pc, #120]	; (80020e0 <SystemClock_Config+0xcc>)
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800206c:	607b      	str	r3, [r7, #4]
 800206e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002070:	2302      	movs	r3, #2
 8002072:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002074:	2301      	movs	r3, #1
 8002076:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002078:	2310      	movs	r3, #16
 800207a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800207c:	2302      	movs	r3, #2
 800207e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002080:	2300      	movs	r3, #0
 8002082:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002084:	2308      	movs	r3, #8
 8002086:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8002088:	2364      	movs	r3, #100	; 0x64
 800208a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800208c:	2302      	movs	r3, #2
 800208e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002090:	2304      	movs	r3, #4
 8002092:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002094:	f107 0320 	add.w	r3, r7, #32
 8002098:	4618      	mov	r0, r3
 800209a:	f002 f92f 	bl	80042fc <HAL_RCC_OscConfig>
 800209e:	4603      	mov	r3, r0
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d001      	beq.n	80020a8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80020a4:	f000 fac6 	bl	8002634 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80020a8:	230f      	movs	r3, #15
 80020aa:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80020ac:	2302      	movs	r3, #2
 80020ae:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80020b0:	2300      	movs	r3, #0
 80020b2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80020b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80020b8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80020ba:	2300      	movs	r3, #0
 80020bc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80020be:	f107 030c 	add.w	r3, r7, #12
 80020c2:	2103      	movs	r1, #3
 80020c4:	4618      	mov	r0, r3
 80020c6:	f002 fb89 	bl	80047dc <HAL_RCC_ClockConfig>
 80020ca:	4603      	mov	r3, r0
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d001      	beq.n	80020d4 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80020d0:	f000 fab0 	bl	8002634 <Error_Handler>
  }
}
 80020d4:	bf00      	nop
 80020d6:	3750      	adds	r7, #80	; 0x50
 80020d8:	46bd      	mov	sp, r7
 80020da:	bd80      	pop	{r7, pc}
 80020dc:	40023800 	.word	0x40023800
 80020e0:	40007000 	.word	0x40007000

080020e4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b084      	sub	sp, #16
 80020e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80020ea:	463b      	mov	r3, r7
 80020ec:	2200      	movs	r2, #0
 80020ee:	601a      	str	r2, [r3, #0]
 80020f0:	605a      	str	r2, [r3, #4]
 80020f2:	609a      	str	r2, [r3, #8]
 80020f4:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80020f6:	4b22      	ldr	r3, [pc, #136]	; (8002180 <MX_ADC1_Init+0x9c>)
 80020f8:	4a22      	ldr	r2, [pc, #136]	; (8002184 <MX_ADC1_Init+0xa0>)
 80020fa:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80020fc:	4b20      	ldr	r3, [pc, #128]	; (8002180 <MX_ADC1_Init+0x9c>)
 80020fe:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002102:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002104:	4b1e      	ldr	r3, [pc, #120]	; (8002180 <MX_ADC1_Init+0x9c>)
 8002106:	2200      	movs	r2, #0
 8002108:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 800210a:	4b1d      	ldr	r3, [pc, #116]	; (8002180 <MX_ADC1_Init+0x9c>)
 800210c:	2201      	movs	r2, #1
 800210e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002110:	4b1b      	ldr	r3, [pc, #108]	; (8002180 <MX_ADC1_Init+0x9c>)
 8002112:	2200      	movs	r2, #0
 8002114:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002116:	4b1a      	ldr	r3, [pc, #104]	; (8002180 <MX_ADC1_Init+0x9c>)
 8002118:	2200      	movs	r2, #0
 800211a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800211e:	4b18      	ldr	r3, [pc, #96]	; (8002180 <MX_ADC1_Init+0x9c>)
 8002120:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002124:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 8002126:	4b16      	ldr	r3, [pc, #88]	; (8002180 <MX_ADC1_Init+0x9c>)
 8002128:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800212c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800212e:	4b14      	ldr	r3, [pc, #80]	; (8002180 <MX_ADC1_Init+0x9c>)
 8002130:	2200      	movs	r2, #0
 8002132:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8002134:	4b12      	ldr	r3, [pc, #72]	; (8002180 <MX_ADC1_Init+0x9c>)
 8002136:	2201      	movs	r2, #1
 8002138:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800213a:	4b11      	ldr	r3, [pc, #68]	; (8002180 <MX_ADC1_Init+0x9c>)
 800213c:	2200      	movs	r2, #0
 800213e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002142:	4b0f      	ldr	r3, [pc, #60]	; (8002180 <MX_ADC1_Init+0x9c>)
 8002144:	2201      	movs	r2, #1
 8002146:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002148:	480d      	ldr	r0, [pc, #52]	; (8002180 <MX_ADC1_Init+0x9c>)
 800214a:	f000 fd43 	bl	8002bd4 <HAL_ADC_Init>
 800214e:	4603      	mov	r3, r0
 8002150:	2b00      	cmp	r3, #0
 8002152:	d001      	beq.n	8002158 <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 8002154:	f000 fa6e 	bl	8002634 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8002158:	2300      	movs	r3, #0
 800215a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800215c:	2301      	movs	r3, #1
 800215e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8002160:	2300      	movs	r3, #0
 8002162:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002164:	463b      	mov	r3, r7
 8002166:	4619      	mov	r1, r3
 8002168:	4805      	ldr	r0, [pc, #20]	; (8002180 <MX_ADC1_Init+0x9c>)
 800216a:	f000 ffb3 	bl	80030d4 <HAL_ADC_ConfigChannel>
 800216e:	4603      	mov	r3, r0
 8002170:	2b00      	cmp	r3, #0
 8002172:	d001      	beq.n	8002178 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8002174:	f000 fa5e 	bl	8002634 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002178:	bf00      	nop
 800217a:	3710      	adds	r7, #16
 800217c:	46bd      	mov	sp, r7
 800217e:	bd80      	pop	{r7, pc}
 8002180:	20000208 	.word	0x20000208
 8002184:	40012000 	.word	0x40012000

08002188 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 800218c:	4b18      	ldr	r3, [pc, #96]	; (80021f0 <MX_SPI3_Init+0x68>)
 800218e:	4a19      	ldr	r2, [pc, #100]	; (80021f4 <MX_SPI3_Init+0x6c>)
 8002190:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8002192:	4b17      	ldr	r3, [pc, #92]	; (80021f0 <MX_SPI3_Init+0x68>)
 8002194:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002198:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800219a:	4b15      	ldr	r3, [pc, #84]	; (80021f0 <MX_SPI3_Init+0x68>)
 800219c:	2200      	movs	r2, #0
 800219e:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_16BIT;
 80021a0:	4b13      	ldr	r3, [pc, #76]	; (80021f0 <MX_SPI3_Init+0x68>)
 80021a2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80021a6:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80021a8:	4b11      	ldr	r3, [pc, #68]	; (80021f0 <MX_SPI3_Init+0x68>)
 80021aa:	2200      	movs	r2, #0
 80021ac:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80021ae:	4b10      	ldr	r3, [pc, #64]	; (80021f0 <MX_SPI3_Init+0x68>)
 80021b0:	2200      	movs	r2, #0
 80021b2:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80021b4:	4b0e      	ldr	r3, [pc, #56]	; (80021f0 <MX_SPI3_Init+0x68>)
 80021b6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80021ba:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80021bc:	4b0c      	ldr	r3, [pc, #48]	; (80021f0 <MX_SPI3_Init+0x68>)
 80021be:	2208      	movs	r2, #8
 80021c0:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80021c2:	4b0b      	ldr	r3, [pc, #44]	; (80021f0 <MX_SPI3_Init+0x68>)
 80021c4:	2200      	movs	r2, #0
 80021c6:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80021c8:	4b09      	ldr	r3, [pc, #36]	; (80021f0 <MX_SPI3_Init+0x68>)
 80021ca:	2200      	movs	r2, #0
 80021cc:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80021ce:	4b08      	ldr	r3, [pc, #32]	; (80021f0 <MX_SPI3_Init+0x68>)
 80021d0:	2200      	movs	r2, #0
 80021d2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 80021d4:	4b06      	ldr	r3, [pc, #24]	; (80021f0 <MX_SPI3_Init+0x68>)
 80021d6:	220a      	movs	r2, #10
 80021d8:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80021da:	4805      	ldr	r0, [pc, #20]	; (80021f0 <MX_SPI3_Init+0x68>)
 80021dc:	f002 fcfa 	bl	8004bd4 <HAL_SPI_Init>
 80021e0:	4603      	mov	r3, r0
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d001      	beq.n	80021ea <MX_SPI3_Init+0x62>
  {
    Error_Handler();
 80021e6:	f000 fa25 	bl	8002634 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80021ea:	bf00      	nop
 80021ec:	bd80      	pop	{r7, pc}
 80021ee:	bf00      	nop
 80021f0:	200001b0 	.word	0x200001b0
 80021f4:	40003c00 	.word	0x40003c00

080021f8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b086      	sub	sp, #24
 80021fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80021fe:	f107 0308 	add.w	r3, r7, #8
 8002202:	2200      	movs	r2, #0
 8002204:	601a      	str	r2, [r3, #0]
 8002206:	605a      	str	r2, [r3, #4]
 8002208:	609a      	str	r2, [r3, #8]
 800220a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800220c:	463b      	mov	r3, r7
 800220e:	2200      	movs	r2, #0
 8002210:	601a      	str	r2, [r3, #0]
 8002212:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002214:	4b1c      	ldr	r3, [pc, #112]	; (8002288 <MX_TIM3_Init+0x90>)
 8002216:	4a1d      	ldr	r2, [pc, #116]	; (800228c <MX_TIM3_Init+0x94>)
 8002218:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 99;
 800221a:	4b1b      	ldr	r3, [pc, #108]	; (8002288 <MX_TIM3_Init+0x90>)
 800221c:	2263      	movs	r2, #99	; 0x63
 800221e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002220:	4b19      	ldr	r3, [pc, #100]	; (8002288 <MX_TIM3_Init+0x90>)
 8002222:	2200      	movs	r2, #0
 8002224:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100;
 8002226:	4b18      	ldr	r3, [pc, #96]	; (8002288 <MX_TIM3_Init+0x90>)
 8002228:	2264      	movs	r2, #100	; 0x64
 800222a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800222c:	4b16      	ldr	r3, [pc, #88]	; (8002288 <MX_TIM3_Init+0x90>)
 800222e:	2200      	movs	r2, #0
 8002230:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002232:	4b15      	ldr	r3, [pc, #84]	; (8002288 <MX_TIM3_Init+0x90>)
 8002234:	2200      	movs	r2, #0
 8002236:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002238:	4813      	ldr	r0, [pc, #76]	; (8002288 <MX_TIM3_Init+0x90>)
 800223a:	f003 f823 	bl	8005284 <HAL_TIM_Base_Init>
 800223e:	4603      	mov	r3, r0
 8002240:	2b00      	cmp	r3, #0
 8002242:	d001      	beq.n	8002248 <MX_TIM3_Init+0x50>
  {
    Error_Handler();
 8002244:	f000 f9f6 	bl	8002634 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002248:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800224c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800224e:	f107 0308 	add.w	r3, r7, #8
 8002252:	4619      	mov	r1, r3
 8002254:	480c      	ldr	r0, [pc, #48]	; (8002288 <MX_TIM3_Init+0x90>)
 8002256:	f003 f990 	bl	800557a <HAL_TIM_ConfigClockSource>
 800225a:	4603      	mov	r3, r0
 800225c:	2b00      	cmp	r3, #0
 800225e:	d001      	beq.n	8002264 <MX_TIM3_Init+0x6c>
  {
    Error_Handler();
 8002260:	f000 f9e8 	bl	8002634 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002264:	2300      	movs	r3, #0
 8002266:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002268:	2300      	movs	r3, #0
 800226a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800226c:	463b      	mov	r3, r7
 800226e:	4619      	mov	r1, r3
 8002270:	4805      	ldr	r0, [pc, #20]	; (8002288 <MX_TIM3_Init+0x90>)
 8002272:	f003 fb89 	bl	8005988 <HAL_TIMEx_MasterConfigSynchronization>
 8002276:	4603      	mov	r3, r0
 8002278:	2b00      	cmp	r3, #0
 800227a:	d001      	beq.n	8002280 <MX_TIM3_Init+0x88>
  {
    Error_Handler();
 800227c:	f000 f9da 	bl	8002634 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002280:	bf00      	nop
 8002282:	3718      	adds	r7, #24
 8002284:	46bd      	mov	sp, r7
 8002286:	bd80      	pop	{r7, pc}
 8002288:	20000170 	.word	0x20000170
 800228c:	40000400 	.word	0x40000400

08002290 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8002294:	4b0e      	ldr	r3, [pc, #56]	; (80022d0 <MX_TIM11_Init+0x40>)
 8002296:	4a0f      	ldr	r2, [pc, #60]	; (80022d4 <MX_TIM11_Init+0x44>)
 8002298:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 99;
 800229a:	4b0d      	ldr	r3, [pc, #52]	; (80022d0 <MX_TIM11_Init+0x40>)
 800229c:	2263      	movs	r2, #99	; 0x63
 800229e:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022a0:	4b0b      	ldr	r3, [pc, #44]	; (80022d0 <MX_TIM11_Init+0x40>)
 80022a2:	2200      	movs	r2, #0
 80022a4:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 80022a6:	4b0a      	ldr	r3, [pc, #40]	; (80022d0 <MX_TIM11_Init+0x40>)
 80022a8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80022ac:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80022ae:	4b08      	ldr	r3, [pc, #32]	; (80022d0 <MX_TIM11_Init+0x40>)
 80022b0:	2200      	movs	r2, #0
 80022b2:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80022b4:	4b06      	ldr	r3, [pc, #24]	; (80022d0 <MX_TIM11_Init+0x40>)
 80022b6:	2200      	movs	r2, #0
 80022b8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 80022ba:	4805      	ldr	r0, [pc, #20]	; (80022d0 <MX_TIM11_Init+0x40>)
 80022bc:	f002 ffe2 	bl	8005284 <HAL_TIM_Base_Init>
 80022c0:	4603      	mov	r3, r0
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d001      	beq.n	80022ca <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 80022c6:	f000 f9b5 	bl	8002634 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 80022ca:	bf00      	nop
 80022cc:	bd80      	pop	{r7, pc}
 80022ce:	bf00      	nop
 80022d0:	20000250 	.word	0x20000250
 80022d4:	40014800 	.word	0x40014800

080022d8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80022dc:	4b11      	ldr	r3, [pc, #68]	; (8002324 <MX_USART2_UART_Init+0x4c>)
 80022de:	4a12      	ldr	r2, [pc, #72]	; (8002328 <MX_USART2_UART_Init+0x50>)
 80022e0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80022e2:	4b10      	ldr	r3, [pc, #64]	; (8002324 <MX_USART2_UART_Init+0x4c>)
 80022e4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80022e8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80022ea:	4b0e      	ldr	r3, [pc, #56]	; (8002324 <MX_USART2_UART_Init+0x4c>)
 80022ec:	2200      	movs	r2, #0
 80022ee:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80022f0:	4b0c      	ldr	r3, [pc, #48]	; (8002324 <MX_USART2_UART_Init+0x4c>)
 80022f2:	2200      	movs	r2, #0
 80022f4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80022f6:	4b0b      	ldr	r3, [pc, #44]	; (8002324 <MX_USART2_UART_Init+0x4c>)
 80022f8:	2200      	movs	r2, #0
 80022fa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80022fc:	4b09      	ldr	r3, [pc, #36]	; (8002324 <MX_USART2_UART_Init+0x4c>)
 80022fe:	220c      	movs	r2, #12
 8002300:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002302:	4b08      	ldr	r3, [pc, #32]	; (8002324 <MX_USART2_UART_Init+0x4c>)
 8002304:	2200      	movs	r2, #0
 8002306:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002308:	4b06      	ldr	r3, [pc, #24]	; (8002324 <MX_USART2_UART_Init+0x4c>)
 800230a:	2200      	movs	r2, #0
 800230c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800230e:	4805      	ldr	r0, [pc, #20]	; (8002324 <MX_USART2_UART_Init+0x4c>)
 8002310:	f003 fbbc 	bl	8005a8c <HAL_UART_Init>
 8002314:	4603      	mov	r3, r0
 8002316:	2b00      	cmp	r3, #0
 8002318:	d001      	beq.n	800231e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800231a:	f000 f98b 	bl	8002634 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800231e:	bf00      	nop
 8002320:	bd80      	pop	{r7, pc}
 8002322:	bf00      	nop
 8002324:	200002f0 	.word	0x200002f0
 8002328:	40004400 	.word	0x40004400

0800232c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b082      	sub	sp, #8
 8002330:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002332:	2300      	movs	r3, #0
 8002334:	607b      	str	r3, [r7, #4]
 8002336:	4b0c      	ldr	r3, [pc, #48]	; (8002368 <MX_DMA_Init+0x3c>)
 8002338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800233a:	4a0b      	ldr	r2, [pc, #44]	; (8002368 <MX_DMA_Init+0x3c>)
 800233c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002340:	6313      	str	r3, [r2, #48]	; 0x30
 8002342:	4b09      	ldr	r3, [pc, #36]	; (8002368 <MX_DMA_Init+0x3c>)
 8002344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002346:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800234a:	607b      	str	r3, [r7, #4]
 800234c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800234e:	2200      	movs	r2, #0
 8002350:	2100      	movs	r1, #0
 8002352:	2038      	movs	r0, #56	; 0x38
 8002354:	f001 fa53 	bl	80037fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8002358:	2038      	movs	r0, #56	; 0x38
 800235a:	f001 fa6c 	bl	8003836 <HAL_NVIC_EnableIRQ>

}
 800235e:	bf00      	nop
 8002360:	3708      	adds	r7, #8
 8002362:	46bd      	mov	sp, r7
 8002364:	bd80      	pop	{r7, pc}
 8002366:	bf00      	nop
 8002368:	40023800 	.word	0x40023800

0800236c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b08a      	sub	sp, #40	; 0x28
 8002370:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002372:	f107 0314 	add.w	r3, r7, #20
 8002376:	2200      	movs	r2, #0
 8002378:	601a      	str	r2, [r3, #0]
 800237a:	605a      	str	r2, [r3, #4]
 800237c:	609a      	str	r2, [r3, #8]
 800237e:	60da      	str	r2, [r3, #12]
 8002380:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002382:	2300      	movs	r3, #0
 8002384:	613b      	str	r3, [r7, #16]
 8002386:	4b42      	ldr	r3, [pc, #264]	; (8002490 <MX_GPIO_Init+0x124>)
 8002388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800238a:	4a41      	ldr	r2, [pc, #260]	; (8002490 <MX_GPIO_Init+0x124>)
 800238c:	f043 0304 	orr.w	r3, r3, #4
 8002390:	6313      	str	r3, [r2, #48]	; 0x30
 8002392:	4b3f      	ldr	r3, [pc, #252]	; (8002490 <MX_GPIO_Init+0x124>)
 8002394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002396:	f003 0304 	and.w	r3, r3, #4
 800239a:	613b      	str	r3, [r7, #16]
 800239c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800239e:	2300      	movs	r3, #0
 80023a0:	60fb      	str	r3, [r7, #12]
 80023a2:	4b3b      	ldr	r3, [pc, #236]	; (8002490 <MX_GPIO_Init+0x124>)
 80023a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023a6:	4a3a      	ldr	r2, [pc, #232]	; (8002490 <MX_GPIO_Init+0x124>)
 80023a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80023ac:	6313      	str	r3, [r2, #48]	; 0x30
 80023ae:	4b38      	ldr	r3, [pc, #224]	; (8002490 <MX_GPIO_Init+0x124>)
 80023b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023b6:	60fb      	str	r3, [r7, #12]
 80023b8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80023ba:	2300      	movs	r3, #0
 80023bc:	60bb      	str	r3, [r7, #8]
 80023be:	4b34      	ldr	r3, [pc, #208]	; (8002490 <MX_GPIO_Init+0x124>)
 80023c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023c2:	4a33      	ldr	r2, [pc, #204]	; (8002490 <MX_GPIO_Init+0x124>)
 80023c4:	f043 0301 	orr.w	r3, r3, #1
 80023c8:	6313      	str	r3, [r2, #48]	; 0x30
 80023ca:	4b31      	ldr	r3, [pc, #196]	; (8002490 <MX_GPIO_Init+0x124>)
 80023cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ce:	f003 0301 	and.w	r3, r3, #1
 80023d2:	60bb      	str	r3, [r7, #8]
 80023d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80023d6:	2300      	movs	r3, #0
 80023d8:	607b      	str	r3, [r7, #4]
 80023da:	4b2d      	ldr	r3, [pc, #180]	; (8002490 <MX_GPIO_Init+0x124>)
 80023dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023de:	4a2c      	ldr	r2, [pc, #176]	; (8002490 <MX_GPIO_Init+0x124>)
 80023e0:	f043 0302 	orr.w	r3, r3, #2
 80023e4:	6313      	str	r3, [r2, #48]	; 0x30
 80023e6:	4b2a      	ldr	r3, [pc, #168]	; (8002490 <MX_GPIO_Init+0x124>)
 80023e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ea:	f003 0302 	and.w	r3, r3, #2
 80023ee:	607b      	str	r3, [r7, #4]
 80023f0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|LOAD_Pin, GPIO_PIN_RESET);
 80023f2:	2200      	movs	r2, #0
 80023f4:	f44f 7108 	mov.w	r1, #544	; 0x220
 80023f8:	4826      	ldr	r0, [pc, #152]	; (8002494 <MX_GPIO_Init+0x128>)
 80023fa:	f001 ff65 	bl	80042c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI_SS_GPIO_Port, SPI_SS_Pin, GPIO_PIN_SET);
 80023fe:	2201      	movs	r2, #1
 8002400:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002404:	4824      	ldr	r0, [pc, #144]	; (8002498 <MX_GPIO_Init+0x12c>)
 8002406:	f001 ff5f 	bl	80042c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SHDN_GPIO_Port, SHDN_Pin, GPIO_PIN_SET);
 800240a:	2201      	movs	r2, #1
 800240c:	2180      	movs	r1, #128	; 0x80
 800240e:	4823      	ldr	r0, [pc, #140]	; (800249c <MX_GPIO_Init+0x130>)
 8002410:	f001 ff5a 	bl	80042c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002414:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002418:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800241a:	4b21      	ldr	r3, [pc, #132]	; (80024a0 <MX_GPIO_Init+0x134>)
 800241c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800241e:	2300      	movs	r3, #0
 8002420:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002422:	f107 0314 	add.w	r3, r7, #20
 8002426:	4619      	mov	r1, r3
 8002428:	481c      	ldr	r0, [pc, #112]	; (800249c <MX_GPIO_Init+0x130>)
 800242a:	f001 fdb1 	bl	8003f90 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LOAD_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LOAD_Pin;
 800242e:	f44f 7308 	mov.w	r3, #544	; 0x220
 8002432:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002434:	2301      	movs	r3, #1
 8002436:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002438:	2300      	movs	r3, #0
 800243a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800243c:	2300      	movs	r3, #0
 800243e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002440:	f107 0314 	add.w	r3, r7, #20
 8002444:	4619      	mov	r1, r3
 8002446:	4813      	ldr	r0, [pc, #76]	; (8002494 <MX_GPIO_Init+0x128>)
 8002448:	f001 fda2 	bl	8003f90 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI_SS_Pin */
  GPIO_InitStruct.Pin = SPI_SS_Pin;
 800244c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002450:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002452:	2301      	movs	r3, #1
 8002454:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002456:	2300      	movs	r3, #0
 8002458:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800245a:	2300      	movs	r3, #0
 800245c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI_SS_GPIO_Port, &GPIO_InitStruct);
 800245e:	f107 0314 	add.w	r3, r7, #20
 8002462:	4619      	mov	r1, r3
 8002464:	480c      	ldr	r0, [pc, #48]	; (8002498 <MX_GPIO_Init+0x12c>)
 8002466:	f001 fd93 	bl	8003f90 <HAL_GPIO_Init>

  /*Configure GPIO pin : SHDN_Pin */
  GPIO_InitStruct.Pin = SHDN_Pin;
 800246a:	2380      	movs	r3, #128	; 0x80
 800246c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800246e:	2301      	movs	r3, #1
 8002470:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002472:	2300      	movs	r3, #0
 8002474:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002476:	2300      	movs	r3, #0
 8002478:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SHDN_GPIO_Port, &GPIO_InitStruct);
 800247a:	f107 0314 	add.w	r3, r7, #20
 800247e:	4619      	mov	r1, r3
 8002480:	4806      	ldr	r0, [pc, #24]	; (800249c <MX_GPIO_Init+0x130>)
 8002482:	f001 fd85 	bl	8003f90 <HAL_GPIO_Init>

}
 8002486:	bf00      	nop
 8002488:	3728      	adds	r7, #40	; 0x28
 800248a:	46bd      	mov	sp, r7
 800248c:	bd80      	pop	{r7, pc}
 800248e:	bf00      	nop
 8002490:	40023800 	.word	0x40023800
 8002494:	40020000 	.word	0x40020000
 8002498:	40020400 	.word	0x40020400
 800249c:	40020800 	.word	0x40020800
 80024a0:	10210000 	.word	0x10210000

080024a4 <MCP4922SetOutput>:

/* USER CODE BEGIN 4 */
void MCP4922SetOutput(uint8_t Config, uint16_t DACOutput)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b084      	sub	sp, #16
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	4603      	mov	r3, r0
 80024ac:	460a      	mov	r2, r1
 80024ae:	71fb      	strb	r3, [r7, #7]
 80024b0:	4613      	mov	r3, r2
 80024b2:	80bb      	strh	r3, [r7, #4]
	uint32_t OutputPacket = (DACOutput & 0x0fff) | ((Config & 0xf) << 12);
 80024b4:	88bb      	ldrh	r3, [r7, #4]
 80024b6:	f3c3 020b 	ubfx	r2, r3, #0, #12
 80024ba:	79fb      	ldrb	r3, [r7, #7]
 80024bc:	031b      	lsls	r3, r3, #12
 80024be:	b29b      	uxth	r3, r3
 80024c0:	4313      	orrs	r3, r2
 80024c2:	60fb      	str	r3, [r7, #12]
	//outputpacket >> config 4 bits + DACOutput (data) 12 bits

	HAL_GPIO_WritePin(SPI_SS_GPIO_Port, SPI_SS_Pin, GPIO_PIN_RESET);
 80024c4:	2200      	movs	r2, #0
 80024c6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80024ca:	4807      	ldr	r0, [pc, #28]	; (80024e8 <MCP4922SetOutput+0x44>)
 80024cc:	f001 fefc 	bl	80042c8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit_IT(&hspi3, &OutputPacket, 1);	//size 1 >> 1 outputpacket => 16 bits
 80024d0:	f107 030c 	add.w	r3, r7, #12
 80024d4:	2201      	movs	r2, #1
 80024d6:	4619      	mov	r1, r3
 80024d8:	4804      	ldr	r0, [pc, #16]	; (80024ec <MCP4922SetOutput+0x48>)
 80024da:	f002 fbdf 	bl	8004c9c <HAL_SPI_Transmit_IT>
}
 80024de:	bf00      	nop
 80024e0:	3710      	adds	r7, #16
 80024e2:	46bd      	mov	sp, r7
 80024e4:	bd80      	pop	{r7, pc}
 80024e6:	bf00      	nop
 80024e8:	40020400 	.word	0x40020400
 80024ec:	200001b0 	.word	0x200001b0

080024f0 <HAL_SPI_TxCpltCallback>:

void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b082      	sub	sp, #8
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
	if (hspi == &hspi3)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	4a06      	ldr	r2, [pc, #24]	; (8002514 <HAL_SPI_TxCpltCallback+0x24>)
 80024fc:	4293      	cmp	r3, r2
 80024fe:	d105      	bne.n	800250c <HAL_SPI_TxCpltCallback+0x1c>
	{
		//transmit complete >> slave select turn to HIGH to tell that it's complete (every rounds)
		HAL_GPIO_WritePin(SPI_SS_GPIO_Port, SPI_SS_Pin, GPIO_PIN_SET);
 8002500:	2201      	movs	r2, #1
 8002502:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002506:	4804      	ldr	r0, [pc, #16]	; (8002518 <HAL_SPI_TxCpltCallback+0x28>)
 8002508:	f001 fede 	bl	80042c8 <HAL_GPIO_WritePin>
	}
}
 800250c:	bf00      	nop
 800250e:	3708      	adds	r7, #8
 8002510:	46bd      	mov	sp, r7
 8002512:	bd80      	pop	{r7, pc}
 8002514:	200001b0 	.word	0x200001b0
 8002518:	40020400 	.word	0x40020400

0800251c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800251c:	b4b0      	push	{r4, r5, r7}
 800251e:	b083      	sub	sp, #12
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
	if (htim == &htim11)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	4a0a      	ldr	r2, [pc, #40]	; (8002550 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8002528:	4293      	cmp	r3, r2
 800252a:	d10c      	bne.n	8002546 <HAL_TIM_PeriodElapsedCallback+0x2a>
	{
		_micro += 65535;
 800252c:	4b09      	ldr	r3, [pc, #36]	; (8002554 <HAL_TIM_PeriodElapsedCallback+0x38>)
 800252e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002532:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002536:	f04f 0100 	mov.w	r1, #0
 800253a:	1814      	adds	r4, r2, r0
 800253c:	eb43 0501 	adc.w	r5, r3, r1
 8002540:	4b04      	ldr	r3, [pc, #16]	; (8002554 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8002542:	e9c3 4500 	strd	r4, r5, [r3]
	}
}
 8002546:	bf00      	nop
 8002548:	370c      	adds	r7, #12
 800254a:	46bd      	mov	sp, r7
 800254c:	bcb0      	pop	{r4, r5, r7}
 800254e:	4770      	bx	lr
 8002550:	20000250 	.word	0x20000250
 8002554:	200000a0 	.word	0x200000a0

08002558 <micros>:

inline uint64_t micros()
{
 8002558:	b4b0      	push	{r4, r5, r7}
 800255a:	af00      	add	r7, sp, #0
	return htim11.Instance->CNT + _micro;
 800255c:	4b09      	ldr	r3, [pc, #36]	; (8002584 <micros+0x2c>)
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002562:	4618      	mov	r0, r3
 8002564:	f04f 0100 	mov.w	r1, #0
 8002568:	4b07      	ldr	r3, [pc, #28]	; (8002588 <micros+0x30>)
 800256a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800256e:	1884      	adds	r4, r0, r2
 8002570:	eb41 0503 	adc.w	r5, r1, r3
 8002574:	4622      	mov	r2, r4
 8002576:	462b      	mov	r3, r5
}
 8002578:	4610      	mov	r0, r2
 800257a:	4619      	mov	r1, r3
 800257c:	46bd      	mov	sp, r7
 800257e:	bcb0      	pop	{r4, r5, r7}
 8002580:	4770      	bx	lr
 8002582:	bf00      	nop
 8002584:	20000250 	.word	0x20000250
 8002588:	200000a0 	.word	0x200000a0

0800258c <UARTReceiveIT>:
	HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);

}

int16_t UARTReceiveIT()
{
 800258c:	b480      	push	{r7}
 800258e:	b083      	sub	sp, #12
 8002590:	af00      	add	r7, sp, #0
    static uint32_t dataPos =0;
    int16_t data=-1;
 8002592:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002596:	80fb      	strh	r3, [r7, #6]
    if(huart2.RxXferSize - huart2.RxXferCount!=dataPos)
 8002598:	4b11      	ldr	r3, [pc, #68]	; (80025e0 <UARTReceiveIT+0x54>)
 800259a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800259c:	461a      	mov	r2, r3
 800259e:	4b10      	ldr	r3, [pc, #64]	; (80025e0 <UARTReceiveIT+0x54>)
 80025a0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80025a2:	b29b      	uxth	r3, r3
 80025a4:	1ad3      	subs	r3, r2, r3
 80025a6:	4a0f      	ldr	r2, [pc, #60]	; (80025e4 <UARTReceiveIT+0x58>)
 80025a8:	6812      	ldr	r2, [r2, #0]
 80025aa:	4293      	cmp	r3, r2
 80025ac:	d010      	beq.n	80025d0 <UARTReceiveIT+0x44>
    {
        data=RxDataBuffer[dataPos];
 80025ae:	4b0d      	ldr	r3, [pc, #52]	; (80025e4 <UARTReceiveIT+0x58>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	4a0d      	ldr	r2, [pc, #52]	; (80025e8 <UARTReceiveIT+0x5c>)
 80025b4:	5cd3      	ldrb	r3, [r2, r3]
 80025b6:	80fb      	strh	r3, [r7, #6]
        dataPos= (dataPos+1)%huart2.RxXferSize;
 80025b8:	4b0a      	ldr	r3, [pc, #40]	; (80025e4 <UARTReceiveIT+0x58>)
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	3301      	adds	r3, #1
 80025be:	4a08      	ldr	r2, [pc, #32]	; (80025e0 <UARTReceiveIT+0x54>)
 80025c0:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
 80025c2:	fbb3 f1f2 	udiv	r1, r3, r2
 80025c6:	fb02 f201 	mul.w	r2, r2, r1
 80025ca:	1a9b      	subs	r3, r3, r2
 80025cc:	4a05      	ldr	r2, [pc, #20]	; (80025e4 <UARTReceiveIT+0x58>)
 80025ce:	6013      	str	r3, [r2, #0]
    }
    return data;
 80025d0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 80025d4:	4618      	mov	r0, r3
 80025d6:	370c      	adds	r7, #12
 80025d8:	46bd      	mov	sp, r7
 80025da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025de:	4770      	bx	lr
 80025e0:	200002f0 	.word	0x200002f0
 80025e4:	20000160 	.word	0x20000160
 80025e8:	200000d4 	.word	0x200000d4

080025ec <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80025ec:	b590      	push	{r4, r7, lr}
 80025ee:	b083      	sub	sp, #12
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
    sprintf(TxDataBuffer, "Received:[%s]\r\n", RxDataBuffer);
 80025f4:	4a0b      	ldr	r2, [pc, #44]	; (8002624 <HAL_UART_RxCpltCallback+0x38>)
 80025f6:	490c      	ldr	r1, [pc, #48]	; (8002628 <HAL_UART_RxCpltCallback+0x3c>)
 80025f8:	480c      	ldr	r0, [pc, #48]	; (800262c <HAL_UART_RxCpltCallback+0x40>)
 80025fa:	f004 f9df 	bl	80069bc <siprintf>
    HAL_UART_Transmit(&huart2, (uint8_t)TxDataBuffer, strlen(TxDataBuffer), 1000);
 80025fe:	4b0b      	ldr	r3, [pc, #44]	; (800262c <HAL_UART_RxCpltCallback+0x40>)
 8002600:	b2db      	uxtb	r3, r3
 8002602:	461c      	mov	r4, r3
 8002604:	4809      	ldr	r0, [pc, #36]	; (800262c <HAL_UART_RxCpltCallback+0x40>)
 8002606:	f7fd fdeb 	bl	80001e0 <strlen>
 800260a:	4603      	mov	r3, r0
 800260c:	b29a      	uxth	r2, r3
 800260e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002612:	4621      	mov	r1, r4
 8002614:	4806      	ldr	r0, [pc, #24]	; (8002630 <HAL_UART_RxCpltCallback+0x44>)
 8002616:	f003 fa86 	bl	8005b26 <HAL_UART_Transmit>
}
 800261a:	bf00      	nop
 800261c:	370c      	adds	r7, #12
 800261e:	46bd      	mov	sp, r7
 8002620:	bd90      	pop	{r4, r7, pc}
 8002622:	bf00      	nop
 8002624:	200000d4 	.word	0x200000d4
 8002628:	08007594 	.word	0x08007594
 800262c:	200000b4 	.word	0x200000b4
 8002630:	200002f0 	.word	0x200002f0

08002634 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002634:	b480      	push	{r7}
 8002636:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002638:	b672      	cpsid	i
}
 800263a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 800263c:	e7fe      	b.n	800263c <Error_Handler+0x8>
	...

08002640 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	b082      	sub	sp, #8
 8002644:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002646:	2300      	movs	r3, #0
 8002648:	607b      	str	r3, [r7, #4]
 800264a:	4b10      	ldr	r3, [pc, #64]	; (800268c <HAL_MspInit+0x4c>)
 800264c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800264e:	4a0f      	ldr	r2, [pc, #60]	; (800268c <HAL_MspInit+0x4c>)
 8002650:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002654:	6453      	str	r3, [r2, #68]	; 0x44
 8002656:	4b0d      	ldr	r3, [pc, #52]	; (800268c <HAL_MspInit+0x4c>)
 8002658:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800265a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800265e:	607b      	str	r3, [r7, #4]
 8002660:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002662:	2300      	movs	r3, #0
 8002664:	603b      	str	r3, [r7, #0]
 8002666:	4b09      	ldr	r3, [pc, #36]	; (800268c <HAL_MspInit+0x4c>)
 8002668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800266a:	4a08      	ldr	r2, [pc, #32]	; (800268c <HAL_MspInit+0x4c>)
 800266c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002670:	6413      	str	r3, [r2, #64]	; 0x40
 8002672:	4b06      	ldr	r3, [pc, #24]	; (800268c <HAL_MspInit+0x4c>)
 8002674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002676:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800267a:	603b      	str	r3, [r7, #0]
 800267c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800267e:	2007      	movs	r0, #7
 8002680:	f001 f8b2 	bl	80037e8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002684:	bf00      	nop
 8002686:	3708      	adds	r7, #8
 8002688:	46bd      	mov	sp, r7
 800268a:	bd80      	pop	{r7, pc}
 800268c:	40023800 	.word	0x40023800

08002690 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b08a      	sub	sp, #40	; 0x28
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002698:	f107 0314 	add.w	r3, r7, #20
 800269c:	2200      	movs	r2, #0
 800269e:	601a      	str	r2, [r3, #0]
 80026a0:	605a      	str	r2, [r3, #4]
 80026a2:	609a      	str	r2, [r3, #8]
 80026a4:	60da      	str	r2, [r3, #12]
 80026a6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	4a33      	ldr	r2, [pc, #204]	; (800277c <HAL_ADC_MspInit+0xec>)
 80026ae:	4293      	cmp	r3, r2
 80026b0:	d15f      	bne.n	8002772 <HAL_ADC_MspInit+0xe2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80026b2:	2300      	movs	r3, #0
 80026b4:	613b      	str	r3, [r7, #16]
 80026b6:	4b32      	ldr	r3, [pc, #200]	; (8002780 <HAL_ADC_MspInit+0xf0>)
 80026b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026ba:	4a31      	ldr	r2, [pc, #196]	; (8002780 <HAL_ADC_MspInit+0xf0>)
 80026bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026c0:	6453      	str	r3, [r2, #68]	; 0x44
 80026c2:	4b2f      	ldr	r3, [pc, #188]	; (8002780 <HAL_ADC_MspInit+0xf0>)
 80026c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026ca:	613b      	str	r3, [r7, #16]
 80026cc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026ce:	2300      	movs	r3, #0
 80026d0:	60fb      	str	r3, [r7, #12]
 80026d2:	4b2b      	ldr	r3, [pc, #172]	; (8002780 <HAL_ADC_MspInit+0xf0>)
 80026d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026d6:	4a2a      	ldr	r2, [pc, #168]	; (8002780 <HAL_ADC_MspInit+0xf0>)
 80026d8:	f043 0301 	orr.w	r3, r3, #1
 80026dc:	6313      	str	r3, [r2, #48]	; 0x30
 80026de:	4b28      	ldr	r3, [pc, #160]	; (8002780 <HAL_ADC_MspInit+0xf0>)
 80026e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026e2:	f003 0301 	and.w	r3, r3, #1
 80026e6:	60fb      	str	r3, [r7, #12]
 80026e8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80026ea:	2301      	movs	r3, #1
 80026ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80026ee:	2303      	movs	r3, #3
 80026f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026f2:	2300      	movs	r3, #0
 80026f4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026f6:	f107 0314 	add.w	r3, r7, #20
 80026fa:	4619      	mov	r1, r3
 80026fc:	4821      	ldr	r0, [pc, #132]	; (8002784 <HAL_ADC_MspInit+0xf4>)
 80026fe:	f001 fc47 	bl	8003f90 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8002702:	4b21      	ldr	r3, [pc, #132]	; (8002788 <HAL_ADC_MspInit+0xf8>)
 8002704:	4a21      	ldr	r2, [pc, #132]	; (800278c <HAL_ADC_MspInit+0xfc>)
 8002706:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8002708:	4b1f      	ldr	r3, [pc, #124]	; (8002788 <HAL_ADC_MspInit+0xf8>)
 800270a:	2200      	movs	r2, #0
 800270c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800270e:	4b1e      	ldr	r3, [pc, #120]	; (8002788 <HAL_ADC_MspInit+0xf8>)
 8002710:	2200      	movs	r2, #0
 8002712:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002714:	4b1c      	ldr	r3, [pc, #112]	; (8002788 <HAL_ADC_MspInit+0xf8>)
 8002716:	2200      	movs	r2, #0
 8002718:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800271a:	4b1b      	ldr	r3, [pc, #108]	; (8002788 <HAL_ADC_MspInit+0xf8>)
 800271c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002720:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002722:	4b19      	ldr	r3, [pc, #100]	; (8002788 <HAL_ADC_MspInit+0xf8>)
 8002724:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002728:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800272a:	4b17      	ldr	r3, [pc, #92]	; (8002788 <HAL_ADC_MspInit+0xf8>)
 800272c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002730:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002732:	4b15      	ldr	r3, [pc, #84]	; (8002788 <HAL_ADC_MspInit+0xf8>)
 8002734:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002738:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800273a:	4b13      	ldr	r3, [pc, #76]	; (8002788 <HAL_ADC_MspInit+0xf8>)
 800273c:	2200      	movs	r2, #0
 800273e:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002740:	4b11      	ldr	r3, [pc, #68]	; (8002788 <HAL_ADC_MspInit+0xf8>)
 8002742:	2200      	movs	r2, #0
 8002744:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002746:	4810      	ldr	r0, [pc, #64]	; (8002788 <HAL_ADC_MspInit+0xf8>)
 8002748:	f001 f890 	bl	800386c <HAL_DMA_Init>
 800274c:	4603      	mov	r3, r0
 800274e:	2b00      	cmp	r3, #0
 8002750:	d001      	beq.n	8002756 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8002752:	f7ff ff6f 	bl	8002634 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	4a0b      	ldr	r2, [pc, #44]	; (8002788 <HAL_ADC_MspInit+0xf8>)
 800275a:	639a      	str	r2, [r3, #56]	; 0x38
 800275c:	4a0a      	ldr	r2, [pc, #40]	; (8002788 <HAL_ADC_MspInit+0xf8>)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8002762:	2200      	movs	r2, #0
 8002764:	2100      	movs	r1, #0
 8002766:	2012      	movs	r0, #18
 8002768:	f001 f849 	bl	80037fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 800276c:	2012      	movs	r0, #18
 800276e:	f001 f862 	bl	8003836 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002772:	bf00      	nop
 8002774:	3728      	adds	r7, #40	; 0x28
 8002776:	46bd      	mov	sp, r7
 8002778:	bd80      	pop	{r7, pc}
 800277a:	bf00      	nop
 800277c:	40012000 	.word	0x40012000
 8002780:	40023800 	.word	0x40023800
 8002784:	40020000 	.word	0x40020000
 8002788:	20000290 	.word	0x20000290
 800278c:	40026410 	.word	0x40026410

08002790 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	b08a      	sub	sp, #40	; 0x28
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002798:	f107 0314 	add.w	r3, r7, #20
 800279c:	2200      	movs	r2, #0
 800279e:	601a      	str	r2, [r3, #0]
 80027a0:	605a      	str	r2, [r3, #4]
 80027a2:	609a      	str	r2, [r3, #8]
 80027a4:	60da      	str	r2, [r3, #12]
 80027a6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	4a1d      	ldr	r2, [pc, #116]	; (8002824 <HAL_SPI_MspInit+0x94>)
 80027ae:	4293      	cmp	r3, r2
 80027b0:	d133      	bne.n	800281a <HAL_SPI_MspInit+0x8a>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80027b2:	2300      	movs	r3, #0
 80027b4:	613b      	str	r3, [r7, #16]
 80027b6:	4b1c      	ldr	r3, [pc, #112]	; (8002828 <HAL_SPI_MspInit+0x98>)
 80027b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ba:	4a1b      	ldr	r2, [pc, #108]	; (8002828 <HAL_SPI_MspInit+0x98>)
 80027bc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80027c0:	6413      	str	r3, [r2, #64]	; 0x40
 80027c2:	4b19      	ldr	r3, [pc, #100]	; (8002828 <HAL_SPI_MspInit+0x98>)
 80027c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027c6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80027ca:	613b      	str	r3, [r7, #16]
 80027cc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80027ce:	2300      	movs	r3, #0
 80027d0:	60fb      	str	r3, [r7, #12]
 80027d2:	4b15      	ldr	r3, [pc, #84]	; (8002828 <HAL_SPI_MspInit+0x98>)
 80027d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027d6:	4a14      	ldr	r2, [pc, #80]	; (8002828 <HAL_SPI_MspInit+0x98>)
 80027d8:	f043 0302 	orr.w	r3, r3, #2
 80027dc:	6313      	str	r3, [r2, #48]	; 0x30
 80027de:	4b12      	ldr	r3, [pc, #72]	; (8002828 <HAL_SPI_MspInit+0x98>)
 80027e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027e2:	f003 0302 	and.w	r3, r3, #2
 80027e6:	60fb      	str	r3, [r7, #12]
 80027e8:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PB3     ------> SPI3_SCK
    PB4     ------> SPI3_MISO
    PB5     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 80027ea:	2338      	movs	r3, #56	; 0x38
 80027ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027ee:	2302      	movs	r3, #2
 80027f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027f2:	2300      	movs	r3, #0
 80027f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027f6:	2303      	movs	r3, #3
 80027f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80027fa:	2306      	movs	r3, #6
 80027fc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027fe:	f107 0314 	add.w	r3, r7, #20
 8002802:	4619      	mov	r1, r3
 8002804:	4809      	ldr	r0, [pc, #36]	; (800282c <HAL_SPI_MspInit+0x9c>)
 8002806:	f001 fbc3 	bl	8003f90 <HAL_GPIO_Init>

    /* SPI3 interrupt Init */
    HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 800280a:	2200      	movs	r2, #0
 800280c:	2100      	movs	r1, #0
 800280e:	2033      	movs	r0, #51	; 0x33
 8002810:	f000 fff5 	bl	80037fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 8002814:	2033      	movs	r0, #51	; 0x33
 8002816:	f001 f80e 	bl	8003836 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 800281a:	bf00      	nop
 800281c:	3728      	adds	r7, #40	; 0x28
 800281e:	46bd      	mov	sp, r7
 8002820:	bd80      	pop	{r7, pc}
 8002822:	bf00      	nop
 8002824:	40003c00 	.word	0x40003c00
 8002828:	40023800 	.word	0x40023800
 800282c:	40020400 	.word	0x40020400

08002830 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b084      	sub	sp, #16
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	4a18      	ldr	r2, [pc, #96]	; (80028a0 <HAL_TIM_Base_MspInit+0x70>)
 800283e:	4293      	cmp	r3, r2
 8002840:	d10e      	bne.n	8002860 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002842:	2300      	movs	r3, #0
 8002844:	60fb      	str	r3, [r7, #12]
 8002846:	4b17      	ldr	r3, [pc, #92]	; (80028a4 <HAL_TIM_Base_MspInit+0x74>)
 8002848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800284a:	4a16      	ldr	r2, [pc, #88]	; (80028a4 <HAL_TIM_Base_MspInit+0x74>)
 800284c:	f043 0302 	orr.w	r3, r3, #2
 8002850:	6413      	str	r3, [r2, #64]	; 0x40
 8002852:	4b14      	ldr	r3, [pc, #80]	; (80028a4 <HAL_TIM_Base_MspInit+0x74>)
 8002854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002856:	f003 0302 	and.w	r3, r3, #2
 800285a:	60fb      	str	r3, [r7, #12]
 800285c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 800285e:	e01a      	b.n	8002896 <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM11)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	4a10      	ldr	r2, [pc, #64]	; (80028a8 <HAL_TIM_Base_MspInit+0x78>)
 8002866:	4293      	cmp	r3, r2
 8002868:	d115      	bne.n	8002896 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM11_CLK_ENABLE();
 800286a:	2300      	movs	r3, #0
 800286c:	60bb      	str	r3, [r7, #8]
 800286e:	4b0d      	ldr	r3, [pc, #52]	; (80028a4 <HAL_TIM_Base_MspInit+0x74>)
 8002870:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002872:	4a0c      	ldr	r2, [pc, #48]	; (80028a4 <HAL_TIM_Base_MspInit+0x74>)
 8002874:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002878:	6453      	str	r3, [r2, #68]	; 0x44
 800287a:	4b0a      	ldr	r3, [pc, #40]	; (80028a4 <HAL_TIM_Base_MspInit+0x74>)
 800287c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800287e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002882:	60bb      	str	r3, [r7, #8]
 8002884:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8002886:	2200      	movs	r2, #0
 8002888:	2100      	movs	r1, #0
 800288a:	201a      	movs	r0, #26
 800288c:	f000 ffb7 	bl	80037fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8002890:	201a      	movs	r0, #26
 8002892:	f000 ffd0 	bl	8003836 <HAL_NVIC_EnableIRQ>
}
 8002896:	bf00      	nop
 8002898:	3710      	adds	r7, #16
 800289a:	46bd      	mov	sp, r7
 800289c:	bd80      	pop	{r7, pc}
 800289e:	bf00      	nop
 80028a0:	40000400 	.word	0x40000400
 80028a4:	40023800 	.word	0x40023800
 80028a8:	40014800 	.word	0x40014800

080028ac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b08a      	sub	sp, #40	; 0x28
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028b4:	f107 0314 	add.w	r3, r7, #20
 80028b8:	2200      	movs	r2, #0
 80028ba:	601a      	str	r2, [r3, #0]
 80028bc:	605a      	str	r2, [r3, #4]
 80028be:	609a      	str	r2, [r3, #8]
 80028c0:	60da      	str	r2, [r3, #12]
 80028c2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	4a1d      	ldr	r2, [pc, #116]	; (8002940 <HAL_UART_MspInit+0x94>)
 80028ca:	4293      	cmp	r3, r2
 80028cc:	d133      	bne.n	8002936 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80028ce:	2300      	movs	r3, #0
 80028d0:	613b      	str	r3, [r7, #16]
 80028d2:	4b1c      	ldr	r3, [pc, #112]	; (8002944 <HAL_UART_MspInit+0x98>)
 80028d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028d6:	4a1b      	ldr	r2, [pc, #108]	; (8002944 <HAL_UART_MspInit+0x98>)
 80028d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80028dc:	6413      	str	r3, [r2, #64]	; 0x40
 80028de:	4b19      	ldr	r3, [pc, #100]	; (8002944 <HAL_UART_MspInit+0x98>)
 80028e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028e6:	613b      	str	r3, [r7, #16]
 80028e8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028ea:	2300      	movs	r3, #0
 80028ec:	60fb      	str	r3, [r7, #12]
 80028ee:	4b15      	ldr	r3, [pc, #84]	; (8002944 <HAL_UART_MspInit+0x98>)
 80028f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028f2:	4a14      	ldr	r2, [pc, #80]	; (8002944 <HAL_UART_MspInit+0x98>)
 80028f4:	f043 0301 	orr.w	r3, r3, #1
 80028f8:	6313      	str	r3, [r2, #48]	; 0x30
 80028fa:	4b12      	ldr	r3, [pc, #72]	; (8002944 <HAL_UART_MspInit+0x98>)
 80028fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028fe:	f003 0301 	and.w	r3, r3, #1
 8002902:	60fb      	str	r3, [r7, #12]
 8002904:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002906:	230c      	movs	r3, #12
 8002908:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800290a:	2302      	movs	r3, #2
 800290c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800290e:	2300      	movs	r3, #0
 8002910:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002912:	2303      	movs	r3, #3
 8002914:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002916:	2307      	movs	r3, #7
 8002918:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800291a:	f107 0314 	add.w	r3, r7, #20
 800291e:	4619      	mov	r1, r3
 8002920:	4809      	ldr	r0, [pc, #36]	; (8002948 <HAL_UART_MspInit+0x9c>)
 8002922:	f001 fb35 	bl	8003f90 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002926:	2200      	movs	r2, #0
 8002928:	2100      	movs	r1, #0
 800292a:	2026      	movs	r0, #38	; 0x26
 800292c:	f000 ff67 	bl	80037fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002930:	2026      	movs	r0, #38	; 0x26
 8002932:	f000 ff80 	bl	8003836 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002936:	bf00      	nop
 8002938:	3728      	adds	r7, #40	; 0x28
 800293a:	46bd      	mov	sp, r7
 800293c:	bd80      	pop	{r7, pc}
 800293e:	bf00      	nop
 8002940:	40004400 	.word	0x40004400
 8002944:	40023800 	.word	0x40023800
 8002948:	40020000 	.word	0x40020000

0800294c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800294c:	b480      	push	{r7}
 800294e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002950:	e7fe      	b.n	8002950 <NMI_Handler+0x4>

08002952 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002952:	b480      	push	{r7}
 8002954:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002956:	e7fe      	b.n	8002956 <HardFault_Handler+0x4>

08002958 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002958:	b480      	push	{r7}
 800295a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800295c:	e7fe      	b.n	800295c <MemManage_Handler+0x4>

0800295e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800295e:	b480      	push	{r7}
 8002960:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002962:	e7fe      	b.n	8002962 <BusFault_Handler+0x4>

08002964 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002964:	b480      	push	{r7}
 8002966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002968:	e7fe      	b.n	8002968 <UsageFault_Handler+0x4>

0800296a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800296a:	b480      	push	{r7}
 800296c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800296e:	bf00      	nop
 8002970:	46bd      	mov	sp, r7
 8002972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002976:	4770      	bx	lr

08002978 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002978:	b480      	push	{r7}
 800297a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800297c:	bf00      	nop
 800297e:	46bd      	mov	sp, r7
 8002980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002984:	4770      	bx	lr

08002986 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002986:	b480      	push	{r7}
 8002988:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800298a:	bf00      	nop
 800298c:	46bd      	mov	sp, r7
 800298e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002992:	4770      	bx	lr

08002994 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002998:	f000 f8fc 	bl	8002b94 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800299c:	bf00      	nop
 800299e:	bd80      	pop	{r7, pc}

080029a0 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80029a4:	4802      	ldr	r0, [pc, #8]	; (80029b0 <ADC_IRQHandler+0x10>)
 80029a6:	f000 f958 	bl	8002c5a <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 80029aa:	bf00      	nop
 80029ac:	bd80      	pop	{r7, pc}
 80029ae:	bf00      	nop
 80029b0:	20000208 	.word	0x20000208

080029b4 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 80029b8:	4802      	ldr	r0, [pc, #8]	; (80029c4 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 80029ba:	f002 fcd6 	bl	800536a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 80029be:	bf00      	nop
 80029c0:	bd80      	pop	{r7, pc}
 80029c2:	bf00      	nop
 80029c4:	20000250 	.word	0x20000250

080029c8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80029cc:	4802      	ldr	r0, [pc, #8]	; (80029d8 <USART2_IRQHandler+0x10>)
 80029ce:	f003 f999 	bl	8005d04 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80029d2:	bf00      	nop
 80029d4:	bd80      	pop	{r7, pc}
 80029d6:	bf00      	nop
 80029d8:	200002f0 	.word	0x200002f0

080029dc <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 80029e0:	4802      	ldr	r0, [pc, #8]	; (80029ec <SPI3_IRQHandler+0x10>)
 80029e2:	f002 f9dd 	bl	8004da0 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 80029e6:	bf00      	nop
 80029e8:	bd80      	pop	{r7, pc}
 80029ea:	bf00      	nop
 80029ec:	200001b0 	.word	0x200001b0

080029f0 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80029f4:	4802      	ldr	r0, [pc, #8]	; (8002a00 <DMA2_Stream0_IRQHandler+0x10>)
 80029f6:	f001 f861 	bl	8003abc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80029fa:	bf00      	nop
 80029fc:	bd80      	pop	{r7, pc}
 80029fe:	bf00      	nop
 8002a00:	20000290 	.word	0x20000290

08002a04 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b086      	sub	sp, #24
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002a0c:	4a14      	ldr	r2, [pc, #80]	; (8002a60 <_sbrk+0x5c>)
 8002a0e:	4b15      	ldr	r3, [pc, #84]	; (8002a64 <_sbrk+0x60>)
 8002a10:	1ad3      	subs	r3, r2, r3
 8002a12:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002a14:	697b      	ldr	r3, [r7, #20]
 8002a16:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002a18:	4b13      	ldr	r3, [pc, #76]	; (8002a68 <_sbrk+0x64>)
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d102      	bne.n	8002a26 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002a20:	4b11      	ldr	r3, [pc, #68]	; (8002a68 <_sbrk+0x64>)
 8002a22:	4a12      	ldr	r2, [pc, #72]	; (8002a6c <_sbrk+0x68>)
 8002a24:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002a26:	4b10      	ldr	r3, [pc, #64]	; (8002a68 <_sbrk+0x64>)
 8002a28:	681a      	ldr	r2, [r3, #0]
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	4413      	add	r3, r2
 8002a2e:	693a      	ldr	r2, [r7, #16]
 8002a30:	429a      	cmp	r2, r3
 8002a32:	d207      	bcs.n	8002a44 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002a34:	f003 ff82 	bl	800693c <__errno>
 8002a38:	4603      	mov	r3, r0
 8002a3a:	220c      	movs	r2, #12
 8002a3c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002a3e:	f04f 33ff 	mov.w	r3, #4294967295
 8002a42:	e009      	b.n	8002a58 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002a44:	4b08      	ldr	r3, [pc, #32]	; (8002a68 <_sbrk+0x64>)
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002a4a:	4b07      	ldr	r3, [pc, #28]	; (8002a68 <_sbrk+0x64>)
 8002a4c:	681a      	ldr	r2, [r3, #0]
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	4413      	add	r3, r2
 8002a52:	4a05      	ldr	r2, [pc, #20]	; (8002a68 <_sbrk+0x64>)
 8002a54:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002a56:	68fb      	ldr	r3, [r7, #12]
}
 8002a58:	4618      	mov	r0, r3
 8002a5a:	3718      	adds	r7, #24
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	bd80      	pop	{r7, pc}
 8002a60:	20020000 	.word	0x20020000
 8002a64:	00000400 	.word	0x00000400
 8002a68:	20000164 	.word	0x20000164
 8002a6c:	20000348 	.word	0x20000348

08002a70 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002a70:	b480      	push	{r7}
 8002a72:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002a74:	4b08      	ldr	r3, [pc, #32]	; (8002a98 <SystemInit+0x28>)
 8002a76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a7a:	4a07      	ldr	r2, [pc, #28]	; (8002a98 <SystemInit+0x28>)
 8002a7c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002a80:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002a84:	4b04      	ldr	r3, [pc, #16]	; (8002a98 <SystemInit+0x28>)
 8002a86:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002a8a:	609a      	str	r2, [r3, #8]
#endif
}
 8002a8c:	bf00      	nop
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a94:	4770      	bx	lr
 8002a96:	bf00      	nop
 8002a98:	e000ed00 	.word	0xe000ed00

08002a9c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002a9c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002ad4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002aa0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002aa2:	e003      	b.n	8002aac <LoopCopyDataInit>

08002aa4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002aa4:	4b0c      	ldr	r3, [pc, #48]	; (8002ad8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002aa6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002aa8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002aaa:	3104      	adds	r1, #4

08002aac <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002aac:	480b      	ldr	r0, [pc, #44]	; (8002adc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002aae:	4b0c      	ldr	r3, [pc, #48]	; (8002ae0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002ab0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002ab2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002ab4:	d3f6      	bcc.n	8002aa4 <CopyDataInit>
  ldr  r2, =_sbss
 8002ab6:	4a0b      	ldr	r2, [pc, #44]	; (8002ae4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002ab8:	e002      	b.n	8002ac0 <LoopFillZerobss>

08002aba <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002aba:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002abc:	f842 3b04 	str.w	r3, [r2], #4

08002ac0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002ac0:	4b09      	ldr	r3, [pc, #36]	; (8002ae8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002ac2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002ac4:	d3f9      	bcc.n	8002aba <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002ac6:	f7ff ffd3 	bl	8002a70 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002aca:	f003 ff3d 	bl	8006948 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002ace:	f7fe fa4b 	bl	8000f68 <main>
  bx  lr    
 8002ad2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002ad4:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8002ad8:	08007608 	.word	0x08007608
  ldr  r0, =_sdata
 8002adc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002ae0:	20000080 	.word	0x20000080
  ldr  r2, =_sbss
 8002ae4:	20000080 	.word	0x20000080
  ldr  r3, = _ebss
 8002ae8:	20000344 	.word	0x20000344

08002aec <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002aec:	e7fe      	b.n	8002aec <DMA1_Stream0_IRQHandler>
	...

08002af0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002af4:	4b0e      	ldr	r3, [pc, #56]	; (8002b30 <HAL_Init+0x40>)
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	4a0d      	ldr	r2, [pc, #52]	; (8002b30 <HAL_Init+0x40>)
 8002afa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002afe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002b00:	4b0b      	ldr	r3, [pc, #44]	; (8002b30 <HAL_Init+0x40>)
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	4a0a      	ldr	r2, [pc, #40]	; (8002b30 <HAL_Init+0x40>)
 8002b06:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002b0a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002b0c:	4b08      	ldr	r3, [pc, #32]	; (8002b30 <HAL_Init+0x40>)
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	4a07      	ldr	r2, [pc, #28]	; (8002b30 <HAL_Init+0x40>)
 8002b12:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b16:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002b18:	2003      	movs	r0, #3
 8002b1a:	f000 fe65 	bl	80037e8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002b1e:	2000      	movs	r0, #0
 8002b20:	f000 f808 	bl	8002b34 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002b24:	f7ff fd8c 	bl	8002640 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002b28:	2300      	movs	r3, #0
}
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	bd80      	pop	{r7, pc}
 8002b2e:	bf00      	nop
 8002b30:	40023c00 	.word	0x40023c00

08002b34 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b082      	sub	sp, #8
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002b3c:	4b12      	ldr	r3, [pc, #72]	; (8002b88 <HAL_InitTick+0x54>)
 8002b3e:	681a      	ldr	r2, [r3, #0]
 8002b40:	4b12      	ldr	r3, [pc, #72]	; (8002b8c <HAL_InitTick+0x58>)
 8002b42:	781b      	ldrb	r3, [r3, #0]
 8002b44:	4619      	mov	r1, r3
 8002b46:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002b4a:	fbb3 f3f1 	udiv	r3, r3, r1
 8002b4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b52:	4618      	mov	r0, r3
 8002b54:	f000 fe7d 	bl	8003852 <HAL_SYSTICK_Config>
 8002b58:	4603      	mov	r3, r0
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d001      	beq.n	8002b62 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002b5e:	2301      	movs	r3, #1
 8002b60:	e00e      	b.n	8002b80 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	2b0f      	cmp	r3, #15
 8002b66:	d80a      	bhi.n	8002b7e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002b68:	2200      	movs	r2, #0
 8002b6a:	6879      	ldr	r1, [r7, #4]
 8002b6c:	f04f 30ff 	mov.w	r0, #4294967295
 8002b70:	f000 fe45 	bl	80037fe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002b74:	4a06      	ldr	r2, [pc, #24]	; (8002b90 <HAL_InitTick+0x5c>)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	e000      	b.n	8002b80 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002b7e:	2301      	movs	r3, #1
}
 8002b80:	4618      	mov	r0, r3
 8002b82:	3708      	adds	r7, #8
 8002b84:	46bd      	mov	sp, r7
 8002b86:	bd80      	pop	{r7, pc}
 8002b88:	20000010 	.word	0x20000010
 8002b8c:	20000018 	.word	0x20000018
 8002b90:	20000014 	.word	0x20000014

08002b94 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002b94:	b480      	push	{r7}
 8002b96:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002b98:	4b06      	ldr	r3, [pc, #24]	; (8002bb4 <HAL_IncTick+0x20>)
 8002b9a:	781b      	ldrb	r3, [r3, #0]
 8002b9c:	461a      	mov	r2, r3
 8002b9e:	4b06      	ldr	r3, [pc, #24]	; (8002bb8 <HAL_IncTick+0x24>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	4413      	add	r3, r2
 8002ba4:	4a04      	ldr	r2, [pc, #16]	; (8002bb8 <HAL_IncTick+0x24>)
 8002ba6:	6013      	str	r3, [r2, #0]
}
 8002ba8:	bf00      	nop
 8002baa:	46bd      	mov	sp, r7
 8002bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb0:	4770      	bx	lr
 8002bb2:	bf00      	nop
 8002bb4:	20000018 	.word	0x20000018
 8002bb8:	20000330 	.word	0x20000330

08002bbc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002bbc:	b480      	push	{r7}
 8002bbe:	af00      	add	r7, sp, #0
  return uwTick;
 8002bc0:	4b03      	ldr	r3, [pc, #12]	; (8002bd0 <HAL_GetTick+0x14>)
 8002bc2:	681b      	ldr	r3, [r3, #0]
}
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bcc:	4770      	bx	lr
 8002bce:	bf00      	nop
 8002bd0:	20000330 	.word	0x20000330

08002bd4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b084      	sub	sp, #16
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002bdc:	2300      	movs	r3, #0
 8002bde:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d101      	bne.n	8002bea <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002be6:	2301      	movs	r3, #1
 8002be8:	e033      	b.n	8002c52 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d109      	bne.n	8002c06 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002bf2:	6878      	ldr	r0, [r7, #4]
 8002bf4:	f7ff fd4c 	bl	8002690 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	2200      	movs	r2, #0
 8002c02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c0a:	f003 0310 	and.w	r3, r3, #16
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d118      	bne.n	8002c44 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c16:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002c1a:	f023 0302 	bic.w	r3, r3, #2
 8002c1e:	f043 0202 	orr.w	r2, r3, #2
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002c26:	6878      	ldr	r0, [r7, #4]
 8002c28:	f000 fb86 	bl	8003338 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2200      	movs	r2, #0
 8002c30:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c36:	f023 0303 	bic.w	r3, r3, #3
 8002c3a:	f043 0201 	orr.w	r2, r3, #1
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	641a      	str	r2, [r3, #64]	; 0x40
 8002c42:	e001      	b.n	8002c48 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002c44:	2301      	movs	r3, #1
 8002c46:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002c50:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c52:	4618      	mov	r0, r3
 8002c54:	3710      	adds	r7, #16
 8002c56:	46bd      	mov	sp, r7
 8002c58:	bd80      	pop	{r7, pc}

08002c5a <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8002c5a:	b580      	push	{r7, lr}
 8002c5c:	b084      	sub	sp, #16
 8002c5e:	af00      	add	r7, sp, #0
 8002c60:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8002c62:	2300      	movs	r3, #0
 8002c64:	60fb      	str	r3, [r7, #12]
 8002c66:	2300      	movs	r3, #0
 8002c68:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f003 0302 	and.w	r3, r3, #2
 8002c74:	2b02      	cmp	r3, #2
 8002c76:	bf0c      	ite	eq
 8002c78:	2301      	moveq	r3, #1
 8002c7a:	2300      	movne	r3, #0
 8002c7c:	b2db      	uxtb	r3, r3
 8002c7e:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	685b      	ldr	r3, [r3, #4]
 8002c86:	f003 0320 	and.w	r3, r3, #32
 8002c8a:	2b20      	cmp	r3, #32
 8002c8c:	bf0c      	ite	eq
 8002c8e:	2301      	moveq	r3, #1
 8002c90:	2300      	movne	r3, #0
 8002c92:	b2db      	uxtb	r3, r3
 8002c94:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d049      	beq.n	8002d30 <HAL_ADC_IRQHandler+0xd6>
 8002c9c:	68bb      	ldr	r3, [r7, #8]
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d046      	beq.n	8002d30 <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ca6:	f003 0310 	and.w	r3, r3, #16
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d105      	bne.n	8002cba <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cb2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	689b      	ldr	r3, [r3, #8]
 8002cc0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d12b      	bne.n	8002d20 <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d127      	bne.n	8002d20 <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cd6:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d006      	beq.n	8002cec <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	689b      	ldr	r3, [r3, #8]
 8002ce4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d119      	bne.n	8002d20 <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	685a      	ldr	r2, [r3, #4]
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f022 0220 	bic.w	r2, r2, #32
 8002cfa:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d00:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d0c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d105      	bne.n	8002d20 <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d18:	f043 0201 	orr.w	r2, r3, #1
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002d20:	6878      	ldr	r0, [r7, #4]
 8002d22:	f000 f9af 	bl	8003084 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f06f 0212 	mvn.w	r2, #18
 8002d2e:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f003 0304 	and.w	r3, r3, #4
 8002d3a:	2b04      	cmp	r3, #4
 8002d3c:	bf0c      	ite	eq
 8002d3e:	2301      	moveq	r3, #1
 8002d40:	2300      	movne	r3, #0
 8002d42:	b2db      	uxtb	r3, r3
 8002d44:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	685b      	ldr	r3, [r3, #4]
 8002d4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d50:	2b80      	cmp	r3, #128	; 0x80
 8002d52:	bf0c      	ite	eq
 8002d54:	2301      	moveq	r3, #1
 8002d56:	2300      	movne	r3, #0
 8002d58:	b2db      	uxtb	r3, r3
 8002d5a:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d057      	beq.n	8002e12 <HAL_ADC_IRQHandler+0x1b8>
 8002d62:	68bb      	ldr	r3, [r7, #8]
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d054      	beq.n	8002e12 <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d6c:	f003 0310 	and.w	r3, r3, #16
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d105      	bne.n	8002d80 <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d78:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	689b      	ldr	r3, [r3, #8]
 8002d86:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d139      	bne.n	8002e02 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d94:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d006      	beq.n	8002daa <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	689b      	ldr	r3, [r3, #8]
 8002da2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d12b      	bne.n	8002e02 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	685b      	ldr	r3, [r3, #4]
 8002db0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d124      	bne.n	8002e02 <HAL_ADC_IRQHandler+0x1a8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	689b      	ldr	r3, [r3, #8]
 8002dbe:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d11d      	bne.n	8002e02 <HAL_ADC_IRQHandler+0x1a8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d119      	bne.n	8002e02 <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	685a      	ldr	r2, [r3, #4]
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002ddc:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002de2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d105      	bne.n	8002e02 <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dfa:	f043 0201 	orr.w	r2, r3, #1
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002e02:	6878      	ldr	r0, [r7, #4]
 8002e04:	f000 fc16 	bl	8003634 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f06f 020c 	mvn.w	r2, #12
 8002e10:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f003 0301 	and.w	r3, r3, #1
 8002e1c:	2b01      	cmp	r3, #1
 8002e1e:	bf0c      	ite	eq
 8002e20:	2301      	moveq	r3, #1
 8002e22:	2300      	movne	r3, #0
 8002e24:	b2db      	uxtb	r3, r3
 8002e26:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	685b      	ldr	r3, [r3, #4]
 8002e2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e32:	2b40      	cmp	r3, #64	; 0x40
 8002e34:	bf0c      	ite	eq
 8002e36:	2301      	moveq	r3, #1
 8002e38:	2300      	movne	r3, #0
 8002e3a:	b2db      	uxtb	r3, r3
 8002e3c:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d017      	beq.n	8002e74 <HAL_ADC_IRQHandler+0x21a>
 8002e44:	68bb      	ldr	r3, [r7, #8]
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d014      	beq.n	8002e74 <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f003 0301 	and.w	r3, r3, #1
 8002e54:	2b01      	cmp	r3, #1
 8002e56:	d10d      	bne.n	8002e74 <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e5c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002e64:	6878      	ldr	r0, [r7, #4]
 8002e66:	f000 f921 	bl	80030ac <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f06f 0201 	mvn.w	r2, #1
 8002e72:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f003 0320 	and.w	r3, r3, #32
 8002e7e:	2b20      	cmp	r3, #32
 8002e80:	bf0c      	ite	eq
 8002e82:	2301      	moveq	r3, #1
 8002e84:	2300      	movne	r3, #0
 8002e86:	b2db      	uxtb	r3, r3
 8002e88:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	685b      	ldr	r3, [r3, #4]
 8002e90:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002e94:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002e98:	bf0c      	ite	eq
 8002e9a:	2301      	moveq	r3, #1
 8002e9c:	2300      	movne	r3, #0
 8002e9e:	b2db      	uxtb	r3, r3
 8002ea0:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d015      	beq.n	8002ed4 <HAL_ADC_IRQHandler+0x27a>
 8002ea8:	68bb      	ldr	r3, [r7, #8]
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d012      	beq.n	8002ed4 <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002eb2:	f043 0202 	orr.w	r2, r3, #2
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f06f 0220 	mvn.w	r2, #32
 8002ec2:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002ec4:	6878      	ldr	r0, [r7, #4]
 8002ec6:	f000 f8fb 	bl	80030c0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f06f 0220 	mvn.w	r2, #32
 8002ed2:	601a      	str	r2, [r3, #0]
  }
}
 8002ed4:	bf00      	nop
 8002ed6:	3710      	adds	r7, #16
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	bd80      	pop	{r7, pc}

08002edc <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b086      	sub	sp, #24
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	60f8      	str	r0, [r7, #12]
 8002ee4:	60b9      	str	r1, [r7, #8]
 8002ee6:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8002ee8:	2300      	movs	r3, #0
 8002eea:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ef2:	2b01      	cmp	r3, #1
 8002ef4:	d101      	bne.n	8002efa <HAL_ADC_Start_DMA+0x1e>
 8002ef6:	2302      	movs	r3, #2
 8002ef8:	e0b1      	b.n	800305e <HAL_ADC_Start_DMA+0x182>
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	2201      	movs	r2, #1
 8002efe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	689b      	ldr	r3, [r3, #8]
 8002f08:	f003 0301 	and.w	r3, r3, #1
 8002f0c:	2b01      	cmp	r3, #1
 8002f0e:	d018      	beq.n	8002f42 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	689a      	ldr	r2, [r3, #8]
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f042 0201 	orr.w	r2, r2, #1
 8002f1e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002f20:	4b51      	ldr	r3, [pc, #324]	; (8003068 <HAL_ADC_Start_DMA+0x18c>)
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	4a51      	ldr	r2, [pc, #324]	; (800306c <HAL_ADC_Start_DMA+0x190>)
 8002f26:	fba2 2303 	umull	r2, r3, r2, r3
 8002f2a:	0c9a      	lsrs	r2, r3, #18
 8002f2c:	4613      	mov	r3, r2
 8002f2e:	005b      	lsls	r3, r3, #1
 8002f30:	4413      	add	r3, r2
 8002f32:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002f34:	e002      	b.n	8002f3c <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8002f36:	693b      	ldr	r3, [r7, #16]
 8002f38:	3b01      	subs	r3, #1
 8002f3a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002f3c:	693b      	ldr	r3, [r7, #16]
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d1f9      	bne.n	8002f36 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	689b      	ldr	r3, [r3, #8]
 8002f48:	f003 0301 	and.w	r3, r3, #1
 8002f4c:	2b01      	cmp	r3, #1
 8002f4e:	f040 8085 	bne.w	800305c <HAL_ADC_Start_DMA+0x180>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f56:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002f5a:	f023 0301 	bic.w	r3, r3, #1
 8002f5e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	685b      	ldr	r3, [r3, #4]
 8002f6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d007      	beq.n	8002f84 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f78:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002f7c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f88:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002f8c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f90:	d106      	bne.n	8002fa0 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f96:	f023 0206 	bic.w	r2, r3, #6
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	645a      	str	r2, [r3, #68]	; 0x44
 8002f9e:	e002      	b.n	8002fa6 <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	2200      	movs	r2, #0
 8002faa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002fae:	4b30      	ldr	r3, [pc, #192]	; (8003070 <HAL_ADC_Start_DMA+0x194>)
 8002fb0:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fb6:	4a2f      	ldr	r2, [pc, #188]	; (8003074 <HAL_ADC_Start_DMA+0x198>)
 8002fb8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fbe:	4a2e      	ldr	r2, [pc, #184]	; (8003078 <HAL_ADC_Start_DMA+0x19c>)
 8002fc0:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fc6:	4a2d      	ldr	r2, [pc, #180]	; (800307c <HAL_ADC_Start_DMA+0x1a0>)
 8002fc8:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002fd2:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	685a      	ldr	r2, [r3, #4]
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8002fe2:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	689a      	ldr	r2, [r3, #8]
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002ff2:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	334c      	adds	r3, #76	; 0x4c
 8002ffe:	4619      	mov	r1, r3
 8003000:	68ba      	ldr	r2, [r7, #8]
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	f000 fce0 	bl	80039c8 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003008:	697b      	ldr	r3, [r7, #20]
 800300a:	685b      	ldr	r3, [r3, #4]
 800300c:	f003 031f 	and.w	r3, r3, #31
 8003010:	2b00      	cmp	r3, #0
 8003012:	d10f      	bne.n	8003034 <HAL_ADC_Start_DMA+0x158>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	689b      	ldr	r3, [r3, #8]
 800301a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800301e:	2b00      	cmp	r3, #0
 8003020:	d11c      	bne.n	800305c <HAL_ADC_Start_DMA+0x180>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	689a      	ldr	r2, [r3, #8]
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003030:	609a      	str	r2, [r3, #8]
 8003032:	e013      	b.n	800305c <HAL_ADC_Start_DMA+0x180>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	4a11      	ldr	r2, [pc, #68]	; (8003080 <HAL_ADC_Start_DMA+0x1a4>)
 800303a:	4293      	cmp	r3, r2
 800303c:	d10e      	bne.n	800305c <HAL_ADC_Start_DMA+0x180>
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	689b      	ldr	r3, [r3, #8]
 8003044:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003048:	2b00      	cmp	r3, #0
 800304a:	d107      	bne.n	800305c <HAL_ADC_Start_DMA+0x180>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	689a      	ldr	r2, [r3, #8]
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800305a:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 800305c:	2300      	movs	r3, #0
}
 800305e:	4618      	mov	r0, r3
 8003060:	3718      	adds	r7, #24
 8003062:	46bd      	mov	sp, r7
 8003064:	bd80      	pop	{r7, pc}
 8003066:	bf00      	nop
 8003068:	20000010 	.word	0x20000010
 800306c:	431bde83 	.word	0x431bde83
 8003070:	40012300 	.word	0x40012300
 8003074:	08003531 	.word	0x08003531
 8003078:	080035eb 	.word	0x080035eb
 800307c:	08003607 	.word	0x08003607
 8003080:	40012000 	.word	0x40012000

08003084 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003084:	b480      	push	{r7}
 8003086:	b083      	sub	sp, #12
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 800308c:	bf00      	nop
 800308e:	370c      	adds	r7, #12
 8003090:	46bd      	mov	sp, r7
 8003092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003096:	4770      	bx	lr

08003098 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003098:	b480      	push	{r7}
 800309a:	b083      	sub	sp, #12
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80030a0:	bf00      	nop
 80030a2:	370c      	adds	r7, #12
 80030a4:	46bd      	mov	sp, r7
 80030a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030aa:	4770      	bx	lr

080030ac <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80030ac:	b480      	push	{r7}
 80030ae:	b083      	sub	sp, #12
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 80030b4:	bf00      	nop
 80030b6:	370c      	adds	r7, #12
 80030b8:	46bd      	mov	sp, r7
 80030ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030be:	4770      	bx	lr

080030c0 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80030c0:	b480      	push	{r7}
 80030c2:	b083      	sub	sp, #12
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80030c8:	bf00      	nop
 80030ca:	370c      	adds	r7, #12
 80030cc:	46bd      	mov	sp, r7
 80030ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d2:	4770      	bx	lr

080030d4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80030d4:	b480      	push	{r7}
 80030d6:	b085      	sub	sp, #20
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
 80030dc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80030de:	2300      	movs	r3, #0
 80030e0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80030e8:	2b01      	cmp	r3, #1
 80030ea:	d101      	bne.n	80030f0 <HAL_ADC_ConfigChannel+0x1c>
 80030ec:	2302      	movs	r3, #2
 80030ee:	e113      	b.n	8003318 <HAL_ADC_ConfigChannel+0x244>
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2201      	movs	r2, #1
 80030f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	2b09      	cmp	r3, #9
 80030fe:	d925      	bls.n	800314c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	68d9      	ldr	r1, [r3, #12]
 8003106:	683b      	ldr	r3, [r7, #0]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	b29b      	uxth	r3, r3
 800310c:	461a      	mov	r2, r3
 800310e:	4613      	mov	r3, r2
 8003110:	005b      	lsls	r3, r3, #1
 8003112:	4413      	add	r3, r2
 8003114:	3b1e      	subs	r3, #30
 8003116:	2207      	movs	r2, #7
 8003118:	fa02 f303 	lsl.w	r3, r2, r3
 800311c:	43da      	mvns	r2, r3
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	400a      	ands	r2, r1
 8003124:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	68d9      	ldr	r1, [r3, #12]
 800312c:	683b      	ldr	r3, [r7, #0]
 800312e:	689a      	ldr	r2, [r3, #8]
 8003130:	683b      	ldr	r3, [r7, #0]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	b29b      	uxth	r3, r3
 8003136:	4618      	mov	r0, r3
 8003138:	4603      	mov	r3, r0
 800313a:	005b      	lsls	r3, r3, #1
 800313c:	4403      	add	r3, r0
 800313e:	3b1e      	subs	r3, #30
 8003140:	409a      	lsls	r2, r3
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	430a      	orrs	r2, r1
 8003148:	60da      	str	r2, [r3, #12]
 800314a:	e022      	b.n	8003192 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	6919      	ldr	r1, [r3, #16]
 8003152:	683b      	ldr	r3, [r7, #0]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	b29b      	uxth	r3, r3
 8003158:	461a      	mov	r2, r3
 800315a:	4613      	mov	r3, r2
 800315c:	005b      	lsls	r3, r3, #1
 800315e:	4413      	add	r3, r2
 8003160:	2207      	movs	r2, #7
 8003162:	fa02 f303 	lsl.w	r3, r2, r3
 8003166:	43da      	mvns	r2, r3
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	400a      	ands	r2, r1
 800316e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	6919      	ldr	r1, [r3, #16]
 8003176:	683b      	ldr	r3, [r7, #0]
 8003178:	689a      	ldr	r2, [r3, #8]
 800317a:	683b      	ldr	r3, [r7, #0]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	b29b      	uxth	r3, r3
 8003180:	4618      	mov	r0, r3
 8003182:	4603      	mov	r3, r0
 8003184:	005b      	lsls	r3, r3, #1
 8003186:	4403      	add	r3, r0
 8003188:	409a      	lsls	r2, r3
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	430a      	orrs	r2, r1
 8003190:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003192:	683b      	ldr	r3, [r7, #0]
 8003194:	685b      	ldr	r3, [r3, #4]
 8003196:	2b06      	cmp	r3, #6
 8003198:	d824      	bhi.n	80031e4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80031a0:	683b      	ldr	r3, [r7, #0]
 80031a2:	685a      	ldr	r2, [r3, #4]
 80031a4:	4613      	mov	r3, r2
 80031a6:	009b      	lsls	r3, r3, #2
 80031a8:	4413      	add	r3, r2
 80031aa:	3b05      	subs	r3, #5
 80031ac:	221f      	movs	r2, #31
 80031ae:	fa02 f303 	lsl.w	r3, r2, r3
 80031b2:	43da      	mvns	r2, r3
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	400a      	ands	r2, r1
 80031ba:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80031c2:	683b      	ldr	r3, [r7, #0]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	b29b      	uxth	r3, r3
 80031c8:	4618      	mov	r0, r3
 80031ca:	683b      	ldr	r3, [r7, #0]
 80031cc:	685a      	ldr	r2, [r3, #4]
 80031ce:	4613      	mov	r3, r2
 80031d0:	009b      	lsls	r3, r3, #2
 80031d2:	4413      	add	r3, r2
 80031d4:	3b05      	subs	r3, #5
 80031d6:	fa00 f203 	lsl.w	r2, r0, r3
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	430a      	orrs	r2, r1
 80031e0:	635a      	str	r2, [r3, #52]	; 0x34
 80031e2:	e04c      	b.n	800327e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	685b      	ldr	r3, [r3, #4]
 80031e8:	2b0c      	cmp	r3, #12
 80031ea:	d824      	bhi.n	8003236 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80031f2:	683b      	ldr	r3, [r7, #0]
 80031f4:	685a      	ldr	r2, [r3, #4]
 80031f6:	4613      	mov	r3, r2
 80031f8:	009b      	lsls	r3, r3, #2
 80031fa:	4413      	add	r3, r2
 80031fc:	3b23      	subs	r3, #35	; 0x23
 80031fe:	221f      	movs	r2, #31
 8003200:	fa02 f303 	lsl.w	r3, r2, r3
 8003204:	43da      	mvns	r2, r3
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	400a      	ands	r2, r1
 800320c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003214:	683b      	ldr	r3, [r7, #0]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	b29b      	uxth	r3, r3
 800321a:	4618      	mov	r0, r3
 800321c:	683b      	ldr	r3, [r7, #0]
 800321e:	685a      	ldr	r2, [r3, #4]
 8003220:	4613      	mov	r3, r2
 8003222:	009b      	lsls	r3, r3, #2
 8003224:	4413      	add	r3, r2
 8003226:	3b23      	subs	r3, #35	; 0x23
 8003228:	fa00 f203 	lsl.w	r2, r0, r3
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	430a      	orrs	r2, r1
 8003232:	631a      	str	r2, [r3, #48]	; 0x30
 8003234:	e023      	b.n	800327e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	685a      	ldr	r2, [r3, #4]
 8003240:	4613      	mov	r3, r2
 8003242:	009b      	lsls	r3, r3, #2
 8003244:	4413      	add	r3, r2
 8003246:	3b41      	subs	r3, #65	; 0x41
 8003248:	221f      	movs	r2, #31
 800324a:	fa02 f303 	lsl.w	r3, r2, r3
 800324e:	43da      	mvns	r2, r3
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	400a      	ands	r2, r1
 8003256:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800325e:	683b      	ldr	r3, [r7, #0]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	b29b      	uxth	r3, r3
 8003264:	4618      	mov	r0, r3
 8003266:	683b      	ldr	r3, [r7, #0]
 8003268:	685a      	ldr	r2, [r3, #4]
 800326a:	4613      	mov	r3, r2
 800326c:	009b      	lsls	r3, r3, #2
 800326e:	4413      	add	r3, r2
 8003270:	3b41      	subs	r3, #65	; 0x41
 8003272:	fa00 f203 	lsl.w	r2, r0, r3
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	430a      	orrs	r2, r1
 800327c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800327e:	4b29      	ldr	r3, [pc, #164]	; (8003324 <HAL_ADC_ConfigChannel+0x250>)
 8003280:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	4a28      	ldr	r2, [pc, #160]	; (8003328 <HAL_ADC_ConfigChannel+0x254>)
 8003288:	4293      	cmp	r3, r2
 800328a:	d10f      	bne.n	80032ac <HAL_ADC_ConfigChannel+0x1d8>
 800328c:	683b      	ldr	r3, [r7, #0]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	2b12      	cmp	r3, #18
 8003292:	d10b      	bne.n	80032ac <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	685b      	ldr	r3, [r3, #4]
 8003298:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	685b      	ldr	r3, [r3, #4]
 80032a4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	4a1d      	ldr	r2, [pc, #116]	; (8003328 <HAL_ADC_ConfigChannel+0x254>)
 80032b2:	4293      	cmp	r3, r2
 80032b4:	d12b      	bne.n	800330e <HAL_ADC_ConfigChannel+0x23a>
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	4a1c      	ldr	r2, [pc, #112]	; (800332c <HAL_ADC_ConfigChannel+0x258>)
 80032bc:	4293      	cmp	r3, r2
 80032be:	d003      	beq.n	80032c8 <HAL_ADC_ConfigChannel+0x1f4>
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	2b11      	cmp	r3, #17
 80032c6:	d122      	bne.n	800330e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	685b      	ldr	r3, [r3, #4]
 80032cc:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	685b      	ldr	r3, [r3, #4]
 80032d8:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80032e0:	683b      	ldr	r3, [r7, #0]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	4a11      	ldr	r2, [pc, #68]	; (800332c <HAL_ADC_ConfigChannel+0x258>)
 80032e6:	4293      	cmp	r3, r2
 80032e8:	d111      	bne.n	800330e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80032ea:	4b11      	ldr	r3, [pc, #68]	; (8003330 <HAL_ADC_ConfigChannel+0x25c>)
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	4a11      	ldr	r2, [pc, #68]	; (8003334 <HAL_ADC_ConfigChannel+0x260>)
 80032f0:	fba2 2303 	umull	r2, r3, r2, r3
 80032f4:	0c9a      	lsrs	r2, r3, #18
 80032f6:	4613      	mov	r3, r2
 80032f8:	009b      	lsls	r3, r3, #2
 80032fa:	4413      	add	r3, r2
 80032fc:	005b      	lsls	r3, r3, #1
 80032fe:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003300:	e002      	b.n	8003308 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8003302:	68bb      	ldr	r3, [r7, #8]
 8003304:	3b01      	subs	r3, #1
 8003306:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003308:	68bb      	ldr	r3, [r7, #8]
 800330a:	2b00      	cmp	r3, #0
 800330c:	d1f9      	bne.n	8003302 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	2200      	movs	r2, #0
 8003312:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003316:	2300      	movs	r3, #0
}
 8003318:	4618      	mov	r0, r3
 800331a:	3714      	adds	r7, #20
 800331c:	46bd      	mov	sp, r7
 800331e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003322:	4770      	bx	lr
 8003324:	40012300 	.word	0x40012300
 8003328:	40012000 	.word	0x40012000
 800332c:	10000012 	.word	0x10000012
 8003330:	20000010 	.word	0x20000010
 8003334:	431bde83 	.word	0x431bde83

08003338 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003338:	b480      	push	{r7}
 800333a:	b085      	sub	sp, #20
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003340:	4b79      	ldr	r3, [pc, #484]	; (8003528 <ADC_Init+0x1f0>)
 8003342:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	685b      	ldr	r3, [r3, #4]
 8003348:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	685a      	ldr	r2, [r3, #4]
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	685b      	ldr	r3, [r3, #4]
 8003358:	431a      	orrs	r2, r3
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	685a      	ldr	r2, [r3, #4]
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800336c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	6859      	ldr	r1, [r3, #4]
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	691b      	ldr	r3, [r3, #16]
 8003378:	021a      	lsls	r2, r3, #8
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	430a      	orrs	r2, r1
 8003380:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	685a      	ldr	r2, [r3, #4]
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003390:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	6859      	ldr	r1, [r3, #4]
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	689a      	ldr	r2, [r3, #8]
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	430a      	orrs	r2, r1
 80033a2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	689a      	ldr	r2, [r3, #8]
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80033b2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	6899      	ldr	r1, [r3, #8]
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	68da      	ldr	r2, [r3, #12]
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	430a      	orrs	r2, r1
 80033c4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033ca:	4a58      	ldr	r2, [pc, #352]	; (800352c <ADC_Init+0x1f4>)
 80033cc:	4293      	cmp	r3, r2
 80033ce:	d022      	beq.n	8003416 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	689a      	ldr	r2, [r3, #8]
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80033de:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	6899      	ldr	r1, [r3, #8]
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	430a      	orrs	r2, r1
 80033f0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	689a      	ldr	r2, [r3, #8]
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003400:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	6899      	ldr	r1, [r3, #8]
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	430a      	orrs	r2, r1
 8003412:	609a      	str	r2, [r3, #8]
 8003414:	e00f      	b.n	8003436 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	689a      	ldr	r2, [r3, #8]
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003424:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	689a      	ldr	r2, [r3, #8]
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003434:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	689a      	ldr	r2, [r3, #8]
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f022 0202 	bic.w	r2, r2, #2
 8003444:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	6899      	ldr	r1, [r3, #8]
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	7e1b      	ldrb	r3, [r3, #24]
 8003450:	005a      	lsls	r2, r3, #1
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	430a      	orrs	r2, r1
 8003458:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003460:	2b00      	cmp	r3, #0
 8003462:	d01b      	beq.n	800349c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	685a      	ldr	r2, [r3, #4]
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003472:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	685a      	ldr	r2, [r3, #4]
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003482:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	6859      	ldr	r1, [r3, #4]
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800348e:	3b01      	subs	r3, #1
 8003490:	035a      	lsls	r2, r3, #13
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	430a      	orrs	r2, r1
 8003498:	605a      	str	r2, [r3, #4]
 800349a:	e007      	b.n	80034ac <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	685a      	ldr	r2, [r3, #4]
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80034aa:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80034ba:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	69db      	ldr	r3, [r3, #28]
 80034c6:	3b01      	subs	r3, #1
 80034c8:	051a      	lsls	r2, r3, #20
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	430a      	orrs	r2, r1
 80034d0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	689a      	ldr	r2, [r3, #8]
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80034e0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	6899      	ldr	r1, [r3, #8]
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80034ee:	025a      	lsls	r2, r3, #9
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	430a      	orrs	r2, r1
 80034f6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	689a      	ldr	r2, [r3, #8]
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003506:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	6899      	ldr	r1, [r3, #8]
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	695b      	ldr	r3, [r3, #20]
 8003512:	029a      	lsls	r2, r3, #10
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	430a      	orrs	r2, r1
 800351a:	609a      	str	r2, [r3, #8]
}
 800351c:	bf00      	nop
 800351e:	3714      	adds	r7, #20
 8003520:	46bd      	mov	sp, r7
 8003522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003526:	4770      	bx	lr
 8003528:	40012300 	.word	0x40012300
 800352c:	0f000001 	.word	0x0f000001

08003530 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003530:	b580      	push	{r7, lr}
 8003532:	b084      	sub	sp, #16
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800353c:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003542:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003546:	2b00      	cmp	r3, #0
 8003548:	d13c      	bne.n	80035c4 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800354e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	689b      	ldr	r3, [r3, #8]
 800355c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003560:	2b00      	cmp	r3, #0
 8003562:	d12b      	bne.n	80035bc <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003568:	2b00      	cmp	r3, #0
 800356a:	d127      	bne.n	80035bc <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003572:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003576:	2b00      	cmp	r3, #0
 8003578:	d006      	beq.n	8003588 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	689b      	ldr	r3, [r3, #8]
 8003580:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003584:	2b00      	cmp	r3, #0
 8003586:	d119      	bne.n	80035bc <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	685a      	ldr	r2, [r3, #4]
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f022 0220 	bic.w	r2, r2, #32
 8003596:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800359c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035a8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d105      	bne.n	80035bc <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035b4:	f043 0201 	orr.w	r2, r3, #1
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80035bc:	68f8      	ldr	r0, [r7, #12]
 80035be:	f7ff fd61 	bl	8003084 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80035c2:	e00e      	b.n	80035e2 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035c8:	f003 0310 	and.w	r3, r3, #16
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d003      	beq.n	80035d8 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80035d0:	68f8      	ldr	r0, [r7, #12]
 80035d2:	f7ff fd75 	bl	80030c0 <HAL_ADC_ErrorCallback>
}
 80035d6:	e004      	b.n	80035e2 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035de:	6878      	ldr	r0, [r7, #4]
 80035e0:	4798      	blx	r3
}
 80035e2:	bf00      	nop
 80035e4:	3710      	adds	r7, #16
 80035e6:	46bd      	mov	sp, r7
 80035e8:	bd80      	pop	{r7, pc}

080035ea <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80035ea:	b580      	push	{r7, lr}
 80035ec:	b084      	sub	sp, #16
 80035ee:	af00      	add	r7, sp, #0
 80035f0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035f6:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80035f8:	68f8      	ldr	r0, [r7, #12]
 80035fa:	f7ff fd4d 	bl	8003098 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80035fe:	bf00      	nop
 8003600:	3710      	adds	r7, #16
 8003602:	46bd      	mov	sp, r7
 8003604:	bd80      	pop	{r7, pc}

08003606 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8003606:	b580      	push	{r7, lr}
 8003608:	b084      	sub	sp, #16
 800360a:	af00      	add	r7, sp, #0
 800360c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003612:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	2240      	movs	r2, #64	; 0x40
 8003618:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800361e:	f043 0204 	orr.w	r2, r3, #4
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003626:	68f8      	ldr	r0, [r7, #12]
 8003628:	f7ff fd4a 	bl	80030c0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800362c:	bf00      	nop
 800362e:	3710      	adds	r7, #16
 8003630:	46bd      	mov	sp, r7
 8003632:	bd80      	pop	{r7, pc}

08003634 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003634:	b480      	push	{r7}
 8003636:	b083      	sub	sp, #12
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 800363c:	bf00      	nop
 800363e:	370c      	adds	r7, #12
 8003640:	46bd      	mov	sp, r7
 8003642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003646:	4770      	bx	lr

08003648 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003648:	b480      	push	{r7}
 800364a:	b085      	sub	sp, #20
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	f003 0307 	and.w	r3, r3, #7
 8003656:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003658:	4b0c      	ldr	r3, [pc, #48]	; (800368c <__NVIC_SetPriorityGrouping+0x44>)
 800365a:	68db      	ldr	r3, [r3, #12]
 800365c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800365e:	68ba      	ldr	r2, [r7, #8]
 8003660:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003664:	4013      	ands	r3, r2
 8003666:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800366c:	68bb      	ldr	r3, [r7, #8]
 800366e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003670:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003674:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003678:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800367a:	4a04      	ldr	r2, [pc, #16]	; (800368c <__NVIC_SetPriorityGrouping+0x44>)
 800367c:	68bb      	ldr	r3, [r7, #8]
 800367e:	60d3      	str	r3, [r2, #12]
}
 8003680:	bf00      	nop
 8003682:	3714      	adds	r7, #20
 8003684:	46bd      	mov	sp, r7
 8003686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368a:	4770      	bx	lr
 800368c:	e000ed00 	.word	0xe000ed00

08003690 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003690:	b480      	push	{r7}
 8003692:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003694:	4b04      	ldr	r3, [pc, #16]	; (80036a8 <__NVIC_GetPriorityGrouping+0x18>)
 8003696:	68db      	ldr	r3, [r3, #12]
 8003698:	0a1b      	lsrs	r3, r3, #8
 800369a:	f003 0307 	and.w	r3, r3, #7
}
 800369e:	4618      	mov	r0, r3
 80036a0:	46bd      	mov	sp, r7
 80036a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a6:	4770      	bx	lr
 80036a8:	e000ed00 	.word	0xe000ed00

080036ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80036ac:	b480      	push	{r7}
 80036ae:	b083      	sub	sp, #12
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	4603      	mov	r3, r0
 80036b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80036b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	db0b      	blt.n	80036d6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80036be:	79fb      	ldrb	r3, [r7, #7]
 80036c0:	f003 021f 	and.w	r2, r3, #31
 80036c4:	4907      	ldr	r1, [pc, #28]	; (80036e4 <__NVIC_EnableIRQ+0x38>)
 80036c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036ca:	095b      	lsrs	r3, r3, #5
 80036cc:	2001      	movs	r0, #1
 80036ce:	fa00 f202 	lsl.w	r2, r0, r2
 80036d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80036d6:	bf00      	nop
 80036d8:	370c      	adds	r7, #12
 80036da:	46bd      	mov	sp, r7
 80036dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e0:	4770      	bx	lr
 80036e2:	bf00      	nop
 80036e4:	e000e100 	.word	0xe000e100

080036e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80036e8:	b480      	push	{r7}
 80036ea:	b083      	sub	sp, #12
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	4603      	mov	r3, r0
 80036f0:	6039      	str	r1, [r7, #0]
 80036f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80036f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	db0a      	blt.n	8003712 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80036fc:	683b      	ldr	r3, [r7, #0]
 80036fe:	b2da      	uxtb	r2, r3
 8003700:	490c      	ldr	r1, [pc, #48]	; (8003734 <__NVIC_SetPriority+0x4c>)
 8003702:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003706:	0112      	lsls	r2, r2, #4
 8003708:	b2d2      	uxtb	r2, r2
 800370a:	440b      	add	r3, r1
 800370c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003710:	e00a      	b.n	8003728 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003712:	683b      	ldr	r3, [r7, #0]
 8003714:	b2da      	uxtb	r2, r3
 8003716:	4908      	ldr	r1, [pc, #32]	; (8003738 <__NVIC_SetPriority+0x50>)
 8003718:	79fb      	ldrb	r3, [r7, #7]
 800371a:	f003 030f 	and.w	r3, r3, #15
 800371e:	3b04      	subs	r3, #4
 8003720:	0112      	lsls	r2, r2, #4
 8003722:	b2d2      	uxtb	r2, r2
 8003724:	440b      	add	r3, r1
 8003726:	761a      	strb	r2, [r3, #24]
}
 8003728:	bf00      	nop
 800372a:	370c      	adds	r7, #12
 800372c:	46bd      	mov	sp, r7
 800372e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003732:	4770      	bx	lr
 8003734:	e000e100 	.word	0xe000e100
 8003738:	e000ed00 	.word	0xe000ed00

0800373c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800373c:	b480      	push	{r7}
 800373e:	b089      	sub	sp, #36	; 0x24
 8003740:	af00      	add	r7, sp, #0
 8003742:	60f8      	str	r0, [r7, #12]
 8003744:	60b9      	str	r1, [r7, #8]
 8003746:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	f003 0307 	and.w	r3, r3, #7
 800374e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003750:	69fb      	ldr	r3, [r7, #28]
 8003752:	f1c3 0307 	rsb	r3, r3, #7
 8003756:	2b04      	cmp	r3, #4
 8003758:	bf28      	it	cs
 800375a:	2304      	movcs	r3, #4
 800375c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800375e:	69fb      	ldr	r3, [r7, #28]
 8003760:	3304      	adds	r3, #4
 8003762:	2b06      	cmp	r3, #6
 8003764:	d902      	bls.n	800376c <NVIC_EncodePriority+0x30>
 8003766:	69fb      	ldr	r3, [r7, #28]
 8003768:	3b03      	subs	r3, #3
 800376a:	e000      	b.n	800376e <NVIC_EncodePriority+0x32>
 800376c:	2300      	movs	r3, #0
 800376e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003770:	f04f 32ff 	mov.w	r2, #4294967295
 8003774:	69bb      	ldr	r3, [r7, #24]
 8003776:	fa02 f303 	lsl.w	r3, r2, r3
 800377a:	43da      	mvns	r2, r3
 800377c:	68bb      	ldr	r3, [r7, #8]
 800377e:	401a      	ands	r2, r3
 8003780:	697b      	ldr	r3, [r7, #20]
 8003782:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003784:	f04f 31ff 	mov.w	r1, #4294967295
 8003788:	697b      	ldr	r3, [r7, #20]
 800378a:	fa01 f303 	lsl.w	r3, r1, r3
 800378e:	43d9      	mvns	r1, r3
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003794:	4313      	orrs	r3, r2
         );
}
 8003796:	4618      	mov	r0, r3
 8003798:	3724      	adds	r7, #36	; 0x24
 800379a:	46bd      	mov	sp, r7
 800379c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a0:	4770      	bx	lr
	...

080037a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80037a4:	b580      	push	{r7, lr}
 80037a6:	b082      	sub	sp, #8
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	3b01      	subs	r3, #1
 80037b0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80037b4:	d301      	bcc.n	80037ba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80037b6:	2301      	movs	r3, #1
 80037b8:	e00f      	b.n	80037da <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80037ba:	4a0a      	ldr	r2, [pc, #40]	; (80037e4 <SysTick_Config+0x40>)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	3b01      	subs	r3, #1
 80037c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80037c2:	210f      	movs	r1, #15
 80037c4:	f04f 30ff 	mov.w	r0, #4294967295
 80037c8:	f7ff ff8e 	bl	80036e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80037cc:	4b05      	ldr	r3, [pc, #20]	; (80037e4 <SysTick_Config+0x40>)
 80037ce:	2200      	movs	r2, #0
 80037d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80037d2:	4b04      	ldr	r3, [pc, #16]	; (80037e4 <SysTick_Config+0x40>)
 80037d4:	2207      	movs	r2, #7
 80037d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80037d8:	2300      	movs	r3, #0
}
 80037da:	4618      	mov	r0, r3
 80037dc:	3708      	adds	r7, #8
 80037de:	46bd      	mov	sp, r7
 80037e0:	bd80      	pop	{r7, pc}
 80037e2:	bf00      	nop
 80037e4:	e000e010 	.word	0xe000e010

080037e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b082      	sub	sp, #8
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80037f0:	6878      	ldr	r0, [r7, #4]
 80037f2:	f7ff ff29 	bl	8003648 <__NVIC_SetPriorityGrouping>
}
 80037f6:	bf00      	nop
 80037f8:	3708      	adds	r7, #8
 80037fa:	46bd      	mov	sp, r7
 80037fc:	bd80      	pop	{r7, pc}

080037fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80037fe:	b580      	push	{r7, lr}
 8003800:	b086      	sub	sp, #24
 8003802:	af00      	add	r7, sp, #0
 8003804:	4603      	mov	r3, r0
 8003806:	60b9      	str	r1, [r7, #8]
 8003808:	607a      	str	r2, [r7, #4]
 800380a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800380c:	2300      	movs	r3, #0
 800380e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003810:	f7ff ff3e 	bl	8003690 <__NVIC_GetPriorityGrouping>
 8003814:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003816:	687a      	ldr	r2, [r7, #4]
 8003818:	68b9      	ldr	r1, [r7, #8]
 800381a:	6978      	ldr	r0, [r7, #20]
 800381c:	f7ff ff8e 	bl	800373c <NVIC_EncodePriority>
 8003820:	4602      	mov	r2, r0
 8003822:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003826:	4611      	mov	r1, r2
 8003828:	4618      	mov	r0, r3
 800382a:	f7ff ff5d 	bl	80036e8 <__NVIC_SetPriority>
}
 800382e:	bf00      	nop
 8003830:	3718      	adds	r7, #24
 8003832:	46bd      	mov	sp, r7
 8003834:	bd80      	pop	{r7, pc}

08003836 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003836:	b580      	push	{r7, lr}
 8003838:	b082      	sub	sp, #8
 800383a:	af00      	add	r7, sp, #0
 800383c:	4603      	mov	r3, r0
 800383e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003840:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003844:	4618      	mov	r0, r3
 8003846:	f7ff ff31 	bl	80036ac <__NVIC_EnableIRQ>
}
 800384a:	bf00      	nop
 800384c:	3708      	adds	r7, #8
 800384e:	46bd      	mov	sp, r7
 8003850:	bd80      	pop	{r7, pc}

08003852 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003852:	b580      	push	{r7, lr}
 8003854:	b082      	sub	sp, #8
 8003856:	af00      	add	r7, sp, #0
 8003858:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800385a:	6878      	ldr	r0, [r7, #4]
 800385c:	f7ff ffa2 	bl	80037a4 <SysTick_Config>
 8003860:	4603      	mov	r3, r0
}
 8003862:	4618      	mov	r0, r3
 8003864:	3708      	adds	r7, #8
 8003866:	46bd      	mov	sp, r7
 8003868:	bd80      	pop	{r7, pc}
	...

0800386c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800386c:	b580      	push	{r7, lr}
 800386e:	b086      	sub	sp, #24
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003874:	2300      	movs	r3, #0
 8003876:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003878:	f7ff f9a0 	bl	8002bbc <HAL_GetTick>
 800387c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	2b00      	cmp	r3, #0
 8003882:	d101      	bne.n	8003888 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003884:	2301      	movs	r3, #1
 8003886:	e099      	b.n	80039bc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2200      	movs	r2, #0
 800388c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2202      	movs	r2, #2
 8003894:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	681a      	ldr	r2, [r3, #0]
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f022 0201 	bic.w	r2, r2, #1
 80038a6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80038a8:	e00f      	b.n	80038ca <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80038aa:	f7ff f987 	bl	8002bbc <HAL_GetTick>
 80038ae:	4602      	mov	r2, r0
 80038b0:	693b      	ldr	r3, [r7, #16]
 80038b2:	1ad3      	subs	r3, r2, r3
 80038b4:	2b05      	cmp	r3, #5
 80038b6:	d908      	bls.n	80038ca <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2220      	movs	r2, #32
 80038bc:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	2203      	movs	r2, #3
 80038c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80038c6:	2303      	movs	r3, #3
 80038c8:	e078      	b.n	80039bc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f003 0301 	and.w	r3, r3, #1
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d1e8      	bne.n	80038aa <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80038e0:	697a      	ldr	r2, [r7, #20]
 80038e2:	4b38      	ldr	r3, [pc, #224]	; (80039c4 <HAL_DMA_Init+0x158>)
 80038e4:	4013      	ands	r3, r2
 80038e6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	685a      	ldr	r2, [r3, #4]
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	689b      	ldr	r3, [r3, #8]
 80038f0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80038f6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	691b      	ldr	r3, [r3, #16]
 80038fc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003902:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	699b      	ldr	r3, [r3, #24]
 8003908:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800390e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	6a1b      	ldr	r3, [r3, #32]
 8003914:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003916:	697a      	ldr	r2, [r7, #20]
 8003918:	4313      	orrs	r3, r2
 800391a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003920:	2b04      	cmp	r3, #4
 8003922:	d107      	bne.n	8003934 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800392c:	4313      	orrs	r3, r2
 800392e:	697a      	ldr	r2, [r7, #20]
 8003930:	4313      	orrs	r3, r2
 8003932:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	697a      	ldr	r2, [r7, #20]
 800393a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	695b      	ldr	r3, [r3, #20]
 8003942:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003944:	697b      	ldr	r3, [r7, #20]
 8003946:	f023 0307 	bic.w	r3, r3, #7
 800394a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003950:	697a      	ldr	r2, [r7, #20]
 8003952:	4313      	orrs	r3, r2
 8003954:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800395a:	2b04      	cmp	r3, #4
 800395c:	d117      	bne.n	800398e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003962:	697a      	ldr	r2, [r7, #20]
 8003964:	4313      	orrs	r3, r2
 8003966:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800396c:	2b00      	cmp	r3, #0
 800396e:	d00e      	beq.n	800398e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003970:	6878      	ldr	r0, [r7, #4]
 8003972:	f000 fa91 	bl	8003e98 <DMA_CheckFifoParam>
 8003976:	4603      	mov	r3, r0
 8003978:	2b00      	cmp	r3, #0
 800397a:	d008      	beq.n	800398e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2240      	movs	r2, #64	; 0x40
 8003980:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	2201      	movs	r2, #1
 8003986:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800398a:	2301      	movs	r3, #1
 800398c:	e016      	b.n	80039bc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	697a      	ldr	r2, [r7, #20]
 8003994:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003996:	6878      	ldr	r0, [r7, #4]
 8003998:	f000 fa48 	bl	8003e2c <DMA_CalcBaseAndBitshift>
 800399c:	4603      	mov	r3, r0
 800399e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039a4:	223f      	movs	r2, #63	; 0x3f
 80039a6:	409a      	lsls	r2, r3
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2200      	movs	r2, #0
 80039b0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	2201      	movs	r2, #1
 80039b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80039ba:	2300      	movs	r3, #0
}
 80039bc:	4618      	mov	r0, r3
 80039be:	3718      	adds	r7, #24
 80039c0:	46bd      	mov	sp, r7
 80039c2:	bd80      	pop	{r7, pc}
 80039c4:	f010803f 	.word	0xf010803f

080039c8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b086      	sub	sp, #24
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	60f8      	str	r0, [r7, #12]
 80039d0:	60b9      	str	r1, [r7, #8]
 80039d2:	607a      	str	r2, [r7, #4]
 80039d4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80039d6:	2300      	movs	r3, #0
 80039d8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039de:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80039e6:	2b01      	cmp	r3, #1
 80039e8:	d101      	bne.n	80039ee <HAL_DMA_Start_IT+0x26>
 80039ea:	2302      	movs	r3, #2
 80039ec:	e040      	b.n	8003a70 <HAL_DMA_Start_IT+0xa8>
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	2201      	movs	r2, #1
 80039f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80039fc:	b2db      	uxtb	r3, r3
 80039fe:	2b01      	cmp	r3, #1
 8003a00:	d12f      	bne.n	8003a62 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	2202      	movs	r2, #2
 8003a06:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003a10:	683b      	ldr	r3, [r7, #0]
 8003a12:	687a      	ldr	r2, [r7, #4]
 8003a14:	68b9      	ldr	r1, [r7, #8]
 8003a16:	68f8      	ldr	r0, [r7, #12]
 8003a18:	f000 f9da 	bl	8003dd0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a20:	223f      	movs	r2, #63	; 0x3f
 8003a22:	409a      	lsls	r2, r3
 8003a24:	693b      	ldr	r3, [r7, #16]
 8003a26:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	681a      	ldr	r2, [r3, #0]
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f042 0216 	orr.w	r2, r2, #22
 8003a36:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d007      	beq.n	8003a50 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	681a      	ldr	r2, [r3, #0]
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f042 0208 	orr.w	r2, r2, #8
 8003a4e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	681a      	ldr	r2, [r3, #0]
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f042 0201 	orr.w	r2, r2, #1
 8003a5e:	601a      	str	r2, [r3, #0]
 8003a60:	e005      	b.n	8003a6e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	2200      	movs	r2, #0
 8003a66:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003a6a:	2302      	movs	r3, #2
 8003a6c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003a6e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a70:	4618      	mov	r0, r3
 8003a72:	3718      	adds	r7, #24
 8003a74:	46bd      	mov	sp, r7
 8003a76:	bd80      	pop	{r7, pc}

08003a78 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003a78:	b480      	push	{r7}
 8003a7a:	b083      	sub	sp, #12
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003a86:	b2db      	uxtb	r3, r3
 8003a88:	2b02      	cmp	r3, #2
 8003a8a:	d004      	beq.n	8003a96 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2280      	movs	r2, #128	; 0x80
 8003a90:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003a92:	2301      	movs	r3, #1
 8003a94:	e00c      	b.n	8003ab0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	2205      	movs	r2, #5
 8003a9a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	681a      	ldr	r2, [r3, #0]
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f022 0201 	bic.w	r2, r2, #1
 8003aac:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003aae:	2300      	movs	r3, #0
}
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	370c      	adds	r7, #12
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aba:	4770      	bx	lr

08003abc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003abc:	b580      	push	{r7, lr}
 8003abe:	b086      	sub	sp, #24
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003ac4:	2300      	movs	r3, #0
 8003ac6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003ac8:	4b92      	ldr	r3, [pc, #584]	; (8003d14 <HAL_DMA_IRQHandler+0x258>)
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	4a92      	ldr	r2, [pc, #584]	; (8003d18 <HAL_DMA_IRQHandler+0x25c>)
 8003ace:	fba2 2303 	umull	r2, r3, r2, r3
 8003ad2:	0a9b      	lsrs	r3, r3, #10
 8003ad4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ada:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003adc:	693b      	ldr	r3, [r7, #16]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ae6:	2208      	movs	r2, #8
 8003ae8:	409a      	lsls	r2, r3
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	4013      	ands	r3, r2
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d01a      	beq.n	8003b28 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f003 0304 	and.w	r3, r3, #4
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d013      	beq.n	8003b28 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	681a      	ldr	r2, [r3, #0]
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f022 0204 	bic.w	r2, r2, #4
 8003b0e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b14:	2208      	movs	r2, #8
 8003b16:	409a      	lsls	r2, r3
 8003b18:	693b      	ldr	r3, [r7, #16]
 8003b1a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b20:	f043 0201 	orr.w	r2, r3, #1
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b2c:	2201      	movs	r2, #1
 8003b2e:	409a      	lsls	r2, r3
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	4013      	ands	r3, r2
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d012      	beq.n	8003b5e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	695b      	ldr	r3, [r3, #20]
 8003b3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d00b      	beq.n	8003b5e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b4a:	2201      	movs	r2, #1
 8003b4c:	409a      	lsls	r2, r3
 8003b4e:	693b      	ldr	r3, [r7, #16]
 8003b50:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b56:	f043 0202 	orr.w	r2, r3, #2
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b62:	2204      	movs	r2, #4
 8003b64:	409a      	lsls	r2, r3
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	4013      	ands	r3, r2
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d012      	beq.n	8003b94 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f003 0302 	and.w	r3, r3, #2
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d00b      	beq.n	8003b94 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b80:	2204      	movs	r2, #4
 8003b82:	409a      	lsls	r2, r3
 8003b84:	693b      	ldr	r3, [r7, #16]
 8003b86:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b8c:	f043 0204 	orr.w	r2, r3, #4
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b98:	2210      	movs	r2, #16
 8003b9a:	409a      	lsls	r2, r3
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	4013      	ands	r3, r2
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d043      	beq.n	8003c2c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f003 0308 	and.w	r3, r3, #8
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d03c      	beq.n	8003c2c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bb6:	2210      	movs	r2, #16
 8003bb8:	409a      	lsls	r2, r3
 8003bba:	693b      	ldr	r3, [r7, #16]
 8003bbc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d018      	beq.n	8003bfe <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d108      	bne.n	8003bec <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d024      	beq.n	8003c2c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003be6:	6878      	ldr	r0, [r7, #4]
 8003be8:	4798      	blx	r3
 8003bea:	e01f      	b.n	8003c2c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d01b      	beq.n	8003c2c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003bf8:	6878      	ldr	r0, [r7, #4]
 8003bfa:	4798      	blx	r3
 8003bfc:	e016      	b.n	8003c2c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d107      	bne.n	8003c1c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	681a      	ldr	r2, [r3, #0]
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f022 0208 	bic.w	r2, r2, #8
 8003c1a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d003      	beq.n	8003c2c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c28:	6878      	ldr	r0, [r7, #4]
 8003c2a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c30:	2220      	movs	r2, #32
 8003c32:	409a      	lsls	r2, r3
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	4013      	ands	r3, r2
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	f000 808e 	beq.w	8003d5a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f003 0310 	and.w	r3, r3, #16
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	f000 8086 	beq.w	8003d5a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c52:	2220      	movs	r2, #32
 8003c54:	409a      	lsls	r2, r3
 8003c56:	693b      	ldr	r3, [r7, #16]
 8003c58:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003c60:	b2db      	uxtb	r3, r3
 8003c62:	2b05      	cmp	r3, #5
 8003c64:	d136      	bne.n	8003cd4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	681a      	ldr	r2, [r3, #0]
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f022 0216 	bic.w	r2, r2, #22
 8003c74:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	695a      	ldr	r2, [r3, #20]
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003c84:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d103      	bne.n	8003c96 <HAL_DMA_IRQHandler+0x1da>
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d007      	beq.n	8003ca6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	681a      	ldr	r2, [r3, #0]
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f022 0208 	bic.w	r2, r2, #8
 8003ca4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003caa:	223f      	movs	r2, #63	; 0x3f
 8003cac:	409a      	lsls	r2, r3
 8003cae:	693b      	ldr	r3, [r7, #16]
 8003cb0:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	2201      	movs	r2, #1
 8003cbe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d07d      	beq.n	8003dc6 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003cce:	6878      	ldr	r0, [r7, #4]
 8003cd0:	4798      	blx	r3
        }
        return;
 8003cd2:	e078      	b.n	8003dc6 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d01c      	beq.n	8003d1c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d108      	bne.n	8003d02 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d030      	beq.n	8003d5a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cfc:	6878      	ldr	r0, [r7, #4]
 8003cfe:	4798      	blx	r3
 8003d00:	e02b      	b.n	8003d5a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d027      	beq.n	8003d5a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d0e:	6878      	ldr	r0, [r7, #4]
 8003d10:	4798      	blx	r3
 8003d12:	e022      	b.n	8003d5a <HAL_DMA_IRQHandler+0x29e>
 8003d14:	20000010 	.word	0x20000010
 8003d18:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d10f      	bne.n	8003d4a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	681a      	ldr	r2, [r3, #0]
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f022 0210 	bic.w	r2, r2, #16
 8003d38:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	2201      	movs	r2, #1
 8003d46:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d003      	beq.n	8003d5a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d56:	6878      	ldr	r0, [r7, #4]
 8003d58:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d032      	beq.n	8003dc8 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d66:	f003 0301 	and.w	r3, r3, #1
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d022      	beq.n	8003db4 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	2205      	movs	r2, #5
 8003d72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	681a      	ldr	r2, [r3, #0]
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f022 0201 	bic.w	r2, r2, #1
 8003d84:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003d86:	68bb      	ldr	r3, [r7, #8]
 8003d88:	3301      	adds	r3, #1
 8003d8a:	60bb      	str	r3, [r7, #8]
 8003d8c:	697a      	ldr	r2, [r7, #20]
 8003d8e:	429a      	cmp	r2, r3
 8003d90:	d307      	bcc.n	8003da2 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f003 0301 	and.w	r3, r3, #1
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d1f2      	bne.n	8003d86 <HAL_DMA_IRQHandler+0x2ca>
 8003da0:	e000      	b.n	8003da4 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8003da2:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2200      	movs	r2, #0
 8003da8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2201      	movs	r2, #1
 8003db0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d005      	beq.n	8003dc8 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003dc0:	6878      	ldr	r0, [r7, #4]
 8003dc2:	4798      	blx	r3
 8003dc4:	e000      	b.n	8003dc8 <HAL_DMA_IRQHandler+0x30c>
        return;
 8003dc6:	bf00      	nop
    }
  }
}
 8003dc8:	3718      	adds	r7, #24
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	bd80      	pop	{r7, pc}
 8003dce:	bf00      	nop

08003dd0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003dd0:	b480      	push	{r7}
 8003dd2:	b085      	sub	sp, #20
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	60f8      	str	r0, [r7, #12]
 8003dd8:	60b9      	str	r1, [r7, #8]
 8003dda:	607a      	str	r2, [r7, #4]
 8003ddc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	681a      	ldr	r2, [r3, #0]
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003dec:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	683a      	ldr	r2, [r7, #0]
 8003df4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	689b      	ldr	r3, [r3, #8]
 8003dfa:	2b40      	cmp	r3, #64	; 0x40
 8003dfc:	d108      	bne.n	8003e10 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	687a      	ldr	r2, [r7, #4]
 8003e04:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	68ba      	ldr	r2, [r7, #8]
 8003e0c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003e0e:	e007      	b.n	8003e20 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	68ba      	ldr	r2, [r7, #8]
 8003e16:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	687a      	ldr	r2, [r7, #4]
 8003e1e:	60da      	str	r2, [r3, #12]
}
 8003e20:	bf00      	nop
 8003e22:	3714      	adds	r7, #20
 8003e24:	46bd      	mov	sp, r7
 8003e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2a:	4770      	bx	lr

08003e2c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003e2c:	b480      	push	{r7}
 8003e2e:	b085      	sub	sp, #20
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	b2db      	uxtb	r3, r3
 8003e3a:	3b10      	subs	r3, #16
 8003e3c:	4a14      	ldr	r2, [pc, #80]	; (8003e90 <DMA_CalcBaseAndBitshift+0x64>)
 8003e3e:	fba2 2303 	umull	r2, r3, r2, r3
 8003e42:	091b      	lsrs	r3, r3, #4
 8003e44:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003e46:	4a13      	ldr	r2, [pc, #76]	; (8003e94 <DMA_CalcBaseAndBitshift+0x68>)
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	4413      	add	r3, r2
 8003e4c:	781b      	ldrb	r3, [r3, #0]
 8003e4e:	461a      	mov	r2, r3
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	2b03      	cmp	r3, #3
 8003e58:	d909      	bls.n	8003e6e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003e62:	f023 0303 	bic.w	r3, r3, #3
 8003e66:	1d1a      	adds	r2, r3, #4
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	659a      	str	r2, [r3, #88]	; 0x58
 8003e6c:	e007      	b.n	8003e7e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003e76:	f023 0303 	bic.w	r3, r3, #3
 8003e7a:	687a      	ldr	r2, [r7, #4]
 8003e7c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003e82:	4618      	mov	r0, r3
 8003e84:	3714      	adds	r7, #20
 8003e86:	46bd      	mov	sp, r7
 8003e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8c:	4770      	bx	lr
 8003e8e:	bf00      	nop
 8003e90:	aaaaaaab 	.word	0xaaaaaaab
 8003e94:	080075bc 	.word	0x080075bc

08003e98 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003e98:	b480      	push	{r7}
 8003e9a:	b085      	sub	sp, #20
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003ea0:	2300      	movs	r3, #0
 8003ea2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ea8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	699b      	ldr	r3, [r3, #24]
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d11f      	bne.n	8003ef2 <DMA_CheckFifoParam+0x5a>
 8003eb2:	68bb      	ldr	r3, [r7, #8]
 8003eb4:	2b03      	cmp	r3, #3
 8003eb6:	d856      	bhi.n	8003f66 <DMA_CheckFifoParam+0xce>
 8003eb8:	a201      	add	r2, pc, #4	; (adr r2, 8003ec0 <DMA_CheckFifoParam+0x28>)
 8003eba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ebe:	bf00      	nop
 8003ec0:	08003ed1 	.word	0x08003ed1
 8003ec4:	08003ee3 	.word	0x08003ee3
 8003ec8:	08003ed1 	.word	0x08003ed1
 8003ecc:	08003f67 	.word	0x08003f67
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ed4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d046      	beq.n	8003f6a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003edc:	2301      	movs	r3, #1
 8003ede:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003ee0:	e043      	b.n	8003f6a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ee6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003eea:	d140      	bne.n	8003f6e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003eec:	2301      	movs	r3, #1
 8003eee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003ef0:	e03d      	b.n	8003f6e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	699b      	ldr	r3, [r3, #24]
 8003ef6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003efa:	d121      	bne.n	8003f40 <DMA_CheckFifoParam+0xa8>
 8003efc:	68bb      	ldr	r3, [r7, #8]
 8003efe:	2b03      	cmp	r3, #3
 8003f00:	d837      	bhi.n	8003f72 <DMA_CheckFifoParam+0xda>
 8003f02:	a201      	add	r2, pc, #4	; (adr r2, 8003f08 <DMA_CheckFifoParam+0x70>)
 8003f04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f08:	08003f19 	.word	0x08003f19
 8003f0c:	08003f1f 	.word	0x08003f1f
 8003f10:	08003f19 	.word	0x08003f19
 8003f14:	08003f31 	.word	0x08003f31
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003f18:	2301      	movs	r3, #1
 8003f1a:	73fb      	strb	r3, [r7, #15]
      break;
 8003f1c:	e030      	b.n	8003f80 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f22:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d025      	beq.n	8003f76 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003f2a:	2301      	movs	r3, #1
 8003f2c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003f2e:	e022      	b.n	8003f76 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f34:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003f38:	d11f      	bne.n	8003f7a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003f3a:	2301      	movs	r3, #1
 8003f3c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003f3e:	e01c      	b.n	8003f7a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003f40:	68bb      	ldr	r3, [r7, #8]
 8003f42:	2b02      	cmp	r3, #2
 8003f44:	d903      	bls.n	8003f4e <DMA_CheckFifoParam+0xb6>
 8003f46:	68bb      	ldr	r3, [r7, #8]
 8003f48:	2b03      	cmp	r3, #3
 8003f4a:	d003      	beq.n	8003f54 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003f4c:	e018      	b.n	8003f80 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003f4e:	2301      	movs	r3, #1
 8003f50:	73fb      	strb	r3, [r7, #15]
      break;
 8003f52:	e015      	b.n	8003f80 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f58:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d00e      	beq.n	8003f7e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003f60:	2301      	movs	r3, #1
 8003f62:	73fb      	strb	r3, [r7, #15]
      break;
 8003f64:	e00b      	b.n	8003f7e <DMA_CheckFifoParam+0xe6>
      break;
 8003f66:	bf00      	nop
 8003f68:	e00a      	b.n	8003f80 <DMA_CheckFifoParam+0xe8>
      break;
 8003f6a:	bf00      	nop
 8003f6c:	e008      	b.n	8003f80 <DMA_CheckFifoParam+0xe8>
      break;
 8003f6e:	bf00      	nop
 8003f70:	e006      	b.n	8003f80 <DMA_CheckFifoParam+0xe8>
      break;
 8003f72:	bf00      	nop
 8003f74:	e004      	b.n	8003f80 <DMA_CheckFifoParam+0xe8>
      break;
 8003f76:	bf00      	nop
 8003f78:	e002      	b.n	8003f80 <DMA_CheckFifoParam+0xe8>
      break;   
 8003f7a:	bf00      	nop
 8003f7c:	e000      	b.n	8003f80 <DMA_CheckFifoParam+0xe8>
      break;
 8003f7e:	bf00      	nop
    }
  } 
  
  return status; 
 8003f80:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f82:	4618      	mov	r0, r3
 8003f84:	3714      	adds	r7, #20
 8003f86:	46bd      	mov	sp, r7
 8003f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8c:	4770      	bx	lr
 8003f8e:	bf00      	nop

08003f90 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003f90:	b480      	push	{r7}
 8003f92:	b089      	sub	sp, #36	; 0x24
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	6078      	str	r0, [r7, #4]
 8003f98:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003f9a:	2300      	movs	r3, #0
 8003f9c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003f9e:	2300      	movs	r3, #0
 8003fa0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003fa2:	2300      	movs	r3, #0
 8003fa4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003fa6:	2300      	movs	r3, #0
 8003fa8:	61fb      	str	r3, [r7, #28]
 8003faa:	e159      	b.n	8004260 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003fac:	2201      	movs	r2, #1
 8003fae:	69fb      	ldr	r3, [r7, #28]
 8003fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8003fb4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003fb6:	683b      	ldr	r3, [r7, #0]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	697a      	ldr	r2, [r7, #20]
 8003fbc:	4013      	ands	r3, r2
 8003fbe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003fc0:	693a      	ldr	r2, [r7, #16]
 8003fc2:	697b      	ldr	r3, [r7, #20]
 8003fc4:	429a      	cmp	r2, r3
 8003fc6:	f040 8148 	bne.w	800425a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003fca:	683b      	ldr	r3, [r7, #0]
 8003fcc:	685b      	ldr	r3, [r3, #4]
 8003fce:	2b01      	cmp	r3, #1
 8003fd0:	d00b      	beq.n	8003fea <HAL_GPIO_Init+0x5a>
 8003fd2:	683b      	ldr	r3, [r7, #0]
 8003fd4:	685b      	ldr	r3, [r3, #4]
 8003fd6:	2b02      	cmp	r3, #2
 8003fd8:	d007      	beq.n	8003fea <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003fda:	683b      	ldr	r3, [r7, #0]
 8003fdc:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003fde:	2b11      	cmp	r3, #17
 8003fe0:	d003      	beq.n	8003fea <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003fe2:	683b      	ldr	r3, [r7, #0]
 8003fe4:	685b      	ldr	r3, [r3, #4]
 8003fe6:	2b12      	cmp	r3, #18
 8003fe8:	d130      	bne.n	800404c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	689b      	ldr	r3, [r3, #8]
 8003fee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003ff0:	69fb      	ldr	r3, [r7, #28]
 8003ff2:	005b      	lsls	r3, r3, #1
 8003ff4:	2203      	movs	r2, #3
 8003ff6:	fa02 f303 	lsl.w	r3, r2, r3
 8003ffa:	43db      	mvns	r3, r3
 8003ffc:	69ba      	ldr	r2, [r7, #24]
 8003ffe:	4013      	ands	r3, r2
 8004000:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004002:	683b      	ldr	r3, [r7, #0]
 8004004:	68da      	ldr	r2, [r3, #12]
 8004006:	69fb      	ldr	r3, [r7, #28]
 8004008:	005b      	lsls	r3, r3, #1
 800400a:	fa02 f303 	lsl.w	r3, r2, r3
 800400e:	69ba      	ldr	r2, [r7, #24]
 8004010:	4313      	orrs	r3, r2
 8004012:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	69ba      	ldr	r2, [r7, #24]
 8004018:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	685b      	ldr	r3, [r3, #4]
 800401e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004020:	2201      	movs	r2, #1
 8004022:	69fb      	ldr	r3, [r7, #28]
 8004024:	fa02 f303 	lsl.w	r3, r2, r3
 8004028:	43db      	mvns	r3, r3
 800402a:	69ba      	ldr	r2, [r7, #24]
 800402c:	4013      	ands	r3, r2
 800402e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8004030:	683b      	ldr	r3, [r7, #0]
 8004032:	685b      	ldr	r3, [r3, #4]
 8004034:	091b      	lsrs	r3, r3, #4
 8004036:	f003 0201 	and.w	r2, r3, #1
 800403a:	69fb      	ldr	r3, [r7, #28]
 800403c:	fa02 f303 	lsl.w	r3, r2, r3
 8004040:	69ba      	ldr	r2, [r7, #24]
 8004042:	4313      	orrs	r3, r2
 8004044:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	69ba      	ldr	r2, [r7, #24]
 800404a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	68db      	ldr	r3, [r3, #12]
 8004050:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004052:	69fb      	ldr	r3, [r7, #28]
 8004054:	005b      	lsls	r3, r3, #1
 8004056:	2203      	movs	r2, #3
 8004058:	fa02 f303 	lsl.w	r3, r2, r3
 800405c:	43db      	mvns	r3, r3
 800405e:	69ba      	ldr	r2, [r7, #24]
 8004060:	4013      	ands	r3, r2
 8004062:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004064:	683b      	ldr	r3, [r7, #0]
 8004066:	689a      	ldr	r2, [r3, #8]
 8004068:	69fb      	ldr	r3, [r7, #28]
 800406a:	005b      	lsls	r3, r3, #1
 800406c:	fa02 f303 	lsl.w	r3, r2, r3
 8004070:	69ba      	ldr	r2, [r7, #24]
 8004072:	4313      	orrs	r3, r2
 8004074:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	69ba      	ldr	r2, [r7, #24]
 800407a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800407c:	683b      	ldr	r3, [r7, #0]
 800407e:	685b      	ldr	r3, [r3, #4]
 8004080:	2b02      	cmp	r3, #2
 8004082:	d003      	beq.n	800408c <HAL_GPIO_Init+0xfc>
 8004084:	683b      	ldr	r3, [r7, #0]
 8004086:	685b      	ldr	r3, [r3, #4]
 8004088:	2b12      	cmp	r3, #18
 800408a:	d123      	bne.n	80040d4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800408c:	69fb      	ldr	r3, [r7, #28]
 800408e:	08da      	lsrs	r2, r3, #3
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	3208      	adds	r2, #8
 8004094:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004098:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800409a:	69fb      	ldr	r3, [r7, #28]
 800409c:	f003 0307 	and.w	r3, r3, #7
 80040a0:	009b      	lsls	r3, r3, #2
 80040a2:	220f      	movs	r2, #15
 80040a4:	fa02 f303 	lsl.w	r3, r2, r3
 80040a8:	43db      	mvns	r3, r3
 80040aa:	69ba      	ldr	r2, [r7, #24]
 80040ac:	4013      	ands	r3, r2
 80040ae:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80040b0:	683b      	ldr	r3, [r7, #0]
 80040b2:	691a      	ldr	r2, [r3, #16]
 80040b4:	69fb      	ldr	r3, [r7, #28]
 80040b6:	f003 0307 	and.w	r3, r3, #7
 80040ba:	009b      	lsls	r3, r3, #2
 80040bc:	fa02 f303 	lsl.w	r3, r2, r3
 80040c0:	69ba      	ldr	r2, [r7, #24]
 80040c2:	4313      	orrs	r3, r2
 80040c4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80040c6:	69fb      	ldr	r3, [r7, #28]
 80040c8:	08da      	lsrs	r2, r3, #3
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	3208      	adds	r2, #8
 80040ce:	69b9      	ldr	r1, [r7, #24]
 80040d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80040da:	69fb      	ldr	r3, [r7, #28]
 80040dc:	005b      	lsls	r3, r3, #1
 80040de:	2203      	movs	r2, #3
 80040e0:	fa02 f303 	lsl.w	r3, r2, r3
 80040e4:	43db      	mvns	r3, r3
 80040e6:	69ba      	ldr	r2, [r7, #24]
 80040e8:	4013      	ands	r3, r2
 80040ea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80040ec:	683b      	ldr	r3, [r7, #0]
 80040ee:	685b      	ldr	r3, [r3, #4]
 80040f0:	f003 0203 	and.w	r2, r3, #3
 80040f4:	69fb      	ldr	r3, [r7, #28]
 80040f6:	005b      	lsls	r3, r3, #1
 80040f8:	fa02 f303 	lsl.w	r3, r2, r3
 80040fc:	69ba      	ldr	r2, [r7, #24]
 80040fe:	4313      	orrs	r3, r2
 8004100:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	69ba      	ldr	r2, [r7, #24]
 8004106:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004108:	683b      	ldr	r3, [r7, #0]
 800410a:	685b      	ldr	r3, [r3, #4]
 800410c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004110:	2b00      	cmp	r3, #0
 8004112:	f000 80a2 	beq.w	800425a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004116:	2300      	movs	r3, #0
 8004118:	60fb      	str	r3, [r7, #12]
 800411a:	4b57      	ldr	r3, [pc, #348]	; (8004278 <HAL_GPIO_Init+0x2e8>)
 800411c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800411e:	4a56      	ldr	r2, [pc, #344]	; (8004278 <HAL_GPIO_Init+0x2e8>)
 8004120:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004124:	6453      	str	r3, [r2, #68]	; 0x44
 8004126:	4b54      	ldr	r3, [pc, #336]	; (8004278 <HAL_GPIO_Init+0x2e8>)
 8004128:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800412a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800412e:	60fb      	str	r3, [r7, #12]
 8004130:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004132:	4a52      	ldr	r2, [pc, #328]	; (800427c <HAL_GPIO_Init+0x2ec>)
 8004134:	69fb      	ldr	r3, [r7, #28]
 8004136:	089b      	lsrs	r3, r3, #2
 8004138:	3302      	adds	r3, #2
 800413a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800413e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004140:	69fb      	ldr	r3, [r7, #28]
 8004142:	f003 0303 	and.w	r3, r3, #3
 8004146:	009b      	lsls	r3, r3, #2
 8004148:	220f      	movs	r2, #15
 800414a:	fa02 f303 	lsl.w	r3, r2, r3
 800414e:	43db      	mvns	r3, r3
 8004150:	69ba      	ldr	r2, [r7, #24]
 8004152:	4013      	ands	r3, r2
 8004154:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	4a49      	ldr	r2, [pc, #292]	; (8004280 <HAL_GPIO_Init+0x2f0>)
 800415a:	4293      	cmp	r3, r2
 800415c:	d019      	beq.n	8004192 <HAL_GPIO_Init+0x202>
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	4a48      	ldr	r2, [pc, #288]	; (8004284 <HAL_GPIO_Init+0x2f4>)
 8004162:	4293      	cmp	r3, r2
 8004164:	d013      	beq.n	800418e <HAL_GPIO_Init+0x1fe>
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	4a47      	ldr	r2, [pc, #284]	; (8004288 <HAL_GPIO_Init+0x2f8>)
 800416a:	4293      	cmp	r3, r2
 800416c:	d00d      	beq.n	800418a <HAL_GPIO_Init+0x1fa>
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	4a46      	ldr	r2, [pc, #280]	; (800428c <HAL_GPIO_Init+0x2fc>)
 8004172:	4293      	cmp	r3, r2
 8004174:	d007      	beq.n	8004186 <HAL_GPIO_Init+0x1f6>
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	4a45      	ldr	r2, [pc, #276]	; (8004290 <HAL_GPIO_Init+0x300>)
 800417a:	4293      	cmp	r3, r2
 800417c:	d101      	bne.n	8004182 <HAL_GPIO_Init+0x1f2>
 800417e:	2304      	movs	r3, #4
 8004180:	e008      	b.n	8004194 <HAL_GPIO_Init+0x204>
 8004182:	2307      	movs	r3, #7
 8004184:	e006      	b.n	8004194 <HAL_GPIO_Init+0x204>
 8004186:	2303      	movs	r3, #3
 8004188:	e004      	b.n	8004194 <HAL_GPIO_Init+0x204>
 800418a:	2302      	movs	r3, #2
 800418c:	e002      	b.n	8004194 <HAL_GPIO_Init+0x204>
 800418e:	2301      	movs	r3, #1
 8004190:	e000      	b.n	8004194 <HAL_GPIO_Init+0x204>
 8004192:	2300      	movs	r3, #0
 8004194:	69fa      	ldr	r2, [r7, #28]
 8004196:	f002 0203 	and.w	r2, r2, #3
 800419a:	0092      	lsls	r2, r2, #2
 800419c:	4093      	lsls	r3, r2
 800419e:	69ba      	ldr	r2, [r7, #24]
 80041a0:	4313      	orrs	r3, r2
 80041a2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80041a4:	4935      	ldr	r1, [pc, #212]	; (800427c <HAL_GPIO_Init+0x2ec>)
 80041a6:	69fb      	ldr	r3, [r7, #28]
 80041a8:	089b      	lsrs	r3, r3, #2
 80041aa:	3302      	adds	r3, #2
 80041ac:	69ba      	ldr	r2, [r7, #24]
 80041ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80041b2:	4b38      	ldr	r3, [pc, #224]	; (8004294 <HAL_GPIO_Init+0x304>)
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80041b8:	693b      	ldr	r3, [r7, #16]
 80041ba:	43db      	mvns	r3, r3
 80041bc:	69ba      	ldr	r2, [r7, #24]
 80041be:	4013      	ands	r3, r2
 80041c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80041c2:	683b      	ldr	r3, [r7, #0]
 80041c4:	685b      	ldr	r3, [r3, #4]
 80041c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d003      	beq.n	80041d6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80041ce:	69ba      	ldr	r2, [r7, #24]
 80041d0:	693b      	ldr	r3, [r7, #16]
 80041d2:	4313      	orrs	r3, r2
 80041d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80041d6:	4a2f      	ldr	r2, [pc, #188]	; (8004294 <HAL_GPIO_Init+0x304>)
 80041d8:	69bb      	ldr	r3, [r7, #24]
 80041da:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80041dc:	4b2d      	ldr	r3, [pc, #180]	; (8004294 <HAL_GPIO_Init+0x304>)
 80041de:	685b      	ldr	r3, [r3, #4]
 80041e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80041e2:	693b      	ldr	r3, [r7, #16]
 80041e4:	43db      	mvns	r3, r3
 80041e6:	69ba      	ldr	r2, [r7, #24]
 80041e8:	4013      	ands	r3, r2
 80041ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80041ec:	683b      	ldr	r3, [r7, #0]
 80041ee:	685b      	ldr	r3, [r3, #4]
 80041f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d003      	beq.n	8004200 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80041f8:	69ba      	ldr	r2, [r7, #24]
 80041fa:	693b      	ldr	r3, [r7, #16]
 80041fc:	4313      	orrs	r3, r2
 80041fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004200:	4a24      	ldr	r2, [pc, #144]	; (8004294 <HAL_GPIO_Init+0x304>)
 8004202:	69bb      	ldr	r3, [r7, #24]
 8004204:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004206:	4b23      	ldr	r3, [pc, #140]	; (8004294 <HAL_GPIO_Init+0x304>)
 8004208:	689b      	ldr	r3, [r3, #8]
 800420a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800420c:	693b      	ldr	r3, [r7, #16]
 800420e:	43db      	mvns	r3, r3
 8004210:	69ba      	ldr	r2, [r7, #24]
 8004212:	4013      	ands	r3, r2
 8004214:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004216:	683b      	ldr	r3, [r7, #0]
 8004218:	685b      	ldr	r3, [r3, #4]
 800421a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800421e:	2b00      	cmp	r3, #0
 8004220:	d003      	beq.n	800422a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8004222:	69ba      	ldr	r2, [r7, #24]
 8004224:	693b      	ldr	r3, [r7, #16]
 8004226:	4313      	orrs	r3, r2
 8004228:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800422a:	4a1a      	ldr	r2, [pc, #104]	; (8004294 <HAL_GPIO_Init+0x304>)
 800422c:	69bb      	ldr	r3, [r7, #24]
 800422e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004230:	4b18      	ldr	r3, [pc, #96]	; (8004294 <HAL_GPIO_Init+0x304>)
 8004232:	68db      	ldr	r3, [r3, #12]
 8004234:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004236:	693b      	ldr	r3, [r7, #16]
 8004238:	43db      	mvns	r3, r3
 800423a:	69ba      	ldr	r2, [r7, #24]
 800423c:	4013      	ands	r3, r2
 800423e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004240:	683b      	ldr	r3, [r7, #0]
 8004242:	685b      	ldr	r3, [r3, #4]
 8004244:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004248:	2b00      	cmp	r3, #0
 800424a:	d003      	beq.n	8004254 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800424c:	69ba      	ldr	r2, [r7, #24]
 800424e:	693b      	ldr	r3, [r7, #16]
 8004250:	4313      	orrs	r3, r2
 8004252:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004254:	4a0f      	ldr	r2, [pc, #60]	; (8004294 <HAL_GPIO_Init+0x304>)
 8004256:	69bb      	ldr	r3, [r7, #24]
 8004258:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800425a:	69fb      	ldr	r3, [r7, #28]
 800425c:	3301      	adds	r3, #1
 800425e:	61fb      	str	r3, [r7, #28]
 8004260:	69fb      	ldr	r3, [r7, #28]
 8004262:	2b0f      	cmp	r3, #15
 8004264:	f67f aea2 	bls.w	8003fac <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004268:	bf00      	nop
 800426a:	bf00      	nop
 800426c:	3724      	adds	r7, #36	; 0x24
 800426e:	46bd      	mov	sp, r7
 8004270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004274:	4770      	bx	lr
 8004276:	bf00      	nop
 8004278:	40023800 	.word	0x40023800
 800427c:	40013800 	.word	0x40013800
 8004280:	40020000 	.word	0x40020000
 8004284:	40020400 	.word	0x40020400
 8004288:	40020800 	.word	0x40020800
 800428c:	40020c00 	.word	0x40020c00
 8004290:	40021000 	.word	0x40021000
 8004294:	40013c00 	.word	0x40013c00

08004298 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004298:	b480      	push	{r7}
 800429a:	b085      	sub	sp, #20
 800429c:	af00      	add	r7, sp, #0
 800429e:	6078      	str	r0, [r7, #4]
 80042a0:	460b      	mov	r3, r1
 80042a2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	691a      	ldr	r2, [r3, #16]
 80042a8:	887b      	ldrh	r3, [r7, #2]
 80042aa:	4013      	ands	r3, r2
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d002      	beq.n	80042b6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80042b0:	2301      	movs	r3, #1
 80042b2:	73fb      	strb	r3, [r7, #15]
 80042b4:	e001      	b.n	80042ba <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80042b6:	2300      	movs	r3, #0
 80042b8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80042ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80042bc:	4618      	mov	r0, r3
 80042be:	3714      	adds	r7, #20
 80042c0:	46bd      	mov	sp, r7
 80042c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c6:	4770      	bx	lr

080042c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80042c8:	b480      	push	{r7}
 80042ca:	b083      	sub	sp, #12
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]
 80042d0:	460b      	mov	r3, r1
 80042d2:	807b      	strh	r3, [r7, #2]
 80042d4:	4613      	mov	r3, r2
 80042d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80042d8:	787b      	ldrb	r3, [r7, #1]
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d003      	beq.n	80042e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80042de:	887a      	ldrh	r2, [r7, #2]
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80042e4:	e003      	b.n	80042ee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80042e6:	887b      	ldrh	r3, [r7, #2]
 80042e8:	041a      	lsls	r2, r3, #16
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	619a      	str	r2, [r3, #24]
}
 80042ee:	bf00      	nop
 80042f0:	370c      	adds	r7, #12
 80042f2:	46bd      	mov	sp, r7
 80042f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f8:	4770      	bx	lr
	...

080042fc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80042fc:	b580      	push	{r7, lr}
 80042fe:	b086      	sub	sp, #24
 8004300:	af00      	add	r7, sp, #0
 8004302:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2b00      	cmp	r3, #0
 8004308:	d101      	bne.n	800430e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800430a:	2301      	movs	r3, #1
 800430c:	e25b      	b.n	80047c6 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f003 0301 	and.w	r3, r3, #1
 8004316:	2b00      	cmp	r3, #0
 8004318:	d075      	beq.n	8004406 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800431a:	4ba3      	ldr	r3, [pc, #652]	; (80045a8 <HAL_RCC_OscConfig+0x2ac>)
 800431c:	689b      	ldr	r3, [r3, #8]
 800431e:	f003 030c 	and.w	r3, r3, #12
 8004322:	2b04      	cmp	r3, #4
 8004324:	d00c      	beq.n	8004340 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004326:	4ba0      	ldr	r3, [pc, #640]	; (80045a8 <HAL_RCC_OscConfig+0x2ac>)
 8004328:	689b      	ldr	r3, [r3, #8]
 800432a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800432e:	2b08      	cmp	r3, #8
 8004330:	d112      	bne.n	8004358 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004332:	4b9d      	ldr	r3, [pc, #628]	; (80045a8 <HAL_RCC_OscConfig+0x2ac>)
 8004334:	685b      	ldr	r3, [r3, #4]
 8004336:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800433a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800433e:	d10b      	bne.n	8004358 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004340:	4b99      	ldr	r3, [pc, #612]	; (80045a8 <HAL_RCC_OscConfig+0x2ac>)
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004348:	2b00      	cmp	r3, #0
 800434a:	d05b      	beq.n	8004404 <HAL_RCC_OscConfig+0x108>
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	685b      	ldr	r3, [r3, #4]
 8004350:	2b00      	cmp	r3, #0
 8004352:	d157      	bne.n	8004404 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004354:	2301      	movs	r3, #1
 8004356:	e236      	b.n	80047c6 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	685b      	ldr	r3, [r3, #4]
 800435c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004360:	d106      	bne.n	8004370 <HAL_RCC_OscConfig+0x74>
 8004362:	4b91      	ldr	r3, [pc, #580]	; (80045a8 <HAL_RCC_OscConfig+0x2ac>)
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	4a90      	ldr	r2, [pc, #576]	; (80045a8 <HAL_RCC_OscConfig+0x2ac>)
 8004368:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800436c:	6013      	str	r3, [r2, #0]
 800436e:	e01d      	b.n	80043ac <HAL_RCC_OscConfig+0xb0>
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	685b      	ldr	r3, [r3, #4]
 8004374:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004378:	d10c      	bne.n	8004394 <HAL_RCC_OscConfig+0x98>
 800437a:	4b8b      	ldr	r3, [pc, #556]	; (80045a8 <HAL_RCC_OscConfig+0x2ac>)
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	4a8a      	ldr	r2, [pc, #552]	; (80045a8 <HAL_RCC_OscConfig+0x2ac>)
 8004380:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004384:	6013      	str	r3, [r2, #0]
 8004386:	4b88      	ldr	r3, [pc, #544]	; (80045a8 <HAL_RCC_OscConfig+0x2ac>)
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	4a87      	ldr	r2, [pc, #540]	; (80045a8 <HAL_RCC_OscConfig+0x2ac>)
 800438c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004390:	6013      	str	r3, [r2, #0]
 8004392:	e00b      	b.n	80043ac <HAL_RCC_OscConfig+0xb0>
 8004394:	4b84      	ldr	r3, [pc, #528]	; (80045a8 <HAL_RCC_OscConfig+0x2ac>)
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	4a83      	ldr	r2, [pc, #524]	; (80045a8 <HAL_RCC_OscConfig+0x2ac>)
 800439a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800439e:	6013      	str	r3, [r2, #0]
 80043a0:	4b81      	ldr	r3, [pc, #516]	; (80045a8 <HAL_RCC_OscConfig+0x2ac>)
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	4a80      	ldr	r2, [pc, #512]	; (80045a8 <HAL_RCC_OscConfig+0x2ac>)
 80043a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80043aa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	685b      	ldr	r3, [r3, #4]
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d013      	beq.n	80043dc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043b4:	f7fe fc02 	bl	8002bbc <HAL_GetTick>
 80043b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80043ba:	e008      	b.n	80043ce <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80043bc:	f7fe fbfe 	bl	8002bbc <HAL_GetTick>
 80043c0:	4602      	mov	r2, r0
 80043c2:	693b      	ldr	r3, [r7, #16]
 80043c4:	1ad3      	subs	r3, r2, r3
 80043c6:	2b64      	cmp	r3, #100	; 0x64
 80043c8:	d901      	bls.n	80043ce <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80043ca:	2303      	movs	r3, #3
 80043cc:	e1fb      	b.n	80047c6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80043ce:	4b76      	ldr	r3, [pc, #472]	; (80045a8 <HAL_RCC_OscConfig+0x2ac>)
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d0f0      	beq.n	80043bc <HAL_RCC_OscConfig+0xc0>
 80043da:	e014      	b.n	8004406 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043dc:	f7fe fbee 	bl	8002bbc <HAL_GetTick>
 80043e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80043e2:	e008      	b.n	80043f6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80043e4:	f7fe fbea 	bl	8002bbc <HAL_GetTick>
 80043e8:	4602      	mov	r2, r0
 80043ea:	693b      	ldr	r3, [r7, #16]
 80043ec:	1ad3      	subs	r3, r2, r3
 80043ee:	2b64      	cmp	r3, #100	; 0x64
 80043f0:	d901      	bls.n	80043f6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80043f2:	2303      	movs	r3, #3
 80043f4:	e1e7      	b.n	80047c6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80043f6:	4b6c      	ldr	r3, [pc, #432]	; (80045a8 <HAL_RCC_OscConfig+0x2ac>)
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d1f0      	bne.n	80043e4 <HAL_RCC_OscConfig+0xe8>
 8004402:	e000      	b.n	8004406 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004404:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f003 0302 	and.w	r3, r3, #2
 800440e:	2b00      	cmp	r3, #0
 8004410:	d063      	beq.n	80044da <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004412:	4b65      	ldr	r3, [pc, #404]	; (80045a8 <HAL_RCC_OscConfig+0x2ac>)
 8004414:	689b      	ldr	r3, [r3, #8]
 8004416:	f003 030c 	and.w	r3, r3, #12
 800441a:	2b00      	cmp	r3, #0
 800441c:	d00b      	beq.n	8004436 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800441e:	4b62      	ldr	r3, [pc, #392]	; (80045a8 <HAL_RCC_OscConfig+0x2ac>)
 8004420:	689b      	ldr	r3, [r3, #8]
 8004422:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004426:	2b08      	cmp	r3, #8
 8004428:	d11c      	bne.n	8004464 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800442a:	4b5f      	ldr	r3, [pc, #380]	; (80045a8 <HAL_RCC_OscConfig+0x2ac>)
 800442c:	685b      	ldr	r3, [r3, #4]
 800442e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004432:	2b00      	cmp	r3, #0
 8004434:	d116      	bne.n	8004464 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004436:	4b5c      	ldr	r3, [pc, #368]	; (80045a8 <HAL_RCC_OscConfig+0x2ac>)
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f003 0302 	and.w	r3, r3, #2
 800443e:	2b00      	cmp	r3, #0
 8004440:	d005      	beq.n	800444e <HAL_RCC_OscConfig+0x152>
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	68db      	ldr	r3, [r3, #12]
 8004446:	2b01      	cmp	r3, #1
 8004448:	d001      	beq.n	800444e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800444a:	2301      	movs	r3, #1
 800444c:	e1bb      	b.n	80047c6 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800444e:	4b56      	ldr	r3, [pc, #344]	; (80045a8 <HAL_RCC_OscConfig+0x2ac>)
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	691b      	ldr	r3, [r3, #16]
 800445a:	00db      	lsls	r3, r3, #3
 800445c:	4952      	ldr	r1, [pc, #328]	; (80045a8 <HAL_RCC_OscConfig+0x2ac>)
 800445e:	4313      	orrs	r3, r2
 8004460:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004462:	e03a      	b.n	80044da <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	68db      	ldr	r3, [r3, #12]
 8004468:	2b00      	cmp	r3, #0
 800446a:	d020      	beq.n	80044ae <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800446c:	4b4f      	ldr	r3, [pc, #316]	; (80045ac <HAL_RCC_OscConfig+0x2b0>)
 800446e:	2201      	movs	r2, #1
 8004470:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004472:	f7fe fba3 	bl	8002bbc <HAL_GetTick>
 8004476:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004478:	e008      	b.n	800448c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800447a:	f7fe fb9f 	bl	8002bbc <HAL_GetTick>
 800447e:	4602      	mov	r2, r0
 8004480:	693b      	ldr	r3, [r7, #16]
 8004482:	1ad3      	subs	r3, r2, r3
 8004484:	2b02      	cmp	r3, #2
 8004486:	d901      	bls.n	800448c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004488:	2303      	movs	r3, #3
 800448a:	e19c      	b.n	80047c6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800448c:	4b46      	ldr	r3, [pc, #280]	; (80045a8 <HAL_RCC_OscConfig+0x2ac>)
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f003 0302 	and.w	r3, r3, #2
 8004494:	2b00      	cmp	r3, #0
 8004496:	d0f0      	beq.n	800447a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004498:	4b43      	ldr	r3, [pc, #268]	; (80045a8 <HAL_RCC_OscConfig+0x2ac>)
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	691b      	ldr	r3, [r3, #16]
 80044a4:	00db      	lsls	r3, r3, #3
 80044a6:	4940      	ldr	r1, [pc, #256]	; (80045a8 <HAL_RCC_OscConfig+0x2ac>)
 80044a8:	4313      	orrs	r3, r2
 80044aa:	600b      	str	r3, [r1, #0]
 80044ac:	e015      	b.n	80044da <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80044ae:	4b3f      	ldr	r3, [pc, #252]	; (80045ac <HAL_RCC_OscConfig+0x2b0>)
 80044b0:	2200      	movs	r2, #0
 80044b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044b4:	f7fe fb82 	bl	8002bbc <HAL_GetTick>
 80044b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80044ba:	e008      	b.n	80044ce <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80044bc:	f7fe fb7e 	bl	8002bbc <HAL_GetTick>
 80044c0:	4602      	mov	r2, r0
 80044c2:	693b      	ldr	r3, [r7, #16]
 80044c4:	1ad3      	subs	r3, r2, r3
 80044c6:	2b02      	cmp	r3, #2
 80044c8:	d901      	bls.n	80044ce <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80044ca:	2303      	movs	r3, #3
 80044cc:	e17b      	b.n	80047c6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80044ce:	4b36      	ldr	r3, [pc, #216]	; (80045a8 <HAL_RCC_OscConfig+0x2ac>)
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f003 0302 	and.w	r3, r3, #2
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d1f0      	bne.n	80044bc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f003 0308 	and.w	r3, r3, #8
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d030      	beq.n	8004548 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	695b      	ldr	r3, [r3, #20]
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d016      	beq.n	800451c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80044ee:	4b30      	ldr	r3, [pc, #192]	; (80045b0 <HAL_RCC_OscConfig+0x2b4>)
 80044f0:	2201      	movs	r2, #1
 80044f2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044f4:	f7fe fb62 	bl	8002bbc <HAL_GetTick>
 80044f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80044fa:	e008      	b.n	800450e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80044fc:	f7fe fb5e 	bl	8002bbc <HAL_GetTick>
 8004500:	4602      	mov	r2, r0
 8004502:	693b      	ldr	r3, [r7, #16]
 8004504:	1ad3      	subs	r3, r2, r3
 8004506:	2b02      	cmp	r3, #2
 8004508:	d901      	bls.n	800450e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800450a:	2303      	movs	r3, #3
 800450c:	e15b      	b.n	80047c6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800450e:	4b26      	ldr	r3, [pc, #152]	; (80045a8 <HAL_RCC_OscConfig+0x2ac>)
 8004510:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004512:	f003 0302 	and.w	r3, r3, #2
 8004516:	2b00      	cmp	r3, #0
 8004518:	d0f0      	beq.n	80044fc <HAL_RCC_OscConfig+0x200>
 800451a:	e015      	b.n	8004548 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800451c:	4b24      	ldr	r3, [pc, #144]	; (80045b0 <HAL_RCC_OscConfig+0x2b4>)
 800451e:	2200      	movs	r2, #0
 8004520:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004522:	f7fe fb4b 	bl	8002bbc <HAL_GetTick>
 8004526:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004528:	e008      	b.n	800453c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800452a:	f7fe fb47 	bl	8002bbc <HAL_GetTick>
 800452e:	4602      	mov	r2, r0
 8004530:	693b      	ldr	r3, [r7, #16]
 8004532:	1ad3      	subs	r3, r2, r3
 8004534:	2b02      	cmp	r3, #2
 8004536:	d901      	bls.n	800453c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004538:	2303      	movs	r3, #3
 800453a:	e144      	b.n	80047c6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800453c:	4b1a      	ldr	r3, [pc, #104]	; (80045a8 <HAL_RCC_OscConfig+0x2ac>)
 800453e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004540:	f003 0302 	and.w	r3, r3, #2
 8004544:	2b00      	cmp	r3, #0
 8004546:	d1f0      	bne.n	800452a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f003 0304 	and.w	r3, r3, #4
 8004550:	2b00      	cmp	r3, #0
 8004552:	f000 80a0 	beq.w	8004696 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004556:	2300      	movs	r3, #0
 8004558:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800455a:	4b13      	ldr	r3, [pc, #76]	; (80045a8 <HAL_RCC_OscConfig+0x2ac>)
 800455c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800455e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004562:	2b00      	cmp	r3, #0
 8004564:	d10f      	bne.n	8004586 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004566:	2300      	movs	r3, #0
 8004568:	60bb      	str	r3, [r7, #8]
 800456a:	4b0f      	ldr	r3, [pc, #60]	; (80045a8 <HAL_RCC_OscConfig+0x2ac>)
 800456c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800456e:	4a0e      	ldr	r2, [pc, #56]	; (80045a8 <HAL_RCC_OscConfig+0x2ac>)
 8004570:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004574:	6413      	str	r3, [r2, #64]	; 0x40
 8004576:	4b0c      	ldr	r3, [pc, #48]	; (80045a8 <HAL_RCC_OscConfig+0x2ac>)
 8004578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800457a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800457e:	60bb      	str	r3, [r7, #8]
 8004580:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004582:	2301      	movs	r3, #1
 8004584:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004586:	4b0b      	ldr	r3, [pc, #44]	; (80045b4 <HAL_RCC_OscConfig+0x2b8>)
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800458e:	2b00      	cmp	r3, #0
 8004590:	d121      	bne.n	80045d6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004592:	4b08      	ldr	r3, [pc, #32]	; (80045b4 <HAL_RCC_OscConfig+0x2b8>)
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	4a07      	ldr	r2, [pc, #28]	; (80045b4 <HAL_RCC_OscConfig+0x2b8>)
 8004598:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800459c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800459e:	f7fe fb0d 	bl	8002bbc <HAL_GetTick>
 80045a2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045a4:	e011      	b.n	80045ca <HAL_RCC_OscConfig+0x2ce>
 80045a6:	bf00      	nop
 80045a8:	40023800 	.word	0x40023800
 80045ac:	42470000 	.word	0x42470000
 80045b0:	42470e80 	.word	0x42470e80
 80045b4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80045b8:	f7fe fb00 	bl	8002bbc <HAL_GetTick>
 80045bc:	4602      	mov	r2, r0
 80045be:	693b      	ldr	r3, [r7, #16]
 80045c0:	1ad3      	subs	r3, r2, r3
 80045c2:	2b02      	cmp	r3, #2
 80045c4:	d901      	bls.n	80045ca <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80045c6:	2303      	movs	r3, #3
 80045c8:	e0fd      	b.n	80047c6 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045ca:	4b81      	ldr	r3, [pc, #516]	; (80047d0 <HAL_RCC_OscConfig+0x4d4>)
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d0f0      	beq.n	80045b8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	689b      	ldr	r3, [r3, #8]
 80045da:	2b01      	cmp	r3, #1
 80045dc:	d106      	bne.n	80045ec <HAL_RCC_OscConfig+0x2f0>
 80045de:	4b7d      	ldr	r3, [pc, #500]	; (80047d4 <HAL_RCC_OscConfig+0x4d8>)
 80045e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045e2:	4a7c      	ldr	r2, [pc, #496]	; (80047d4 <HAL_RCC_OscConfig+0x4d8>)
 80045e4:	f043 0301 	orr.w	r3, r3, #1
 80045e8:	6713      	str	r3, [r2, #112]	; 0x70
 80045ea:	e01c      	b.n	8004626 <HAL_RCC_OscConfig+0x32a>
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	689b      	ldr	r3, [r3, #8]
 80045f0:	2b05      	cmp	r3, #5
 80045f2:	d10c      	bne.n	800460e <HAL_RCC_OscConfig+0x312>
 80045f4:	4b77      	ldr	r3, [pc, #476]	; (80047d4 <HAL_RCC_OscConfig+0x4d8>)
 80045f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045f8:	4a76      	ldr	r2, [pc, #472]	; (80047d4 <HAL_RCC_OscConfig+0x4d8>)
 80045fa:	f043 0304 	orr.w	r3, r3, #4
 80045fe:	6713      	str	r3, [r2, #112]	; 0x70
 8004600:	4b74      	ldr	r3, [pc, #464]	; (80047d4 <HAL_RCC_OscConfig+0x4d8>)
 8004602:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004604:	4a73      	ldr	r2, [pc, #460]	; (80047d4 <HAL_RCC_OscConfig+0x4d8>)
 8004606:	f043 0301 	orr.w	r3, r3, #1
 800460a:	6713      	str	r3, [r2, #112]	; 0x70
 800460c:	e00b      	b.n	8004626 <HAL_RCC_OscConfig+0x32a>
 800460e:	4b71      	ldr	r3, [pc, #452]	; (80047d4 <HAL_RCC_OscConfig+0x4d8>)
 8004610:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004612:	4a70      	ldr	r2, [pc, #448]	; (80047d4 <HAL_RCC_OscConfig+0x4d8>)
 8004614:	f023 0301 	bic.w	r3, r3, #1
 8004618:	6713      	str	r3, [r2, #112]	; 0x70
 800461a:	4b6e      	ldr	r3, [pc, #440]	; (80047d4 <HAL_RCC_OscConfig+0x4d8>)
 800461c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800461e:	4a6d      	ldr	r2, [pc, #436]	; (80047d4 <HAL_RCC_OscConfig+0x4d8>)
 8004620:	f023 0304 	bic.w	r3, r3, #4
 8004624:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	689b      	ldr	r3, [r3, #8]
 800462a:	2b00      	cmp	r3, #0
 800462c:	d015      	beq.n	800465a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800462e:	f7fe fac5 	bl	8002bbc <HAL_GetTick>
 8004632:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004634:	e00a      	b.n	800464c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004636:	f7fe fac1 	bl	8002bbc <HAL_GetTick>
 800463a:	4602      	mov	r2, r0
 800463c:	693b      	ldr	r3, [r7, #16]
 800463e:	1ad3      	subs	r3, r2, r3
 8004640:	f241 3288 	movw	r2, #5000	; 0x1388
 8004644:	4293      	cmp	r3, r2
 8004646:	d901      	bls.n	800464c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004648:	2303      	movs	r3, #3
 800464a:	e0bc      	b.n	80047c6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800464c:	4b61      	ldr	r3, [pc, #388]	; (80047d4 <HAL_RCC_OscConfig+0x4d8>)
 800464e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004650:	f003 0302 	and.w	r3, r3, #2
 8004654:	2b00      	cmp	r3, #0
 8004656:	d0ee      	beq.n	8004636 <HAL_RCC_OscConfig+0x33a>
 8004658:	e014      	b.n	8004684 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800465a:	f7fe faaf 	bl	8002bbc <HAL_GetTick>
 800465e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004660:	e00a      	b.n	8004678 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004662:	f7fe faab 	bl	8002bbc <HAL_GetTick>
 8004666:	4602      	mov	r2, r0
 8004668:	693b      	ldr	r3, [r7, #16]
 800466a:	1ad3      	subs	r3, r2, r3
 800466c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004670:	4293      	cmp	r3, r2
 8004672:	d901      	bls.n	8004678 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004674:	2303      	movs	r3, #3
 8004676:	e0a6      	b.n	80047c6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004678:	4b56      	ldr	r3, [pc, #344]	; (80047d4 <HAL_RCC_OscConfig+0x4d8>)
 800467a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800467c:	f003 0302 	and.w	r3, r3, #2
 8004680:	2b00      	cmp	r3, #0
 8004682:	d1ee      	bne.n	8004662 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004684:	7dfb      	ldrb	r3, [r7, #23]
 8004686:	2b01      	cmp	r3, #1
 8004688:	d105      	bne.n	8004696 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800468a:	4b52      	ldr	r3, [pc, #328]	; (80047d4 <HAL_RCC_OscConfig+0x4d8>)
 800468c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800468e:	4a51      	ldr	r2, [pc, #324]	; (80047d4 <HAL_RCC_OscConfig+0x4d8>)
 8004690:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004694:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	699b      	ldr	r3, [r3, #24]
 800469a:	2b00      	cmp	r3, #0
 800469c:	f000 8092 	beq.w	80047c4 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80046a0:	4b4c      	ldr	r3, [pc, #304]	; (80047d4 <HAL_RCC_OscConfig+0x4d8>)
 80046a2:	689b      	ldr	r3, [r3, #8]
 80046a4:	f003 030c 	and.w	r3, r3, #12
 80046a8:	2b08      	cmp	r3, #8
 80046aa:	d05c      	beq.n	8004766 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	699b      	ldr	r3, [r3, #24]
 80046b0:	2b02      	cmp	r3, #2
 80046b2:	d141      	bne.n	8004738 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046b4:	4b48      	ldr	r3, [pc, #288]	; (80047d8 <HAL_RCC_OscConfig+0x4dc>)
 80046b6:	2200      	movs	r2, #0
 80046b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046ba:	f7fe fa7f 	bl	8002bbc <HAL_GetTick>
 80046be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80046c0:	e008      	b.n	80046d4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80046c2:	f7fe fa7b 	bl	8002bbc <HAL_GetTick>
 80046c6:	4602      	mov	r2, r0
 80046c8:	693b      	ldr	r3, [r7, #16]
 80046ca:	1ad3      	subs	r3, r2, r3
 80046cc:	2b02      	cmp	r3, #2
 80046ce:	d901      	bls.n	80046d4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80046d0:	2303      	movs	r3, #3
 80046d2:	e078      	b.n	80047c6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80046d4:	4b3f      	ldr	r3, [pc, #252]	; (80047d4 <HAL_RCC_OscConfig+0x4d8>)
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d1f0      	bne.n	80046c2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	69da      	ldr	r2, [r3, #28]
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	6a1b      	ldr	r3, [r3, #32]
 80046e8:	431a      	orrs	r2, r3
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046ee:	019b      	lsls	r3, r3, #6
 80046f0:	431a      	orrs	r2, r3
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046f6:	085b      	lsrs	r3, r3, #1
 80046f8:	3b01      	subs	r3, #1
 80046fa:	041b      	lsls	r3, r3, #16
 80046fc:	431a      	orrs	r2, r3
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004702:	061b      	lsls	r3, r3, #24
 8004704:	4933      	ldr	r1, [pc, #204]	; (80047d4 <HAL_RCC_OscConfig+0x4d8>)
 8004706:	4313      	orrs	r3, r2
 8004708:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800470a:	4b33      	ldr	r3, [pc, #204]	; (80047d8 <HAL_RCC_OscConfig+0x4dc>)
 800470c:	2201      	movs	r2, #1
 800470e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004710:	f7fe fa54 	bl	8002bbc <HAL_GetTick>
 8004714:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004716:	e008      	b.n	800472a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004718:	f7fe fa50 	bl	8002bbc <HAL_GetTick>
 800471c:	4602      	mov	r2, r0
 800471e:	693b      	ldr	r3, [r7, #16]
 8004720:	1ad3      	subs	r3, r2, r3
 8004722:	2b02      	cmp	r3, #2
 8004724:	d901      	bls.n	800472a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004726:	2303      	movs	r3, #3
 8004728:	e04d      	b.n	80047c6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800472a:	4b2a      	ldr	r3, [pc, #168]	; (80047d4 <HAL_RCC_OscConfig+0x4d8>)
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004732:	2b00      	cmp	r3, #0
 8004734:	d0f0      	beq.n	8004718 <HAL_RCC_OscConfig+0x41c>
 8004736:	e045      	b.n	80047c4 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004738:	4b27      	ldr	r3, [pc, #156]	; (80047d8 <HAL_RCC_OscConfig+0x4dc>)
 800473a:	2200      	movs	r2, #0
 800473c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800473e:	f7fe fa3d 	bl	8002bbc <HAL_GetTick>
 8004742:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004744:	e008      	b.n	8004758 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004746:	f7fe fa39 	bl	8002bbc <HAL_GetTick>
 800474a:	4602      	mov	r2, r0
 800474c:	693b      	ldr	r3, [r7, #16]
 800474e:	1ad3      	subs	r3, r2, r3
 8004750:	2b02      	cmp	r3, #2
 8004752:	d901      	bls.n	8004758 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004754:	2303      	movs	r3, #3
 8004756:	e036      	b.n	80047c6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004758:	4b1e      	ldr	r3, [pc, #120]	; (80047d4 <HAL_RCC_OscConfig+0x4d8>)
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004760:	2b00      	cmp	r3, #0
 8004762:	d1f0      	bne.n	8004746 <HAL_RCC_OscConfig+0x44a>
 8004764:	e02e      	b.n	80047c4 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	699b      	ldr	r3, [r3, #24]
 800476a:	2b01      	cmp	r3, #1
 800476c:	d101      	bne.n	8004772 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800476e:	2301      	movs	r3, #1
 8004770:	e029      	b.n	80047c6 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004772:	4b18      	ldr	r3, [pc, #96]	; (80047d4 <HAL_RCC_OscConfig+0x4d8>)
 8004774:	685b      	ldr	r3, [r3, #4]
 8004776:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	69db      	ldr	r3, [r3, #28]
 8004782:	429a      	cmp	r2, r3
 8004784:	d11c      	bne.n	80047c0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004790:	429a      	cmp	r2, r3
 8004792:	d115      	bne.n	80047c0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004794:	68fa      	ldr	r2, [r7, #12]
 8004796:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800479a:	4013      	ands	r3, r2
 800479c:	687a      	ldr	r2, [r7, #4]
 800479e:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80047a0:	4293      	cmp	r3, r2
 80047a2:	d10d      	bne.n	80047c0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80047ae:	429a      	cmp	r2, r3
 80047b0:	d106      	bne.n	80047c0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80047bc:	429a      	cmp	r2, r3
 80047be:	d001      	beq.n	80047c4 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80047c0:	2301      	movs	r3, #1
 80047c2:	e000      	b.n	80047c6 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80047c4:	2300      	movs	r3, #0
}
 80047c6:	4618      	mov	r0, r3
 80047c8:	3718      	adds	r7, #24
 80047ca:	46bd      	mov	sp, r7
 80047cc:	bd80      	pop	{r7, pc}
 80047ce:	bf00      	nop
 80047d0:	40007000 	.word	0x40007000
 80047d4:	40023800 	.word	0x40023800
 80047d8:	42470060 	.word	0x42470060

080047dc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80047dc:	b580      	push	{r7, lr}
 80047de:	b084      	sub	sp, #16
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	6078      	str	r0, [r7, #4]
 80047e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d101      	bne.n	80047f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80047ec:	2301      	movs	r3, #1
 80047ee:	e0cc      	b.n	800498a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80047f0:	4b68      	ldr	r3, [pc, #416]	; (8004994 <HAL_RCC_ClockConfig+0x1b8>)
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f003 030f 	and.w	r3, r3, #15
 80047f8:	683a      	ldr	r2, [r7, #0]
 80047fa:	429a      	cmp	r2, r3
 80047fc:	d90c      	bls.n	8004818 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047fe:	4b65      	ldr	r3, [pc, #404]	; (8004994 <HAL_RCC_ClockConfig+0x1b8>)
 8004800:	683a      	ldr	r2, [r7, #0]
 8004802:	b2d2      	uxtb	r2, r2
 8004804:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004806:	4b63      	ldr	r3, [pc, #396]	; (8004994 <HAL_RCC_ClockConfig+0x1b8>)
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f003 030f 	and.w	r3, r3, #15
 800480e:	683a      	ldr	r2, [r7, #0]
 8004810:	429a      	cmp	r2, r3
 8004812:	d001      	beq.n	8004818 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004814:	2301      	movs	r3, #1
 8004816:	e0b8      	b.n	800498a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f003 0302 	and.w	r3, r3, #2
 8004820:	2b00      	cmp	r3, #0
 8004822:	d020      	beq.n	8004866 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f003 0304 	and.w	r3, r3, #4
 800482c:	2b00      	cmp	r3, #0
 800482e:	d005      	beq.n	800483c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004830:	4b59      	ldr	r3, [pc, #356]	; (8004998 <HAL_RCC_ClockConfig+0x1bc>)
 8004832:	689b      	ldr	r3, [r3, #8]
 8004834:	4a58      	ldr	r2, [pc, #352]	; (8004998 <HAL_RCC_ClockConfig+0x1bc>)
 8004836:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800483a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f003 0308 	and.w	r3, r3, #8
 8004844:	2b00      	cmp	r3, #0
 8004846:	d005      	beq.n	8004854 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004848:	4b53      	ldr	r3, [pc, #332]	; (8004998 <HAL_RCC_ClockConfig+0x1bc>)
 800484a:	689b      	ldr	r3, [r3, #8]
 800484c:	4a52      	ldr	r2, [pc, #328]	; (8004998 <HAL_RCC_ClockConfig+0x1bc>)
 800484e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004852:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004854:	4b50      	ldr	r3, [pc, #320]	; (8004998 <HAL_RCC_ClockConfig+0x1bc>)
 8004856:	689b      	ldr	r3, [r3, #8]
 8004858:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	689b      	ldr	r3, [r3, #8]
 8004860:	494d      	ldr	r1, [pc, #308]	; (8004998 <HAL_RCC_ClockConfig+0x1bc>)
 8004862:	4313      	orrs	r3, r2
 8004864:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f003 0301 	and.w	r3, r3, #1
 800486e:	2b00      	cmp	r3, #0
 8004870:	d044      	beq.n	80048fc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	685b      	ldr	r3, [r3, #4]
 8004876:	2b01      	cmp	r3, #1
 8004878:	d107      	bne.n	800488a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800487a:	4b47      	ldr	r3, [pc, #284]	; (8004998 <HAL_RCC_ClockConfig+0x1bc>)
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004882:	2b00      	cmp	r3, #0
 8004884:	d119      	bne.n	80048ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004886:	2301      	movs	r3, #1
 8004888:	e07f      	b.n	800498a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	685b      	ldr	r3, [r3, #4]
 800488e:	2b02      	cmp	r3, #2
 8004890:	d003      	beq.n	800489a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004896:	2b03      	cmp	r3, #3
 8004898:	d107      	bne.n	80048aa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800489a:	4b3f      	ldr	r3, [pc, #252]	; (8004998 <HAL_RCC_ClockConfig+0x1bc>)
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d109      	bne.n	80048ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80048a6:	2301      	movs	r3, #1
 80048a8:	e06f      	b.n	800498a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80048aa:	4b3b      	ldr	r3, [pc, #236]	; (8004998 <HAL_RCC_ClockConfig+0x1bc>)
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f003 0302 	and.w	r3, r3, #2
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d101      	bne.n	80048ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80048b6:	2301      	movs	r3, #1
 80048b8:	e067      	b.n	800498a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80048ba:	4b37      	ldr	r3, [pc, #220]	; (8004998 <HAL_RCC_ClockConfig+0x1bc>)
 80048bc:	689b      	ldr	r3, [r3, #8]
 80048be:	f023 0203 	bic.w	r2, r3, #3
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	685b      	ldr	r3, [r3, #4]
 80048c6:	4934      	ldr	r1, [pc, #208]	; (8004998 <HAL_RCC_ClockConfig+0x1bc>)
 80048c8:	4313      	orrs	r3, r2
 80048ca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80048cc:	f7fe f976 	bl	8002bbc <HAL_GetTick>
 80048d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80048d2:	e00a      	b.n	80048ea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80048d4:	f7fe f972 	bl	8002bbc <HAL_GetTick>
 80048d8:	4602      	mov	r2, r0
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	1ad3      	subs	r3, r2, r3
 80048de:	f241 3288 	movw	r2, #5000	; 0x1388
 80048e2:	4293      	cmp	r3, r2
 80048e4:	d901      	bls.n	80048ea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80048e6:	2303      	movs	r3, #3
 80048e8:	e04f      	b.n	800498a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80048ea:	4b2b      	ldr	r3, [pc, #172]	; (8004998 <HAL_RCC_ClockConfig+0x1bc>)
 80048ec:	689b      	ldr	r3, [r3, #8]
 80048ee:	f003 020c 	and.w	r2, r3, #12
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	685b      	ldr	r3, [r3, #4]
 80048f6:	009b      	lsls	r3, r3, #2
 80048f8:	429a      	cmp	r2, r3
 80048fa:	d1eb      	bne.n	80048d4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80048fc:	4b25      	ldr	r3, [pc, #148]	; (8004994 <HAL_RCC_ClockConfig+0x1b8>)
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f003 030f 	and.w	r3, r3, #15
 8004904:	683a      	ldr	r2, [r7, #0]
 8004906:	429a      	cmp	r2, r3
 8004908:	d20c      	bcs.n	8004924 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800490a:	4b22      	ldr	r3, [pc, #136]	; (8004994 <HAL_RCC_ClockConfig+0x1b8>)
 800490c:	683a      	ldr	r2, [r7, #0]
 800490e:	b2d2      	uxtb	r2, r2
 8004910:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004912:	4b20      	ldr	r3, [pc, #128]	; (8004994 <HAL_RCC_ClockConfig+0x1b8>)
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f003 030f 	and.w	r3, r3, #15
 800491a:	683a      	ldr	r2, [r7, #0]
 800491c:	429a      	cmp	r2, r3
 800491e:	d001      	beq.n	8004924 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004920:	2301      	movs	r3, #1
 8004922:	e032      	b.n	800498a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f003 0304 	and.w	r3, r3, #4
 800492c:	2b00      	cmp	r3, #0
 800492e:	d008      	beq.n	8004942 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004930:	4b19      	ldr	r3, [pc, #100]	; (8004998 <HAL_RCC_ClockConfig+0x1bc>)
 8004932:	689b      	ldr	r3, [r3, #8]
 8004934:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	68db      	ldr	r3, [r3, #12]
 800493c:	4916      	ldr	r1, [pc, #88]	; (8004998 <HAL_RCC_ClockConfig+0x1bc>)
 800493e:	4313      	orrs	r3, r2
 8004940:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f003 0308 	and.w	r3, r3, #8
 800494a:	2b00      	cmp	r3, #0
 800494c:	d009      	beq.n	8004962 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800494e:	4b12      	ldr	r3, [pc, #72]	; (8004998 <HAL_RCC_ClockConfig+0x1bc>)
 8004950:	689b      	ldr	r3, [r3, #8]
 8004952:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	691b      	ldr	r3, [r3, #16]
 800495a:	00db      	lsls	r3, r3, #3
 800495c:	490e      	ldr	r1, [pc, #56]	; (8004998 <HAL_RCC_ClockConfig+0x1bc>)
 800495e:	4313      	orrs	r3, r2
 8004960:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004962:	f000 f821 	bl	80049a8 <HAL_RCC_GetSysClockFreq>
 8004966:	4602      	mov	r2, r0
 8004968:	4b0b      	ldr	r3, [pc, #44]	; (8004998 <HAL_RCC_ClockConfig+0x1bc>)
 800496a:	689b      	ldr	r3, [r3, #8]
 800496c:	091b      	lsrs	r3, r3, #4
 800496e:	f003 030f 	and.w	r3, r3, #15
 8004972:	490a      	ldr	r1, [pc, #40]	; (800499c <HAL_RCC_ClockConfig+0x1c0>)
 8004974:	5ccb      	ldrb	r3, [r1, r3]
 8004976:	fa22 f303 	lsr.w	r3, r2, r3
 800497a:	4a09      	ldr	r2, [pc, #36]	; (80049a0 <HAL_RCC_ClockConfig+0x1c4>)
 800497c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800497e:	4b09      	ldr	r3, [pc, #36]	; (80049a4 <HAL_RCC_ClockConfig+0x1c8>)
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	4618      	mov	r0, r3
 8004984:	f7fe f8d6 	bl	8002b34 <HAL_InitTick>

  return HAL_OK;
 8004988:	2300      	movs	r3, #0
}
 800498a:	4618      	mov	r0, r3
 800498c:	3710      	adds	r7, #16
 800498e:	46bd      	mov	sp, r7
 8004990:	bd80      	pop	{r7, pc}
 8004992:	bf00      	nop
 8004994:	40023c00 	.word	0x40023c00
 8004998:	40023800 	.word	0x40023800
 800499c:	080075a4 	.word	0x080075a4
 80049a0:	20000010 	.word	0x20000010
 80049a4:	20000014 	.word	0x20000014

080049a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80049a8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80049ac:	b084      	sub	sp, #16
 80049ae:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80049b0:	2300      	movs	r3, #0
 80049b2:	607b      	str	r3, [r7, #4]
 80049b4:	2300      	movs	r3, #0
 80049b6:	60fb      	str	r3, [r7, #12]
 80049b8:	2300      	movs	r3, #0
 80049ba:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80049bc:	2300      	movs	r3, #0
 80049be:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80049c0:	4b67      	ldr	r3, [pc, #412]	; (8004b60 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80049c2:	689b      	ldr	r3, [r3, #8]
 80049c4:	f003 030c 	and.w	r3, r3, #12
 80049c8:	2b08      	cmp	r3, #8
 80049ca:	d00d      	beq.n	80049e8 <HAL_RCC_GetSysClockFreq+0x40>
 80049cc:	2b08      	cmp	r3, #8
 80049ce:	f200 80bd 	bhi.w	8004b4c <HAL_RCC_GetSysClockFreq+0x1a4>
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d002      	beq.n	80049dc <HAL_RCC_GetSysClockFreq+0x34>
 80049d6:	2b04      	cmp	r3, #4
 80049d8:	d003      	beq.n	80049e2 <HAL_RCC_GetSysClockFreq+0x3a>
 80049da:	e0b7      	b.n	8004b4c <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80049dc:	4b61      	ldr	r3, [pc, #388]	; (8004b64 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80049de:	60bb      	str	r3, [r7, #8]
       break;
 80049e0:	e0b7      	b.n	8004b52 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80049e2:	4b61      	ldr	r3, [pc, #388]	; (8004b68 <HAL_RCC_GetSysClockFreq+0x1c0>)
 80049e4:	60bb      	str	r3, [r7, #8]
      break;
 80049e6:	e0b4      	b.n	8004b52 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80049e8:	4b5d      	ldr	r3, [pc, #372]	; (8004b60 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80049ea:	685b      	ldr	r3, [r3, #4]
 80049ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80049f0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80049f2:	4b5b      	ldr	r3, [pc, #364]	; (8004b60 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80049f4:	685b      	ldr	r3, [r3, #4]
 80049f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d04d      	beq.n	8004a9a <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80049fe:	4b58      	ldr	r3, [pc, #352]	; (8004b60 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004a00:	685b      	ldr	r3, [r3, #4]
 8004a02:	099b      	lsrs	r3, r3, #6
 8004a04:	461a      	mov	r2, r3
 8004a06:	f04f 0300 	mov.w	r3, #0
 8004a0a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004a0e:	f04f 0100 	mov.w	r1, #0
 8004a12:	ea02 0800 	and.w	r8, r2, r0
 8004a16:	ea03 0901 	and.w	r9, r3, r1
 8004a1a:	4640      	mov	r0, r8
 8004a1c:	4649      	mov	r1, r9
 8004a1e:	f04f 0200 	mov.w	r2, #0
 8004a22:	f04f 0300 	mov.w	r3, #0
 8004a26:	014b      	lsls	r3, r1, #5
 8004a28:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004a2c:	0142      	lsls	r2, r0, #5
 8004a2e:	4610      	mov	r0, r2
 8004a30:	4619      	mov	r1, r3
 8004a32:	ebb0 0008 	subs.w	r0, r0, r8
 8004a36:	eb61 0109 	sbc.w	r1, r1, r9
 8004a3a:	f04f 0200 	mov.w	r2, #0
 8004a3e:	f04f 0300 	mov.w	r3, #0
 8004a42:	018b      	lsls	r3, r1, #6
 8004a44:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004a48:	0182      	lsls	r2, r0, #6
 8004a4a:	1a12      	subs	r2, r2, r0
 8004a4c:	eb63 0301 	sbc.w	r3, r3, r1
 8004a50:	f04f 0000 	mov.w	r0, #0
 8004a54:	f04f 0100 	mov.w	r1, #0
 8004a58:	00d9      	lsls	r1, r3, #3
 8004a5a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004a5e:	00d0      	lsls	r0, r2, #3
 8004a60:	4602      	mov	r2, r0
 8004a62:	460b      	mov	r3, r1
 8004a64:	eb12 0208 	adds.w	r2, r2, r8
 8004a68:	eb43 0309 	adc.w	r3, r3, r9
 8004a6c:	f04f 0000 	mov.w	r0, #0
 8004a70:	f04f 0100 	mov.w	r1, #0
 8004a74:	0259      	lsls	r1, r3, #9
 8004a76:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8004a7a:	0250      	lsls	r0, r2, #9
 8004a7c:	4602      	mov	r2, r0
 8004a7e:	460b      	mov	r3, r1
 8004a80:	4610      	mov	r0, r2
 8004a82:	4619      	mov	r1, r3
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	461a      	mov	r2, r3
 8004a88:	f04f 0300 	mov.w	r3, #0
 8004a8c:	f7fc f8ee 	bl	8000c6c <__aeabi_uldivmod>
 8004a90:	4602      	mov	r2, r0
 8004a92:	460b      	mov	r3, r1
 8004a94:	4613      	mov	r3, r2
 8004a96:	60fb      	str	r3, [r7, #12]
 8004a98:	e04a      	b.n	8004b30 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004a9a:	4b31      	ldr	r3, [pc, #196]	; (8004b60 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004a9c:	685b      	ldr	r3, [r3, #4]
 8004a9e:	099b      	lsrs	r3, r3, #6
 8004aa0:	461a      	mov	r2, r3
 8004aa2:	f04f 0300 	mov.w	r3, #0
 8004aa6:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004aaa:	f04f 0100 	mov.w	r1, #0
 8004aae:	ea02 0400 	and.w	r4, r2, r0
 8004ab2:	ea03 0501 	and.w	r5, r3, r1
 8004ab6:	4620      	mov	r0, r4
 8004ab8:	4629      	mov	r1, r5
 8004aba:	f04f 0200 	mov.w	r2, #0
 8004abe:	f04f 0300 	mov.w	r3, #0
 8004ac2:	014b      	lsls	r3, r1, #5
 8004ac4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004ac8:	0142      	lsls	r2, r0, #5
 8004aca:	4610      	mov	r0, r2
 8004acc:	4619      	mov	r1, r3
 8004ace:	1b00      	subs	r0, r0, r4
 8004ad0:	eb61 0105 	sbc.w	r1, r1, r5
 8004ad4:	f04f 0200 	mov.w	r2, #0
 8004ad8:	f04f 0300 	mov.w	r3, #0
 8004adc:	018b      	lsls	r3, r1, #6
 8004ade:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004ae2:	0182      	lsls	r2, r0, #6
 8004ae4:	1a12      	subs	r2, r2, r0
 8004ae6:	eb63 0301 	sbc.w	r3, r3, r1
 8004aea:	f04f 0000 	mov.w	r0, #0
 8004aee:	f04f 0100 	mov.w	r1, #0
 8004af2:	00d9      	lsls	r1, r3, #3
 8004af4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004af8:	00d0      	lsls	r0, r2, #3
 8004afa:	4602      	mov	r2, r0
 8004afc:	460b      	mov	r3, r1
 8004afe:	1912      	adds	r2, r2, r4
 8004b00:	eb45 0303 	adc.w	r3, r5, r3
 8004b04:	f04f 0000 	mov.w	r0, #0
 8004b08:	f04f 0100 	mov.w	r1, #0
 8004b0c:	0299      	lsls	r1, r3, #10
 8004b0e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8004b12:	0290      	lsls	r0, r2, #10
 8004b14:	4602      	mov	r2, r0
 8004b16:	460b      	mov	r3, r1
 8004b18:	4610      	mov	r0, r2
 8004b1a:	4619      	mov	r1, r3
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	461a      	mov	r2, r3
 8004b20:	f04f 0300 	mov.w	r3, #0
 8004b24:	f7fc f8a2 	bl	8000c6c <__aeabi_uldivmod>
 8004b28:	4602      	mov	r2, r0
 8004b2a:	460b      	mov	r3, r1
 8004b2c:	4613      	mov	r3, r2
 8004b2e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004b30:	4b0b      	ldr	r3, [pc, #44]	; (8004b60 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004b32:	685b      	ldr	r3, [r3, #4]
 8004b34:	0c1b      	lsrs	r3, r3, #16
 8004b36:	f003 0303 	and.w	r3, r3, #3
 8004b3a:	3301      	adds	r3, #1
 8004b3c:	005b      	lsls	r3, r3, #1
 8004b3e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004b40:	68fa      	ldr	r2, [r7, #12]
 8004b42:	683b      	ldr	r3, [r7, #0]
 8004b44:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b48:	60bb      	str	r3, [r7, #8]
      break;
 8004b4a:	e002      	b.n	8004b52 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004b4c:	4b05      	ldr	r3, [pc, #20]	; (8004b64 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004b4e:	60bb      	str	r3, [r7, #8]
      break;
 8004b50:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004b52:	68bb      	ldr	r3, [r7, #8]
}
 8004b54:	4618      	mov	r0, r3
 8004b56:	3710      	adds	r7, #16
 8004b58:	46bd      	mov	sp, r7
 8004b5a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8004b5e:	bf00      	nop
 8004b60:	40023800 	.word	0x40023800
 8004b64:	00f42400 	.word	0x00f42400
 8004b68:	007a1200 	.word	0x007a1200

08004b6c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004b6c:	b480      	push	{r7}
 8004b6e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004b70:	4b03      	ldr	r3, [pc, #12]	; (8004b80 <HAL_RCC_GetHCLKFreq+0x14>)
 8004b72:	681b      	ldr	r3, [r3, #0]
}
 8004b74:	4618      	mov	r0, r3
 8004b76:	46bd      	mov	sp, r7
 8004b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b7c:	4770      	bx	lr
 8004b7e:	bf00      	nop
 8004b80:	20000010 	.word	0x20000010

08004b84 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004b84:	b580      	push	{r7, lr}
 8004b86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004b88:	f7ff fff0 	bl	8004b6c <HAL_RCC_GetHCLKFreq>
 8004b8c:	4602      	mov	r2, r0
 8004b8e:	4b05      	ldr	r3, [pc, #20]	; (8004ba4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004b90:	689b      	ldr	r3, [r3, #8]
 8004b92:	0a9b      	lsrs	r3, r3, #10
 8004b94:	f003 0307 	and.w	r3, r3, #7
 8004b98:	4903      	ldr	r1, [pc, #12]	; (8004ba8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004b9a:	5ccb      	ldrb	r3, [r1, r3]
 8004b9c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ba0:	4618      	mov	r0, r3
 8004ba2:	bd80      	pop	{r7, pc}
 8004ba4:	40023800 	.word	0x40023800
 8004ba8:	080075b4 	.word	0x080075b4

08004bac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004bac:	b580      	push	{r7, lr}
 8004bae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004bb0:	f7ff ffdc 	bl	8004b6c <HAL_RCC_GetHCLKFreq>
 8004bb4:	4602      	mov	r2, r0
 8004bb6:	4b05      	ldr	r3, [pc, #20]	; (8004bcc <HAL_RCC_GetPCLK2Freq+0x20>)
 8004bb8:	689b      	ldr	r3, [r3, #8]
 8004bba:	0b5b      	lsrs	r3, r3, #13
 8004bbc:	f003 0307 	and.w	r3, r3, #7
 8004bc0:	4903      	ldr	r1, [pc, #12]	; (8004bd0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004bc2:	5ccb      	ldrb	r3, [r1, r3]
 8004bc4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004bc8:	4618      	mov	r0, r3
 8004bca:	bd80      	pop	{r7, pc}
 8004bcc:	40023800 	.word	0x40023800
 8004bd0:	080075b4 	.word	0x080075b4

08004bd4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004bd4:	b580      	push	{r7, lr}
 8004bd6:	b082      	sub	sp, #8
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d101      	bne.n	8004be6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004be2:	2301      	movs	r3, #1
 8004be4:	e056      	b.n	8004c94 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	2200      	movs	r2, #0
 8004bea:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004bf2:	b2db      	uxtb	r3, r3
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d106      	bne.n	8004c06 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	2200      	movs	r2, #0
 8004bfc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004c00:	6878      	ldr	r0, [r7, #4]
 8004c02:	f7fd fdc5 	bl	8002790 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	2202      	movs	r2, #2
 8004c0a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	681a      	ldr	r2, [r3, #0]
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004c1c:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	685a      	ldr	r2, [r3, #4]
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	689b      	ldr	r3, [r3, #8]
 8004c26:	431a      	orrs	r2, r3
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	68db      	ldr	r3, [r3, #12]
 8004c2c:	431a      	orrs	r2, r3
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	691b      	ldr	r3, [r3, #16]
 8004c32:	431a      	orrs	r2, r3
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	695b      	ldr	r3, [r3, #20]
 8004c38:	431a      	orrs	r2, r3
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	699b      	ldr	r3, [r3, #24]
 8004c3e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004c42:	431a      	orrs	r2, r3
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	69db      	ldr	r3, [r3, #28]
 8004c48:	431a      	orrs	r2, r3
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	6a1b      	ldr	r3, [r3, #32]
 8004c4e:	ea42 0103 	orr.w	r1, r2, r3
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	430a      	orrs	r2, r1
 8004c5c:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	699b      	ldr	r3, [r3, #24]
 8004c62:	0c1b      	lsrs	r3, r3, #16
 8004c64:	f003 0104 	and.w	r1, r3, #4
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	430a      	orrs	r2, r1
 8004c72:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	69da      	ldr	r2, [r3, #28]
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004c82:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	2200      	movs	r2, #0
 8004c88:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	2201      	movs	r2, #1
 8004c8e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004c92:	2300      	movs	r3, #0
}
 8004c94:	4618      	mov	r0, r3
 8004c96:	3708      	adds	r7, #8
 8004c98:	46bd      	mov	sp, r7
 8004c9a:	bd80      	pop	{r7, pc}

08004c9c <HAL_SPI_Transmit_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8004c9c:	b480      	push	{r7}
 8004c9e:	b087      	sub	sp, #28
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	60f8      	str	r0, [r7, #12]
 8004ca4:	60b9      	str	r1, [r7, #8]
 8004ca6:	4613      	mov	r3, r2
 8004ca8:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004caa:	2300      	movs	r3, #0
 8004cac:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004cb4:	2b01      	cmp	r3, #1
 8004cb6:	d101      	bne.n	8004cbc <HAL_SPI_Transmit_IT+0x20>
 8004cb8:	2302      	movs	r3, #2
 8004cba:	e067      	b.n	8004d8c <HAL_SPI_Transmit_IT+0xf0>
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	2201      	movs	r2, #1
 8004cc0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if ((pData == NULL) || (Size == 0U))
 8004cc4:	68bb      	ldr	r3, [r7, #8]
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d002      	beq.n	8004cd0 <HAL_SPI_Transmit_IT+0x34>
 8004cca:	88fb      	ldrh	r3, [r7, #6]
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d102      	bne.n	8004cd6 <HAL_SPI_Transmit_IT+0x3a>
  {
    errorcode = HAL_ERROR;
 8004cd0:	2301      	movs	r3, #1
 8004cd2:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004cd4:	e055      	b.n	8004d82 <HAL_SPI_Transmit_IT+0xe6>
  }

  if (hspi->State != HAL_SPI_STATE_READY)
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004cdc:	b2db      	uxtb	r3, r3
 8004cde:	2b01      	cmp	r3, #1
 8004ce0:	d002      	beq.n	8004ce8 <HAL_SPI_Transmit_IT+0x4c>
  {
    errorcode = HAL_BUSY;
 8004ce2:	2302      	movs	r3, #2
 8004ce4:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004ce6:	e04c      	b.n	8004d82 <HAL_SPI_Transmit_IT+0xe6>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	2203      	movs	r2, #3
 8004cec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	2200      	movs	r2, #0
 8004cf4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	68ba      	ldr	r2, [r7, #8]
 8004cfa:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	88fa      	ldrh	r2, [r7, #6]
 8004d00:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	88fa      	ldrh	r2, [r7, #6]
 8004d06:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	2200      	movs	r2, #0
 8004d0c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	2200      	movs	r2, #0
 8004d12:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	2200      	movs	r2, #0
 8004d18:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	2200      	movs	r2, #0
 8004d1e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	68db      	ldr	r3, [r3, #12]
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d003      	beq.n	8004d30 <HAL_SPI_Transmit_IT+0x94>
  {
    hspi->TxISR = SPI_TxISR_16BIT;
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	4a1b      	ldr	r2, [pc, #108]	; (8004d98 <HAL_SPI_Transmit_IT+0xfc>)
 8004d2c:	645a      	str	r2, [r3, #68]	; 0x44
 8004d2e:	e002      	b.n	8004d36 <HAL_SPI_Transmit_IT+0x9a>
  }
  else
  {
    hspi->TxISR = SPI_TxISR_8BIT;
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	4a1a      	ldr	r2, [pc, #104]	; (8004d9c <HAL_SPI_Transmit_IT+0x100>)
 8004d34:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	689b      	ldr	r3, [r3, #8]
 8004d3a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d3e:	d107      	bne.n	8004d50 <HAL_SPI_Transmit_IT+0xb4>
  {
    SPI_1LINE_TX(hspi);
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	681a      	ldr	r2, [r3, #0]
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004d4e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	685a      	ldr	r2, [r3, #4]
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f042 02a0 	orr.w	r2, r2, #160	; 0xa0
 8004d5e:	605a      	str	r2, [r3, #4]


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d6a:	2b40      	cmp	r3, #64	; 0x40
 8004d6c:	d008      	beq.n	8004d80 <HAL_SPI_Transmit_IT+0xe4>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	681a      	ldr	r2, [r3, #0]
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004d7c:	601a      	str	r2, [r3, #0]
 8004d7e:	e000      	b.n	8004d82 <HAL_SPI_Transmit_IT+0xe6>
  }

error :
 8004d80:	bf00      	nop
  __HAL_UNLOCK(hspi);
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	2200      	movs	r2, #0
 8004d86:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004d8a:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d8c:	4618      	mov	r0, r3
 8004d8e:	371c      	adds	r7, #28
 8004d90:	46bd      	mov	sp, r7
 8004d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d96:	4770      	bx	lr
 8004d98:	08005023 	.word	0x08005023
 8004d9c:	08004fdd 	.word	0x08004fdd

08004da0 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8004da0:	b580      	push	{r7, lr}
 8004da2:	b088      	sub	sp, #32
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	685b      	ldr	r3, [r3, #4]
 8004dae:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	689b      	ldr	r3, [r3, #8]
 8004db6:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004db8:	69bb      	ldr	r3, [r7, #24]
 8004dba:	099b      	lsrs	r3, r3, #6
 8004dbc:	f003 0301 	and.w	r3, r3, #1
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d10f      	bne.n	8004de4 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004dc4:	69bb      	ldr	r3, [r7, #24]
 8004dc6:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d00a      	beq.n	8004de4 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004dce:	69fb      	ldr	r3, [r7, #28]
 8004dd0:	099b      	lsrs	r3, r3, #6
 8004dd2:	f003 0301 	and.w	r3, r3, #1
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d004      	beq.n	8004de4 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dde:	6878      	ldr	r0, [r7, #4]
 8004de0:	4798      	blx	r3
    return;
 8004de2:	e0d7      	b.n	8004f94 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8004de4:	69bb      	ldr	r3, [r7, #24]
 8004de6:	085b      	lsrs	r3, r3, #1
 8004de8:	f003 0301 	and.w	r3, r3, #1
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d00a      	beq.n	8004e06 <HAL_SPI_IRQHandler+0x66>
 8004df0:	69fb      	ldr	r3, [r7, #28]
 8004df2:	09db      	lsrs	r3, r3, #7
 8004df4:	f003 0301 	and.w	r3, r3, #1
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d004      	beq.n	8004e06 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e00:	6878      	ldr	r0, [r7, #4]
 8004e02:	4798      	blx	r3
    return;
 8004e04:	e0c6      	b.n	8004f94 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8004e06:	69bb      	ldr	r3, [r7, #24]
 8004e08:	095b      	lsrs	r3, r3, #5
 8004e0a:	f003 0301 	and.w	r3, r3, #1
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d10c      	bne.n	8004e2c <HAL_SPI_IRQHandler+0x8c>
 8004e12:	69bb      	ldr	r3, [r7, #24]
 8004e14:	099b      	lsrs	r3, r3, #6
 8004e16:	f003 0301 	and.w	r3, r3, #1
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d106      	bne.n	8004e2c <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8004e1e:	69bb      	ldr	r3, [r7, #24]
 8004e20:	0a1b      	lsrs	r3, r3, #8
 8004e22:	f003 0301 	and.w	r3, r3, #1
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	f000 80b4 	beq.w	8004f94 <HAL_SPI_IRQHandler+0x1f4>
 8004e2c:	69fb      	ldr	r3, [r7, #28]
 8004e2e:	095b      	lsrs	r3, r3, #5
 8004e30:	f003 0301 	and.w	r3, r3, #1
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	f000 80ad 	beq.w	8004f94 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8004e3a:	69bb      	ldr	r3, [r7, #24]
 8004e3c:	099b      	lsrs	r3, r3, #6
 8004e3e:	f003 0301 	and.w	r3, r3, #1
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d023      	beq.n	8004e8e <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004e4c:	b2db      	uxtb	r3, r3
 8004e4e:	2b03      	cmp	r3, #3
 8004e50:	d011      	beq.n	8004e76 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e56:	f043 0204 	orr.w	r2, r3, #4
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004e5e:	2300      	movs	r3, #0
 8004e60:	617b      	str	r3, [r7, #20]
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	68db      	ldr	r3, [r3, #12]
 8004e68:	617b      	str	r3, [r7, #20]
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	689b      	ldr	r3, [r3, #8]
 8004e70:	617b      	str	r3, [r7, #20]
 8004e72:	697b      	ldr	r3, [r7, #20]
 8004e74:	e00b      	b.n	8004e8e <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004e76:	2300      	movs	r3, #0
 8004e78:	613b      	str	r3, [r7, #16]
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	68db      	ldr	r3, [r3, #12]
 8004e80:	613b      	str	r3, [r7, #16]
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	689b      	ldr	r3, [r3, #8]
 8004e88:	613b      	str	r3, [r7, #16]
 8004e8a:	693b      	ldr	r3, [r7, #16]
        return;
 8004e8c:	e082      	b.n	8004f94 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8004e8e:	69bb      	ldr	r3, [r7, #24]
 8004e90:	095b      	lsrs	r3, r3, #5
 8004e92:	f003 0301 	and.w	r3, r3, #1
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d014      	beq.n	8004ec4 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e9e:	f043 0201 	orr.w	r2, r3, #1
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8004ea6:	2300      	movs	r3, #0
 8004ea8:	60fb      	str	r3, [r7, #12]
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	689b      	ldr	r3, [r3, #8]
 8004eb0:	60fb      	str	r3, [r7, #12]
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	681a      	ldr	r2, [r3, #0]
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004ec0:	601a      	str	r2, [r3, #0]
 8004ec2:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8004ec4:	69bb      	ldr	r3, [r7, #24]
 8004ec6:	0a1b      	lsrs	r3, r3, #8
 8004ec8:	f003 0301 	and.w	r3, r3, #1
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d00c      	beq.n	8004eea <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ed4:	f043 0208 	orr.w	r2, r3, #8
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8004edc:	2300      	movs	r3, #0
 8004ede:	60bb      	str	r3, [r7, #8]
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	689b      	ldr	r3, [r3, #8]
 8004ee6:	60bb      	str	r3, [r7, #8]
 8004ee8:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d04f      	beq.n	8004f92 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	685a      	ldr	r2, [r3, #4]
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004f00:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	2201      	movs	r2, #1
 8004f06:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8004f0a:	69fb      	ldr	r3, [r7, #28]
 8004f0c:	f003 0302 	and.w	r3, r3, #2
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d104      	bne.n	8004f1e <HAL_SPI_IRQHandler+0x17e>
 8004f14:	69fb      	ldr	r3, [r7, #28]
 8004f16:	f003 0301 	and.w	r3, r3, #1
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d034      	beq.n	8004f88 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	685a      	ldr	r2, [r3, #4]
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	f022 0203 	bic.w	r2, r2, #3
 8004f2c:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d011      	beq.n	8004f5a <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f3a:	4a18      	ldr	r2, [pc, #96]	; (8004f9c <HAL_SPI_IRQHandler+0x1fc>)
 8004f3c:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f42:	4618      	mov	r0, r3
 8004f44:	f7fe fd98 	bl	8003a78 <HAL_DMA_Abort_IT>
 8004f48:	4603      	mov	r3, r0
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d005      	beq.n	8004f5a <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f52:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d016      	beq.n	8004f90 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f66:	4a0d      	ldr	r2, [pc, #52]	; (8004f9c <HAL_SPI_IRQHandler+0x1fc>)
 8004f68:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f6e:	4618      	mov	r0, r3
 8004f70:	f7fe fd82 	bl	8003a78 <HAL_DMA_Abort_IT>
 8004f74:	4603      	mov	r3, r0
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d00a      	beq.n	8004f90 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f7e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8004f86:	e003      	b.n	8004f90 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8004f88:	6878      	ldr	r0, [r7, #4]
 8004f8a:	f000 f809 	bl	8004fa0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8004f8e:	e000      	b.n	8004f92 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8004f90:	bf00      	nop
    return;
 8004f92:	bf00      	nop
  }
}
 8004f94:	3720      	adds	r7, #32
 8004f96:	46bd      	mov	sp, r7
 8004f98:	bd80      	pop	{r7, pc}
 8004f9a:	bf00      	nop
 8004f9c:	08004fb5 	.word	0x08004fb5

08004fa0 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8004fa0:	b480      	push	{r7}
 8004fa2:	b083      	sub	sp, #12
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8004fa8:	bf00      	nop
 8004faa:	370c      	adds	r7, #12
 8004fac:	46bd      	mov	sp, r7
 8004fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb2:	4770      	bx	lr

08004fb4 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004fb4:	b580      	push	{r7, lr}
 8004fb6:	b084      	sub	sp, #16
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fc0:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	2200      	movs	r2, #0
 8004fc6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	2200      	movs	r2, #0
 8004fcc:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8004fce:	68f8      	ldr	r0, [r7, #12]
 8004fd0:	f7ff ffe6 	bl	8004fa0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004fd4:	bf00      	nop
 8004fd6:	3710      	adds	r7, #16
 8004fd8:	46bd      	mov	sp, r7
 8004fda:	bd80      	pop	{r7, pc}

08004fdc <SPI_TxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8004fdc:	b580      	push	{r7, lr}
 8004fde:	b082      	sub	sp, #8
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	330c      	adds	r3, #12
 8004fee:	7812      	ldrb	r2, [r2, #0]
 8004ff0:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ff6:	1c5a      	adds	r2, r3, #1
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005000:	b29b      	uxth	r3, r3
 8005002:	3b01      	subs	r3, #1
 8005004:	b29a      	uxth	r2, r3
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	86da      	strh	r2, [r3, #54]	; 0x36

  if (hspi->TxXferCount == 0U)
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800500e:	b29b      	uxth	r3, r3
 8005010:	2b00      	cmp	r3, #0
 8005012:	d102      	bne.n	800501a <SPI_TxISR_8BIT+0x3e>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 8005014:	6878      	ldr	r0, [r7, #4]
 8005016:	f000 f8d3 	bl	80051c0 <SPI_CloseTx_ISR>
  }
}
 800501a:	bf00      	nop
 800501c:	3708      	adds	r7, #8
 800501e:	46bd      	mov	sp, r7
 8005020:	bd80      	pop	{r7, pc}

08005022 <SPI_TxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8005022:	b580      	push	{r7, lr}
 8005024:	b082      	sub	sp, #8
 8005026:	af00      	add	r7, sp, #0
 8005028:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800502e:	881a      	ldrh	r2, [r3, #0]
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800503a:	1c9a      	adds	r2, r3, #2
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005044:	b29b      	uxth	r3, r3
 8005046:	3b01      	subs	r3, #1
 8005048:	b29a      	uxth	r2, r3
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	86da      	strh	r2, [r3, #54]	; 0x36

  if (hspi->TxXferCount == 0U)
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005052:	b29b      	uxth	r3, r3
 8005054:	2b00      	cmp	r3, #0
 8005056:	d102      	bne.n	800505e <SPI_TxISR_16BIT+0x3c>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 8005058:	6878      	ldr	r0, [r7, #4]
 800505a:	f000 f8b1 	bl	80051c0 <SPI_CloseTx_ISR>
  }
}
 800505e:	bf00      	nop
 8005060:	3708      	adds	r7, #8
 8005062:	46bd      	mov	sp, r7
 8005064:	bd80      	pop	{r7, pc}

08005066 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005066:	b580      	push	{r7, lr}
 8005068:	b084      	sub	sp, #16
 800506a:	af00      	add	r7, sp, #0
 800506c:	60f8      	str	r0, [r7, #12]
 800506e:	60b9      	str	r1, [r7, #8]
 8005070:	603b      	str	r3, [r7, #0]
 8005072:	4613      	mov	r3, r2
 8005074:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005076:	e04c      	b.n	8005112 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005078:	683b      	ldr	r3, [r7, #0]
 800507a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800507e:	d048      	beq.n	8005112 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8005080:	f7fd fd9c 	bl	8002bbc <HAL_GetTick>
 8005084:	4602      	mov	r2, r0
 8005086:	69bb      	ldr	r3, [r7, #24]
 8005088:	1ad3      	subs	r3, r2, r3
 800508a:	683a      	ldr	r2, [r7, #0]
 800508c:	429a      	cmp	r2, r3
 800508e:	d902      	bls.n	8005096 <SPI_WaitFlagStateUntilTimeout+0x30>
 8005090:	683b      	ldr	r3, [r7, #0]
 8005092:	2b00      	cmp	r3, #0
 8005094:	d13d      	bne.n	8005112 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	685a      	ldr	r2, [r3, #4]
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80050a4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	685b      	ldr	r3, [r3, #4]
 80050aa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80050ae:	d111      	bne.n	80050d4 <SPI_WaitFlagStateUntilTimeout+0x6e>
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	689b      	ldr	r3, [r3, #8]
 80050b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80050b8:	d004      	beq.n	80050c4 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	689b      	ldr	r3, [r3, #8]
 80050be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80050c2:	d107      	bne.n	80050d4 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	681a      	ldr	r2, [r3, #0]
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80050d2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050d8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80050dc:	d10f      	bne.n	80050fe <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	681a      	ldr	r2, [r3, #0]
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80050ec:	601a      	str	r2, [r3, #0]
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	681a      	ldr	r2, [r3, #0]
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80050fc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	2201      	movs	r2, #1
 8005102:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	2200      	movs	r2, #0
 800510a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800510e:	2303      	movs	r3, #3
 8005110:	e00f      	b.n	8005132 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	689a      	ldr	r2, [r3, #8]
 8005118:	68bb      	ldr	r3, [r7, #8]
 800511a:	4013      	ands	r3, r2
 800511c:	68ba      	ldr	r2, [r7, #8]
 800511e:	429a      	cmp	r2, r3
 8005120:	bf0c      	ite	eq
 8005122:	2301      	moveq	r3, #1
 8005124:	2300      	movne	r3, #0
 8005126:	b2db      	uxtb	r3, r3
 8005128:	461a      	mov	r2, r3
 800512a:	79fb      	ldrb	r3, [r7, #7]
 800512c:	429a      	cmp	r2, r3
 800512e:	d1a3      	bne.n	8005078 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8005130:	2300      	movs	r3, #0
}
 8005132:	4618      	mov	r0, r3
 8005134:	3710      	adds	r7, #16
 8005136:	46bd      	mov	sp, r7
 8005138:	bd80      	pop	{r7, pc}
	...

0800513c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800513c:	b580      	push	{r7, lr}
 800513e:	b088      	sub	sp, #32
 8005140:	af02      	add	r7, sp, #8
 8005142:	60f8      	str	r0, [r7, #12]
 8005144:	60b9      	str	r1, [r7, #8]
 8005146:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005148:	4b1b      	ldr	r3, [pc, #108]	; (80051b8 <SPI_EndRxTxTransaction+0x7c>)
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	4a1b      	ldr	r2, [pc, #108]	; (80051bc <SPI_EndRxTxTransaction+0x80>)
 800514e:	fba2 2303 	umull	r2, r3, r2, r3
 8005152:	0d5b      	lsrs	r3, r3, #21
 8005154:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005158:	fb02 f303 	mul.w	r3, r2, r3
 800515c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	685b      	ldr	r3, [r3, #4]
 8005162:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005166:	d112      	bne.n	800518e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	9300      	str	r3, [sp, #0]
 800516c:	68bb      	ldr	r3, [r7, #8]
 800516e:	2200      	movs	r2, #0
 8005170:	2180      	movs	r1, #128	; 0x80
 8005172:	68f8      	ldr	r0, [r7, #12]
 8005174:	f7ff ff77 	bl	8005066 <SPI_WaitFlagStateUntilTimeout>
 8005178:	4603      	mov	r3, r0
 800517a:	2b00      	cmp	r3, #0
 800517c:	d016      	beq.n	80051ac <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005182:	f043 0220 	orr.w	r2, r3, #32
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800518a:	2303      	movs	r3, #3
 800518c:	e00f      	b.n	80051ae <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800518e:	697b      	ldr	r3, [r7, #20]
 8005190:	2b00      	cmp	r3, #0
 8005192:	d00a      	beq.n	80051aa <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8005194:	697b      	ldr	r3, [r7, #20]
 8005196:	3b01      	subs	r3, #1
 8005198:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	689b      	ldr	r3, [r3, #8]
 80051a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051a4:	2b80      	cmp	r3, #128	; 0x80
 80051a6:	d0f2      	beq.n	800518e <SPI_EndRxTxTransaction+0x52>
 80051a8:	e000      	b.n	80051ac <SPI_EndRxTxTransaction+0x70>
        break;
 80051aa:	bf00      	nop
  }

  return HAL_OK;
 80051ac:	2300      	movs	r3, #0
}
 80051ae:	4618      	mov	r0, r3
 80051b0:	3718      	adds	r7, #24
 80051b2:	46bd      	mov	sp, r7
 80051b4:	bd80      	pop	{r7, pc}
 80051b6:	bf00      	nop
 80051b8:	20000010 	.word	0x20000010
 80051bc:	165e9f81 	.word	0x165e9f81

080051c0 <SPI_CloseTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseTx_ISR(SPI_HandleTypeDef *hspi)
{
 80051c0:	b580      	push	{r7, lr}
 80051c2:	b086      	sub	sp, #24
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 80051c8:	4b2c      	ldr	r3, [pc, #176]	; (800527c <SPI_CloseTx_ISR+0xbc>)
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	4a2c      	ldr	r2, [pc, #176]	; (8005280 <SPI_CloseTx_ISR+0xc0>)
 80051ce:	fba2 2303 	umull	r2, r3, r2, r3
 80051d2:	0a5b      	lsrs	r3, r3, #9
 80051d4:	2264      	movs	r2, #100	; 0x64
 80051d6:	fb02 f303 	mul.w	r3, r2, r3
 80051da:	613b      	str	r3, [r7, #16]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80051dc:	f7fd fcee 	bl	8002bbc <HAL_GetTick>
 80051e0:	6178      	str	r0, [r7, #20]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 80051e2:	693b      	ldr	r3, [r7, #16]
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d106      	bne.n	80051f6 <SPI_CloseTx_ISR+0x36>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051ec:	f043 0220 	orr.w	r2, r3, #32
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80051f4:	e009      	b.n	800520a <SPI_CloseTx_ISR+0x4a>
    }
    count--;
 80051f6:	693b      	ldr	r3, [r7, #16]
 80051f8:	3b01      	subs	r3, #1
 80051fa:	613b      	str	r3, [r7, #16]
  } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	689b      	ldr	r3, [r3, #8]
 8005202:	f003 0302 	and.w	r3, r3, #2
 8005206:	2b00      	cmp	r3, #0
 8005208:	d0eb      	beq.n	80051e2 <SPI_CloseTx_ISR+0x22>

  /* Disable TXE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	685a      	ldr	r2, [r3, #4]
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005218:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800521a:	697a      	ldr	r2, [r7, #20]
 800521c:	2164      	movs	r1, #100	; 0x64
 800521e:	6878      	ldr	r0, [r7, #4]
 8005220:	f7ff ff8c 	bl	800513c <SPI_EndRxTxTransaction>
 8005224:	4603      	mov	r3, r0
 8005226:	2b00      	cmp	r3, #0
 8005228:	d005      	beq.n	8005236 <SPI_CloseTx_ISR+0x76>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800522e:	f043 0220 	orr.w	r2, r3, #32
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	689b      	ldr	r3, [r3, #8]
 800523a:	2b00      	cmp	r3, #0
 800523c:	d10a      	bne.n	8005254 <SPI_CloseTx_ISR+0x94>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800523e:	2300      	movs	r3, #0
 8005240:	60fb      	str	r3, [r7, #12]
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	68db      	ldr	r3, [r3, #12]
 8005248:	60fb      	str	r3, [r7, #12]
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	689b      	ldr	r3, [r3, #8]
 8005250:	60fb      	str	r3, [r7, #12]
 8005252:	68fb      	ldr	r3, [r7, #12]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	2201      	movs	r2, #1
 8005258:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005260:	2b00      	cmp	r3, #0
 8005262:	d003      	beq.n	800526c <SPI_CloseTx_ISR+0xac>
  {
    /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 8005264:	6878      	ldr	r0, [r7, #4]
 8005266:	f7ff fe9b 	bl	8004fa0 <HAL_SPI_ErrorCallback>
    hspi->TxCpltCallback(hspi);
#else
    HAL_SPI_TxCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 800526a:	e002      	b.n	8005272 <SPI_CloseTx_ISR+0xb2>
    HAL_SPI_TxCpltCallback(hspi);
 800526c:	6878      	ldr	r0, [r7, #4]
 800526e:	f7fd f93f 	bl	80024f0 <HAL_SPI_TxCpltCallback>
}
 8005272:	bf00      	nop
 8005274:	3718      	adds	r7, #24
 8005276:	46bd      	mov	sp, r7
 8005278:	bd80      	pop	{r7, pc}
 800527a:	bf00      	nop
 800527c:	20000010 	.word	0x20000010
 8005280:	057619f1 	.word	0x057619f1

08005284 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005284:	b580      	push	{r7, lr}
 8005286:	b082      	sub	sp, #8
 8005288:	af00      	add	r7, sp, #0
 800528a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	2b00      	cmp	r3, #0
 8005290:	d101      	bne.n	8005296 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005292:	2301      	movs	r3, #1
 8005294:	e01d      	b.n	80052d2 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800529c:	b2db      	uxtb	r3, r3
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d106      	bne.n	80052b0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	2200      	movs	r2, #0
 80052a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80052aa:	6878      	ldr	r0, [r7, #4]
 80052ac:	f7fd fac0 	bl	8002830 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	2202      	movs	r2, #2
 80052b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681a      	ldr	r2, [r3, #0]
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	3304      	adds	r3, #4
 80052c0:	4619      	mov	r1, r3
 80052c2:	4610      	mov	r0, r2
 80052c4:	f000 fa46 	bl	8005754 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	2201      	movs	r2, #1
 80052cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80052d0:	2300      	movs	r3, #0
}
 80052d2:	4618      	mov	r0, r3
 80052d4:	3708      	adds	r7, #8
 80052d6:	46bd      	mov	sp, r7
 80052d8:	bd80      	pop	{r7, pc}

080052da <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80052da:	b480      	push	{r7}
 80052dc:	b085      	sub	sp, #20
 80052de:	af00      	add	r7, sp, #0
 80052e0:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	2202      	movs	r2, #2
 80052e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	689b      	ldr	r3, [r3, #8]
 80052f0:	f003 0307 	and.w	r3, r3, #7
 80052f4:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	2b06      	cmp	r3, #6
 80052fa:	d007      	beq.n	800530c <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	681a      	ldr	r2, [r3, #0]
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	f042 0201 	orr.w	r2, r2, #1
 800530a:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	2201      	movs	r2, #1
 8005310:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8005314:	2300      	movs	r3, #0
}
 8005316:	4618      	mov	r0, r3
 8005318:	3714      	adds	r7, #20
 800531a:	46bd      	mov	sp, r7
 800531c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005320:	4770      	bx	lr

08005322 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005322:	b480      	push	{r7}
 8005324:	b085      	sub	sp, #20
 8005326:	af00      	add	r7, sp, #0
 8005328:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	68da      	ldr	r2, [r3, #12]
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	f042 0201 	orr.w	r2, r2, #1
 8005338:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	689b      	ldr	r3, [r3, #8]
 8005340:	f003 0307 	and.w	r3, r3, #7
 8005344:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	2b06      	cmp	r3, #6
 800534a:	d007      	beq.n	800535c <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	681a      	ldr	r2, [r3, #0]
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	f042 0201 	orr.w	r2, r2, #1
 800535a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800535c:	2300      	movs	r3, #0
}
 800535e:	4618      	mov	r0, r3
 8005360:	3714      	adds	r7, #20
 8005362:	46bd      	mov	sp, r7
 8005364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005368:	4770      	bx	lr

0800536a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800536a:	b580      	push	{r7, lr}
 800536c:	b082      	sub	sp, #8
 800536e:	af00      	add	r7, sp, #0
 8005370:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	691b      	ldr	r3, [r3, #16]
 8005378:	f003 0302 	and.w	r3, r3, #2
 800537c:	2b02      	cmp	r3, #2
 800537e:	d122      	bne.n	80053c6 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	68db      	ldr	r3, [r3, #12]
 8005386:	f003 0302 	and.w	r3, r3, #2
 800538a:	2b02      	cmp	r3, #2
 800538c:	d11b      	bne.n	80053c6 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	f06f 0202 	mvn.w	r2, #2
 8005396:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	2201      	movs	r2, #1
 800539c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	699b      	ldr	r3, [r3, #24]
 80053a4:	f003 0303 	and.w	r3, r3, #3
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d003      	beq.n	80053b4 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80053ac:	6878      	ldr	r0, [r7, #4]
 80053ae:	f000 f9b2 	bl	8005716 <HAL_TIM_IC_CaptureCallback>
 80053b2:	e005      	b.n	80053c0 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80053b4:	6878      	ldr	r0, [r7, #4]
 80053b6:	f000 f9a4 	bl	8005702 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80053ba:	6878      	ldr	r0, [r7, #4]
 80053bc:	f000 f9b5 	bl	800572a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	2200      	movs	r2, #0
 80053c4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	691b      	ldr	r3, [r3, #16]
 80053cc:	f003 0304 	and.w	r3, r3, #4
 80053d0:	2b04      	cmp	r3, #4
 80053d2:	d122      	bne.n	800541a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	68db      	ldr	r3, [r3, #12]
 80053da:	f003 0304 	and.w	r3, r3, #4
 80053de:	2b04      	cmp	r3, #4
 80053e0:	d11b      	bne.n	800541a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	f06f 0204 	mvn.w	r2, #4
 80053ea:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	2202      	movs	r2, #2
 80053f0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	699b      	ldr	r3, [r3, #24]
 80053f8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d003      	beq.n	8005408 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005400:	6878      	ldr	r0, [r7, #4]
 8005402:	f000 f988 	bl	8005716 <HAL_TIM_IC_CaptureCallback>
 8005406:	e005      	b.n	8005414 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005408:	6878      	ldr	r0, [r7, #4]
 800540a:	f000 f97a 	bl	8005702 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800540e:	6878      	ldr	r0, [r7, #4]
 8005410:	f000 f98b 	bl	800572a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	2200      	movs	r2, #0
 8005418:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	691b      	ldr	r3, [r3, #16]
 8005420:	f003 0308 	and.w	r3, r3, #8
 8005424:	2b08      	cmp	r3, #8
 8005426:	d122      	bne.n	800546e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	68db      	ldr	r3, [r3, #12]
 800542e:	f003 0308 	and.w	r3, r3, #8
 8005432:	2b08      	cmp	r3, #8
 8005434:	d11b      	bne.n	800546e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	f06f 0208 	mvn.w	r2, #8
 800543e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	2204      	movs	r2, #4
 8005444:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	69db      	ldr	r3, [r3, #28]
 800544c:	f003 0303 	and.w	r3, r3, #3
 8005450:	2b00      	cmp	r3, #0
 8005452:	d003      	beq.n	800545c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005454:	6878      	ldr	r0, [r7, #4]
 8005456:	f000 f95e 	bl	8005716 <HAL_TIM_IC_CaptureCallback>
 800545a:	e005      	b.n	8005468 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800545c:	6878      	ldr	r0, [r7, #4]
 800545e:	f000 f950 	bl	8005702 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005462:	6878      	ldr	r0, [r7, #4]
 8005464:	f000 f961 	bl	800572a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	2200      	movs	r2, #0
 800546c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	691b      	ldr	r3, [r3, #16]
 8005474:	f003 0310 	and.w	r3, r3, #16
 8005478:	2b10      	cmp	r3, #16
 800547a:	d122      	bne.n	80054c2 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	68db      	ldr	r3, [r3, #12]
 8005482:	f003 0310 	and.w	r3, r3, #16
 8005486:	2b10      	cmp	r3, #16
 8005488:	d11b      	bne.n	80054c2 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	f06f 0210 	mvn.w	r2, #16
 8005492:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	2208      	movs	r2, #8
 8005498:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	69db      	ldr	r3, [r3, #28]
 80054a0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d003      	beq.n	80054b0 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80054a8:	6878      	ldr	r0, [r7, #4]
 80054aa:	f000 f934 	bl	8005716 <HAL_TIM_IC_CaptureCallback>
 80054ae:	e005      	b.n	80054bc <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80054b0:	6878      	ldr	r0, [r7, #4]
 80054b2:	f000 f926 	bl	8005702 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80054b6:	6878      	ldr	r0, [r7, #4]
 80054b8:	f000 f937 	bl	800572a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	2200      	movs	r2, #0
 80054c0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	691b      	ldr	r3, [r3, #16]
 80054c8:	f003 0301 	and.w	r3, r3, #1
 80054cc:	2b01      	cmp	r3, #1
 80054ce:	d10e      	bne.n	80054ee <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	68db      	ldr	r3, [r3, #12]
 80054d6:	f003 0301 	and.w	r3, r3, #1
 80054da:	2b01      	cmp	r3, #1
 80054dc:	d107      	bne.n	80054ee <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	f06f 0201 	mvn.w	r2, #1
 80054e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80054e8:	6878      	ldr	r0, [r7, #4]
 80054ea:	f7fd f817 	bl	800251c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	691b      	ldr	r3, [r3, #16]
 80054f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054f8:	2b80      	cmp	r3, #128	; 0x80
 80054fa:	d10e      	bne.n	800551a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	68db      	ldr	r3, [r3, #12]
 8005502:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005506:	2b80      	cmp	r3, #128	; 0x80
 8005508:	d107      	bne.n	800551a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005512:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005514:	6878      	ldr	r0, [r7, #4]
 8005516:	f000 faaf 	bl	8005a78 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	691b      	ldr	r3, [r3, #16]
 8005520:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005524:	2b40      	cmp	r3, #64	; 0x40
 8005526:	d10e      	bne.n	8005546 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	68db      	ldr	r3, [r3, #12]
 800552e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005532:	2b40      	cmp	r3, #64	; 0x40
 8005534:	d107      	bne.n	8005546 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800553e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005540:	6878      	ldr	r0, [r7, #4]
 8005542:	f000 f8fc 	bl	800573e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	691b      	ldr	r3, [r3, #16]
 800554c:	f003 0320 	and.w	r3, r3, #32
 8005550:	2b20      	cmp	r3, #32
 8005552:	d10e      	bne.n	8005572 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	68db      	ldr	r3, [r3, #12]
 800555a:	f003 0320 	and.w	r3, r3, #32
 800555e:	2b20      	cmp	r3, #32
 8005560:	d107      	bne.n	8005572 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	f06f 0220 	mvn.w	r2, #32
 800556a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800556c:	6878      	ldr	r0, [r7, #4]
 800556e:	f000 fa79 	bl	8005a64 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005572:	bf00      	nop
 8005574:	3708      	adds	r7, #8
 8005576:	46bd      	mov	sp, r7
 8005578:	bd80      	pop	{r7, pc}

0800557a <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800557a:	b580      	push	{r7, lr}
 800557c:	b084      	sub	sp, #16
 800557e:	af00      	add	r7, sp, #0
 8005580:	6078      	str	r0, [r7, #4]
 8005582:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800558a:	2b01      	cmp	r3, #1
 800558c:	d101      	bne.n	8005592 <HAL_TIM_ConfigClockSource+0x18>
 800558e:	2302      	movs	r3, #2
 8005590:	e0b3      	b.n	80056fa <HAL_TIM_ConfigClockSource+0x180>
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	2201      	movs	r2, #1
 8005596:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	2202      	movs	r2, #2
 800559e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	689b      	ldr	r3, [r3, #8]
 80055a8:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80055b0:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80055b8:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	68fa      	ldr	r2, [r7, #12]
 80055c0:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80055c2:	683b      	ldr	r3, [r7, #0]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80055ca:	d03e      	beq.n	800564a <HAL_TIM_ConfigClockSource+0xd0>
 80055cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80055d0:	f200 8087 	bhi.w	80056e2 <HAL_TIM_ConfigClockSource+0x168>
 80055d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80055d8:	f000 8085 	beq.w	80056e6 <HAL_TIM_ConfigClockSource+0x16c>
 80055dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80055e0:	d87f      	bhi.n	80056e2 <HAL_TIM_ConfigClockSource+0x168>
 80055e2:	2b70      	cmp	r3, #112	; 0x70
 80055e4:	d01a      	beq.n	800561c <HAL_TIM_ConfigClockSource+0xa2>
 80055e6:	2b70      	cmp	r3, #112	; 0x70
 80055e8:	d87b      	bhi.n	80056e2 <HAL_TIM_ConfigClockSource+0x168>
 80055ea:	2b60      	cmp	r3, #96	; 0x60
 80055ec:	d050      	beq.n	8005690 <HAL_TIM_ConfigClockSource+0x116>
 80055ee:	2b60      	cmp	r3, #96	; 0x60
 80055f0:	d877      	bhi.n	80056e2 <HAL_TIM_ConfigClockSource+0x168>
 80055f2:	2b50      	cmp	r3, #80	; 0x50
 80055f4:	d03c      	beq.n	8005670 <HAL_TIM_ConfigClockSource+0xf6>
 80055f6:	2b50      	cmp	r3, #80	; 0x50
 80055f8:	d873      	bhi.n	80056e2 <HAL_TIM_ConfigClockSource+0x168>
 80055fa:	2b40      	cmp	r3, #64	; 0x40
 80055fc:	d058      	beq.n	80056b0 <HAL_TIM_ConfigClockSource+0x136>
 80055fe:	2b40      	cmp	r3, #64	; 0x40
 8005600:	d86f      	bhi.n	80056e2 <HAL_TIM_ConfigClockSource+0x168>
 8005602:	2b30      	cmp	r3, #48	; 0x30
 8005604:	d064      	beq.n	80056d0 <HAL_TIM_ConfigClockSource+0x156>
 8005606:	2b30      	cmp	r3, #48	; 0x30
 8005608:	d86b      	bhi.n	80056e2 <HAL_TIM_ConfigClockSource+0x168>
 800560a:	2b20      	cmp	r3, #32
 800560c:	d060      	beq.n	80056d0 <HAL_TIM_ConfigClockSource+0x156>
 800560e:	2b20      	cmp	r3, #32
 8005610:	d867      	bhi.n	80056e2 <HAL_TIM_ConfigClockSource+0x168>
 8005612:	2b00      	cmp	r3, #0
 8005614:	d05c      	beq.n	80056d0 <HAL_TIM_ConfigClockSource+0x156>
 8005616:	2b10      	cmp	r3, #16
 8005618:	d05a      	beq.n	80056d0 <HAL_TIM_ConfigClockSource+0x156>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800561a:	e062      	b.n	80056e2 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	6818      	ldr	r0, [r3, #0]
 8005620:	683b      	ldr	r3, [r7, #0]
 8005622:	6899      	ldr	r1, [r3, #8]
 8005624:	683b      	ldr	r3, [r7, #0]
 8005626:	685a      	ldr	r2, [r3, #4]
 8005628:	683b      	ldr	r3, [r7, #0]
 800562a:	68db      	ldr	r3, [r3, #12]
 800562c:	f000 f98c 	bl	8005948 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	689b      	ldr	r3, [r3, #8]
 8005636:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800563e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	68fa      	ldr	r2, [r7, #12]
 8005646:	609a      	str	r2, [r3, #8]
      break;
 8005648:	e04e      	b.n	80056e8 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	6818      	ldr	r0, [r3, #0]
 800564e:	683b      	ldr	r3, [r7, #0]
 8005650:	6899      	ldr	r1, [r3, #8]
 8005652:	683b      	ldr	r3, [r7, #0]
 8005654:	685a      	ldr	r2, [r3, #4]
 8005656:	683b      	ldr	r3, [r7, #0]
 8005658:	68db      	ldr	r3, [r3, #12]
 800565a:	f000 f975 	bl	8005948 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	689a      	ldr	r2, [r3, #8]
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800566c:	609a      	str	r2, [r3, #8]
      break;
 800566e:	e03b      	b.n	80056e8 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	6818      	ldr	r0, [r3, #0]
 8005674:	683b      	ldr	r3, [r7, #0]
 8005676:	6859      	ldr	r1, [r3, #4]
 8005678:	683b      	ldr	r3, [r7, #0]
 800567a:	68db      	ldr	r3, [r3, #12]
 800567c:	461a      	mov	r2, r3
 800567e:	f000 f8e9 	bl	8005854 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	2150      	movs	r1, #80	; 0x50
 8005688:	4618      	mov	r0, r3
 800568a:	f000 f942 	bl	8005912 <TIM_ITRx_SetConfig>
      break;
 800568e:	e02b      	b.n	80056e8 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	6818      	ldr	r0, [r3, #0]
 8005694:	683b      	ldr	r3, [r7, #0]
 8005696:	6859      	ldr	r1, [r3, #4]
 8005698:	683b      	ldr	r3, [r7, #0]
 800569a:	68db      	ldr	r3, [r3, #12]
 800569c:	461a      	mov	r2, r3
 800569e:	f000 f908 	bl	80058b2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	2160      	movs	r1, #96	; 0x60
 80056a8:	4618      	mov	r0, r3
 80056aa:	f000 f932 	bl	8005912 <TIM_ITRx_SetConfig>
      break;
 80056ae:	e01b      	b.n	80056e8 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	6818      	ldr	r0, [r3, #0]
 80056b4:	683b      	ldr	r3, [r7, #0]
 80056b6:	6859      	ldr	r1, [r3, #4]
 80056b8:	683b      	ldr	r3, [r7, #0]
 80056ba:	68db      	ldr	r3, [r3, #12]
 80056bc:	461a      	mov	r2, r3
 80056be:	f000 f8c9 	bl	8005854 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	2140      	movs	r1, #64	; 0x40
 80056c8:	4618      	mov	r0, r3
 80056ca:	f000 f922 	bl	8005912 <TIM_ITRx_SetConfig>
      break;
 80056ce:	e00b      	b.n	80056e8 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681a      	ldr	r2, [r3, #0]
 80056d4:	683b      	ldr	r3, [r7, #0]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	4619      	mov	r1, r3
 80056da:	4610      	mov	r0, r2
 80056dc:	f000 f919 	bl	8005912 <TIM_ITRx_SetConfig>
      break;
 80056e0:	e002      	b.n	80056e8 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80056e2:	bf00      	nop
 80056e4:	e000      	b.n	80056e8 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80056e6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	2201      	movs	r2, #1
 80056ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	2200      	movs	r2, #0
 80056f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80056f8:	2300      	movs	r3, #0
}
 80056fa:	4618      	mov	r0, r3
 80056fc:	3710      	adds	r7, #16
 80056fe:	46bd      	mov	sp, r7
 8005700:	bd80      	pop	{r7, pc}

08005702 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005702:	b480      	push	{r7}
 8005704:	b083      	sub	sp, #12
 8005706:	af00      	add	r7, sp, #0
 8005708:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800570a:	bf00      	nop
 800570c:	370c      	adds	r7, #12
 800570e:	46bd      	mov	sp, r7
 8005710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005714:	4770      	bx	lr

08005716 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005716:	b480      	push	{r7}
 8005718:	b083      	sub	sp, #12
 800571a:	af00      	add	r7, sp, #0
 800571c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800571e:	bf00      	nop
 8005720:	370c      	adds	r7, #12
 8005722:	46bd      	mov	sp, r7
 8005724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005728:	4770      	bx	lr

0800572a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800572a:	b480      	push	{r7}
 800572c:	b083      	sub	sp, #12
 800572e:	af00      	add	r7, sp, #0
 8005730:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005732:	bf00      	nop
 8005734:	370c      	adds	r7, #12
 8005736:	46bd      	mov	sp, r7
 8005738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573c:	4770      	bx	lr

0800573e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800573e:	b480      	push	{r7}
 8005740:	b083      	sub	sp, #12
 8005742:	af00      	add	r7, sp, #0
 8005744:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005746:	bf00      	nop
 8005748:	370c      	adds	r7, #12
 800574a:	46bd      	mov	sp, r7
 800574c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005750:	4770      	bx	lr
	...

08005754 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005754:	b480      	push	{r7}
 8005756:	b085      	sub	sp, #20
 8005758:	af00      	add	r7, sp, #0
 800575a:	6078      	str	r0, [r7, #4]
 800575c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	4a34      	ldr	r2, [pc, #208]	; (8005838 <TIM_Base_SetConfig+0xe4>)
 8005768:	4293      	cmp	r3, r2
 800576a:	d00f      	beq.n	800578c <TIM_Base_SetConfig+0x38>
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005772:	d00b      	beq.n	800578c <TIM_Base_SetConfig+0x38>
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	4a31      	ldr	r2, [pc, #196]	; (800583c <TIM_Base_SetConfig+0xe8>)
 8005778:	4293      	cmp	r3, r2
 800577a:	d007      	beq.n	800578c <TIM_Base_SetConfig+0x38>
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	4a30      	ldr	r2, [pc, #192]	; (8005840 <TIM_Base_SetConfig+0xec>)
 8005780:	4293      	cmp	r3, r2
 8005782:	d003      	beq.n	800578c <TIM_Base_SetConfig+0x38>
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	4a2f      	ldr	r2, [pc, #188]	; (8005844 <TIM_Base_SetConfig+0xf0>)
 8005788:	4293      	cmp	r3, r2
 800578a:	d108      	bne.n	800579e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005792:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005794:	683b      	ldr	r3, [r7, #0]
 8005796:	685b      	ldr	r3, [r3, #4]
 8005798:	68fa      	ldr	r2, [r7, #12]
 800579a:	4313      	orrs	r3, r2
 800579c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	4a25      	ldr	r2, [pc, #148]	; (8005838 <TIM_Base_SetConfig+0xe4>)
 80057a2:	4293      	cmp	r3, r2
 80057a4:	d01b      	beq.n	80057de <TIM_Base_SetConfig+0x8a>
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80057ac:	d017      	beq.n	80057de <TIM_Base_SetConfig+0x8a>
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	4a22      	ldr	r2, [pc, #136]	; (800583c <TIM_Base_SetConfig+0xe8>)
 80057b2:	4293      	cmp	r3, r2
 80057b4:	d013      	beq.n	80057de <TIM_Base_SetConfig+0x8a>
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	4a21      	ldr	r2, [pc, #132]	; (8005840 <TIM_Base_SetConfig+0xec>)
 80057ba:	4293      	cmp	r3, r2
 80057bc:	d00f      	beq.n	80057de <TIM_Base_SetConfig+0x8a>
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	4a20      	ldr	r2, [pc, #128]	; (8005844 <TIM_Base_SetConfig+0xf0>)
 80057c2:	4293      	cmp	r3, r2
 80057c4:	d00b      	beq.n	80057de <TIM_Base_SetConfig+0x8a>
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	4a1f      	ldr	r2, [pc, #124]	; (8005848 <TIM_Base_SetConfig+0xf4>)
 80057ca:	4293      	cmp	r3, r2
 80057cc:	d007      	beq.n	80057de <TIM_Base_SetConfig+0x8a>
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	4a1e      	ldr	r2, [pc, #120]	; (800584c <TIM_Base_SetConfig+0xf8>)
 80057d2:	4293      	cmp	r3, r2
 80057d4:	d003      	beq.n	80057de <TIM_Base_SetConfig+0x8a>
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	4a1d      	ldr	r2, [pc, #116]	; (8005850 <TIM_Base_SetConfig+0xfc>)
 80057da:	4293      	cmp	r3, r2
 80057dc:	d108      	bne.n	80057f0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80057e4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80057e6:	683b      	ldr	r3, [r7, #0]
 80057e8:	68db      	ldr	r3, [r3, #12]
 80057ea:	68fa      	ldr	r2, [r7, #12]
 80057ec:	4313      	orrs	r3, r2
 80057ee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80057f6:	683b      	ldr	r3, [r7, #0]
 80057f8:	695b      	ldr	r3, [r3, #20]
 80057fa:	4313      	orrs	r3, r2
 80057fc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	68fa      	ldr	r2, [r7, #12]
 8005802:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005804:	683b      	ldr	r3, [r7, #0]
 8005806:	689a      	ldr	r2, [r3, #8]
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800580c:	683b      	ldr	r3, [r7, #0]
 800580e:	681a      	ldr	r2, [r3, #0]
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	4a08      	ldr	r2, [pc, #32]	; (8005838 <TIM_Base_SetConfig+0xe4>)
 8005818:	4293      	cmp	r3, r2
 800581a:	d103      	bne.n	8005824 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800581c:	683b      	ldr	r3, [r7, #0]
 800581e:	691a      	ldr	r2, [r3, #16]
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	2201      	movs	r2, #1
 8005828:	615a      	str	r2, [r3, #20]
}
 800582a:	bf00      	nop
 800582c:	3714      	adds	r7, #20
 800582e:	46bd      	mov	sp, r7
 8005830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005834:	4770      	bx	lr
 8005836:	bf00      	nop
 8005838:	40010000 	.word	0x40010000
 800583c:	40000400 	.word	0x40000400
 8005840:	40000800 	.word	0x40000800
 8005844:	40000c00 	.word	0x40000c00
 8005848:	40014000 	.word	0x40014000
 800584c:	40014400 	.word	0x40014400
 8005850:	40014800 	.word	0x40014800

08005854 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005854:	b480      	push	{r7}
 8005856:	b087      	sub	sp, #28
 8005858:	af00      	add	r7, sp, #0
 800585a:	60f8      	str	r0, [r7, #12]
 800585c:	60b9      	str	r1, [r7, #8]
 800585e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	6a1b      	ldr	r3, [r3, #32]
 8005864:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	6a1b      	ldr	r3, [r3, #32]
 800586a:	f023 0201 	bic.w	r2, r3, #1
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	699b      	ldr	r3, [r3, #24]
 8005876:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005878:	693b      	ldr	r3, [r7, #16]
 800587a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800587e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	011b      	lsls	r3, r3, #4
 8005884:	693a      	ldr	r2, [r7, #16]
 8005886:	4313      	orrs	r3, r2
 8005888:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800588a:	697b      	ldr	r3, [r7, #20]
 800588c:	f023 030a 	bic.w	r3, r3, #10
 8005890:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005892:	697a      	ldr	r2, [r7, #20]
 8005894:	68bb      	ldr	r3, [r7, #8]
 8005896:	4313      	orrs	r3, r2
 8005898:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	693a      	ldr	r2, [r7, #16]
 800589e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	697a      	ldr	r2, [r7, #20]
 80058a4:	621a      	str	r2, [r3, #32]
}
 80058a6:	bf00      	nop
 80058a8:	371c      	adds	r7, #28
 80058aa:	46bd      	mov	sp, r7
 80058ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b0:	4770      	bx	lr

080058b2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80058b2:	b480      	push	{r7}
 80058b4:	b087      	sub	sp, #28
 80058b6:	af00      	add	r7, sp, #0
 80058b8:	60f8      	str	r0, [r7, #12]
 80058ba:	60b9      	str	r1, [r7, #8]
 80058bc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	6a1b      	ldr	r3, [r3, #32]
 80058c2:	f023 0210 	bic.w	r2, r3, #16
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	699b      	ldr	r3, [r3, #24]
 80058ce:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	6a1b      	ldr	r3, [r3, #32]
 80058d4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80058d6:	697b      	ldr	r3, [r7, #20]
 80058d8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80058dc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	031b      	lsls	r3, r3, #12
 80058e2:	697a      	ldr	r2, [r7, #20]
 80058e4:	4313      	orrs	r3, r2
 80058e6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80058e8:	693b      	ldr	r3, [r7, #16]
 80058ea:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80058ee:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80058f0:	68bb      	ldr	r3, [r7, #8]
 80058f2:	011b      	lsls	r3, r3, #4
 80058f4:	693a      	ldr	r2, [r7, #16]
 80058f6:	4313      	orrs	r3, r2
 80058f8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	697a      	ldr	r2, [r7, #20]
 80058fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	693a      	ldr	r2, [r7, #16]
 8005904:	621a      	str	r2, [r3, #32]
}
 8005906:	bf00      	nop
 8005908:	371c      	adds	r7, #28
 800590a:	46bd      	mov	sp, r7
 800590c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005910:	4770      	bx	lr

08005912 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005912:	b480      	push	{r7}
 8005914:	b085      	sub	sp, #20
 8005916:	af00      	add	r7, sp, #0
 8005918:	6078      	str	r0, [r7, #4]
 800591a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	689b      	ldr	r3, [r3, #8]
 8005920:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005928:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800592a:	683a      	ldr	r2, [r7, #0]
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	4313      	orrs	r3, r2
 8005930:	f043 0307 	orr.w	r3, r3, #7
 8005934:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	68fa      	ldr	r2, [r7, #12]
 800593a:	609a      	str	r2, [r3, #8]
}
 800593c:	bf00      	nop
 800593e:	3714      	adds	r7, #20
 8005940:	46bd      	mov	sp, r7
 8005942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005946:	4770      	bx	lr

08005948 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005948:	b480      	push	{r7}
 800594a:	b087      	sub	sp, #28
 800594c:	af00      	add	r7, sp, #0
 800594e:	60f8      	str	r0, [r7, #12]
 8005950:	60b9      	str	r1, [r7, #8]
 8005952:	607a      	str	r2, [r7, #4]
 8005954:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	689b      	ldr	r3, [r3, #8]
 800595a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800595c:	697b      	ldr	r3, [r7, #20]
 800595e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005962:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005964:	683b      	ldr	r3, [r7, #0]
 8005966:	021a      	lsls	r2, r3, #8
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	431a      	orrs	r2, r3
 800596c:	68bb      	ldr	r3, [r7, #8]
 800596e:	4313      	orrs	r3, r2
 8005970:	697a      	ldr	r2, [r7, #20]
 8005972:	4313      	orrs	r3, r2
 8005974:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	697a      	ldr	r2, [r7, #20]
 800597a:	609a      	str	r2, [r3, #8]
}
 800597c:	bf00      	nop
 800597e:	371c      	adds	r7, #28
 8005980:	46bd      	mov	sp, r7
 8005982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005986:	4770      	bx	lr

08005988 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005988:	b480      	push	{r7}
 800598a:	b085      	sub	sp, #20
 800598c:	af00      	add	r7, sp, #0
 800598e:	6078      	str	r0, [r7, #4]
 8005990:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005998:	2b01      	cmp	r3, #1
 800599a:	d101      	bne.n	80059a0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800599c:	2302      	movs	r3, #2
 800599e:	e050      	b.n	8005a42 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	2201      	movs	r2, #1
 80059a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	2202      	movs	r2, #2
 80059ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	685b      	ldr	r3, [r3, #4]
 80059b6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	689b      	ldr	r3, [r3, #8]
 80059be:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059c6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80059c8:	683b      	ldr	r3, [r7, #0]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	68fa      	ldr	r2, [r7, #12]
 80059ce:	4313      	orrs	r3, r2
 80059d0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	68fa      	ldr	r2, [r7, #12]
 80059d8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	4a1c      	ldr	r2, [pc, #112]	; (8005a50 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80059e0:	4293      	cmp	r3, r2
 80059e2:	d018      	beq.n	8005a16 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80059ec:	d013      	beq.n	8005a16 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	4a18      	ldr	r2, [pc, #96]	; (8005a54 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80059f4:	4293      	cmp	r3, r2
 80059f6:	d00e      	beq.n	8005a16 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	4a16      	ldr	r2, [pc, #88]	; (8005a58 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80059fe:	4293      	cmp	r3, r2
 8005a00:	d009      	beq.n	8005a16 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	4a15      	ldr	r2, [pc, #84]	; (8005a5c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005a08:	4293      	cmp	r3, r2
 8005a0a:	d004      	beq.n	8005a16 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	4a13      	ldr	r2, [pc, #76]	; (8005a60 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005a12:	4293      	cmp	r3, r2
 8005a14:	d10c      	bne.n	8005a30 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005a16:	68bb      	ldr	r3, [r7, #8]
 8005a18:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005a1c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005a1e:	683b      	ldr	r3, [r7, #0]
 8005a20:	685b      	ldr	r3, [r3, #4]
 8005a22:	68ba      	ldr	r2, [r7, #8]
 8005a24:	4313      	orrs	r3, r2
 8005a26:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	68ba      	ldr	r2, [r7, #8]
 8005a2e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	2201      	movs	r2, #1
 8005a34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	2200      	movs	r2, #0
 8005a3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005a40:	2300      	movs	r3, #0
}
 8005a42:	4618      	mov	r0, r3
 8005a44:	3714      	adds	r7, #20
 8005a46:	46bd      	mov	sp, r7
 8005a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a4c:	4770      	bx	lr
 8005a4e:	bf00      	nop
 8005a50:	40010000 	.word	0x40010000
 8005a54:	40000400 	.word	0x40000400
 8005a58:	40000800 	.word	0x40000800
 8005a5c:	40000c00 	.word	0x40000c00
 8005a60:	40014000 	.word	0x40014000

08005a64 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005a64:	b480      	push	{r7}
 8005a66:	b083      	sub	sp, #12
 8005a68:	af00      	add	r7, sp, #0
 8005a6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005a6c:	bf00      	nop
 8005a6e:	370c      	adds	r7, #12
 8005a70:	46bd      	mov	sp, r7
 8005a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a76:	4770      	bx	lr

08005a78 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005a78:	b480      	push	{r7}
 8005a7a:	b083      	sub	sp, #12
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005a80:	bf00      	nop
 8005a82:	370c      	adds	r7, #12
 8005a84:	46bd      	mov	sp, r7
 8005a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8a:	4770      	bx	lr

08005a8c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005a8c:	b580      	push	{r7, lr}
 8005a8e:	b082      	sub	sp, #8
 8005a90:	af00      	add	r7, sp, #0
 8005a92:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d101      	bne.n	8005a9e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005a9a:	2301      	movs	r3, #1
 8005a9c:	e03f      	b.n	8005b1e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005aa4:	b2db      	uxtb	r3, r3
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d106      	bne.n	8005ab8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	2200      	movs	r2, #0
 8005aae:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005ab2:	6878      	ldr	r0, [r7, #4]
 8005ab4:	f7fc fefa 	bl	80028ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	2224      	movs	r2, #36	; 0x24
 8005abc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	68da      	ldr	r2, [r3, #12]
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005ace:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005ad0:	6878      	ldr	r0, [r7, #4]
 8005ad2:	f000 fb97 	bl	8006204 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	691a      	ldr	r2, [r3, #16]
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005ae4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	695a      	ldr	r2, [r3, #20]
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005af4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	68da      	ldr	r2, [r3, #12]
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005b04:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	2200      	movs	r2, #0
 8005b0a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	2220      	movs	r2, #32
 8005b10:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	2220      	movs	r2, #32
 8005b18:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8005b1c:	2300      	movs	r3, #0
}
 8005b1e:	4618      	mov	r0, r3
 8005b20:	3708      	adds	r7, #8
 8005b22:	46bd      	mov	sp, r7
 8005b24:	bd80      	pop	{r7, pc}

08005b26 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005b26:	b580      	push	{r7, lr}
 8005b28:	b088      	sub	sp, #32
 8005b2a:	af02      	add	r7, sp, #8
 8005b2c:	60f8      	str	r0, [r7, #12]
 8005b2e:	60b9      	str	r1, [r7, #8]
 8005b30:	603b      	str	r3, [r7, #0]
 8005b32:	4613      	mov	r3, r2
 8005b34:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8005b36:	2300      	movs	r3, #0
 8005b38:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005b40:	b2db      	uxtb	r3, r3
 8005b42:	2b20      	cmp	r3, #32
 8005b44:	f040 8083 	bne.w	8005c4e <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8005b48:	68bb      	ldr	r3, [r7, #8]
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d002      	beq.n	8005b54 <HAL_UART_Transmit+0x2e>
 8005b4e:	88fb      	ldrh	r3, [r7, #6]
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d101      	bne.n	8005b58 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8005b54:	2301      	movs	r3, #1
 8005b56:	e07b      	b.n	8005c50 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005b5e:	2b01      	cmp	r3, #1
 8005b60:	d101      	bne.n	8005b66 <HAL_UART_Transmit+0x40>
 8005b62:	2302      	movs	r3, #2
 8005b64:	e074      	b.n	8005c50 <HAL_UART_Transmit+0x12a>
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	2201      	movs	r2, #1
 8005b6a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	2200      	movs	r2, #0
 8005b72:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	2221      	movs	r2, #33	; 0x21
 8005b78:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8005b7c:	f7fd f81e 	bl	8002bbc <HAL_GetTick>
 8005b80:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	88fa      	ldrh	r2, [r7, #6]
 8005b86:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	88fa      	ldrh	r2, [r7, #6]
 8005b8c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	2200      	movs	r2, #0
 8005b92:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8005b96:	e042      	b.n	8005c1e <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005b9c:	b29b      	uxth	r3, r3
 8005b9e:	3b01      	subs	r3, #1
 8005ba0:	b29a      	uxth	r2, r3
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	689b      	ldr	r3, [r3, #8]
 8005baa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005bae:	d122      	bne.n	8005bf6 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005bb0:	683b      	ldr	r3, [r7, #0]
 8005bb2:	9300      	str	r3, [sp, #0]
 8005bb4:	697b      	ldr	r3, [r7, #20]
 8005bb6:	2200      	movs	r2, #0
 8005bb8:	2180      	movs	r1, #128	; 0x80
 8005bba:	68f8      	ldr	r0, [r7, #12]
 8005bbc:	f000 f9b6 	bl	8005f2c <UART_WaitOnFlagUntilTimeout>
 8005bc0:	4603      	mov	r3, r0
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d001      	beq.n	8005bca <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8005bc6:	2303      	movs	r3, #3
 8005bc8:	e042      	b.n	8005c50 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8005bca:	68bb      	ldr	r3, [r7, #8]
 8005bcc:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8005bce:	693b      	ldr	r3, [r7, #16]
 8005bd0:	881b      	ldrh	r3, [r3, #0]
 8005bd2:	461a      	mov	r2, r3
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005bdc:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	691b      	ldr	r3, [r3, #16]
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d103      	bne.n	8005bee <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8005be6:	68bb      	ldr	r3, [r7, #8]
 8005be8:	3302      	adds	r3, #2
 8005bea:	60bb      	str	r3, [r7, #8]
 8005bec:	e017      	b.n	8005c1e <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8005bee:	68bb      	ldr	r3, [r7, #8]
 8005bf0:	3301      	adds	r3, #1
 8005bf2:	60bb      	str	r3, [r7, #8]
 8005bf4:	e013      	b.n	8005c1e <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005bf6:	683b      	ldr	r3, [r7, #0]
 8005bf8:	9300      	str	r3, [sp, #0]
 8005bfa:	697b      	ldr	r3, [r7, #20]
 8005bfc:	2200      	movs	r2, #0
 8005bfe:	2180      	movs	r1, #128	; 0x80
 8005c00:	68f8      	ldr	r0, [r7, #12]
 8005c02:	f000 f993 	bl	8005f2c <UART_WaitOnFlagUntilTimeout>
 8005c06:	4603      	mov	r3, r0
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d001      	beq.n	8005c10 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8005c0c:	2303      	movs	r3, #3
 8005c0e:	e01f      	b.n	8005c50 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8005c10:	68bb      	ldr	r3, [r7, #8]
 8005c12:	1c5a      	adds	r2, r3, #1
 8005c14:	60ba      	str	r2, [r7, #8]
 8005c16:	781a      	ldrb	r2, [r3, #0]
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005c22:	b29b      	uxth	r3, r3
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d1b7      	bne.n	8005b98 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005c28:	683b      	ldr	r3, [r7, #0]
 8005c2a:	9300      	str	r3, [sp, #0]
 8005c2c:	697b      	ldr	r3, [r7, #20]
 8005c2e:	2200      	movs	r2, #0
 8005c30:	2140      	movs	r1, #64	; 0x40
 8005c32:	68f8      	ldr	r0, [r7, #12]
 8005c34:	f000 f97a 	bl	8005f2c <UART_WaitOnFlagUntilTimeout>
 8005c38:	4603      	mov	r3, r0
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d001      	beq.n	8005c42 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8005c3e:	2303      	movs	r3, #3
 8005c40:	e006      	b.n	8005c50 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	2220      	movs	r2, #32
 8005c46:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8005c4a:	2300      	movs	r3, #0
 8005c4c:	e000      	b.n	8005c50 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8005c4e:	2302      	movs	r3, #2
  }
}
 8005c50:	4618      	mov	r0, r3
 8005c52:	3718      	adds	r7, #24
 8005c54:	46bd      	mov	sp, r7
 8005c56:	bd80      	pop	{r7, pc}

08005c58 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005c58:	b480      	push	{r7}
 8005c5a:	b085      	sub	sp, #20
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	60f8      	str	r0, [r7, #12]
 8005c60:	60b9      	str	r1, [r7, #8]
 8005c62:	4613      	mov	r3, r2
 8005c64:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8005c6c:	b2db      	uxtb	r3, r3
 8005c6e:	2b20      	cmp	r3, #32
 8005c70:	d140      	bne.n	8005cf4 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005c72:	68bb      	ldr	r3, [r7, #8]
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d002      	beq.n	8005c7e <HAL_UART_Receive_IT+0x26>
 8005c78:	88fb      	ldrh	r3, [r7, #6]
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d101      	bne.n	8005c82 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005c7e:	2301      	movs	r3, #1
 8005c80:	e039      	b.n	8005cf6 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005c88:	2b01      	cmp	r3, #1
 8005c8a:	d101      	bne.n	8005c90 <HAL_UART_Receive_IT+0x38>
 8005c8c:	2302      	movs	r3, #2
 8005c8e:	e032      	b.n	8005cf6 <HAL_UART_Receive_IT+0x9e>
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	2201      	movs	r2, #1
 8005c94:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	68ba      	ldr	r2, [r7, #8]
 8005c9c:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	88fa      	ldrh	r2, [r7, #6]
 8005ca2:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	88fa      	ldrh	r2, [r7, #6]
 8005ca8:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	2200      	movs	r2, #0
 8005cae:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	2222      	movs	r2, #34	; 0x22
 8005cb4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	2200      	movs	r2, #0
 8005cbc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	68da      	ldr	r2, [r3, #12]
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005cce:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	695a      	ldr	r2, [r3, #20]
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	f042 0201 	orr.w	r2, r2, #1
 8005cde:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	68da      	ldr	r2, [r3, #12]
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	f042 0220 	orr.w	r2, r2, #32
 8005cee:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8005cf0:	2300      	movs	r3, #0
 8005cf2:	e000      	b.n	8005cf6 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8005cf4:	2302      	movs	r3, #2
  }
}
 8005cf6:	4618      	mov	r0, r3
 8005cf8:	3714      	adds	r7, #20
 8005cfa:	46bd      	mov	sp, r7
 8005cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d00:	4770      	bx	lr
	...

08005d04 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005d04:	b580      	push	{r7, lr}
 8005d06:	b088      	sub	sp, #32
 8005d08:	af00      	add	r7, sp, #0
 8005d0a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	68db      	ldr	r3, [r3, #12]
 8005d1a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	695b      	ldr	r3, [r3, #20]
 8005d22:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8005d24:	2300      	movs	r3, #0
 8005d26:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8005d28:	2300      	movs	r3, #0
 8005d2a:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005d2c:	69fb      	ldr	r3, [r7, #28]
 8005d2e:	f003 030f 	and.w	r3, r3, #15
 8005d32:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8005d34:	693b      	ldr	r3, [r7, #16]
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d10d      	bne.n	8005d56 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005d3a:	69fb      	ldr	r3, [r7, #28]
 8005d3c:	f003 0320 	and.w	r3, r3, #32
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d008      	beq.n	8005d56 <HAL_UART_IRQHandler+0x52>
 8005d44:	69bb      	ldr	r3, [r7, #24]
 8005d46:	f003 0320 	and.w	r3, r3, #32
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d003      	beq.n	8005d56 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8005d4e:	6878      	ldr	r0, [r7, #4]
 8005d50:	f000 f9d6 	bl	8006100 <UART_Receive_IT>
      return;
 8005d54:	e0d0      	b.n	8005ef8 <HAL_UART_IRQHandler+0x1f4>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005d56:	693b      	ldr	r3, [r7, #16]
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	f000 80b0 	beq.w	8005ebe <HAL_UART_IRQHandler+0x1ba>
 8005d5e:	697b      	ldr	r3, [r7, #20]
 8005d60:	f003 0301 	and.w	r3, r3, #1
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d105      	bne.n	8005d74 <HAL_UART_IRQHandler+0x70>
 8005d68:	69bb      	ldr	r3, [r7, #24]
 8005d6a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	f000 80a5 	beq.w	8005ebe <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005d74:	69fb      	ldr	r3, [r7, #28]
 8005d76:	f003 0301 	and.w	r3, r3, #1
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d00a      	beq.n	8005d94 <HAL_UART_IRQHandler+0x90>
 8005d7e:	69bb      	ldr	r3, [r7, #24]
 8005d80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d005      	beq.n	8005d94 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d8c:	f043 0201 	orr.w	r2, r3, #1
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005d94:	69fb      	ldr	r3, [r7, #28]
 8005d96:	f003 0304 	and.w	r3, r3, #4
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d00a      	beq.n	8005db4 <HAL_UART_IRQHandler+0xb0>
 8005d9e:	697b      	ldr	r3, [r7, #20]
 8005da0:	f003 0301 	and.w	r3, r3, #1
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d005      	beq.n	8005db4 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005dac:	f043 0202 	orr.w	r2, r3, #2
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005db4:	69fb      	ldr	r3, [r7, #28]
 8005db6:	f003 0302 	and.w	r3, r3, #2
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d00a      	beq.n	8005dd4 <HAL_UART_IRQHandler+0xd0>
 8005dbe:	697b      	ldr	r3, [r7, #20]
 8005dc0:	f003 0301 	and.w	r3, r3, #1
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d005      	beq.n	8005dd4 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005dcc:	f043 0204 	orr.w	r2, r3, #4
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8005dd4:	69fb      	ldr	r3, [r7, #28]
 8005dd6:	f003 0308 	and.w	r3, r3, #8
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d00f      	beq.n	8005dfe <HAL_UART_IRQHandler+0xfa>
 8005dde:	69bb      	ldr	r3, [r7, #24]
 8005de0:	f003 0320 	and.w	r3, r3, #32
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d104      	bne.n	8005df2 <HAL_UART_IRQHandler+0xee>
 8005de8:	697b      	ldr	r3, [r7, #20]
 8005dea:	f003 0301 	and.w	r3, r3, #1
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d005      	beq.n	8005dfe <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005df6:	f043 0208 	orr.w	r2, r3, #8
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d077      	beq.n	8005ef6 <HAL_UART_IRQHandler+0x1f2>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005e06:	69fb      	ldr	r3, [r7, #28]
 8005e08:	f003 0320 	and.w	r3, r3, #32
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d007      	beq.n	8005e20 <HAL_UART_IRQHandler+0x11c>
 8005e10:	69bb      	ldr	r3, [r7, #24]
 8005e12:	f003 0320 	and.w	r3, r3, #32
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d002      	beq.n	8005e20 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8005e1a:	6878      	ldr	r0, [r7, #4]
 8005e1c:	f000 f970 	bl	8006100 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	695b      	ldr	r3, [r3, #20]
 8005e26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e2a:	2b40      	cmp	r3, #64	; 0x40
 8005e2c:	bf0c      	ite	eq
 8005e2e:	2301      	moveq	r3, #1
 8005e30:	2300      	movne	r3, #0
 8005e32:	b2db      	uxtb	r3, r3
 8005e34:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e3a:	f003 0308 	and.w	r3, r3, #8
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d102      	bne.n	8005e48 <HAL_UART_IRQHandler+0x144>
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d031      	beq.n	8005eac <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005e48:	6878      	ldr	r0, [r7, #4]
 8005e4a:	f000 f8b9 	bl	8005fc0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	695b      	ldr	r3, [r3, #20]
 8005e54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e58:	2b40      	cmp	r3, #64	; 0x40
 8005e5a:	d123      	bne.n	8005ea4 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	695a      	ldr	r2, [r3, #20]
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005e6a:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d013      	beq.n	8005e9c <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e78:	4a21      	ldr	r2, [pc, #132]	; (8005f00 <HAL_UART_IRQHandler+0x1fc>)
 8005e7a:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e80:	4618      	mov	r0, r3
 8005e82:	f7fd fdf9 	bl	8003a78 <HAL_DMA_Abort_IT>
 8005e86:	4603      	mov	r3, r0
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d016      	beq.n	8005eba <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e90:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e92:	687a      	ldr	r2, [r7, #4]
 8005e94:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005e96:	4610      	mov	r0, r2
 8005e98:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e9a:	e00e      	b.n	8005eba <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005e9c:	6878      	ldr	r0, [r7, #4]
 8005e9e:	f000 f83b 	bl	8005f18 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ea2:	e00a      	b.n	8005eba <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005ea4:	6878      	ldr	r0, [r7, #4]
 8005ea6:	f000 f837 	bl	8005f18 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005eaa:	e006      	b.n	8005eba <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005eac:	6878      	ldr	r0, [r7, #4]
 8005eae:	f000 f833 	bl	8005f18 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	2200      	movs	r2, #0
 8005eb6:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8005eb8:	e01d      	b.n	8005ef6 <HAL_UART_IRQHandler+0x1f2>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005eba:	bf00      	nop
    return;
 8005ebc:	e01b      	b.n	8005ef6 <HAL_UART_IRQHandler+0x1f2>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005ebe:	69fb      	ldr	r3, [r7, #28]
 8005ec0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d008      	beq.n	8005eda <HAL_UART_IRQHandler+0x1d6>
 8005ec8:	69bb      	ldr	r3, [r7, #24]
 8005eca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d003      	beq.n	8005eda <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8005ed2:	6878      	ldr	r0, [r7, #4]
 8005ed4:	f000 f8a6 	bl	8006024 <UART_Transmit_IT>
    return;
 8005ed8:	e00e      	b.n	8005ef8 <HAL_UART_IRQHandler+0x1f4>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005eda:	69fb      	ldr	r3, [r7, #28]
 8005edc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d009      	beq.n	8005ef8 <HAL_UART_IRQHandler+0x1f4>
 8005ee4:	69bb      	ldr	r3, [r7, #24]
 8005ee6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d004      	beq.n	8005ef8 <HAL_UART_IRQHandler+0x1f4>
  {
    UART_EndTransmit_IT(huart);
 8005eee:	6878      	ldr	r0, [r7, #4]
 8005ef0:	f000 f8ee 	bl	80060d0 <UART_EndTransmit_IT>
    return;
 8005ef4:	e000      	b.n	8005ef8 <HAL_UART_IRQHandler+0x1f4>
    return;
 8005ef6:	bf00      	nop
  }
}
 8005ef8:	3720      	adds	r7, #32
 8005efa:	46bd      	mov	sp, r7
 8005efc:	bd80      	pop	{r7, pc}
 8005efe:	bf00      	nop
 8005f00:	08005ffd 	.word	0x08005ffd

08005f04 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005f04:	b480      	push	{r7}
 8005f06:	b083      	sub	sp, #12
 8005f08:	af00      	add	r7, sp, #0
 8005f0a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005f0c:	bf00      	nop
 8005f0e:	370c      	adds	r7, #12
 8005f10:	46bd      	mov	sp, r7
 8005f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f16:	4770      	bx	lr

08005f18 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005f18:	b480      	push	{r7}
 8005f1a:	b083      	sub	sp, #12
 8005f1c:	af00      	add	r7, sp, #0
 8005f1e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005f20:	bf00      	nop
 8005f22:	370c      	adds	r7, #12
 8005f24:	46bd      	mov	sp, r7
 8005f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f2a:	4770      	bx	lr

08005f2c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8005f2c:	b580      	push	{r7, lr}
 8005f2e:	b084      	sub	sp, #16
 8005f30:	af00      	add	r7, sp, #0
 8005f32:	60f8      	str	r0, [r7, #12]
 8005f34:	60b9      	str	r1, [r7, #8]
 8005f36:	603b      	str	r3, [r7, #0]
 8005f38:	4613      	mov	r3, r2
 8005f3a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005f3c:	e02c      	b.n	8005f98 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005f3e:	69bb      	ldr	r3, [r7, #24]
 8005f40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f44:	d028      	beq.n	8005f98 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005f46:	69bb      	ldr	r3, [r7, #24]
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d007      	beq.n	8005f5c <UART_WaitOnFlagUntilTimeout+0x30>
 8005f4c:	f7fc fe36 	bl	8002bbc <HAL_GetTick>
 8005f50:	4602      	mov	r2, r0
 8005f52:	683b      	ldr	r3, [r7, #0]
 8005f54:	1ad3      	subs	r3, r2, r3
 8005f56:	69ba      	ldr	r2, [r7, #24]
 8005f58:	429a      	cmp	r2, r3
 8005f5a:	d21d      	bcs.n	8005f98 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	68da      	ldr	r2, [r3, #12]
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005f6a:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	695a      	ldr	r2, [r3, #20]
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	f022 0201 	bic.w	r2, r2, #1
 8005f7a:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	2220      	movs	r2, #32
 8005f80:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	2220      	movs	r2, #32
 8005f88:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	2200      	movs	r2, #0
 8005f90:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8005f94:	2303      	movs	r3, #3
 8005f96:	e00f      	b.n	8005fb8 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	681a      	ldr	r2, [r3, #0]
 8005f9e:	68bb      	ldr	r3, [r7, #8]
 8005fa0:	4013      	ands	r3, r2
 8005fa2:	68ba      	ldr	r2, [r7, #8]
 8005fa4:	429a      	cmp	r2, r3
 8005fa6:	bf0c      	ite	eq
 8005fa8:	2301      	moveq	r3, #1
 8005faa:	2300      	movne	r3, #0
 8005fac:	b2db      	uxtb	r3, r3
 8005fae:	461a      	mov	r2, r3
 8005fb0:	79fb      	ldrb	r3, [r7, #7]
 8005fb2:	429a      	cmp	r2, r3
 8005fb4:	d0c3      	beq.n	8005f3e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005fb6:	2300      	movs	r3, #0
}
 8005fb8:	4618      	mov	r0, r3
 8005fba:	3710      	adds	r7, #16
 8005fbc:	46bd      	mov	sp, r7
 8005fbe:	bd80      	pop	{r7, pc}

08005fc0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005fc0:	b480      	push	{r7}
 8005fc2:	b083      	sub	sp, #12
 8005fc4:	af00      	add	r7, sp, #0
 8005fc6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	68da      	ldr	r2, [r3, #12]
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005fd6:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	695a      	ldr	r2, [r3, #20]
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	f022 0201 	bic.w	r2, r2, #1
 8005fe6:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	2220      	movs	r2, #32
 8005fec:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8005ff0:	bf00      	nop
 8005ff2:	370c      	adds	r7, #12
 8005ff4:	46bd      	mov	sp, r7
 8005ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ffa:	4770      	bx	lr

08005ffc <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005ffc:	b580      	push	{r7, lr}
 8005ffe:	b084      	sub	sp, #16
 8006000:	af00      	add	r7, sp, #0
 8006002:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006008:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	2200      	movs	r2, #0
 800600e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	2200      	movs	r2, #0
 8006014:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006016:	68f8      	ldr	r0, [r7, #12]
 8006018:	f7ff ff7e 	bl	8005f18 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800601c:	bf00      	nop
 800601e:	3710      	adds	r7, #16
 8006020:	46bd      	mov	sp, r7
 8006022:	bd80      	pop	{r7, pc}

08006024 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006024:	b480      	push	{r7}
 8006026:	b085      	sub	sp, #20
 8006028:	af00      	add	r7, sp, #0
 800602a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006032:	b2db      	uxtb	r3, r3
 8006034:	2b21      	cmp	r3, #33	; 0x21
 8006036:	d144      	bne.n	80060c2 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	689b      	ldr	r3, [r3, #8]
 800603c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006040:	d11a      	bne.n	8006078 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	6a1b      	ldr	r3, [r3, #32]
 8006046:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	881b      	ldrh	r3, [r3, #0]
 800604c:	461a      	mov	r2, r3
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006056:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	691b      	ldr	r3, [r3, #16]
 800605c:	2b00      	cmp	r3, #0
 800605e:	d105      	bne.n	800606c <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	6a1b      	ldr	r3, [r3, #32]
 8006064:	1c9a      	adds	r2, r3, #2
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	621a      	str	r2, [r3, #32]
 800606a:	e00e      	b.n	800608a <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	6a1b      	ldr	r3, [r3, #32]
 8006070:	1c5a      	adds	r2, r3, #1
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	621a      	str	r2, [r3, #32]
 8006076:	e008      	b.n	800608a <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	6a1b      	ldr	r3, [r3, #32]
 800607c:	1c59      	adds	r1, r3, #1
 800607e:	687a      	ldr	r2, [r7, #4]
 8006080:	6211      	str	r1, [r2, #32]
 8006082:	781a      	ldrb	r2, [r3, #0]
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800608e:	b29b      	uxth	r3, r3
 8006090:	3b01      	subs	r3, #1
 8006092:	b29b      	uxth	r3, r3
 8006094:	687a      	ldr	r2, [r7, #4]
 8006096:	4619      	mov	r1, r3
 8006098:	84d1      	strh	r1, [r2, #38]	; 0x26
 800609a:	2b00      	cmp	r3, #0
 800609c:	d10f      	bne.n	80060be <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	68da      	ldr	r2, [r3, #12]
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80060ac:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	68da      	ldr	r2, [r3, #12]
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80060bc:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80060be:	2300      	movs	r3, #0
 80060c0:	e000      	b.n	80060c4 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80060c2:	2302      	movs	r3, #2
  }
}
 80060c4:	4618      	mov	r0, r3
 80060c6:	3714      	adds	r7, #20
 80060c8:	46bd      	mov	sp, r7
 80060ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ce:	4770      	bx	lr

080060d0 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80060d0:	b580      	push	{r7, lr}
 80060d2:	b082      	sub	sp, #8
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	68da      	ldr	r2, [r3, #12]
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80060e6:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	2220      	movs	r2, #32
 80060ec:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80060f0:	6878      	ldr	r0, [r7, #4]
 80060f2:	f7ff ff07 	bl	8005f04 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80060f6:	2300      	movs	r3, #0
}
 80060f8:	4618      	mov	r0, r3
 80060fa:	3708      	adds	r7, #8
 80060fc:	46bd      	mov	sp, r7
 80060fe:	bd80      	pop	{r7, pc}

08006100 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006100:	b580      	push	{r7, lr}
 8006102:	b084      	sub	sp, #16
 8006104:	af00      	add	r7, sp, #0
 8006106:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800610e:	b2db      	uxtb	r3, r3
 8006110:	2b22      	cmp	r3, #34	; 0x22
 8006112:	d171      	bne.n	80061f8 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	689b      	ldr	r3, [r3, #8]
 8006118:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800611c:	d123      	bne.n	8006166 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006122:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	691b      	ldr	r3, [r3, #16]
 8006128:	2b00      	cmp	r3, #0
 800612a:	d10e      	bne.n	800614a <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	685b      	ldr	r3, [r3, #4]
 8006132:	b29b      	uxth	r3, r3
 8006134:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006138:	b29a      	uxth	r2, r3
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006142:	1c9a      	adds	r2, r3, #2
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	629a      	str	r2, [r3, #40]	; 0x28
 8006148:	e029      	b.n	800619e <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	685b      	ldr	r3, [r3, #4]
 8006150:	b29b      	uxth	r3, r3
 8006152:	b2db      	uxtb	r3, r3
 8006154:	b29a      	uxth	r2, r3
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800615e:	1c5a      	adds	r2, r3, #1
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	629a      	str	r2, [r3, #40]	; 0x28
 8006164:	e01b      	b.n	800619e <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	691b      	ldr	r3, [r3, #16]
 800616a:	2b00      	cmp	r3, #0
 800616c:	d10a      	bne.n	8006184 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	6858      	ldr	r0, [r3, #4]
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006178:	1c59      	adds	r1, r3, #1
 800617a:	687a      	ldr	r2, [r7, #4]
 800617c:	6291      	str	r1, [r2, #40]	; 0x28
 800617e:	b2c2      	uxtb	r2, r0
 8006180:	701a      	strb	r2, [r3, #0]
 8006182:	e00c      	b.n	800619e <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	685b      	ldr	r3, [r3, #4]
 800618a:	b2da      	uxtb	r2, r3
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006190:	1c58      	adds	r0, r3, #1
 8006192:	6879      	ldr	r1, [r7, #4]
 8006194:	6288      	str	r0, [r1, #40]	; 0x28
 8006196:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800619a:	b2d2      	uxtb	r2, r2
 800619c:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80061a2:	b29b      	uxth	r3, r3
 80061a4:	3b01      	subs	r3, #1
 80061a6:	b29b      	uxth	r3, r3
 80061a8:	687a      	ldr	r2, [r7, #4]
 80061aa:	4619      	mov	r1, r3
 80061ac:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d120      	bne.n	80061f4 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	68da      	ldr	r2, [r3, #12]
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	f022 0220 	bic.w	r2, r2, #32
 80061c0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	68da      	ldr	r2, [r3, #12]
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80061d0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	695a      	ldr	r2, [r3, #20]
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	f022 0201 	bic.w	r2, r2, #1
 80061e0:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	2220      	movs	r2, #32
 80061e6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80061ea:	6878      	ldr	r0, [r7, #4]
 80061ec:	f7fc f9fe 	bl	80025ec <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 80061f0:	2300      	movs	r3, #0
 80061f2:	e002      	b.n	80061fa <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 80061f4:	2300      	movs	r3, #0
 80061f6:	e000      	b.n	80061fa <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 80061f8:	2302      	movs	r3, #2
  }
}
 80061fa:	4618      	mov	r0, r3
 80061fc:	3710      	adds	r7, #16
 80061fe:	46bd      	mov	sp, r7
 8006200:	bd80      	pop	{r7, pc}
	...

08006204 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006204:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006208:	b0bd      	sub	sp, #244	; 0xf4
 800620a:	af00      	add	r7, sp, #0
 800620c:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006210:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	691b      	ldr	r3, [r3, #16]
 8006218:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800621c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006220:	68d9      	ldr	r1, [r3, #12]
 8006222:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006226:	681a      	ldr	r2, [r3, #0]
 8006228:	ea40 0301 	orr.w	r3, r0, r1
 800622c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800622e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006232:	689a      	ldr	r2, [r3, #8]
 8006234:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006238:	691b      	ldr	r3, [r3, #16]
 800623a:	431a      	orrs	r2, r3
 800623c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006240:	695b      	ldr	r3, [r3, #20]
 8006242:	431a      	orrs	r2, r3
 8006244:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006248:	69db      	ldr	r3, [r3, #28]
 800624a:	4313      	orrs	r3, r2
 800624c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  MODIFY_REG(huart->Instance->CR1,
 8006250:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	68db      	ldr	r3, [r3, #12]
 8006258:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800625c:	f021 010c 	bic.w	r1, r1, #12
 8006260:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006264:	681a      	ldr	r2, [r3, #0]
 8006266:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800626a:	430b      	orrs	r3, r1
 800626c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800626e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	695b      	ldr	r3, [r3, #20]
 8006276:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800627a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800627e:	6999      	ldr	r1, [r3, #24]
 8006280:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006284:	681a      	ldr	r2, [r3, #0]
 8006286:	ea40 0301 	orr.w	r3, r0, r1
 800628a:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800628c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006290:	69db      	ldr	r3, [r3, #28]
 8006292:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006296:	f040 81a5 	bne.w	80065e4 <UART_SetConfig+0x3e0>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800629a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800629e:	681a      	ldr	r2, [r3, #0]
 80062a0:	4bcd      	ldr	r3, [pc, #820]	; (80065d8 <UART_SetConfig+0x3d4>)
 80062a2:	429a      	cmp	r2, r3
 80062a4:	d006      	beq.n	80062b4 <UART_SetConfig+0xb0>
 80062a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80062aa:	681a      	ldr	r2, [r3, #0]
 80062ac:	4bcb      	ldr	r3, [pc, #812]	; (80065dc <UART_SetConfig+0x3d8>)
 80062ae:	429a      	cmp	r2, r3
 80062b0:	f040 80cb 	bne.w	800644a <UART_SetConfig+0x246>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80062b4:	f7fe fc7a 	bl	8004bac <HAL_RCC_GetPCLK2Freq>
 80062b8:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80062bc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80062c0:	461c      	mov	r4, r3
 80062c2:	f04f 0500 	mov.w	r5, #0
 80062c6:	4622      	mov	r2, r4
 80062c8:	462b      	mov	r3, r5
 80062ca:	1891      	adds	r1, r2, r2
 80062cc:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 80062d0:	415b      	adcs	r3, r3
 80062d2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80062d6:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80062da:	1912      	adds	r2, r2, r4
 80062dc:	eb45 0303 	adc.w	r3, r5, r3
 80062e0:	f04f 0000 	mov.w	r0, #0
 80062e4:	f04f 0100 	mov.w	r1, #0
 80062e8:	00d9      	lsls	r1, r3, #3
 80062ea:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80062ee:	00d0      	lsls	r0, r2, #3
 80062f0:	4602      	mov	r2, r0
 80062f2:	460b      	mov	r3, r1
 80062f4:	1911      	adds	r1, r2, r4
 80062f6:	f8c7 10d8 	str.w	r1, [r7, #216]	; 0xd8
 80062fa:	416b      	adcs	r3, r5
 80062fc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006300:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006304:	685b      	ldr	r3, [r3, #4]
 8006306:	461a      	mov	r2, r3
 8006308:	f04f 0300 	mov.w	r3, #0
 800630c:	1891      	adds	r1, r2, r2
 800630e:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 8006312:	415b      	adcs	r3, r3
 8006314:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006318:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 800631c:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 8006320:	f7fa fca4 	bl	8000c6c <__aeabi_uldivmod>
 8006324:	4602      	mov	r2, r0
 8006326:	460b      	mov	r3, r1
 8006328:	4bad      	ldr	r3, [pc, #692]	; (80065e0 <UART_SetConfig+0x3dc>)
 800632a:	fba3 2302 	umull	r2, r3, r3, r2
 800632e:	095b      	lsrs	r3, r3, #5
 8006330:	011e      	lsls	r6, r3, #4
 8006332:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006336:	461c      	mov	r4, r3
 8006338:	f04f 0500 	mov.w	r5, #0
 800633c:	4622      	mov	r2, r4
 800633e:	462b      	mov	r3, r5
 8006340:	1891      	adds	r1, r2, r2
 8006342:	67b9      	str	r1, [r7, #120]	; 0x78
 8006344:	415b      	adcs	r3, r3
 8006346:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006348:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 800634c:	1912      	adds	r2, r2, r4
 800634e:	eb45 0303 	adc.w	r3, r5, r3
 8006352:	f04f 0000 	mov.w	r0, #0
 8006356:	f04f 0100 	mov.w	r1, #0
 800635a:	00d9      	lsls	r1, r3, #3
 800635c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006360:	00d0      	lsls	r0, r2, #3
 8006362:	4602      	mov	r2, r0
 8006364:	460b      	mov	r3, r1
 8006366:	1911      	adds	r1, r2, r4
 8006368:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 800636c:	416b      	adcs	r3, r5
 800636e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8006372:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006376:	685b      	ldr	r3, [r3, #4]
 8006378:	461a      	mov	r2, r3
 800637a:	f04f 0300 	mov.w	r3, #0
 800637e:	1891      	adds	r1, r2, r2
 8006380:	6739      	str	r1, [r7, #112]	; 0x70
 8006382:	415b      	adcs	r3, r3
 8006384:	677b      	str	r3, [r7, #116]	; 0x74
 8006386:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800638a:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 800638e:	f7fa fc6d 	bl	8000c6c <__aeabi_uldivmod>
 8006392:	4602      	mov	r2, r0
 8006394:	460b      	mov	r3, r1
 8006396:	4b92      	ldr	r3, [pc, #584]	; (80065e0 <UART_SetConfig+0x3dc>)
 8006398:	fba3 1302 	umull	r1, r3, r3, r2
 800639c:	095b      	lsrs	r3, r3, #5
 800639e:	2164      	movs	r1, #100	; 0x64
 80063a0:	fb01 f303 	mul.w	r3, r1, r3
 80063a4:	1ad3      	subs	r3, r2, r3
 80063a6:	00db      	lsls	r3, r3, #3
 80063a8:	3332      	adds	r3, #50	; 0x32
 80063aa:	4a8d      	ldr	r2, [pc, #564]	; (80065e0 <UART_SetConfig+0x3dc>)
 80063ac:	fba2 2303 	umull	r2, r3, r2, r3
 80063b0:	095b      	lsrs	r3, r3, #5
 80063b2:	005b      	lsls	r3, r3, #1
 80063b4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80063b8:	441e      	add	r6, r3
 80063ba:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80063be:	4618      	mov	r0, r3
 80063c0:	f04f 0100 	mov.w	r1, #0
 80063c4:	4602      	mov	r2, r0
 80063c6:	460b      	mov	r3, r1
 80063c8:	1894      	adds	r4, r2, r2
 80063ca:	66bc      	str	r4, [r7, #104]	; 0x68
 80063cc:	415b      	adcs	r3, r3
 80063ce:	66fb      	str	r3, [r7, #108]	; 0x6c
 80063d0:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 80063d4:	1812      	adds	r2, r2, r0
 80063d6:	eb41 0303 	adc.w	r3, r1, r3
 80063da:	f04f 0400 	mov.w	r4, #0
 80063de:	f04f 0500 	mov.w	r5, #0
 80063e2:	00dd      	lsls	r5, r3, #3
 80063e4:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80063e8:	00d4      	lsls	r4, r2, #3
 80063ea:	4622      	mov	r2, r4
 80063ec:	462b      	mov	r3, r5
 80063ee:	1814      	adds	r4, r2, r0
 80063f0:	f8c7 40c8 	str.w	r4, [r7, #200]	; 0xc8
 80063f4:	414b      	adcs	r3, r1
 80063f6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80063fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80063fe:	685b      	ldr	r3, [r3, #4]
 8006400:	461a      	mov	r2, r3
 8006402:	f04f 0300 	mov.w	r3, #0
 8006406:	1891      	adds	r1, r2, r2
 8006408:	6639      	str	r1, [r7, #96]	; 0x60
 800640a:	415b      	adcs	r3, r3
 800640c:	667b      	str	r3, [r7, #100]	; 0x64
 800640e:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8006412:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8006416:	f7fa fc29 	bl	8000c6c <__aeabi_uldivmod>
 800641a:	4602      	mov	r2, r0
 800641c:	460b      	mov	r3, r1
 800641e:	4b70      	ldr	r3, [pc, #448]	; (80065e0 <UART_SetConfig+0x3dc>)
 8006420:	fba3 1302 	umull	r1, r3, r3, r2
 8006424:	095b      	lsrs	r3, r3, #5
 8006426:	2164      	movs	r1, #100	; 0x64
 8006428:	fb01 f303 	mul.w	r3, r1, r3
 800642c:	1ad3      	subs	r3, r2, r3
 800642e:	00db      	lsls	r3, r3, #3
 8006430:	3332      	adds	r3, #50	; 0x32
 8006432:	4a6b      	ldr	r2, [pc, #428]	; (80065e0 <UART_SetConfig+0x3dc>)
 8006434:	fba2 2303 	umull	r2, r3, r2, r3
 8006438:	095b      	lsrs	r3, r3, #5
 800643a:	f003 0207 	and.w	r2, r3, #7
 800643e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	4432      	add	r2, r6
 8006446:	609a      	str	r2, [r3, #8]
 8006448:	e26d      	b.n	8006926 <UART_SetConfig+0x722>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800644a:	f7fe fb9b 	bl	8004b84 <HAL_RCC_GetPCLK1Freq>
 800644e:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006452:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006456:	461c      	mov	r4, r3
 8006458:	f04f 0500 	mov.w	r5, #0
 800645c:	4622      	mov	r2, r4
 800645e:	462b      	mov	r3, r5
 8006460:	1891      	adds	r1, r2, r2
 8006462:	65b9      	str	r1, [r7, #88]	; 0x58
 8006464:	415b      	adcs	r3, r3
 8006466:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006468:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800646c:	1912      	adds	r2, r2, r4
 800646e:	eb45 0303 	adc.w	r3, r5, r3
 8006472:	f04f 0000 	mov.w	r0, #0
 8006476:	f04f 0100 	mov.w	r1, #0
 800647a:	00d9      	lsls	r1, r3, #3
 800647c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006480:	00d0      	lsls	r0, r2, #3
 8006482:	4602      	mov	r2, r0
 8006484:	460b      	mov	r3, r1
 8006486:	1911      	adds	r1, r2, r4
 8006488:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
 800648c:	416b      	adcs	r3, r5
 800648e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006492:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006496:	685b      	ldr	r3, [r3, #4]
 8006498:	461a      	mov	r2, r3
 800649a:	f04f 0300 	mov.w	r3, #0
 800649e:	1891      	adds	r1, r2, r2
 80064a0:	6539      	str	r1, [r7, #80]	; 0x50
 80064a2:	415b      	adcs	r3, r3
 80064a4:	657b      	str	r3, [r7, #84]	; 0x54
 80064a6:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80064aa:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 80064ae:	f7fa fbdd 	bl	8000c6c <__aeabi_uldivmod>
 80064b2:	4602      	mov	r2, r0
 80064b4:	460b      	mov	r3, r1
 80064b6:	4b4a      	ldr	r3, [pc, #296]	; (80065e0 <UART_SetConfig+0x3dc>)
 80064b8:	fba3 2302 	umull	r2, r3, r3, r2
 80064bc:	095b      	lsrs	r3, r3, #5
 80064be:	011e      	lsls	r6, r3, #4
 80064c0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80064c4:	461c      	mov	r4, r3
 80064c6:	f04f 0500 	mov.w	r5, #0
 80064ca:	4622      	mov	r2, r4
 80064cc:	462b      	mov	r3, r5
 80064ce:	1891      	adds	r1, r2, r2
 80064d0:	64b9      	str	r1, [r7, #72]	; 0x48
 80064d2:	415b      	adcs	r3, r3
 80064d4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80064d6:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80064da:	1912      	adds	r2, r2, r4
 80064dc:	eb45 0303 	adc.w	r3, r5, r3
 80064e0:	f04f 0000 	mov.w	r0, #0
 80064e4:	f04f 0100 	mov.w	r1, #0
 80064e8:	00d9      	lsls	r1, r3, #3
 80064ea:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80064ee:	00d0      	lsls	r0, r2, #3
 80064f0:	4602      	mov	r2, r0
 80064f2:	460b      	mov	r3, r1
 80064f4:	1911      	adds	r1, r2, r4
 80064f6:	f8c7 10b8 	str.w	r1, [r7, #184]	; 0xb8
 80064fa:	416b      	adcs	r3, r5
 80064fc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8006500:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006504:	685b      	ldr	r3, [r3, #4]
 8006506:	461a      	mov	r2, r3
 8006508:	f04f 0300 	mov.w	r3, #0
 800650c:	1891      	adds	r1, r2, r2
 800650e:	6439      	str	r1, [r7, #64]	; 0x40
 8006510:	415b      	adcs	r3, r3
 8006512:	647b      	str	r3, [r7, #68]	; 0x44
 8006514:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006518:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 800651c:	f7fa fba6 	bl	8000c6c <__aeabi_uldivmod>
 8006520:	4602      	mov	r2, r0
 8006522:	460b      	mov	r3, r1
 8006524:	4b2e      	ldr	r3, [pc, #184]	; (80065e0 <UART_SetConfig+0x3dc>)
 8006526:	fba3 1302 	umull	r1, r3, r3, r2
 800652a:	095b      	lsrs	r3, r3, #5
 800652c:	2164      	movs	r1, #100	; 0x64
 800652e:	fb01 f303 	mul.w	r3, r1, r3
 8006532:	1ad3      	subs	r3, r2, r3
 8006534:	00db      	lsls	r3, r3, #3
 8006536:	3332      	adds	r3, #50	; 0x32
 8006538:	4a29      	ldr	r2, [pc, #164]	; (80065e0 <UART_SetConfig+0x3dc>)
 800653a:	fba2 2303 	umull	r2, r3, r2, r3
 800653e:	095b      	lsrs	r3, r3, #5
 8006540:	005b      	lsls	r3, r3, #1
 8006542:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006546:	441e      	add	r6, r3
 8006548:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800654c:	4618      	mov	r0, r3
 800654e:	f04f 0100 	mov.w	r1, #0
 8006552:	4602      	mov	r2, r0
 8006554:	460b      	mov	r3, r1
 8006556:	1894      	adds	r4, r2, r2
 8006558:	63bc      	str	r4, [r7, #56]	; 0x38
 800655a:	415b      	adcs	r3, r3
 800655c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800655e:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006562:	1812      	adds	r2, r2, r0
 8006564:	eb41 0303 	adc.w	r3, r1, r3
 8006568:	f04f 0400 	mov.w	r4, #0
 800656c:	f04f 0500 	mov.w	r5, #0
 8006570:	00dd      	lsls	r5, r3, #3
 8006572:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006576:	00d4      	lsls	r4, r2, #3
 8006578:	4622      	mov	r2, r4
 800657a:	462b      	mov	r3, r5
 800657c:	1814      	adds	r4, r2, r0
 800657e:	f8c7 40b0 	str.w	r4, [r7, #176]	; 0xb0
 8006582:	414b      	adcs	r3, r1
 8006584:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006588:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800658c:	685b      	ldr	r3, [r3, #4]
 800658e:	461a      	mov	r2, r3
 8006590:	f04f 0300 	mov.w	r3, #0
 8006594:	1891      	adds	r1, r2, r2
 8006596:	6339      	str	r1, [r7, #48]	; 0x30
 8006598:	415b      	adcs	r3, r3
 800659a:	637b      	str	r3, [r7, #52]	; 0x34
 800659c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80065a0:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80065a4:	f7fa fb62 	bl	8000c6c <__aeabi_uldivmod>
 80065a8:	4602      	mov	r2, r0
 80065aa:	460b      	mov	r3, r1
 80065ac:	4b0c      	ldr	r3, [pc, #48]	; (80065e0 <UART_SetConfig+0x3dc>)
 80065ae:	fba3 1302 	umull	r1, r3, r3, r2
 80065b2:	095b      	lsrs	r3, r3, #5
 80065b4:	2164      	movs	r1, #100	; 0x64
 80065b6:	fb01 f303 	mul.w	r3, r1, r3
 80065ba:	1ad3      	subs	r3, r2, r3
 80065bc:	00db      	lsls	r3, r3, #3
 80065be:	3332      	adds	r3, #50	; 0x32
 80065c0:	4a07      	ldr	r2, [pc, #28]	; (80065e0 <UART_SetConfig+0x3dc>)
 80065c2:	fba2 2303 	umull	r2, r3, r2, r3
 80065c6:	095b      	lsrs	r3, r3, #5
 80065c8:	f003 0207 	and.w	r2, r3, #7
 80065cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	4432      	add	r2, r6
 80065d4:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80065d6:	e1a6      	b.n	8006926 <UART_SetConfig+0x722>
 80065d8:	40011000 	.word	0x40011000
 80065dc:	40011400 	.word	0x40011400
 80065e0:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80065e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80065e8:	681a      	ldr	r2, [r3, #0]
 80065ea:	4bd1      	ldr	r3, [pc, #836]	; (8006930 <UART_SetConfig+0x72c>)
 80065ec:	429a      	cmp	r2, r3
 80065ee:	d006      	beq.n	80065fe <UART_SetConfig+0x3fa>
 80065f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80065f4:	681a      	ldr	r2, [r3, #0]
 80065f6:	4bcf      	ldr	r3, [pc, #828]	; (8006934 <UART_SetConfig+0x730>)
 80065f8:	429a      	cmp	r2, r3
 80065fa:	f040 80ca 	bne.w	8006792 <UART_SetConfig+0x58e>
      pclk = HAL_RCC_GetPCLK2Freq();
 80065fe:	f7fe fad5 	bl	8004bac <HAL_RCC_GetPCLK2Freq>
 8006602:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006606:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800660a:	461c      	mov	r4, r3
 800660c:	f04f 0500 	mov.w	r5, #0
 8006610:	4622      	mov	r2, r4
 8006612:	462b      	mov	r3, r5
 8006614:	1891      	adds	r1, r2, r2
 8006616:	62b9      	str	r1, [r7, #40]	; 0x28
 8006618:	415b      	adcs	r3, r3
 800661a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800661c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006620:	1912      	adds	r2, r2, r4
 8006622:	eb45 0303 	adc.w	r3, r5, r3
 8006626:	f04f 0000 	mov.w	r0, #0
 800662a:	f04f 0100 	mov.w	r1, #0
 800662e:	00d9      	lsls	r1, r3, #3
 8006630:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006634:	00d0      	lsls	r0, r2, #3
 8006636:	4602      	mov	r2, r0
 8006638:	460b      	mov	r3, r1
 800663a:	eb12 0a04 	adds.w	sl, r2, r4
 800663e:	eb43 0b05 	adc.w	fp, r3, r5
 8006642:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006646:	685b      	ldr	r3, [r3, #4]
 8006648:	4618      	mov	r0, r3
 800664a:	f04f 0100 	mov.w	r1, #0
 800664e:	f04f 0200 	mov.w	r2, #0
 8006652:	f04f 0300 	mov.w	r3, #0
 8006656:	008b      	lsls	r3, r1, #2
 8006658:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800665c:	0082      	lsls	r2, r0, #2
 800665e:	4650      	mov	r0, sl
 8006660:	4659      	mov	r1, fp
 8006662:	f7fa fb03 	bl	8000c6c <__aeabi_uldivmod>
 8006666:	4602      	mov	r2, r0
 8006668:	460b      	mov	r3, r1
 800666a:	4bb3      	ldr	r3, [pc, #716]	; (8006938 <UART_SetConfig+0x734>)
 800666c:	fba3 2302 	umull	r2, r3, r3, r2
 8006670:	095b      	lsrs	r3, r3, #5
 8006672:	011e      	lsls	r6, r3, #4
 8006674:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006678:	4618      	mov	r0, r3
 800667a:	f04f 0100 	mov.w	r1, #0
 800667e:	4602      	mov	r2, r0
 8006680:	460b      	mov	r3, r1
 8006682:	1894      	adds	r4, r2, r2
 8006684:	623c      	str	r4, [r7, #32]
 8006686:	415b      	adcs	r3, r3
 8006688:	627b      	str	r3, [r7, #36]	; 0x24
 800668a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800668e:	1812      	adds	r2, r2, r0
 8006690:	eb41 0303 	adc.w	r3, r1, r3
 8006694:	f04f 0400 	mov.w	r4, #0
 8006698:	f04f 0500 	mov.w	r5, #0
 800669c:	00dd      	lsls	r5, r3, #3
 800669e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80066a2:	00d4      	lsls	r4, r2, #3
 80066a4:	4622      	mov	r2, r4
 80066a6:	462b      	mov	r3, r5
 80066a8:	1814      	adds	r4, r2, r0
 80066aa:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 80066ae:	414b      	adcs	r3, r1
 80066b0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80066b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80066b8:	685b      	ldr	r3, [r3, #4]
 80066ba:	4618      	mov	r0, r3
 80066bc:	f04f 0100 	mov.w	r1, #0
 80066c0:	f04f 0200 	mov.w	r2, #0
 80066c4:	f04f 0300 	mov.w	r3, #0
 80066c8:	008b      	lsls	r3, r1, #2
 80066ca:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80066ce:	0082      	lsls	r2, r0, #2
 80066d0:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 80066d4:	f7fa faca 	bl	8000c6c <__aeabi_uldivmod>
 80066d8:	4602      	mov	r2, r0
 80066da:	460b      	mov	r3, r1
 80066dc:	4b96      	ldr	r3, [pc, #600]	; (8006938 <UART_SetConfig+0x734>)
 80066de:	fba3 1302 	umull	r1, r3, r3, r2
 80066e2:	095b      	lsrs	r3, r3, #5
 80066e4:	2164      	movs	r1, #100	; 0x64
 80066e6:	fb01 f303 	mul.w	r3, r1, r3
 80066ea:	1ad3      	subs	r3, r2, r3
 80066ec:	011b      	lsls	r3, r3, #4
 80066ee:	3332      	adds	r3, #50	; 0x32
 80066f0:	4a91      	ldr	r2, [pc, #580]	; (8006938 <UART_SetConfig+0x734>)
 80066f2:	fba2 2303 	umull	r2, r3, r2, r3
 80066f6:	095b      	lsrs	r3, r3, #5
 80066f8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80066fc:	441e      	add	r6, r3
 80066fe:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006702:	4618      	mov	r0, r3
 8006704:	f04f 0100 	mov.w	r1, #0
 8006708:	4602      	mov	r2, r0
 800670a:	460b      	mov	r3, r1
 800670c:	1894      	adds	r4, r2, r2
 800670e:	61bc      	str	r4, [r7, #24]
 8006710:	415b      	adcs	r3, r3
 8006712:	61fb      	str	r3, [r7, #28]
 8006714:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006718:	1812      	adds	r2, r2, r0
 800671a:	eb41 0303 	adc.w	r3, r1, r3
 800671e:	f04f 0400 	mov.w	r4, #0
 8006722:	f04f 0500 	mov.w	r5, #0
 8006726:	00dd      	lsls	r5, r3, #3
 8006728:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800672c:	00d4      	lsls	r4, r2, #3
 800672e:	4622      	mov	r2, r4
 8006730:	462b      	mov	r3, r5
 8006732:	1814      	adds	r4, r2, r0
 8006734:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
 8006738:	414b      	adcs	r3, r1
 800673a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800673e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006742:	685b      	ldr	r3, [r3, #4]
 8006744:	4618      	mov	r0, r3
 8006746:	f04f 0100 	mov.w	r1, #0
 800674a:	f04f 0200 	mov.w	r2, #0
 800674e:	f04f 0300 	mov.w	r3, #0
 8006752:	008b      	lsls	r3, r1, #2
 8006754:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006758:	0082      	lsls	r2, r0, #2
 800675a:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 800675e:	f7fa fa85 	bl	8000c6c <__aeabi_uldivmod>
 8006762:	4602      	mov	r2, r0
 8006764:	460b      	mov	r3, r1
 8006766:	4b74      	ldr	r3, [pc, #464]	; (8006938 <UART_SetConfig+0x734>)
 8006768:	fba3 1302 	umull	r1, r3, r3, r2
 800676c:	095b      	lsrs	r3, r3, #5
 800676e:	2164      	movs	r1, #100	; 0x64
 8006770:	fb01 f303 	mul.w	r3, r1, r3
 8006774:	1ad3      	subs	r3, r2, r3
 8006776:	011b      	lsls	r3, r3, #4
 8006778:	3332      	adds	r3, #50	; 0x32
 800677a:	4a6f      	ldr	r2, [pc, #444]	; (8006938 <UART_SetConfig+0x734>)
 800677c:	fba2 2303 	umull	r2, r3, r2, r3
 8006780:	095b      	lsrs	r3, r3, #5
 8006782:	f003 020f 	and.w	r2, r3, #15
 8006786:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	4432      	add	r2, r6
 800678e:	609a      	str	r2, [r3, #8]
 8006790:	e0c9      	b.n	8006926 <UART_SetConfig+0x722>
      pclk = HAL_RCC_GetPCLK1Freq();
 8006792:	f7fe f9f7 	bl	8004b84 <HAL_RCC_GetPCLK1Freq>
 8006796:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800679a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800679e:	461c      	mov	r4, r3
 80067a0:	f04f 0500 	mov.w	r5, #0
 80067a4:	4622      	mov	r2, r4
 80067a6:	462b      	mov	r3, r5
 80067a8:	1891      	adds	r1, r2, r2
 80067aa:	6139      	str	r1, [r7, #16]
 80067ac:	415b      	adcs	r3, r3
 80067ae:	617b      	str	r3, [r7, #20]
 80067b0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80067b4:	1912      	adds	r2, r2, r4
 80067b6:	eb45 0303 	adc.w	r3, r5, r3
 80067ba:	f04f 0000 	mov.w	r0, #0
 80067be:	f04f 0100 	mov.w	r1, #0
 80067c2:	00d9      	lsls	r1, r3, #3
 80067c4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80067c8:	00d0      	lsls	r0, r2, #3
 80067ca:	4602      	mov	r2, r0
 80067cc:	460b      	mov	r3, r1
 80067ce:	eb12 0804 	adds.w	r8, r2, r4
 80067d2:	eb43 0905 	adc.w	r9, r3, r5
 80067d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80067da:	685b      	ldr	r3, [r3, #4]
 80067dc:	4618      	mov	r0, r3
 80067de:	f04f 0100 	mov.w	r1, #0
 80067e2:	f04f 0200 	mov.w	r2, #0
 80067e6:	f04f 0300 	mov.w	r3, #0
 80067ea:	008b      	lsls	r3, r1, #2
 80067ec:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80067f0:	0082      	lsls	r2, r0, #2
 80067f2:	4640      	mov	r0, r8
 80067f4:	4649      	mov	r1, r9
 80067f6:	f7fa fa39 	bl	8000c6c <__aeabi_uldivmod>
 80067fa:	4602      	mov	r2, r0
 80067fc:	460b      	mov	r3, r1
 80067fe:	4b4e      	ldr	r3, [pc, #312]	; (8006938 <UART_SetConfig+0x734>)
 8006800:	fba3 2302 	umull	r2, r3, r3, r2
 8006804:	095b      	lsrs	r3, r3, #5
 8006806:	011e      	lsls	r6, r3, #4
 8006808:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800680c:	4618      	mov	r0, r3
 800680e:	f04f 0100 	mov.w	r1, #0
 8006812:	4602      	mov	r2, r0
 8006814:	460b      	mov	r3, r1
 8006816:	1894      	adds	r4, r2, r2
 8006818:	60bc      	str	r4, [r7, #8]
 800681a:	415b      	adcs	r3, r3
 800681c:	60fb      	str	r3, [r7, #12]
 800681e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006822:	1812      	adds	r2, r2, r0
 8006824:	eb41 0303 	adc.w	r3, r1, r3
 8006828:	f04f 0400 	mov.w	r4, #0
 800682c:	f04f 0500 	mov.w	r5, #0
 8006830:	00dd      	lsls	r5, r3, #3
 8006832:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006836:	00d4      	lsls	r4, r2, #3
 8006838:	4622      	mov	r2, r4
 800683a:	462b      	mov	r3, r5
 800683c:	1814      	adds	r4, r2, r0
 800683e:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 8006842:	414b      	adcs	r3, r1
 8006844:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006848:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800684c:	685b      	ldr	r3, [r3, #4]
 800684e:	4618      	mov	r0, r3
 8006850:	f04f 0100 	mov.w	r1, #0
 8006854:	f04f 0200 	mov.w	r2, #0
 8006858:	f04f 0300 	mov.w	r3, #0
 800685c:	008b      	lsls	r3, r1, #2
 800685e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006862:	0082      	lsls	r2, r0, #2
 8006864:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006868:	f7fa fa00 	bl	8000c6c <__aeabi_uldivmod>
 800686c:	4602      	mov	r2, r0
 800686e:	460b      	mov	r3, r1
 8006870:	4b31      	ldr	r3, [pc, #196]	; (8006938 <UART_SetConfig+0x734>)
 8006872:	fba3 1302 	umull	r1, r3, r3, r2
 8006876:	095b      	lsrs	r3, r3, #5
 8006878:	2164      	movs	r1, #100	; 0x64
 800687a:	fb01 f303 	mul.w	r3, r1, r3
 800687e:	1ad3      	subs	r3, r2, r3
 8006880:	011b      	lsls	r3, r3, #4
 8006882:	3332      	adds	r3, #50	; 0x32
 8006884:	4a2c      	ldr	r2, [pc, #176]	; (8006938 <UART_SetConfig+0x734>)
 8006886:	fba2 2303 	umull	r2, r3, r2, r3
 800688a:	095b      	lsrs	r3, r3, #5
 800688c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006890:	441e      	add	r6, r3
 8006892:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006896:	4618      	mov	r0, r3
 8006898:	f04f 0100 	mov.w	r1, #0
 800689c:	4602      	mov	r2, r0
 800689e:	460b      	mov	r3, r1
 80068a0:	1894      	adds	r4, r2, r2
 80068a2:	603c      	str	r4, [r7, #0]
 80068a4:	415b      	adcs	r3, r3
 80068a6:	607b      	str	r3, [r7, #4]
 80068a8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80068ac:	1812      	adds	r2, r2, r0
 80068ae:	eb41 0303 	adc.w	r3, r1, r3
 80068b2:	f04f 0400 	mov.w	r4, #0
 80068b6:	f04f 0500 	mov.w	r5, #0
 80068ba:	00dd      	lsls	r5, r3, #3
 80068bc:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80068c0:	00d4      	lsls	r4, r2, #3
 80068c2:	4622      	mov	r2, r4
 80068c4:	462b      	mov	r3, r5
 80068c6:	1814      	adds	r4, r2, r0
 80068c8:	f8c7 4090 	str.w	r4, [r7, #144]	; 0x90
 80068cc:	414b      	adcs	r3, r1
 80068ce:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80068d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80068d6:	685b      	ldr	r3, [r3, #4]
 80068d8:	4618      	mov	r0, r3
 80068da:	f04f 0100 	mov.w	r1, #0
 80068de:	f04f 0200 	mov.w	r2, #0
 80068e2:	f04f 0300 	mov.w	r3, #0
 80068e6:	008b      	lsls	r3, r1, #2
 80068e8:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80068ec:	0082      	lsls	r2, r0, #2
 80068ee:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 80068f2:	f7fa f9bb 	bl	8000c6c <__aeabi_uldivmod>
 80068f6:	4602      	mov	r2, r0
 80068f8:	460b      	mov	r3, r1
 80068fa:	4b0f      	ldr	r3, [pc, #60]	; (8006938 <UART_SetConfig+0x734>)
 80068fc:	fba3 1302 	umull	r1, r3, r3, r2
 8006900:	095b      	lsrs	r3, r3, #5
 8006902:	2164      	movs	r1, #100	; 0x64
 8006904:	fb01 f303 	mul.w	r3, r1, r3
 8006908:	1ad3      	subs	r3, r2, r3
 800690a:	011b      	lsls	r3, r3, #4
 800690c:	3332      	adds	r3, #50	; 0x32
 800690e:	4a0a      	ldr	r2, [pc, #40]	; (8006938 <UART_SetConfig+0x734>)
 8006910:	fba2 2303 	umull	r2, r3, r2, r3
 8006914:	095b      	lsrs	r3, r3, #5
 8006916:	f003 020f 	and.w	r2, r3, #15
 800691a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	4432      	add	r2, r6
 8006922:	609a      	str	r2, [r3, #8]
}
 8006924:	e7ff      	b.n	8006926 <UART_SetConfig+0x722>
 8006926:	bf00      	nop
 8006928:	37f4      	adds	r7, #244	; 0xf4
 800692a:	46bd      	mov	sp, r7
 800692c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006930:	40011000 	.word	0x40011000
 8006934:	40011400 	.word	0x40011400
 8006938:	51eb851f 	.word	0x51eb851f

0800693c <__errno>:
 800693c:	4b01      	ldr	r3, [pc, #4]	; (8006944 <__errno+0x8>)
 800693e:	6818      	ldr	r0, [r3, #0]
 8006940:	4770      	bx	lr
 8006942:	bf00      	nop
 8006944:	2000001c 	.word	0x2000001c

08006948 <__libc_init_array>:
 8006948:	b570      	push	{r4, r5, r6, lr}
 800694a:	4d0d      	ldr	r5, [pc, #52]	; (8006980 <__libc_init_array+0x38>)
 800694c:	4c0d      	ldr	r4, [pc, #52]	; (8006984 <__libc_init_array+0x3c>)
 800694e:	1b64      	subs	r4, r4, r5
 8006950:	10a4      	asrs	r4, r4, #2
 8006952:	2600      	movs	r6, #0
 8006954:	42a6      	cmp	r6, r4
 8006956:	d109      	bne.n	800696c <__libc_init_array+0x24>
 8006958:	4d0b      	ldr	r5, [pc, #44]	; (8006988 <__libc_init_array+0x40>)
 800695a:	4c0c      	ldr	r4, [pc, #48]	; (800698c <__libc_init_array+0x44>)
 800695c:	f000 fc4e 	bl	80071fc <_init>
 8006960:	1b64      	subs	r4, r4, r5
 8006962:	10a4      	asrs	r4, r4, #2
 8006964:	2600      	movs	r6, #0
 8006966:	42a6      	cmp	r6, r4
 8006968:	d105      	bne.n	8006976 <__libc_init_array+0x2e>
 800696a:	bd70      	pop	{r4, r5, r6, pc}
 800696c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006970:	4798      	blx	r3
 8006972:	3601      	adds	r6, #1
 8006974:	e7ee      	b.n	8006954 <__libc_init_array+0xc>
 8006976:	f855 3b04 	ldr.w	r3, [r5], #4
 800697a:	4798      	blx	r3
 800697c:	3601      	adds	r6, #1
 800697e:	e7f2      	b.n	8006966 <__libc_init_array+0x1e>
 8006980:	08007600 	.word	0x08007600
 8006984:	08007600 	.word	0x08007600
 8006988:	08007600 	.word	0x08007600
 800698c:	08007604 	.word	0x08007604

08006990 <memcpy>:
 8006990:	440a      	add	r2, r1
 8006992:	4291      	cmp	r1, r2
 8006994:	f100 33ff 	add.w	r3, r0, #4294967295
 8006998:	d100      	bne.n	800699c <memcpy+0xc>
 800699a:	4770      	bx	lr
 800699c:	b510      	push	{r4, lr}
 800699e:	f811 4b01 	ldrb.w	r4, [r1], #1
 80069a2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80069a6:	4291      	cmp	r1, r2
 80069a8:	d1f9      	bne.n	800699e <memcpy+0xe>
 80069aa:	bd10      	pop	{r4, pc}

080069ac <memset>:
 80069ac:	4402      	add	r2, r0
 80069ae:	4603      	mov	r3, r0
 80069b0:	4293      	cmp	r3, r2
 80069b2:	d100      	bne.n	80069b6 <memset+0xa>
 80069b4:	4770      	bx	lr
 80069b6:	f803 1b01 	strb.w	r1, [r3], #1
 80069ba:	e7f9      	b.n	80069b0 <memset+0x4>

080069bc <siprintf>:
 80069bc:	b40e      	push	{r1, r2, r3}
 80069be:	b500      	push	{lr}
 80069c0:	b09c      	sub	sp, #112	; 0x70
 80069c2:	ab1d      	add	r3, sp, #116	; 0x74
 80069c4:	9002      	str	r0, [sp, #8]
 80069c6:	9006      	str	r0, [sp, #24]
 80069c8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80069cc:	4809      	ldr	r0, [pc, #36]	; (80069f4 <siprintf+0x38>)
 80069ce:	9107      	str	r1, [sp, #28]
 80069d0:	9104      	str	r1, [sp, #16]
 80069d2:	4909      	ldr	r1, [pc, #36]	; (80069f8 <siprintf+0x3c>)
 80069d4:	f853 2b04 	ldr.w	r2, [r3], #4
 80069d8:	9105      	str	r1, [sp, #20]
 80069da:	6800      	ldr	r0, [r0, #0]
 80069dc:	9301      	str	r3, [sp, #4]
 80069de:	a902      	add	r1, sp, #8
 80069e0:	f000 f868 	bl	8006ab4 <_svfiprintf_r>
 80069e4:	9b02      	ldr	r3, [sp, #8]
 80069e6:	2200      	movs	r2, #0
 80069e8:	701a      	strb	r2, [r3, #0]
 80069ea:	b01c      	add	sp, #112	; 0x70
 80069ec:	f85d eb04 	ldr.w	lr, [sp], #4
 80069f0:	b003      	add	sp, #12
 80069f2:	4770      	bx	lr
 80069f4:	2000001c 	.word	0x2000001c
 80069f8:	ffff0208 	.word	0xffff0208

080069fc <__ssputs_r>:
 80069fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006a00:	688e      	ldr	r6, [r1, #8]
 8006a02:	429e      	cmp	r6, r3
 8006a04:	4682      	mov	sl, r0
 8006a06:	460c      	mov	r4, r1
 8006a08:	4690      	mov	r8, r2
 8006a0a:	461f      	mov	r7, r3
 8006a0c:	d838      	bhi.n	8006a80 <__ssputs_r+0x84>
 8006a0e:	898a      	ldrh	r2, [r1, #12]
 8006a10:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006a14:	d032      	beq.n	8006a7c <__ssputs_r+0x80>
 8006a16:	6825      	ldr	r5, [r4, #0]
 8006a18:	6909      	ldr	r1, [r1, #16]
 8006a1a:	eba5 0901 	sub.w	r9, r5, r1
 8006a1e:	6965      	ldr	r5, [r4, #20]
 8006a20:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006a24:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006a28:	3301      	adds	r3, #1
 8006a2a:	444b      	add	r3, r9
 8006a2c:	106d      	asrs	r5, r5, #1
 8006a2e:	429d      	cmp	r5, r3
 8006a30:	bf38      	it	cc
 8006a32:	461d      	movcc	r5, r3
 8006a34:	0553      	lsls	r3, r2, #21
 8006a36:	d531      	bpl.n	8006a9c <__ssputs_r+0xa0>
 8006a38:	4629      	mov	r1, r5
 8006a3a:	f000 fb39 	bl	80070b0 <_malloc_r>
 8006a3e:	4606      	mov	r6, r0
 8006a40:	b950      	cbnz	r0, 8006a58 <__ssputs_r+0x5c>
 8006a42:	230c      	movs	r3, #12
 8006a44:	f8ca 3000 	str.w	r3, [sl]
 8006a48:	89a3      	ldrh	r3, [r4, #12]
 8006a4a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006a4e:	81a3      	strh	r3, [r4, #12]
 8006a50:	f04f 30ff 	mov.w	r0, #4294967295
 8006a54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a58:	6921      	ldr	r1, [r4, #16]
 8006a5a:	464a      	mov	r2, r9
 8006a5c:	f7ff ff98 	bl	8006990 <memcpy>
 8006a60:	89a3      	ldrh	r3, [r4, #12]
 8006a62:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006a66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a6a:	81a3      	strh	r3, [r4, #12]
 8006a6c:	6126      	str	r6, [r4, #16]
 8006a6e:	6165      	str	r5, [r4, #20]
 8006a70:	444e      	add	r6, r9
 8006a72:	eba5 0509 	sub.w	r5, r5, r9
 8006a76:	6026      	str	r6, [r4, #0]
 8006a78:	60a5      	str	r5, [r4, #8]
 8006a7a:	463e      	mov	r6, r7
 8006a7c:	42be      	cmp	r6, r7
 8006a7e:	d900      	bls.n	8006a82 <__ssputs_r+0x86>
 8006a80:	463e      	mov	r6, r7
 8006a82:	4632      	mov	r2, r6
 8006a84:	6820      	ldr	r0, [r4, #0]
 8006a86:	4641      	mov	r1, r8
 8006a88:	f000 faa8 	bl	8006fdc <memmove>
 8006a8c:	68a3      	ldr	r3, [r4, #8]
 8006a8e:	6822      	ldr	r2, [r4, #0]
 8006a90:	1b9b      	subs	r3, r3, r6
 8006a92:	4432      	add	r2, r6
 8006a94:	60a3      	str	r3, [r4, #8]
 8006a96:	6022      	str	r2, [r4, #0]
 8006a98:	2000      	movs	r0, #0
 8006a9a:	e7db      	b.n	8006a54 <__ssputs_r+0x58>
 8006a9c:	462a      	mov	r2, r5
 8006a9e:	f000 fb61 	bl	8007164 <_realloc_r>
 8006aa2:	4606      	mov	r6, r0
 8006aa4:	2800      	cmp	r0, #0
 8006aa6:	d1e1      	bne.n	8006a6c <__ssputs_r+0x70>
 8006aa8:	6921      	ldr	r1, [r4, #16]
 8006aaa:	4650      	mov	r0, sl
 8006aac:	f000 fab0 	bl	8007010 <_free_r>
 8006ab0:	e7c7      	b.n	8006a42 <__ssputs_r+0x46>
	...

08006ab4 <_svfiprintf_r>:
 8006ab4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ab8:	4698      	mov	r8, r3
 8006aba:	898b      	ldrh	r3, [r1, #12]
 8006abc:	061b      	lsls	r3, r3, #24
 8006abe:	b09d      	sub	sp, #116	; 0x74
 8006ac0:	4607      	mov	r7, r0
 8006ac2:	460d      	mov	r5, r1
 8006ac4:	4614      	mov	r4, r2
 8006ac6:	d50e      	bpl.n	8006ae6 <_svfiprintf_r+0x32>
 8006ac8:	690b      	ldr	r3, [r1, #16]
 8006aca:	b963      	cbnz	r3, 8006ae6 <_svfiprintf_r+0x32>
 8006acc:	2140      	movs	r1, #64	; 0x40
 8006ace:	f000 faef 	bl	80070b0 <_malloc_r>
 8006ad2:	6028      	str	r0, [r5, #0]
 8006ad4:	6128      	str	r0, [r5, #16]
 8006ad6:	b920      	cbnz	r0, 8006ae2 <_svfiprintf_r+0x2e>
 8006ad8:	230c      	movs	r3, #12
 8006ada:	603b      	str	r3, [r7, #0]
 8006adc:	f04f 30ff 	mov.w	r0, #4294967295
 8006ae0:	e0d1      	b.n	8006c86 <_svfiprintf_r+0x1d2>
 8006ae2:	2340      	movs	r3, #64	; 0x40
 8006ae4:	616b      	str	r3, [r5, #20]
 8006ae6:	2300      	movs	r3, #0
 8006ae8:	9309      	str	r3, [sp, #36]	; 0x24
 8006aea:	2320      	movs	r3, #32
 8006aec:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006af0:	f8cd 800c 	str.w	r8, [sp, #12]
 8006af4:	2330      	movs	r3, #48	; 0x30
 8006af6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006ca0 <_svfiprintf_r+0x1ec>
 8006afa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006afe:	f04f 0901 	mov.w	r9, #1
 8006b02:	4623      	mov	r3, r4
 8006b04:	469a      	mov	sl, r3
 8006b06:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006b0a:	b10a      	cbz	r2, 8006b10 <_svfiprintf_r+0x5c>
 8006b0c:	2a25      	cmp	r2, #37	; 0x25
 8006b0e:	d1f9      	bne.n	8006b04 <_svfiprintf_r+0x50>
 8006b10:	ebba 0b04 	subs.w	fp, sl, r4
 8006b14:	d00b      	beq.n	8006b2e <_svfiprintf_r+0x7a>
 8006b16:	465b      	mov	r3, fp
 8006b18:	4622      	mov	r2, r4
 8006b1a:	4629      	mov	r1, r5
 8006b1c:	4638      	mov	r0, r7
 8006b1e:	f7ff ff6d 	bl	80069fc <__ssputs_r>
 8006b22:	3001      	adds	r0, #1
 8006b24:	f000 80aa 	beq.w	8006c7c <_svfiprintf_r+0x1c8>
 8006b28:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006b2a:	445a      	add	r2, fp
 8006b2c:	9209      	str	r2, [sp, #36]	; 0x24
 8006b2e:	f89a 3000 	ldrb.w	r3, [sl]
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	f000 80a2 	beq.w	8006c7c <_svfiprintf_r+0x1c8>
 8006b38:	2300      	movs	r3, #0
 8006b3a:	f04f 32ff 	mov.w	r2, #4294967295
 8006b3e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006b42:	f10a 0a01 	add.w	sl, sl, #1
 8006b46:	9304      	str	r3, [sp, #16]
 8006b48:	9307      	str	r3, [sp, #28]
 8006b4a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006b4e:	931a      	str	r3, [sp, #104]	; 0x68
 8006b50:	4654      	mov	r4, sl
 8006b52:	2205      	movs	r2, #5
 8006b54:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006b58:	4851      	ldr	r0, [pc, #324]	; (8006ca0 <_svfiprintf_r+0x1ec>)
 8006b5a:	f7f9 fb49 	bl	80001f0 <memchr>
 8006b5e:	9a04      	ldr	r2, [sp, #16]
 8006b60:	b9d8      	cbnz	r0, 8006b9a <_svfiprintf_r+0xe6>
 8006b62:	06d0      	lsls	r0, r2, #27
 8006b64:	bf44      	itt	mi
 8006b66:	2320      	movmi	r3, #32
 8006b68:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006b6c:	0711      	lsls	r1, r2, #28
 8006b6e:	bf44      	itt	mi
 8006b70:	232b      	movmi	r3, #43	; 0x2b
 8006b72:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006b76:	f89a 3000 	ldrb.w	r3, [sl]
 8006b7a:	2b2a      	cmp	r3, #42	; 0x2a
 8006b7c:	d015      	beq.n	8006baa <_svfiprintf_r+0xf6>
 8006b7e:	9a07      	ldr	r2, [sp, #28]
 8006b80:	4654      	mov	r4, sl
 8006b82:	2000      	movs	r0, #0
 8006b84:	f04f 0c0a 	mov.w	ip, #10
 8006b88:	4621      	mov	r1, r4
 8006b8a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006b8e:	3b30      	subs	r3, #48	; 0x30
 8006b90:	2b09      	cmp	r3, #9
 8006b92:	d94e      	bls.n	8006c32 <_svfiprintf_r+0x17e>
 8006b94:	b1b0      	cbz	r0, 8006bc4 <_svfiprintf_r+0x110>
 8006b96:	9207      	str	r2, [sp, #28]
 8006b98:	e014      	b.n	8006bc4 <_svfiprintf_r+0x110>
 8006b9a:	eba0 0308 	sub.w	r3, r0, r8
 8006b9e:	fa09 f303 	lsl.w	r3, r9, r3
 8006ba2:	4313      	orrs	r3, r2
 8006ba4:	9304      	str	r3, [sp, #16]
 8006ba6:	46a2      	mov	sl, r4
 8006ba8:	e7d2      	b.n	8006b50 <_svfiprintf_r+0x9c>
 8006baa:	9b03      	ldr	r3, [sp, #12]
 8006bac:	1d19      	adds	r1, r3, #4
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	9103      	str	r1, [sp, #12]
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	bfbb      	ittet	lt
 8006bb6:	425b      	neglt	r3, r3
 8006bb8:	f042 0202 	orrlt.w	r2, r2, #2
 8006bbc:	9307      	strge	r3, [sp, #28]
 8006bbe:	9307      	strlt	r3, [sp, #28]
 8006bc0:	bfb8      	it	lt
 8006bc2:	9204      	strlt	r2, [sp, #16]
 8006bc4:	7823      	ldrb	r3, [r4, #0]
 8006bc6:	2b2e      	cmp	r3, #46	; 0x2e
 8006bc8:	d10c      	bne.n	8006be4 <_svfiprintf_r+0x130>
 8006bca:	7863      	ldrb	r3, [r4, #1]
 8006bcc:	2b2a      	cmp	r3, #42	; 0x2a
 8006bce:	d135      	bne.n	8006c3c <_svfiprintf_r+0x188>
 8006bd0:	9b03      	ldr	r3, [sp, #12]
 8006bd2:	1d1a      	adds	r2, r3, #4
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	9203      	str	r2, [sp, #12]
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	bfb8      	it	lt
 8006bdc:	f04f 33ff 	movlt.w	r3, #4294967295
 8006be0:	3402      	adds	r4, #2
 8006be2:	9305      	str	r3, [sp, #20]
 8006be4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006cb0 <_svfiprintf_r+0x1fc>
 8006be8:	7821      	ldrb	r1, [r4, #0]
 8006bea:	2203      	movs	r2, #3
 8006bec:	4650      	mov	r0, sl
 8006bee:	f7f9 faff 	bl	80001f0 <memchr>
 8006bf2:	b140      	cbz	r0, 8006c06 <_svfiprintf_r+0x152>
 8006bf4:	2340      	movs	r3, #64	; 0x40
 8006bf6:	eba0 000a 	sub.w	r0, r0, sl
 8006bfa:	fa03 f000 	lsl.w	r0, r3, r0
 8006bfe:	9b04      	ldr	r3, [sp, #16]
 8006c00:	4303      	orrs	r3, r0
 8006c02:	3401      	adds	r4, #1
 8006c04:	9304      	str	r3, [sp, #16]
 8006c06:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006c0a:	4826      	ldr	r0, [pc, #152]	; (8006ca4 <_svfiprintf_r+0x1f0>)
 8006c0c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006c10:	2206      	movs	r2, #6
 8006c12:	f7f9 faed 	bl	80001f0 <memchr>
 8006c16:	2800      	cmp	r0, #0
 8006c18:	d038      	beq.n	8006c8c <_svfiprintf_r+0x1d8>
 8006c1a:	4b23      	ldr	r3, [pc, #140]	; (8006ca8 <_svfiprintf_r+0x1f4>)
 8006c1c:	bb1b      	cbnz	r3, 8006c66 <_svfiprintf_r+0x1b2>
 8006c1e:	9b03      	ldr	r3, [sp, #12]
 8006c20:	3307      	adds	r3, #7
 8006c22:	f023 0307 	bic.w	r3, r3, #7
 8006c26:	3308      	adds	r3, #8
 8006c28:	9303      	str	r3, [sp, #12]
 8006c2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006c2c:	4433      	add	r3, r6
 8006c2e:	9309      	str	r3, [sp, #36]	; 0x24
 8006c30:	e767      	b.n	8006b02 <_svfiprintf_r+0x4e>
 8006c32:	fb0c 3202 	mla	r2, ip, r2, r3
 8006c36:	460c      	mov	r4, r1
 8006c38:	2001      	movs	r0, #1
 8006c3a:	e7a5      	b.n	8006b88 <_svfiprintf_r+0xd4>
 8006c3c:	2300      	movs	r3, #0
 8006c3e:	3401      	adds	r4, #1
 8006c40:	9305      	str	r3, [sp, #20]
 8006c42:	4619      	mov	r1, r3
 8006c44:	f04f 0c0a 	mov.w	ip, #10
 8006c48:	4620      	mov	r0, r4
 8006c4a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006c4e:	3a30      	subs	r2, #48	; 0x30
 8006c50:	2a09      	cmp	r2, #9
 8006c52:	d903      	bls.n	8006c5c <_svfiprintf_r+0x1a8>
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d0c5      	beq.n	8006be4 <_svfiprintf_r+0x130>
 8006c58:	9105      	str	r1, [sp, #20]
 8006c5a:	e7c3      	b.n	8006be4 <_svfiprintf_r+0x130>
 8006c5c:	fb0c 2101 	mla	r1, ip, r1, r2
 8006c60:	4604      	mov	r4, r0
 8006c62:	2301      	movs	r3, #1
 8006c64:	e7f0      	b.n	8006c48 <_svfiprintf_r+0x194>
 8006c66:	ab03      	add	r3, sp, #12
 8006c68:	9300      	str	r3, [sp, #0]
 8006c6a:	462a      	mov	r2, r5
 8006c6c:	4b0f      	ldr	r3, [pc, #60]	; (8006cac <_svfiprintf_r+0x1f8>)
 8006c6e:	a904      	add	r1, sp, #16
 8006c70:	4638      	mov	r0, r7
 8006c72:	f3af 8000 	nop.w
 8006c76:	1c42      	adds	r2, r0, #1
 8006c78:	4606      	mov	r6, r0
 8006c7a:	d1d6      	bne.n	8006c2a <_svfiprintf_r+0x176>
 8006c7c:	89ab      	ldrh	r3, [r5, #12]
 8006c7e:	065b      	lsls	r3, r3, #25
 8006c80:	f53f af2c 	bmi.w	8006adc <_svfiprintf_r+0x28>
 8006c84:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006c86:	b01d      	add	sp, #116	; 0x74
 8006c88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c8c:	ab03      	add	r3, sp, #12
 8006c8e:	9300      	str	r3, [sp, #0]
 8006c90:	462a      	mov	r2, r5
 8006c92:	4b06      	ldr	r3, [pc, #24]	; (8006cac <_svfiprintf_r+0x1f8>)
 8006c94:	a904      	add	r1, sp, #16
 8006c96:	4638      	mov	r0, r7
 8006c98:	f000 f87a 	bl	8006d90 <_printf_i>
 8006c9c:	e7eb      	b.n	8006c76 <_svfiprintf_r+0x1c2>
 8006c9e:	bf00      	nop
 8006ca0:	080075c4 	.word	0x080075c4
 8006ca4:	080075ce 	.word	0x080075ce
 8006ca8:	00000000 	.word	0x00000000
 8006cac:	080069fd 	.word	0x080069fd
 8006cb0:	080075ca 	.word	0x080075ca

08006cb4 <_printf_common>:
 8006cb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006cb8:	4616      	mov	r6, r2
 8006cba:	4699      	mov	r9, r3
 8006cbc:	688a      	ldr	r2, [r1, #8]
 8006cbe:	690b      	ldr	r3, [r1, #16]
 8006cc0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006cc4:	4293      	cmp	r3, r2
 8006cc6:	bfb8      	it	lt
 8006cc8:	4613      	movlt	r3, r2
 8006cca:	6033      	str	r3, [r6, #0]
 8006ccc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006cd0:	4607      	mov	r7, r0
 8006cd2:	460c      	mov	r4, r1
 8006cd4:	b10a      	cbz	r2, 8006cda <_printf_common+0x26>
 8006cd6:	3301      	adds	r3, #1
 8006cd8:	6033      	str	r3, [r6, #0]
 8006cda:	6823      	ldr	r3, [r4, #0]
 8006cdc:	0699      	lsls	r1, r3, #26
 8006cde:	bf42      	ittt	mi
 8006ce0:	6833      	ldrmi	r3, [r6, #0]
 8006ce2:	3302      	addmi	r3, #2
 8006ce4:	6033      	strmi	r3, [r6, #0]
 8006ce6:	6825      	ldr	r5, [r4, #0]
 8006ce8:	f015 0506 	ands.w	r5, r5, #6
 8006cec:	d106      	bne.n	8006cfc <_printf_common+0x48>
 8006cee:	f104 0a19 	add.w	sl, r4, #25
 8006cf2:	68e3      	ldr	r3, [r4, #12]
 8006cf4:	6832      	ldr	r2, [r6, #0]
 8006cf6:	1a9b      	subs	r3, r3, r2
 8006cf8:	42ab      	cmp	r3, r5
 8006cfa:	dc26      	bgt.n	8006d4a <_printf_common+0x96>
 8006cfc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006d00:	1e13      	subs	r3, r2, #0
 8006d02:	6822      	ldr	r2, [r4, #0]
 8006d04:	bf18      	it	ne
 8006d06:	2301      	movne	r3, #1
 8006d08:	0692      	lsls	r2, r2, #26
 8006d0a:	d42b      	bmi.n	8006d64 <_printf_common+0xb0>
 8006d0c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006d10:	4649      	mov	r1, r9
 8006d12:	4638      	mov	r0, r7
 8006d14:	47c0      	blx	r8
 8006d16:	3001      	adds	r0, #1
 8006d18:	d01e      	beq.n	8006d58 <_printf_common+0xa4>
 8006d1a:	6823      	ldr	r3, [r4, #0]
 8006d1c:	68e5      	ldr	r5, [r4, #12]
 8006d1e:	6832      	ldr	r2, [r6, #0]
 8006d20:	f003 0306 	and.w	r3, r3, #6
 8006d24:	2b04      	cmp	r3, #4
 8006d26:	bf08      	it	eq
 8006d28:	1aad      	subeq	r5, r5, r2
 8006d2a:	68a3      	ldr	r3, [r4, #8]
 8006d2c:	6922      	ldr	r2, [r4, #16]
 8006d2e:	bf0c      	ite	eq
 8006d30:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006d34:	2500      	movne	r5, #0
 8006d36:	4293      	cmp	r3, r2
 8006d38:	bfc4      	itt	gt
 8006d3a:	1a9b      	subgt	r3, r3, r2
 8006d3c:	18ed      	addgt	r5, r5, r3
 8006d3e:	2600      	movs	r6, #0
 8006d40:	341a      	adds	r4, #26
 8006d42:	42b5      	cmp	r5, r6
 8006d44:	d11a      	bne.n	8006d7c <_printf_common+0xc8>
 8006d46:	2000      	movs	r0, #0
 8006d48:	e008      	b.n	8006d5c <_printf_common+0xa8>
 8006d4a:	2301      	movs	r3, #1
 8006d4c:	4652      	mov	r2, sl
 8006d4e:	4649      	mov	r1, r9
 8006d50:	4638      	mov	r0, r7
 8006d52:	47c0      	blx	r8
 8006d54:	3001      	adds	r0, #1
 8006d56:	d103      	bne.n	8006d60 <_printf_common+0xac>
 8006d58:	f04f 30ff 	mov.w	r0, #4294967295
 8006d5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d60:	3501      	adds	r5, #1
 8006d62:	e7c6      	b.n	8006cf2 <_printf_common+0x3e>
 8006d64:	18e1      	adds	r1, r4, r3
 8006d66:	1c5a      	adds	r2, r3, #1
 8006d68:	2030      	movs	r0, #48	; 0x30
 8006d6a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006d6e:	4422      	add	r2, r4
 8006d70:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006d74:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006d78:	3302      	adds	r3, #2
 8006d7a:	e7c7      	b.n	8006d0c <_printf_common+0x58>
 8006d7c:	2301      	movs	r3, #1
 8006d7e:	4622      	mov	r2, r4
 8006d80:	4649      	mov	r1, r9
 8006d82:	4638      	mov	r0, r7
 8006d84:	47c0      	blx	r8
 8006d86:	3001      	adds	r0, #1
 8006d88:	d0e6      	beq.n	8006d58 <_printf_common+0xa4>
 8006d8a:	3601      	adds	r6, #1
 8006d8c:	e7d9      	b.n	8006d42 <_printf_common+0x8e>
	...

08006d90 <_printf_i>:
 8006d90:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006d94:	460c      	mov	r4, r1
 8006d96:	4691      	mov	r9, r2
 8006d98:	7e27      	ldrb	r7, [r4, #24]
 8006d9a:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006d9c:	2f78      	cmp	r7, #120	; 0x78
 8006d9e:	4680      	mov	r8, r0
 8006da0:	469a      	mov	sl, r3
 8006da2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006da6:	d807      	bhi.n	8006db8 <_printf_i+0x28>
 8006da8:	2f62      	cmp	r7, #98	; 0x62
 8006daa:	d80a      	bhi.n	8006dc2 <_printf_i+0x32>
 8006dac:	2f00      	cmp	r7, #0
 8006dae:	f000 80d8 	beq.w	8006f62 <_printf_i+0x1d2>
 8006db2:	2f58      	cmp	r7, #88	; 0x58
 8006db4:	f000 80a3 	beq.w	8006efe <_printf_i+0x16e>
 8006db8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006dbc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006dc0:	e03a      	b.n	8006e38 <_printf_i+0xa8>
 8006dc2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006dc6:	2b15      	cmp	r3, #21
 8006dc8:	d8f6      	bhi.n	8006db8 <_printf_i+0x28>
 8006dca:	a001      	add	r0, pc, #4	; (adr r0, 8006dd0 <_printf_i+0x40>)
 8006dcc:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8006dd0:	08006e29 	.word	0x08006e29
 8006dd4:	08006e3d 	.word	0x08006e3d
 8006dd8:	08006db9 	.word	0x08006db9
 8006ddc:	08006db9 	.word	0x08006db9
 8006de0:	08006db9 	.word	0x08006db9
 8006de4:	08006db9 	.word	0x08006db9
 8006de8:	08006e3d 	.word	0x08006e3d
 8006dec:	08006db9 	.word	0x08006db9
 8006df0:	08006db9 	.word	0x08006db9
 8006df4:	08006db9 	.word	0x08006db9
 8006df8:	08006db9 	.word	0x08006db9
 8006dfc:	08006f49 	.word	0x08006f49
 8006e00:	08006e6d 	.word	0x08006e6d
 8006e04:	08006f2b 	.word	0x08006f2b
 8006e08:	08006db9 	.word	0x08006db9
 8006e0c:	08006db9 	.word	0x08006db9
 8006e10:	08006f6b 	.word	0x08006f6b
 8006e14:	08006db9 	.word	0x08006db9
 8006e18:	08006e6d 	.word	0x08006e6d
 8006e1c:	08006db9 	.word	0x08006db9
 8006e20:	08006db9 	.word	0x08006db9
 8006e24:	08006f33 	.word	0x08006f33
 8006e28:	680b      	ldr	r3, [r1, #0]
 8006e2a:	1d1a      	adds	r2, r3, #4
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	600a      	str	r2, [r1, #0]
 8006e30:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006e34:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006e38:	2301      	movs	r3, #1
 8006e3a:	e0a3      	b.n	8006f84 <_printf_i+0x1f4>
 8006e3c:	6825      	ldr	r5, [r4, #0]
 8006e3e:	6808      	ldr	r0, [r1, #0]
 8006e40:	062e      	lsls	r6, r5, #24
 8006e42:	f100 0304 	add.w	r3, r0, #4
 8006e46:	d50a      	bpl.n	8006e5e <_printf_i+0xce>
 8006e48:	6805      	ldr	r5, [r0, #0]
 8006e4a:	600b      	str	r3, [r1, #0]
 8006e4c:	2d00      	cmp	r5, #0
 8006e4e:	da03      	bge.n	8006e58 <_printf_i+0xc8>
 8006e50:	232d      	movs	r3, #45	; 0x2d
 8006e52:	426d      	negs	r5, r5
 8006e54:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006e58:	485e      	ldr	r0, [pc, #376]	; (8006fd4 <_printf_i+0x244>)
 8006e5a:	230a      	movs	r3, #10
 8006e5c:	e019      	b.n	8006e92 <_printf_i+0x102>
 8006e5e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8006e62:	6805      	ldr	r5, [r0, #0]
 8006e64:	600b      	str	r3, [r1, #0]
 8006e66:	bf18      	it	ne
 8006e68:	b22d      	sxthne	r5, r5
 8006e6a:	e7ef      	b.n	8006e4c <_printf_i+0xbc>
 8006e6c:	680b      	ldr	r3, [r1, #0]
 8006e6e:	6825      	ldr	r5, [r4, #0]
 8006e70:	1d18      	adds	r0, r3, #4
 8006e72:	6008      	str	r0, [r1, #0]
 8006e74:	0628      	lsls	r0, r5, #24
 8006e76:	d501      	bpl.n	8006e7c <_printf_i+0xec>
 8006e78:	681d      	ldr	r5, [r3, #0]
 8006e7a:	e002      	b.n	8006e82 <_printf_i+0xf2>
 8006e7c:	0669      	lsls	r1, r5, #25
 8006e7e:	d5fb      	bpl.n	8006e78 <_printf_i+0xe8>
 8006e80:	881d      	ldrh	r5, [r3, #0]
 8006e82:	4854      	ldr	r0, [pc, #336]	; (8006fd4 <_printf_i+0x244>)
 8006e84:	2f6f      	cmp	r7, #111	; 0x6f
 8006e86:	bf0c      	ite	eq
 8006e88:	2308      	moveq	r3, #8
 8006e8a:	230a      	movne	r3, #10
 8006e8c:	2100      	movs	r1, #0
 8006e8e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006e92:	6866      	ldr	r6, [r4, #4]
 8006e94:	60a6      	str	r6, [r4, #8]
 8006e96:	2e00      	cmp	r6, #0
 8006e98:	bfa2      	ittt	ge
 8006e9a:	6821      	ldrge	r1, [r4, #0]
 8006e9c:	f021 0104 	bicge.w	r1, r1, #4
 8006ea0:	6021      	strge	r1, [r4, #0]
 8006ea2:	b90d      	cbnz	r5, 8006ea8 <_printf_i+0x118>
 8006ea4:	2e00      	cmp	r6, #0
 8006ea6:	d04d      	beq.n	8006f44 <_printf_i+0x1b4>
 8006ea8:	4616      	mov	r6, r2
 8006eaa:	fbb5 f1f3 	udiv	r1, r5, r3
 8006eae:	fb03 5711 	mls	r7, r3, r1, r5
 8006eb2:	5dc7      	ldrb	r7, [r0, r7]
 8006eb4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006eb8:	462f      	mov	r7, r5
 8006eba:	42bb      	cmp	r3, r7
 8006ebc:	460d      	mov	r5, r1
 8006ebe:	d9f4      	bls.n	8006eaa <_printf_i+0x11a>
 8006ec0:	2b08      	cmp	r3, #8
 8006ec2:	d10b      	bne.n	8006edc <_printf_i+0x14c>
 8006ec4:	6823      	ldr	r3, [r4, #0]
 8006ec6:	07df      	lsls	r7, r3, #31
 8006ec8:	d508      	bpl.n	8006edc <_printf_i+0x14c>
 8006eca:	6923      	ldr	r3, [r4, #16]
 8006ecc:	6861      	ldr	r1, [r4, #4]
 8006ece:	4299      	cmp	r1, r3
 8006ed0:	bfde      	ittt	le
 8006ed2:	2330      	movle	r3, #48	; 0x30
 8006ed4:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006ed8:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006edc:	1b92      	subs	r2, r2, r6
 8006ede:	6122      	str	r2, [r4, #16]
 8006ee0:	f8cd a000 	str.w	sl, [sp]
 8006ee4:	464b      	mov	r3, r9
 8006ee6:	aa03      	add	r2, sp, #12
 8006ee8:	4621      	mov	r1, r4
 8006eea:	4640      	mov	r0, r8
 8006eec:	f7ff fee2 	bl	8006cb4 <_printf_common>
 8006ef0:	3001      	adds	r0, #1
 8006ef2:	d14c      	bne.n	8006f8e <_printf_i+0x1fe>
 8006ef4:	f04f 30ff 	mov.w	r0, #4294967295
 8006ef8:	b004      	add	sp, #16
 8006efa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006efe:	4835      	ldr	r0, [pc, #212]	; (8006fd4 <_printf_i+0x244>)
 8006f00:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006f04:	6823      	ldr	r3, [r4, #0]
 8006f06:	680e      	ldr	r6, [r1, #0]
 8006f08:	061f      	lsls	r7, r3, #24
 8006f0a:	f856 5b04 	ldr.w	r5, [r6], #4
 8006f0e:	600e      	str	r6, [r1, #0]
 8006f10:	d514      	bpl.n	8006f3c <_printf_i+0x1ac>
 8006f12:	07d9      	lsls	r1, r3, #31
 8006f14:	bf44      	itt	mi
 8006f16:	f043 0320 	orrmi.w	r3, r3, #32
 8006f1a:	6023      	strmi	r3, [r4, #0]
 8006f1c:	b91d      	cbnz	r5, 8006f26 <_printf_i+0x196>
 8006f1e:	6823      	ldr	r3, [r4, #0]
 8006f20:	f023 0320 	bic.w	r3, r3, #32
 8006f24:	6023      	str	r3, [r4, #0]
 8006f26:	2310      	movs	r3, #16
 8006f28:	e7b0      	b.n	8006e8c <_printf_i+0xfc>
 8006f2a:	6823      	ldr	r3, [r4, #0]
 8006f2c:	f043 0320 	orr.w	r3, r3, #32
 8006f30:	6023      	str	r3, [r4, #0]
 8006f32:	2378      	movs	r3, #120	; 0x78
 8006f34:	4828      	ldr	r0, [pc, #160]	; (8006fd8 <_printf_i+0x248>)
 8006f36:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006f3a:	e7e3      	b.n	8006f04 <_printf_i+0x174>
 8006f3c:	065e      	lsls	r6, r3, #25
 8006f3e:	bf48      	it	mi
 8006f40:	b2ad      	uxthmi	r5, r5
 8006f42:	e7e6      	b.n	8006f12 <_printf_i+0x182>
 8006f44:	4616      	mov	r6, r2
 8006f46:	e7bb      	b.n	8006ec0 <_printf_i+0x130>
 8006f48:	680b      	ldr	r3, [r1, #0]
 8006f4a:	6826      	ldr	r6, [r4, #0]
 8006f4c:	6960      	ldr	r0, [r4, #20]
 8006f4e:	1d1d      	adds	r5, r3, #4
 8006f50:	600d      	str	r5, [r1, #0]
 8006f52:	0635      	lsls	r5, r6, #24
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	d501      	bpl.n	8006f5c <_printf_i+0x1cc>
 8006f58:	6018      	str	r0, [r3, #0]
 8006f5a:	e002      	b.n	8006f62 <_printf_i+0x1d2>
 8006f5c:	0671      	lsls	r1, r6, #25
 8006f5e:	d5fb      	bpl.n	8006f58 <_printf_i+0x1c8>
 8006f60:	8018      	strh	r0, [r3, #0]
 8006f62:	2300      	movs	r3, #0
 8006f64:	6123      	str	r3, [r4, #16]
 8006f66:	4616      	mov	r6, r2
 8006f68:	e7ba      	b.n	8006ee0 <_printf_i+0x150>
 8006f6a:	680b      	ldr	r3, [r1, #0]
 8006f6c:	1d1a      	adds	r2, r3, #4
 8006f6e:	600a      	str	r2, [r1, #0]
 8006f70:	681e      	ldr	r6, [r3, #0]
 8006f72:	6862      	ldr	r2, [r4, #4]
 8006f74:	2100      	movs	r1, #0
 8006f76:	4630      	mov	r0, r6
 8006f78:	f7f9 f93a 	bl	80001f0 <memchr>
 8006f7c:	b108      	cbz	r0, 8006f82 <_printf_i+0x1f2>
 8006f7e:	1b80      	subs	r0, r0, r6
 8006f80:	6060      	str	r0, [r4, #4]
 8006f82:	6863      	ldr	r3, [r4, #4]
 8006f84:	6123      	str	r3, [r4, #16]
 8006f86:	2300      	movs	r3, #0
 8006f88:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006f8c:	e7a8      	b.n	8006ee0 <_printf_i+0x150>
 8006f8e:	6923      	ldr	r3, [r4, #16]
 8006f90:	4632      	mov	r2, r6
 8006f92:	4649      	mov	r1, r9
 8006f94:	4640      	mov	r0, r8
 8006f96:	47d0      	blx	sl
 8006f98:	3001      	adds	r0, #1
 8006f9a:	d0ab      	beq.n	8006ef4 <_printf_i+0x164>
 8006f9c:	6823      	ldr	r3, [r4, #0]
 8006f9e:	079b      	lsls	r3, r3, #30
 8006fa0:	d413      	bmi.n	8006fca <_printf_i+0x23a>
 8006fa2:	68e0      	ldr	r0, [r4, #12]
 8006fa4:	9b03      	ldr	r3, [sp, #12]
 8006fa6:	4298      	cmp	r0, r3
 8006fa8:	bfb8      	it	lt
 8006faa:	4618      	movlt	r0, r3
 8006fac:	e7a4      	b.n	8006ef8 <_printf_i+0x168>
 8006fae:	2301      	movs	r3, #1
 8006fb0:	4632      	mov	r2, r6
 8006fb2:	4649      	mov	r1, r9
 8006fb4:	4640      	mov	r0, r8
 8006fb6:	47d0      	blx	sl
 8006fb8:	3001      	adds	r0, #1
 8006fba:	d09b      	beq.n	8006ef4 <_printf_i+0x164>
 8006fbc:	3501      	adds	r5, #1
 8006fbe:	68e3      	ldr	r3, [r4, #12]
 8006fc0:	9903      	ldr	r1, [sp, #12]
 8006fc2:	1a5b      	subs	r3, r3, r1
 8006fc4:	42ab      	cmp	r3, r5
 8006fc6:	dcf2      	bgt.n	8006fae <_printf_i+0x21e>
 8006fc8:	e7eb      	b.n	8006fa2 <_printf_i+0x212>
 8006fca:	2500      	movs	r5, #0
 8006fcc:	f104 0619 	add.w	r6, r4, #25
 8006fd0:	e7f5      	b.n	8006fbe <_printf_i+0x22e>
 8006fd2:	bf00      	nop
 8006fd4:	080075d5 	.word	0x080075d5
 8006fd8:	080075e6 	.word	0x080075e6

08006fdc <memmove>:
 8006fdc:	4288      	cmp	r0, r1
 8006fde:	b510      	push	{r4, lr}
 8006fe0:	eb01 0402 	add.w	r4, r1, r2
 8006fe4:	d902      	bls.n	8006fec <memmove+0x10>
 8006fe6:	4284      	cmp	r4, r0
 8006fe8:	4623      	mov	r3, r4
 8006fea:	d807      	bhi.n	8006ffc <memmove+0x20>
 8006fec:	1e43      	subs	r3, r0, #1
 8006fee:	42a1      	cmp	r1, r4
 8006ff0:	d008      	beq.n	8007004 <memmove+0x28>
 8006ff2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006ff6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006ffa:	e7f8      	b.n	8006fee <memmove+0x12>
 8006ffc:	4402      	add	r2, r0
 8006ffe:	4601      	mov	r1, r0
 8007000:	428a      	cmp	r2, r1
 8007002:	d100      	bne.n	8007006 <memmove+0x2a>
 8007004:	bd10      	pop	{r4, pc}
 8007006:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800700a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800700e:	e7f7      	b.n	8007000 <memmove+0x24>

08007010 <_free_r>:
 8007010:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007012:	2900      	cmp	r1, #0
 8007014:	d048      	beq.n	80070a8 <_free_r+0x98>
 8007016:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800701a:	9001      	str	r0, [sp, #4]
 800701c:	2b00      	cmp	r3, #0
 800701e:	f1a1 0404 	sub.w	r4, r1, #4
 8007022:	bfb8      	it	lt
 8007024:	18e4      	addlt	r4, r4, r3
 8007026:	f000 f8d3 	bl	80071d0 <__malloc_lock>
 800702a:	4a20      	ldr	r2, [pc, #128]	; (80070ac <_free_r+0x9c>)
 800702c:	9801      	ldr	r0, [sp, #4]
 800702e:	6813      	ldr	r3, [r2, #0]
 8007030:	4615      	mov	r5, r2
 8007032:	b933      	cbnz	r3, 8007042 <_free_r+0x32>
 8007034:	6063      	str	r3, [r4, #4]
 8007036:	6014      	str	r4, [r2, #0]
 8007038:	b003      	add	sp, #12
 800703a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800703e:	f000 b8cd 	b.w	80071dc <__malloc_unlock>
 8007042:	42a3      	cmp	r3, r4
 8007044:	d90b      	bls.n	800705e <_free_r+0x4e>
 8007046:	6821      	ldr	r1, [r4, #0]
 8007048:	1862      	adds	r2, r4, r1
 800704a:	4293      	cmp	r3, r2
 800704c:	bf04      	itt	eq
 800704e:	681a      	ldreq	r2, [r3, #0]
 8007050:	685b      	ldreq	r3, [r3, #4]
 8007052:	6063      	str	r3, [r4, #4]
 8007054:	bf04      	itt	eq
 8007056:	1852      	addeq	r2, r2, r1
 8007058:	6022      	streq	r2, [r4, #0]
 800705a:	602c      	str	r4, [r5, #0]
 800705c:	e7ec      	b.n	8007038 <_free_r+0x28>
 800705e:	461a      	mov	r2, r3
 8007060:	685b      	ldr	r3, [r3, #4]
 8007062:	b10b      	cbz	r3, 8007068 <_free_r+0x58>
 8007064:	42a3      	cmp	r3, r4
 8007066:	d9fa      	bls.n	800705e <_free_r+0x4e>
 8007068:	6811      	ldr	r1, [r2, #0]
 800706a:	1855      	adds	r5, r2, r1
 800706c:	42a5      	cmp	r5, r4
 800706e:	d10b      	bne.n	8007088 <_free_r+0x78>
 8007070:	6824      	ldr	r4, [r4, #0]
 8007072:	4421      	add	r1, r4
 8007074:	1854      	adds	r4, r2, r1
 8007076:	42a3      	cmp	r3, r4
 8007078:	6011      	str	r1, [r2, #0]
 800707a:	d1dd      	bne.n	8007038 <_free_r+0x28>
 800707c:	681c      	ldr	r4, [r3, #0]
 800707e:	685b      	ldr	r3, [r3, #4]
 8007080:	6053      	str	r3, [r2, #4]
 8007082:	4421      	add	r1, r4
 8007084:	6011      	str	r1, [r2, #0]
 8007086:	e7d7      	b.n	8007038 <_free_r+0x28>
 8007088:	d902      	bls.n	8007090 <_free_r+0x80>
 800708a:	230c      	movs	r3, #12
 800708c:	6003      	str	r3, [r0, #0]
 800708e:	e7d3      	b.n	8007038 <_free_r+0x28>
 8007090:	6825      	ldr	r5, [r4, #0]
 8007092:	1961      	adds	r1, r4, r5
 8007094:	428b      	cmp	r3, r1
 8007096:	bf04      	itt	eq
 8007098:	6819      	ldreq	r1, [r3, #0]
 800709a:	685b      	ldreq	r3, [r3, #4]
 800709c:	6063      	str	r3, [r4, #4]
 800709e:	bf04      	itt	eq
 80070a0:	1949      	addeq	r1, r1, r5
 80070a2:	6021      	streq	r1, [r4, #0]
 80070a4:	6054      	str	r4, [r2, #4]
 80070a6:	e7c7      	b.n	8007038 <_free_r+0x28>
 80070a8:	b003      	add	sp, #12
 80070aa:	bd30      	pop	{r4, r5, pc}
 80070ac:	20000168 	.word	0x20000168

080070b0 <_malloc_r>:
 80070b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070b2:	1ccd      	adds	r5, r1, #3
 80070b4:	f025 0503 	bic.w	r5, r5, #3
 80070b8:	3508      	adds	r5, #8
 80070ba:	2d0c      	cmp	r5, #12
 80070bc:	bf38      	it	cc
 80070be:	250c      	movcc	r5, #12
 80070c0:	2d00      	cmp	r5, #0
 80070c2:	4606      	mov	r6, r0
 80070c4:	db01      	blt.n	80070ca <_malloc_r+0x1a>
 80070c6:	42a9      	cmp	r1, r5
 80070c8:	d903      	bls.n	80070d2 <_malloc_r+0x22>
 80070ca:	230c      	movs	r3, #12
 80070cc:	6033      	str	r3, [r6, #0]
 80070ce:	2000      	movs	r0, #0
 80070d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80070d2:	f000 f87d 	bl	80071d0 <__malloc_lock>
 80070d6:	4921      	ldr	r1, [pc, #132]	; (800715c <_malloc_r+0xac>)
 80070d8:	680a      	ldr	r2, [r1, #0]
 80070da:	4614      	mov	r4, r2
 80070dc:	b99c      	cbnz	r4, 8007106 <_malloc_r+0x56>
 80070de:	4f20      	ldr	r7, [pc, #128]	; (8007160 <_malloc_r+0xb0>)
 80070e0:	683b      	ldr	r3, [r7, #0]
 80070e2:	b923      	cbnz	r3, 80070ee <_malloc_r+0x3e>
 80070e4:	4621      	mov	r1, r4
 80070e6:	4630      	mov	r0, r6
 80070e8:	f000 f862 	bl	80071b0 <_sbrk_r>
 80070ec:	6038      	str	r0, [r7, #0]
 80070ee:	4629      	mov	r1, r5
 80070f0:	4630      	mov	r0, r6
 80070f2:	f000 f85d 	bl	80071b0 <_sbrk_r>
 80070f6:	1c43      	adds	r3, r0, #1
 80070f8:	d123      	bne.n	8007142 <_malloc_r+0x92>
 80070fa:	230c      	movs	r3, #12
 80070fc:	6033      	str	r3, [r6, #0]
 80070fe:	4630      	mov	r0, r6
 8007100:	f000 f86c 	bl	80071dc <__malloc_unlock>
 8007104:	e7e3      	b.n	80070ce <_malloc_r+0x1e>
 8007106:	6823      	ldr	r3, [r4, #0]
 8007108:	1b5b      	subs	r3, r3, r5
 800710a:	d417      	bmi.n	800713c <_malloc_r+0x8c>
 800710c:	2b0b      	cmp	r3, #11
 800710e:	d903      	bls.n	8007118 <_malloc_r+0x68>
 8007110:	6023      	str	r3, [r4, #0]
 8007112:	441c      	add	r4, r3
 8007114:	6025      	str	r5, [r4, #0]
 8007116:	e004      	b.n	8007122 <_malloc_r+0x72>
 8007118:	6863      	ldr	r3, [r4, #4]
 800711a:	42a2      	cmp	r2, r4
 800711c:	bf0c      	ite	eq
 800711e:	600b      	streq	r3, [r1, #0]
 8007120:	6053      	strne	r3, [r2, #4]
 8007122:	4630      	mov	r0, r6
 8007124:	f000 f85a 	bl	80071dc <__malloc_unlock>
 8007128:	f104 000b 	add.w	r0, r4, #11
 800712c:	1d23      	adds	r3, r4, #4
 800712e:	f020 0007 	bic.w	r0, r0, #7
 8007132:	1ac2      	subs	r2, r0, r3
 8007134:	d0cc      	beq.n	80070d0 <_malloc_r+0x20>
 8007136:	1a1b      	subs	r3, r3, r0
 8007138:	50a3      	str	r3, [r4, r2]
 800713a:	e7c9      	b.n	80070d0 <_malloc_r+0x20>
 800713c:	4622      	mov	r2, r4
 800713e:	6864      	ldr	r4, [r4, #4]
 8007140:	e7cc      	b.n	80070dc <_malloc_r+0x2c>
 8007142:	1cc4      	adds	r4, r0, #3
 8007144:	f024 0403 	bic.w	r4, r4, #3
 8007148:	42a0      	cmp	r0, r4
 800714a:	d0e3      	beq.n	8007114 <_malloc_r+0x64>
 800714c:	1a21      	subs	r1, r4, r0
 800714e:	4630      	mov	r0, r6
 8007150:	f000 f82e 	bl	80071b0 <_sbrk_r>
 8007154:	3001      	adds	r0, #1
 8007156:	d1dd      	bne.n	8007114 <_malloc_r+0x64>
 8007158:	e7cf      	b.n	80070fa <_malloc_r+0x4a>
 800715a:	bf00      	nop
 800715c:	20000168 	.word	0x20000168
 8007160:	2000016c 	.word	0x2000016c

08007164 <_realloc_r>:
 8007164:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007166:	4607      	mov	r7, r0
 8007168:	4614      	mov	r4, r2
 800716a:	460e      	mov	r6, r1
 800716c:	b921      	cbnz	r1, 8007178 <_realloc_r+0x14>
 800716e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007172:	4611      	mov	r1, r2
 8007174:	f7ff bf9c 	b.w	80070b0 <_malloc_r>
 8007178:	b922      	cbnz	r2, 8007184 <_realloc_r+0x20>
 800717a:	f7ff ff49 	bl	8007010 <_free_r>
 800717e:	4625      	mov	r5, r4
 8007180:	4628      	mov	r0, r5
 8007182:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007184:	f000 f830 	bl	80071e8 <_malloc_usable_size_r>
 8007188:	42a0      	cmp	r0, r4
 800718a:	d20f      	bcs.n	80071ac <_realloc_r+0x48>
 800718c:	4621      	mov	r1, r4
 800718e:	4638      	mov	r0, r7
 8007190:	f7ff ff8e 	bl	80070b0 <_malloc_r>
 8007194:	4605      	mov	r5, r0
 8007196:	2800      	cmp	r0, #0
 8007198:	d0f2      	beq.n	8007180 <_realloc_r+0x1c>
 800719a:	4631      	mov	r1, r6
 800719c:	4622      	mov	r2, r4
 800719e:	f7ff fbf7 	bl	8006990 <memcpy>
 80071a2:	4631      	mov	r1, r6
 80071a4:	4638      	mov	r0, r7
 80071a6:	f7ff ff33 	bl	8007010 <_free_r>
 80071aa:	e7e9      	b.n	8007180 <_realloc_r+0x1c>
 80071ac:	4635      	mov	r5, r6
 80071ae:	e7e7      	b.n	8007180 <_realloc_r+0x1c>

080071b0 <_sbrk_r>:
 80071b0:	b538      	push	{r3, r4, r5, lr}
 80071b2:	4d06      	ldr	r5, [pc, #24]	; (80071cc <_sbrk_r+0x1c>)
 80071b4:	2300      	movs	r3, #0
 80071b6:	4604      	mov	r4, r0
 80071b8:	4608      	mov	r0, r1
 80071ba:	602b      	str	r3, [r5, #0]
 80071bc:	f7fb fc22 	bl	8002a04 <_sbrk>
 80071c0:	1c43      	adds	r3, r0, #1
 80071c2:	d102      	bne.n	80071ca <_sbrk_r+0x1a>
 80071c4:	682b      	ldr	r3, [r5, #0]
 80071c6:	b103      	cbz	r3, 80071ca <_sbrk_r+0x1a>
 80071c8:	6023      	str	r3, [r4, #0]
 80071ca:	bd38      	pop	{r3, r4, r5, pc}
 80071cc:	20000334 	.word	0x20000334

080071d0 <__malloc_lock>:
 80071d0:	4801      	ldr	r0, [pc, #4]	; (80071d8 <__malloc_lock+0x8>)
 80071d2:	f000 b811 	b.w	80071f8 <__retarget_lock_acquire_recursive>
 80071d6:	bf00      	nop
 80071d8:	2000033c 	.word	0x2000033c

080071dc <__malloc_unlock>:
 80071dc:	4801      	ldr	r0, [pc, #4]	; (80071e4 <__malloc_unlock+0x8>)
 80071de:	f000 b80c 	b.w	80071fa <__retarget_lock_release_recursive>
 80071e2:	bf00      	nop
 80071e4:	2000033c 	.word	0x2000033c

080071e8 <_malloc_usable_size_r>:
 80071e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80071ec:	1f18      	subs	r0, r3, #4
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	bfbc      	itt	lt
 80071f2:	580b      	ldrlt	r3, [r1, r0]
 80071f4:	18c0      	addlt	r0, r0, r3
 80071f6:	4770      	bx	lr

080071f8 <__retarget_lock_acquire_recursive>:
 80071f8:	4770      	bx	lr

080071fa <__retarget_lock_release_recursive>:
 80071fa:	4770      	bx	lr

080071fc <_init>:
 80071fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80071fe:	bf00      	nop
 8007200:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007202:	bc08      	pop	{r3}
 8007204:	469e      	mov	lr, r3
 8007206:	4770      	bx	lr

08007208 <_fini>:
 8007208:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800720a:	bf00      	nop
 800720c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800720e:	bc08      	pop	{r3}
 8007210:	469e      	mov	lr, r3
 8007212:	4770      	bx	lr
