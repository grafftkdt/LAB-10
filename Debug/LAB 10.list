
LAB 10.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000067c8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000244  08006968  08006968  00016968  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006bac  08006bac  00020080  2**0
                  CONTENTS
  4 .ARM          00000008  08006bac  08006bac  00016bac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006bb4  08006bb4  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006bb4  08006bb4  00016bb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006bb8  08006bb8  00016bb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  08006bbc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002f8  20000080  08006c3c  00020080  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000378  08006c3c  00020378  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fa53  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000020bf  00000000  00000000  0002fb03  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000f88  00000000  00000000  00031bc8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000e80  00000000  00000000  00032b50  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001753e  00000000  00000000  000339d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000b22d  00000000  00000000  0004af0e  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00093d03  00000000  00000000  0005613b  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e9e3e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000046dc  00000000  00000000  000e9ebc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000080 	.word	0x20000080
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006950 	.word	0x08006950

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000084 	.word	0x20000084
 80001dc:	08006950 	.word	0x08006950

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ce:	f1a4 0401 	sub.w	r4, r4, #1
 80003d2:	d1e9      	bne.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_d2uiz>:
 8000b3c:	004a      	lsls	r2, r1, #1
 8000b3e:	d211      	bcs.n	8000b64 <__aeabi_d2uiz+0x28>
 8000b40:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b44:	d211      	bcs.n	8000b6a <__aeabi_d2uiz+0x2e>
 8000b46:	d50d      	bpl.n	8000b64 <__aeabi_d2uiz+0x28>
 8000b48:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b4c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b50:	d40e      	bmi.n	8000b70 <__aeabi_d2uiz+0x34>
 8000b52:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b56:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b5a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b62:	4770      	bx	lr
 8000b64:	f04f 0000 	mov.w	r0, #0
 8000b68:	4770      	bx	lr
 8000b6a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b6e:	d102      	bne.n	8000b76 <__aeabi_d2uiz+0x3a>
 8000b70:	f04f 30ff 	mov.w	r0, #4294967295
 8000b74:	4770      	bx	lr
 8000b76:	f04f 0000 	mov.w	r0, #0
 8000b7a:	4770      	bx	lr

08000b7c <__aeabi_d2f>:
 8000b7c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b80:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b84:	bf24      	itt	cs
 8000b86:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b8a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b8e:	d90d      	bls.n	8000bac <__aeabi_d2f+0x30>
 8000b90:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b94:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b98:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b9c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ba0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ba4:	bf08      	it	eq
 8000ba6:	f020 0001 	biceq.w	r0, r0, #1
 8000baa:	4770      	bx	lr
 8000bac:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bb0:	d121      	bne.n	8000bf6 <__aeabi_d2f+0x7a>
 8000bb2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bb6:	bfbc      	itt	lt
 8000bb8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bbc:	4770      	bxlt	lr
 8000bbe:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bc2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bc6:	f1c2 0218 	rsb	r2, r2, #24
 8000bca:	f1c2 0c20 	rsb	ip, r2, #32
 8000bce:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bd2:	fa20 f002 	lsr.w	r0, r0, r2
 8000bd6:	bf18      	it	ne
 8000bd8:	f040 0001 	orrne.w	r0, r0, #1
 8000bdc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000be4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000be8:	ea40 000c 	orr.w	r0, r0, ip
 8000bec:	fa23 f302 	lsr.w	r3, r3, r2
 8000bf0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bf4:	e7cc      	b.n	8000b90 <__aeabi_d2f+0x14>
 8000bf6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bfa:	d107      	bne.n	8000c0c <__aeabi_d2f+0x90>
 8000bfc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c00:	bf1e      	ittt	ne
 8000c02:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c06:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c0a:	4770      	bxne	lr
 8000c0c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c10:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c14:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c18:	4770      	bx	lr
 8000c1a:	bf00      	nop

08000c1c <__aeabi_uldivmod>:
 8000c1c:	b953      	cbnz	r3, 8000c34 <__aeabi_uldivmod+0x18>
 8000c1e:	b94a      	cbnz	r2, 8000c34 <__aeabi_uldivmod+0x18>
 8000c20:	2900      	cmp	r1, #0
 8000c22:	bf08      	it	eq
 8000c24:	2800      	cmpeq	r0, #0
 8000c26:	bf1c      	itt	ne
 8000c28:	f04f 31ff 	movne.w	r1, #4294967295
 8000c2c:	f04f 30ff 	movne.w	r0, #4294967295
 8000c30:	f000 b972 	b.w	8000f18 <__aeabi_idiv0>
 8000c34:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c38:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c3c:	f000 f806 	bl	8000c4c <__udivmoddi4>
 8000c40:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c44:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c48:	b004      	add	sp, #16
 8000c4a:	4770      	bx	lr

08000c4c <__udivmoddi4>:
 8000c4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c50:	9e08      	ldr	r6, [sp, #32]
 8000c52:	4604      	mov	r4, r0
 8000c54:	4688      	mov	r8, r1
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d14b      	bne.n	8000cf2 <__udivmoddi4+0xa6>
 8000c5a:	428a      	cmp	r2, r1
 8000c5c:	4615      	mov	r5, r2
 8000c5e:	d967      	bls.n	8000d30 <__udivmoddi4+0xe4>
 8000c60:	fab2 f282 	clz	r2, r2
 8000c64:	b14a      	cbz	r2, 8000c7a <__udivmoddi4+0x2e>
 8000c66:	f1c2 0720 	rsb	r7, r2, #32
 8000c6a:	fa01 f302 	lsl.w	r3, r1, r2
 8000c6e:	fa20 f707 	lsr.w	r7, r0, r7
 8000c72:	4095      	lsls	r5, r2
 8000c74:	ea47 0803 	orr.w	r8, r7, r3
 8000c78:	4094      	lsls	r4, r2
 8000c7a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c7e:	0c23      	lsrs	r3, r4, #16
 8000c80:	fbb8 f7fe 	udiv	r7, r8, lr
 8000c84:	fa1f fc85 	uxth.w	ip, r5
 8000c88:	fb0e 8817 	mls	r8, lr, r7, r8
 8000c8c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c90:	fb07 f10c 	mul.w	r1, r7, ip
 8000c94:	4299      	cmp	r1, r3
 8000c96:	d909      	bls.n	8000cac <__udivmoddi4+0x60>
 8000c98:	18eb      	adds	r3, r5, r3
 8000c9a:	f107 30ff 	add.w	r0, r7, #4294967295
 8000c9e:	f080 811b 	bcs.w	8000ed8 <__udivmoddi4+0x28c>
 8000ca2:	4299      	cmp	r1, r3
 8000ca4:	f240 8118 	bls.w	8000ed8 <__udivmoddi4+0x28c>
 8000ca8:	3f02      	subs	r7, #2
 8000caa:	442b      	add	r3, r5
 8000cac:	1a5b      	subs	r3, r3, r1
 8000cae:	b2a4      	uxth	r4, r4
 8000cb0:	fbb3 f0fe 	udiv	r0, r3, lr
 8000cb4:	fb0e 3310 	mls	r3, lr, r0, r3
 8000cb8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cbc:	fb00 fc0c 	mul.w	ip, r0, ip
 8000cc0:	45a4      	cmp	ip, r4
 8000cc2:	d909      	bls.n	8000cd8 <__udivmoddi4+0x8c>
 8000cc4:	192c      	adds	r4, r5, r4
 8000cc6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cca:	f080 8107 	bcs.w	8000edc <__udivmoddi4+0x290>
 8000cce:	45a4      	cmp	ip, r4
 8000cd0:	f240 8104 	bls.w	8000edc <__udivmoddi4+0x290>
 8000cd4:	3802      	subs	r0, #2
 8000cd6:	442c      	add	r4, r5
 8000cd8:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000cdc:	eba4 040c 	sub.w	r4, r4, ip
 8000ce0:	2700      	movs	r7, #0
 8000ce2:	b11e      	cbz	r6, 8000cec <__udivmoddi4+0xa0>
 8000ce4:	40d4      	lsrs	r4, r2
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	e9c6 4300 	strd	r4, r3, [r6]
 8000cec:	4639      	mov	r1, r7
 8000cee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cf2:	428b      	cmp	r3, r1
 8000cf4:	d909      	bls.n	8000d0a <__udivmoddi4+0xbe>
 8000cf6:	2e00      	cmp	r6, #0
 8000cf8:	f000 80eb 	beq.w	8000ed2 <__udivmoddi4+0x286>
 8000cfc:	2700      	movs	r7, #0
 8000cfe:	e9c6 0100 	strd	r0, r1, [r6]
 8000d02:	4638      	mov	r0, r7
 8000d04:	4639      	mov	r1, r7
 8000d06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d0a:	fab3 f783 	clz	r7, r3
 8000d0e:	2f00      	cmp	r7, #0
 8000d10:	d147      	bne.n	8000da2 <__udivmoddi4+0x156>
 8000d12:	428b      	cmp	r3, r1
 8000d14:	d302      	bcc.n	8000d1c <__udivmoddi4+0xd0>
 8000d16:	4282      	cmp	r2, r0
 8000d18:	f200 80fa 	bhi.w	8000f10 <__udivmoddi4+0x2c4>
 8000d1c:	1a84      	subs	r4, r0, r2
 8000d1e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d22:	2001      	movs	r0, #1
 8000d24:	4698      	mov	r8, r3
 8000d26:	2e00      	cmp	r6, #0
 8000d28:	d0e0      	beq.n	8000cec <__udivmoddi4+0xa0>
 8000d2a:	e9c6 4800 	strd	r4, r8, [r6]
 8000d2e:	e7dd      	b.n	8000cec <__udivmoddi4+0xa0>
 8000d30:	b902      	cbnz	r2, 8000d34 <__udivmoddi4+0xe8>
 8000d32:	deff      	udf	#255	; 0xff
 8000d34:	fab2 f282 	clz	r2, r2
 8000d38:	2a00      	cmp	r2, #0
 8000d3a:	f040 808f 	bne.w	8000e5c <__udivmoddi4+0x210>
 8000d3e:	1b49      	subs	r1, r1, r5
 8000d40:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d44:	fa1f f885 	uxth.w	r8, r5
 8000d48:	2701      	movs	r7, #1
 8000d4a:	fbb1 fcfe 	udiv	ip, r1, lr
 8000d4e:	0c23      	lsrs	r3, r4, #16
 8000d50:	fb0e 111c 	mls	r1, lr, ip, r1
 8000d54:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d58:	fb08 f10c 	mul.w	r1, r8, ip
 8000d5c:	4299      	cmp	r1, r3
 8000d5e:	d907      	bls.n	8000d70 <__udivmoddi4+0x124>
 8000d60:	18eb      	adds	r3, r5, r3
 8000d62:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d66:	d202      	bcs.n	8000d6e <__udivmoddi4+0x122>
 8000d68:	4299      	cmp	r1, r3
 8000d6a:	f200 80cd 	bhi.w	8000f08 <__udivmoddi4+0x2bc>
 8000d6e:	4684      	mov	ip, r0
 8000d70:	1a59      	subs	r1, r3, r1
 8000d72:	b2a3      	uxth	r3, r4
 8000d74:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d78:	fb0e 1410 	mls	r4, lr, r0, r1
 8000d7c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000d80:	fb08 f800 	mul.w	r8, r8, r0
 8000d84:	45a0      	cmp	r8, r4
 8000d86:	d907      	bls.n	8000d98 <__udivmoddi4+0x14c>
 8000d88:	192c      	adds	r4, r5, r4
 8000d8a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d8e:	d202      	bcs.n	8000d96 <__udivmoddi4+0x14a>
 8000d90:	45a0      	cmp	r8, r4
 8000d92:	f200 80b6 	bhi.w	8000f02 <__udivmoddi4+0x2b6>
 8000d96:	4618      	mov	r0, r3
 8000d98:	eba4 0408 	sub.w	r4, r4, r8
 8000d9c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000da0:	e79f      	b.n	8000ce2 <__udivmoddi4+0x96>
 8000da2:	f1c7 0c20 	rsb	ip, r7, #32
 8000da6:	40bb      	lsls	r3, r7
 8000da8:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000dac:	ea4e 0e03 	orr.w	lr, lr, r3
 8000db0:	fa01 f407 	lsl.w	r4, r1, r7
 8000db4:	fa20 f50c 	lsr.w	r5, r0, ip
 8000db8:	fa21 f30c 	lsr.w	r3, r1, ip
 8000dbc:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000dc0:	4325      	orrs	r5, r4
 8000dc2:	fbb3 f9f8 	udiv	r9, r3, r8
 8000dc6:	0c2c      	lsrs	r4, r5, #16
 8000dc8:	fb08 3319 	mls	r3, r8, r9, r3
 8000dcc:	fa1f fa8e 	uxth.w	sl, lr
 8000dd0:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000dd4:	fb09 f40a 	mul.w	r4, r9, sl
 8000dd8:	429c      	cmp	r4, r3
 8000dda:	fa02 f207 	lsl.w	r2, r2, r7
 8000dde:	fa00 f107 	lsl.w	r1, r0, r7
 8000de2:	d90b      	bls.n	8000dfc <__udivmoddi4+0x1b0>
 8000de4:	eb1e 0303 	adds.w	r3, lr, r3
 8000de8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000dec:	f080 8087 	bcs.w	8000efe <__udivmoddi4+0x2b2>
 8000df0:	429c      	cmp	r4, r3
 8000df2:	f240 8084 	bls.w	8000efe <__udivmoddi4+0x2b2>
 8000df6:	f1a9 0902 	sub.w	r9, r9, #2
 8000dfa:	4473      	add	r3, lr
 8000dfc:	1b1b      	subs	r3, r3, r4
 8000dfe:	b2ad      	uxth	r5, r5
 8000e00:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e04:	fb08 3310 	mls	r3, r8, r0, r3
 8000e08:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e0c:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e10:	45a2      	cmp	sl, r4
 8000e12:	d908      	bls.n	8000e26 <__udivmoddi4+0x1da>
 8000e14:	eb1e 0404 	adds.w	r4, lr, r4
 8000e18:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e1c:	d26b      	bcs.n	8000ef6 <__udivmoddi4+0x2aa>
 8000e1e:	45a2      	cmp	sl, r4
 8000e20:	d969      	bls.n	8000ef6 <__udivmoddi4+0x2aa>
 8000e22:	3802      	subs	r0, #2
 8000e24:	4474      	add	r4, lr
 8000e26:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e2a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e2e:	eba4 040a 	sub.w	r4, r4, sl
 8000e32:	454c      	cmp	r4, r9
 8000e34:	46c2      	mov	sl, r8
 8000e36:	464b      	mov	r3, r9
 8000e38:	d354      	bcc.n	8000ee4 <__udivmoddi4+0x298>
 8000e3a:	d051      	beq.n	8000ee0 <__udivmoddi4+0x294>
 8000e3c:	2e00      	cmp	r6, #0
 8000e3e:	d069      	beq.n	8000f14 <__udivmoddi4+0x2c8>
 8000e40:	ebb1 050a 	subs.w	r5, r1, sl
 8000e44:	eb64 0403 	sbc.w	r4, r4, r3
 8000e48:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000e4c:	40fd      	lsrs	r5, r7
 8000e4e:	40fc      	lsrs	r4, r7
 8000e50:	ea4c 0505 	orr.w	r5, ip, r5
 8000e54:	e9c6 5400 	strd	r5, r4, [r6]
 8000e58:	2700      	movs	r7, #0
 8000e5a:	e747      	b.n	8000cec <__udivmoddi4+0xa0>
 8000e5c:	f1c2 0320 	rsb	r3, r2, #32
 8000e60:	fa20 f703 	lsr.w	r7, r0, r3
 8000e64:	4095      	lsls	r5, r2
 8000e66:	fa01 f002 	lsl.w	r0, r1, r2
 8000e6a:	fa21 f303 	lsr.w	r3, r1, r3
 8000e6e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e72:	4338      	orrs	r0, r7
 8000e74:	0c01      	lsrs	r1, r0, #16
 8000e76:	fbb3 f7fe 	udiv	r7, r3, lr
 8000e7a:	fa1f f885 	uxth.w	r8, r5
 8000e7e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000e82:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e86:	fb07 f308 	mul.w	r3, r7, r8
 8000e8a:	428b      	cmp	r3, r1
 8000e8c:	fa04 f402 	lsl.w	r4, r4, r2
 8000e90:	d907      	bls.n	8000ea2 <__udivmoddi4+0x256>
 8000e92:	1869      	adds	r1, r5, r1
 8000e94:	f107 3cff 	add.w	ip, r7, #4294967295
 8000e98:	d22f      	bcs.n	8000efa <__udivmoddi4+0x2ae>
 8000e9a:	428b      	cmp	r3, r1
 8000e9c:	d92d      	bls.n	8000efa <__udivmoddi4+0x2ae>
 8000e9e:	3f02      	subs	r7, #2
 8000ea0:	4429      	add	r1, r5
 8000ea2:	1acb      	subs	r3, r1, r3
 8000ea4:	b281      	uxth	r1, r0
 8000ea6:	fbb3 f0fe 	udiv	r0, r3, lr
 8000eaa:	fb0e 3310 	mls	r3, lr, r0, r3
 8000eae:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000eb2:	fb00 f308 	mul.w	r3, r0, r8
 8000eb6:	428b      	cmp	r3, r1
 8000eb8:	d907      	bls.n	8000eca <__udivmoddi4+0x27e>
 8000eba:	1869      	adds	r1, r5, r1
 8000ebc:	f100 3cff 	add.w	ip, r0, #4294967295
 8000ec0:	d217      	bcs.n	8000ef2 <__udivmoddi4+0x2a6>
 8000ec2:	428b      	cmp	r3, r1
 8000ec4:	d915      	bls.n	8000ef2 <__udivmoddi4+0x2a6>
 8000ec6:	3802      	subs	r0, #2
 8000ec8:	4429      	add	r1, r5
 8000eca:	1ac9      	subs	r1, r1, r3
 8000ecc:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000ed0:	e73b      	b.n	8000d4a <__udivmoddi4+0xfe>
 8000ed2:	4637      	mov	r7, r6
 8000ed4:	4630      	mov	r0, r6
 8000ed6:	e709      	b.n	8000cec <__udivmoddi4+0xa0>
 8000ed8:	4607      	mov	r7, r0
 8000eda:	e6e7      	b.n	8000cac <__udivmoddi4+0x60>
 8000edc:	4618      	mov	r0, r3
 8000ede:	e6fb      	b.n	8000cd8 <__udivmoddi4+0x8c>
 8000ee0:	4541      	cmp	r1, r8
 8000ee2:	d2ab      	bcs.n	8000e3c <__udivmoddi4+0x1f0>
 8000ee4:	ebb8 0a02 	subs.w	sl, r8, r2
 8000ee8:	eb69 020e 	sbc.w	r2, r9, lr
 8000eec:	3801      	subs	r0, #1
 8000eee:	4613      	mov	r3, r2
 8000ef0:	e7a4      	b.n	8000e3c <__udivmoddi4+0x1f0>
 8000ef2:	4660      	mov	r0, ip
 8000ef4:	e7e9      	b.n	8000eca <__udivmoddi4+0x27e>
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	e795      	b.n	8000e26 <__udivmoddi4+0x1da>
 8000efa:	4667      	mov	r7, ip
 8000efc:	e7d1      	b.n	8000ea2 <__udivmoddi4+0x256>
 8000efe:	4681      	mov	r9, r0
 8000f00:	e77c      	b.n	8000dfc <__udivmoddi4+0x1b0>
 8000f02:	3802      	subs	r0, #2
 8000f04:	442c      	add	r4, r5
 8000f06:	e747      	b.n	8000d98 <__udivmoddi4+0x14c>
 8000f08:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f0c:	442b      	add	r3, r5
 8000f0e:	e72f      	b.n	8000d70 <__udivmoddi4+0x124>
 8000f10:	4638      	mov	r0, r7
 8000f12:	e708      	b.n	8000d26 <__udivmoddi4+0xda>
 8000f14:	4637      	mov	r7, r6
 8000f16:	e6e9      	b.n	8000cec <__udivmoddi4+0xa0>

08000f18 <__aeabi_idiv0>:
 8000f18:	4770      	bx	lr
 8000f1a:	bf00      	nop
 8000f1c:	0000      	movs	r0, r0
	...

08000f20 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f22:	b0c7      	sub	sp, #284	; 0x11c
 8000f24:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f26:	f001 f9ef 	bl	8002308 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f2a:	f000 fc19 	bl	8001760 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f2e:	f000 fded 	bl	8001b0c <MX_GPIO_Init>
  MX_DMA_Init();
 8000f32:	f000 fdcb 	bl	8001acc <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000f36:	f000 fd9f 	bl	8001a78 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000f3a:	f000 fc79 	bl	8001830 <MX_ADC1_Init>
  MX_TIM3_Init();
 8000f3e:	f000 fd01 	bl	8001944 <MX_TIM3_Init>
  MX_SPI3_Init();
 8000f42:	f000 fcc7 	bl	80018d4 <MX_SPI3_Init>
  MX_TIM11_Init();
 8000f46:	f000 fd49 	bl	80019dc <MX_TIM11_Init>
  MX_USART1_UART_Init();
 8000f4a:	f000 fd6b 	bl	8001a24 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start(&htim3);
 8000f4e:	48b6      	ldr	r0, [pc, #728]	; (8001228 <main+0x308>)
 8000f50:	f003 fdc1 	bl	8004ad6 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start_IT(&htim11);
 8000f54:	48b5      	ldr	r0, [pc, #724]	; (800122c <main+0x30c>)
 8000f56:	f003 fde2 	bl	8004b1e <HAL_TIM_Base_Start_IT>
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) &ADCin, 1);
 8000f5a:	2201      	movs	r2, #1
 8000f5c:	49b4      	ldr	r1, [pc, #720]	; (8001230 <main+0x310>)
 8000f5e:	48b5      	ldr	r0, [pc, #724]	; (8001234 <main+0x314>)
 8000f60:	f001 fbc8 	bl	80026f4 <HAL_ADC_Start_DMA>

	HAL_GPIO_WritePin(LOAD_GPIO_Port, LOAD_Pin, GPIO_PIN_RESET);
 8000f64:	2200      	movs	r2, #0
 8000f66:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f6a:	48b3      	ldr	r0, [pc, #716]	; (8001238 <main+0x318>)
 8000f6c:	f002 fdb4 	bl	8003ad8 <HAL_GPIO_WritePin>

		  	  		// UARTReceiveAndResponsePolling();


		  	  		/*Method 2 Interrupt Mode*/
		  	  		HAL_UART_Receive_IT(&huart1,  (uint8_t*)RxDataBuffer, 32);
 8000f70:	2220      	movs	r2, #32
 8000f72:	49b2      	ldr	r1, [pc, #712]	; (800123c <main+0x31c>)
 8000f74:	48b2      	ldr	r0, [pc, #712]	; (8001240 <main+0x320>)
 8000f76:	f004 fa5f 	bl	8005438 <HAL_UART_Receive_IT>

		  	  		/*Method 2 W/ 1 Char Received*/

		  	  		//read character
		  	  	    int8_t inputchar = UARTReceiveIT();
 8000f7a:	f000 fedf 	bl	8001d3c <UARTReceiveIT>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
	//	  	  			sprintf(TxDataBuffer, "ReceivedChar:[%c]\r\n", inputchar);
	//	  	  			HAL_UART_Transmit(&huart1, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
	//	  	  		}
		  	  	static uint64_t timestamp = 0;

		  	  		switch (CurrentMode)
 8000f84:	4baf      	ldr	r3, [pc, #700]	; (8001244 <main+0x324>)
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	2b1e      	cmp	r3, #30
 8000f8a:	f200 83ad 	bhi.w	80016e8 <main+0x7c8>
 8000f8e:	a201      	add	r2, pc, #4	; (adr r2, 8000f94 <main+0x74>)
 8000f90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f94:	08001011 	.word	0x08001011
 8000f98:	080016e9 	.word	0x080016e9
 8000f9c:	080016e9 	.word	0x080016e9
 8000fa0:	080016e9 	.word	0x080016e9
 8000fa4:	080016e9 	.word	0x080016e9
 8000fa8:	080016e9 	.word	0x080016e9
 8000fac:	080016e9 	.word	0x080016e9
 8000fb0:	080016e9 	.word	0x080016e9
 8000fb4:	080016e9 	.word	0x080016e9
 8000fb8:	080016e9 	.word	0x080016e9
 8000fbc:	08001043 	.word	0x08001043
 8000fc0:	080016e9 	.word	0x080016e9
 8000fc4:	080016e9 	.word	0x080016e9
 8000fc8:	080016e9 	.word	0x080016e9
 8000fcc:	080016e9 	.word	0x080016e9
 8000fd0:	080016e9 	.word	0x080016e9
 8000fd4:	080016e9 	.word	0x080016e9
 8000fd8:	080016e9 	.word	0x080016e9
 8000fdc:	080016e9 	.word	0x080016e9
 8000fe0:	080016e9 	.word	0x080016e9
 8000fe4:	080010af 	.word	0x080010af
 8000fe8:	080016e9 	.word	0x080016e9
 8000fec:	080016e9 	.word	0x080016e9
 8000ff0:	080016e9 	.word	0x080016e9
 8000ff4:	080016e9 	.word	0x080016e9
 8000ff8:	080016e9 	.word	0x080016e9
 8000ffc:	080016e9 	.word	0x080016e9
 8001000:	080016e9 	.word	0x080016e9
 8001004:	080016e9 	.word	0x080016e9
 8001008:	080016e9 	.word	0x080016e9
 800100c:	080010e1 	.word	0x080010e1
		  	  		{
		  	  				case Mode_MainMenu :	//MainMENU
		  	  				{
		  	  					char temp[] = "\r\n---FUNCTION GENERATOR---\r\n"
 8001010:	463b      	mov	r3, r7
 8001012:	4a8d      	ldr	r2, [pc, #564]	; (8001248 <main+0x328>)
 8001014:	4618      	mov	r0, r3
 8001016:	4611      	mov	r1, r2
 8001018:	2362      	movs	r3, #98	; 0x62
 800101a:	461a      	mov	r2, r3
 800101c:	f005 f888 	bl	8006130 <memcpy>
												"---------------\r\n"
												"1 >> Saw Tooth\r\n"
												"2 >> Sine Wave\r\n"
		  	  									"3 >> Square Wave\r\n\r\n";
		  	  					HAL_UART_Transmit(&huart1, (uint8_t*) temp,strlen(temp), 1000);
 8001020:	463b      	mov	r3, r7
 8001022:	4618      	mov	r0, r3
 8001024:	f7ff f8dc 	bl	80001e0 <strlen>
 8001028:	4603      	mov	r3, r0
 800102a:	b29a      	uxth	r2, r3
 800102c:	4639      	mov	r1, r7
 800102e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001032:	4883      	ldr	r0, [pc, #524]	; (8001240 <main+0x320>)
 8001034:	f004 f967 	bl	8005306 <HAL_UART_Transmit>

		  	  					CurrentMode = Mode_MainMenuWait;
 8001038:	4b82      	ldr	r3, [pc, #520]	; (8001244 <main+0x324>)
 800103a:	220a      	movs	r2, #10
 800103c:	601a      	str	r2, [r3, #0]
		  	  					break;
 800103e:	bf00      	nop
 8001040:	e352      	b.n	80016e8 <main+0x7c8>
		  	  				}

		  	  				case Mode_MainMenuWait :
		  	  					switch (inputchar)
 8001042:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 8001046:	2b31      	cmp	r3, #49	; 0x31
 8001048:	d00a      	beq.n	8001060 <main+0x140>
 800104a:	2b31      	cmp	r3, #49	; 0x31
 800104c:	dc03      	bgt.n	8001056 <main+0x136>
 800104e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001052:	d02a      	beq.n	80010aa <main+0x18a>
 8001054:	e010      	b.n	8001078 <main+0x158>
 8001056:	2b32      	cmp	r3, #50	; 0x32
 8001058:	d006      	beq.n	8001068 <main+0x148>
 800105a:	2b33      	cmp	r3, #51	; 0x33
 800105c:	d008      	beq.n	8001070 <main+0x150>
 800105e:	e00b      	b.n	8001078 <main+0x158>
		  	  						case -1 :	//no input
		  	  							break;

		  	  						case '1' :	//saw tooth
		  	  						{
		  	  							CurrentMode = Mode_SawTooth;
 8001060:	4b78      	ldr	r3, [pc, #480]	; (8001244 <main+0x324>)
 8001062:	2214      	movs	r2, #20
 8001064:	601a      	str	r2, [r3, #0]
		  	  							break;
 8001066:	e021      	b.n	80010ac <main+0x18c>
		  	  						}

		  	  						case '2' : //sinewave
		  	  						{
		  	  							 CurrentMode = Mode_SineWave;
 8001068:	4b76      	ldr	r3, [pc, #472]	; (8001244 <main+0x324>)
 800106a:	2228      	movs	r2, #40	; 0x28
 800106c:	601a      	str	r2, [r3, #0]
		  	  							 break;
 800106e:	e01d      	b.n	80010ac <main+0x18c>
		  	  						}

		  	  						case '3' : //squarewave
		  	  						{
		  	  							 CurrentMode = Mode_SquareWave;
 8001070:	4b74      	ldr	r3, [pc, #464]	; (8001244 <main+0x324>)
 8001072:	223c      	movs	r2, #60	; 0x3c
 8001074:	601a      	str	r2, [r3, #0]
		  	  							 break;
 8001076:	e019      	b.n	80010ac <main+0x18c>
		  	  						}

		  	  						default :
		  	  						{
		  	  							char temp[] = "!!!ERROR!!!\r\n";
 8001078:	4b74      	ldr	r3, [pc, #464]	; (800124c <main+0x32c>)
 800107a:	f507 7484 	add.w	r4, r7, #264	; 0x108
 800107e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001080:	c407      	stmia	r4!, {r0, r1, r2}
 8001082:	8023      	strh	r3, [r4, #0]
		  	  							HAL_UART_Transmit(&huart1, (uint8_t*)temp, strlen(temp),1000);
 8001084:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001088:	4618      	mov	r0, r3
 800108a:	f7ff f8a9 	bl	80001e0 <strlen>
 800108e:	4603      	mov	r3, r0
 8001090:	b29a      	uxth	r2, r3
 8001092:	f507 7184 	add.w	r1, r7, #264	; 0x108
 8001096:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800109a:	4869      	ldr	r0, [pc, #420]	; (8001240 <main+0x320>)
 800109c:	f004 f933 	bl	8005306 <HAL_UART_Transmit>
		  	  							CurrentMode = Mode_MainMenu;
 80010a0:	4b68      	ldr	r3, [pc, #416]	; (8001244 <main+0x324>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	601a      	str	r2, [r3, #0]
		  	  							break;
 80010a6:	bf00      	nop
 80010a8:	e000      	b.n	80010ac <main+0x18c>
		  	  							break;
 80010aa:	bf00      	nop
		  	  						}
		  	  					}
		  	  					break;
 80010ac:	e31c      	b.n	80016e8 <main+0x7c8>

		  	  				case Mode_SawTooth :	//SawTooth
		  	  				{
		  	  					char temp[]="---------------\r\n"
 80010ae:	463b      	mov	r3, r7
 80010b0:	4a67      	ldr	r2, [pc, #412]	; (8001250 <main+0x330>)
 80010b2:	4618      	mov	r0, r3
 80010b4:	4611      	mov	r1, r2
 80010b6:	23f4      	movs	r3, #244	; 0xf4
 80010b8:	461a      	mov	r2, r3
 80010ba:	f005 f839 	bl	8006130 <memcpy>
		  	  					"g : Set V_Low +0.1V\r\n"
		  	  					"h : Set V_Low -0.1V\r\n"
		  	  					"j : Slop DOWN\r\n"
		  	  					"k : Slop UP\r\n"
								"x : back\r\n";
		  	  					HAL_UART_Transmit(&huart1, (uint8_t*)temp, strlen(temp),1000);
 80010be:	463b      	mov	r3, r7
 80010c0:	4618      	mov	r0, r3
 80010c2:	f7ff f88d 	bl	80001e0 <strlen>
 80010c6:	4603      	mov	r3, r0
 80010c8:	b29a      	uxth	r2, r3
 80010ca:	4639      	mov	r1, r7
 80010cc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010d0:	485b      	ldr	r0, [pc, #364]	; (8001240 <main+0x320>)
 80010d2:	f004 f918 	bl	8005306 <HAL_UART_Transmit>
		  	  					CurrentMode = Mode_SawTooth_Wait;
 80010d6:	4b5b      	ldr	r3, [pc, #364]	; (8001244 <main+0x324>)
 80010d8:	221e      	movs	r2, #30
 80010da:	601a      	str	r2, [r3, #0]
		  	  					break;
 80010dc:	bf00      	nop
 80010de:	e303      	b.n	80016e8 <main+0x7c8>
		  	  				}

		  	  				case Mode_SawTooth_Wait	:		//default 5 Hz >> range 0 - 10 Hz
		  	  					switch (inputchar)
 80010e0:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 80010e4:	2b67      	cmp	r3, #103	; 0x67
 80010e6:	f000 8155 	beq.w	8001394 <main+0x474>
 80010ea:	2b67      	cmp	r3, #103	; 0x67
 80010ec:	dc0f      	bgt.n	800110e <main+0x1ee>
 80010ee:	2b61      	cmp	r3, #97	; 0x61
 80010f0:	d01f      	beq.n	8001132 <main+0x212>
 80010f2:	2b61      	cmp	r3, #97	; 0x61
 80010f4:	dc04      	bgt.n	8001100 <main+0x1e0>
 80010f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010fa:	f000 8257 	beq.w	80015ac <main+0x68c>
 80010fe:	e23a      	b.n	8001576 <main+0x656>
 8001100:	2b64      	cmp	r3, #100	; 0x64
 8001102:	f000 80af 	beq.w	8001264 <main+0x344>
 8001106:	2b66      	cmp	r3, #102	; 0x66
 8001108:	f000 80f8 	beq.w	80012fc <main+0x3dc>
 800110c:	e233      	b.n	8001576 <main+0x656>
 800110e:	2b6b      	cmp	r3, #107	; 0x6b
 8001110:	f000 8216 	beq.w	8001540 <main+0x620>
 8001114:	2b6b      	cmp	r3, #107	; 0x6b
 8001116:	dc06      	bgt.n	8001126 <main+0x206>
 8001118:	2b68      	cmp	r3, #104	; 0x68
 800111a:	f000 8187 	beq.w	800142c <main+0x50c>
 800111e:	2b6a      	cmp	r3, #106	; 0x6a
 8001120:	f000 81cc 	beq.w	80014bc <main+0x59c>
 8001124:	e227      	b.n	8001576 <main+0x656>
 8001126:	2b73      	cmp	r3, #115	; 0x73
 8001128:	d03f      	beq.n	80011aa <main+0x28a>
 800112a:	2b78      	cmp	r3, #120	; 0x78
 800112c:	f000 821f 	beq.w	800156e <main+0x64e>
 8001130:	e221      	b.n	8001576 <main+0x656>

		  	  					  	case -1 :	//no input
		  	  					  	  	break;

		  	  					  	case 'a' :	//increase frequency
		  	  					  		Frequency += 0.1;
 8001132:	4b48      	ldr	r3, [pc, #288]	; (8001254 <main+0x334>)
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	4618      	mov	r0, r3
 8001138:	f7ff fa0e 	bl	8000558 <__aeabi_f2d>
 800113c:	a338      	add	r3, pc, #224	; (adr r3, 8001220 <main+0x300>)
 800113e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001142:	f7ff f8ab 	bl	800029c <__adddf3>
 8001146:	4603      	mov	r3, r0
 8001148:	460c      	mov	r4, r1
 800114a:	4618      	mov	r0, r3
 800114c:	4621      	mov	r1, r4
 800114e:	f7ff fd15 	bl	8000b7c <__aeabi_d2f>
 8001152:	4602      	mov	r2, r0
 8001154:	4b3f      	ldr	r3, [pc, #252]	; (8001254 <main+0x334>)
 8001156:	601a      	str	r2, [r3, #0]
		  	  					  		if (Frequency >= 10)
 8001158:	4b3e      	ldr	r3, [pc, #248]	; (8001254 <main+0x334>)
 800115a:	edd3 7a00 	vldr	s15, [r3]
 800115e:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001162:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001166:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800116a:	db02      	blt.n	8001172 <main+0x252>
		  	  					  		{
		  	  					  			Frequency = 10;
 800116c:	4b39      	ldr	r3, [pc, #228]	; (8001254 <main+0x334>)
 800116e:	4a3a      	ldr	r2, [pc, #232]	; (8001258 <main+0x338>)
 8001170:	601a      	str	r2, [r3, #0]
		  	  					  		}
		  	  					  		sprintf(temp, "Current Frequency : [%d]\r\n" , Frequency);
 8001172:	4b38      	ldr	r3, [pc, #224]	; (8001254 <main+0x334>)
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	4618      	mov	r0, r3
 8001178:	f7ff f9ee 	bl	8000558 <__aeabi_f2d>
 800117c:	4603      	mov	r3, r0
 800117e:	460c      	mov	r4, r1
 8001180:	461a      	mov	r2, r3
 8001182:	4623      	mov	r3, r4
 8001184:	4935      	ldr	r1, [pc, #212]	; (800125c <main+0x33c>)
 8001186:	4836      	ldr	r0, [pc, #216]	; (8001260 <main+0x340>)
 8001188:	f004 ffe6 	bl	8006158 <siprintf>
		  	  					  		HAL_UART_Transmit(&huart1, (uint8_t*)temp, strlen(temp),1000);
 800118c:	4834      	ldr	r0, [pc, #208]	; (8001260 <main+0x340>)
 800118e:	f7ff f827 	bl	80001e0 <strlen>
 8001192:	4603      	mov	r3, r0
 8001194:	b29a      	uxth	r2, r3
 8001196:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800119a:	4931      	ldr	r1, [pc, #196]	; (8001260 <main+0x340>)
 800119c:	4828      	ldr	r0, [pc, #160]	; (8001240 <main+0x320>)
 800119e:	f004 f8b2 	bl	8005306 <HAL_UART_Transmit>
		  	  					  		CurrentMode = Mode_SawTooth;
 80011a2:	4b28      	ldr	r3, [pc, #160]	; (8001244 <main+0x324>)
 80011a4:	2214      	movs	r2, #20
 80011a6:	601a      	str	r2, [r3, #0]
		  	  					  		break;
 80011a8:	e201      	b.n	80015ae <main+0x68e>

		  	  					  	case 's' :	//decrease frequency
		  	  					  		Frequency -= 0.1;
 80011aa:	4b2a      	ldr	r3, [pc, #168]	; (8001254 <main+0x334>)
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	4618      	mov	r0, r3
 80011b0:	f7ff f9d2 	bl	8000558 <__aeabi_f2d>
 80011b4:	a31a      	add	r3, pc, #104	; (adr r3, 8001220 <main+0x300>)
 80011b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011ba:	f7ff f86d 	bl	8000298 <__aeabi_dsub>
 80011be:	4603      	mov	r3, r0
 80011c0:	460c      	mov	r4, r1
 80011c2:	4618      	mov	r0, r3
 80011c4:	4621      	mov	r1, r4
 80011c6:	f7ff fcd9 	bl	8000b7c <__aeabi_d2f>
 80011ca:	4602      	mov	r2, r0
 80011cc:	4b21      	ldr	r3, [pc, #132]	; (8001254 <main+0x334>)
 80011ce:	601a      	str	r2, [r3, #0]
		  	  					  		if (Frequency <= 0)
 80011d0:	4b20      	ldr	r3, [pc, #128]	; (8001254 <main+0x334>)
 80011d2:	edd3 7a00 	vldr	s15, [r3]
 80011d6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80011da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011de:	d803      	bhi.n	80011e8 <main+0x2c8>
		  	  					  		{
		  	  					  			Frequency = 0;
 80011e0:	4b1c      	ldr	r3, [pc, #112]	; (8001254 <main+0x334>)
 80011e2:	f04f 0200 	mov.w	r2, #0
 80011e6:	601a      	str	r2, [r3, #0]
		  	  					  		}
										sprintf(temp, "Current Frequency : [%d]\r\n" , Frequency);
 80011e8:	4b1a      	ldr	r3, [pc, #104]	; (8001254 <main+0x334>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	4618      	mov	r0, r3
 80011ee:	f7ff f9b3 	bl	8000558 <__aeabi_f2d>
 80011f2:	4603      	mov	r3, r0
 80011f4:	460c      	mov	r4, r1
 80011f6:	461a      	mov	r2, r3
 80011f8:	4623      	mov	r3, r4
 80011fa:	4918      	ldr	r1, [pc, #96]	; (800125c <main+0x33c>)
 80011fc:	4818      	ldr	r0, [pc, #96]	; (8001260 <main+0x340>)
 80011fe:	f004 ffab 	bl	8006158 <siprintf>
										HAL_UART_Transmit(&huart1, (uint8_t*)temp, strlen(temp),1000);
 8001202:	4817      	ldr	r0, [pc, #92]	; (8001260 <main+0x340>)
 8001204:	f7fe ffec 	bl	80001e0 <strlen>
 8001208:	4603      	mov	r3, r0
 800120a:	b29a      	uxth	r2, r3
 800120c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001210:	4913      	ldr	r1, [pc, #76]	; (8001260 <main+0x340>)
 8001212:	480b      	ldr	r0, [pc, #44]	; (8001240 <main+0x320>)
 8001214:	f004 f877 	bl	8005306 <HAL_UART_Transmit>
										CurrentMode = Mode_SawTooth;
 8001218:	4b0a      	ldr	r3, [pc, #40]	; (8001244 <main+0x324>)
 800121a:	2214      	movs	r2, #20
 800121c:	601a      	str	r2, [r3, #0]
										break;
 800121e:	e1c6      	b.n	80015ae <main+0x68e>
 8001220:	9999999a 	.word	0x9999999a
 8001224:	3fb99999 	.word	0x3fb99999
 8001228:	20000170 	.word	0x20000170
 800122c:	20000290 	.word	0x20000290
 8001230:	2000009c 	.word	0x2000009c
 8001234:	20000208 	.word	0x20000208
 8001238:	40020000 	.word	0x40020000
 800123c:	200000d4 	.word	0x200000d4
 8001240:	20000250 	.word	0x20000250
 8001244:	200000ac 	.word	0x200000ac
 8001248:	080069cc 	.word	0x080069cc
 800124c:	08006a30 	.word	0x08006a30
 8001250:	08006a40 	.word	0x08006a40
 8001254:	20000004 	.word	0x20000004
 8001258:	41200000 	.word	0x41200000
 800125c:	08006968 	.word	0x08006968
 8001260:	200000f4 	.word	0x200000f4

		  	  					  	case 'd' :	// Set V_High +0.1V
		  	  					  		MaxV += 0.1;
 8001264:	4baa      	ldr	r3, [pc, #680]	; (8001510 <main+0x5f0>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	4618      	mov	r0, r3
 800126a:	f7ff f975 	bl	8000558 <__aeabi_f2d>
 800126e:	a3a2      	add	r3, pc, #648	; (adr r3, 80014f8 <main+0x5d8>)
 8001270:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001274:	f7ff f812 	bl	800029c <__adddf3>
 8001278:	4603      	mov	r3, r0
 800127a:	460c      	mov	r4, r1
 800127c:	4618      	mov	r0, r3
 800127e:	4621      	mov	r1, r4
 8001280:	f7ff fc7c 	bl	8000b7c <__aeabi_d2f>
 8001284:	4602      	mov	r2, r0
 8001286:	4ba2      	ldr	r3, [pc, #648]	; (8001510 <main+0x5f0>)
 8001288:	601a      	str	r2, [r3, #0]
		  	  					  		if (MaxV >= 3.3)
 800128a:	4ba1      	ldr	r3, [pc, #644]	; (8001510 <main+0x5f0>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	4618      	mov	r0, r3
 8001290:	f7ff f962 	bl	8000558 <__aeabi_f2d>
 8001294:	a39a      	add	r3, pc, #616	; (adr r3, 8001500 <main+0x5e0>)
 8001296:	e9d3 2300 	ldrd	r2, r3, [r3]
 800129a:	f7ff fc3b 	bl	8000b14 <__aeabi_dcmpge>
 800129e:	4603      	mov	r3, r0
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d002      	beq.n	80012aa <main+0x38a>
		  	  					  		{
		  	  					  			MaxV = 3.3;
 80012a4:	4b9a      	ldr	r3, [pc, #616]	; (8001510 <main+0x5f0>)
 80012a6:	4a9b      	ldr	r2, [pc, #620]	; (8001514 <main+0x5f4>)
 80012a8:	601a      	str	r2, [r3, #0]
		  	  					  		}
		  	  					  		sprintf(temp, "Current V_High : [%d]\r\n" , MaxV);
 80012aa:	4b99      	ldr	r3, [pc, #612]	; (8001510 <main+0x5f0>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	4618      	mov	r0, r3
 80012b0:	f7ff f952 	bl	8000558 <__aeabi_f2d>
 80012b4:	4603      	mov	r3, r0
 80012b6:	460c      	mov	r4, r1
 80012b8:	461a      	mov	r2, r3
 80012ba:	4623      	mov	r3, r4
 80012bc:	4996      	ldr	r1, [pc, #600]	; (8001518 <main+0x5f8>)
 80012be:	4897      	ldr	r0, [pc, #604]	; (800151c <main+0x5fc>)
 80012c0:	f004 ff4a 	bl	8006158 <siprintf>
		  	  					  		sprintf(temp, "Current V_Low : [%d]\r\n" , MinV);
 80012c4:	4b96      	ldr	r3, [pc, #600]	; (8001520 <main+0x600>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	4618      	mov	r0, r3
 80012ca:	f7ff f945 	bl	8000558 <__aeabi_f2d>
 80012ce:	4603      	mov	r3, r0
 80012d0:	460c      	mov	r4, r1
 80012d2:	461a      	mov	r2, r3
 80012d4:	4623      	mov	r3, r4
 80012d6:	4993      	ldr	r1, [pc, #588]	; (8001524 <main+0x604>)
 80012d8:	4890      	ldr	r0, [pc, #576]	; (800151c <main+0x5fc>)
 80012da:	f004 ff3d 	bl	8006158 <siprintf>
		  	  					  		HAL_UART_Transmit(&huart1, (uint8_t*)temp, strlen(temp),1000);
 80012de:	488f      	ldr	r0, [pc, #572]	; (800151c <main+0x5fc>)
 80012e0:	f7fe ff7e 	bl	80001e0 <strlen>
 80012e4:	4603      	mov	r3, r0
 80012e6:	b29a      	uxth	r2, r3
 80012e8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012ec:	498b      	ldr	r1, [pc, #556]	; (800151c <main+0x5fc>)
 80012ee:	488e      	ldr	r0, [pc, #568]	; (8001528 <main+0x608>)
 80012f0:	f004 f809 	bl	8005306 <HAL_UART_Transmit>
		  	  					  		CurrentMode = Mode_SawTooth;
 80012f4:	4b8d      	ldr	r3, [pc, #564]	; (800152c <main+0x60c>)
 80012f6:	2214      	movs	r2, #20
 80012f8:	601a      	str	r2, [r3, #0]
		  	  					  		break;
 80012fa:	e158      	b.n	80015ae <main+0x68e>

		  	  					  	case 'f' :	// Set V_High -0.1V
		  	  					  		MaxV -= 0.1;
 80012fc:	4b84      	ldr	r3, [pc, #528]	; (8001510 <main+0x5f0>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	4618      	mov	r0, r3
 8001302:	f7ff f929 	bl	8000558 <__aeabi_f2d>
 8001306:	a37c      	add	r3, pc, #496	; (adr r3, 80014f8 <main+0x5d8>)
 8001308:	e9d3 2300 	ldrd	r2, r3, [r3]
 800130c:	f7fe ffc4 	bl	8000298 <__aeabi_dsub>
 8001310:	4603      	mov	r3, r0
 8001312:	460c      	mov	r4, r1
 8001314:	4618      	mov	r0, r3
 8001316:	4621      	mov	r1, r4
 8001318:	f7ff fc30 	bl	8000b7c <__aeabi_d2f>
 800131c:	4602      	mov	r2, r0
 800131e:	4b7c      	ldr	r3, [pc, #496]	; (8001510 <main+0x5f0>)
 8001320:	601a      	str	r2, [r3, #0]
		  	  					  		if (MaxV <= 0.1)
 8001322:	4b7b      	ldr	r3, [pc, #492]	; (8001510 <main+0x5f0>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	4618      	mov	r0, r3
 8001328:	f7ff f916 	bl	8000558 <__aeabi_f2d>
 800132c:	a372      	add	r3, pc, #456	; (adr r3, 80014f8 <main+0x5d8>)
 800132e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001332:	f7ff fbe5 	bl	8000b00 <__aeabi_dcmple>
 8001336:	4603      	mov	r3, r0
 8001338:	2b00      	cmp	r3, #0
 800133a:	d002      	beq.n	8001342 <main+0x422>
		  	  					  		{
		  	  					  			MaxV = 0.1;
 800133c:	4b74      	ldr	r3, [pc, #464]	; (8001510 <main+0x5f0>)
 800133e:	4a7c      	ldr	r2, [pc, #496]	; (8001530 <main+0x610>)
 8001340:	601a      	str	r2, [r3, #0]
		  	  					  		}
		  	  					  		sprintf(temp, "Current V_High : [%d]\r\n" , MaxV);
 8001342:	4b73      	ldr	r3, [pc, #460]	; (8001510 <main+0x5f0>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	4618      	mov	r0, r3
 8001348:	f7ff f906 	bl	8000558 <__aeabi_f2d>
 800134c:	4603      	mov	r3, r0
 800134e:	460c      	mov	r4, r1
 8001350:	461a      	mov	r2, r3
 8001352:	4623      	mov	r3, r4
 8001354:	4970      	ldr	r1, [pc, #448]	; (8001518 <main+0x5f8>)
 8001356:	4871      	ldr	r0, [pc, #452]	; (800151c <main+0x5fc>)
 8001358:	f004 fefe 	bl	8006158 <siprintf>
		  	  					  		sprintf(temp, "Current V_Low : [%d]\r\n" , MinV);
 800135c:	4b70      	ldr	r3, [pc, #448]	; (8001520 <main+0x600>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	4618      	mov	r0, r3
 8001362:	f7ff f8f9 	bl	8000558 <__aeabi_f2d>
 8001366:	4603      	mov	r3, r0
 8001368:	460c      	mov	r4, r1
 800136a:	461a      	mov	r2, r3
 800136c:	4623      	mov	r3, r4
 800136e:	496d      	ldr	r1, [pc, #436]	; (8001524 <main+0x604>)
 8001370:	486a      	ldr	r0, [pc, #424]	; (800151c <main+0x5fc>)
 8001372:	f004 fef1 	bl	8006158 <siprintf>
		  	  					  		HAL_UART_Transmit(&huart1, (uint8_t*)temp, strlen(temp),1000);
 8001376:	4869      	ldr	r0, [pc, #420]	; (800151c <main+0x5fc>)
 8001378:	f7fe ff32 	bl	80001e0 <strlen>
 800137c:	4603      	mov	r3, r0
 800137e:	b29a      	uxth	r2, r3
 8001380:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001384:	4965      	ldr	r1, [pc, #404]	; (800151c <main+0x5fc>)
 8001386:	4868      	ldr	r0, [pc, #416]	; (8001528 <main+0x608>)
 8001388:	f003 ffbd 	bl	8005306 <HAL_UART_Transmit>
		  	  					  		CurrentMode = Mode_SawTooth;
 800138c:	4b67      	ldr	r3, [pc, #412]	; (800152c <main+0x60c>)
 800138e:	2214      	movs	r2, #20
 8001390:	601a      	str	r2, [r3, #0]
		  	  					  		break;
 8001392:	e10c      	b.n	80015ae <main+0x68e>

		  	  					  	case 'g' :	// Set V_Low +0.1V
		  	  					  		MinV += 0.1;
 8001394:	4b62      	ldr	r3, [pc, #392]	; (8001520 <main+0x600>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	4618      	mov	r0, r3
 800139a:	f7ff f8dd 	bl	8000558 <__aeabi_f2d>
 800139e:	a356      	add	r3, pc, #344	; (adr r3, 80014f8 <main+0x5d8>)
 80013a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013a4:	f7fe ff7a 	bl	800029c <__adddf3>
 80013a8:	4603      	mov	r3, r0
 80013aa:	460c      	mov	r4, r1
 80013ac:	4618      	mov	r0, r3
 80013ae:	4621      	mov	r1, r4
 80013b0:	f7ff fbe4 	bl	8000b7c <__aeabi_d2f>
 80013b4:	4602      	mov	r2, r0
 80013b6:	4b5a      	ldr	r3, [pc, #360]	; (8001520 <main+0x600>)
 80013b8:	601a      	str	r2, [r3, #0]
		  	  					  		if (MinV >= 3.2)
 80013ba:	4b59      	ldr	r3, [pc, #356]	; (8001520 <main+0x600>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	4618      	mov	r0, r3
 80013c0:	f7ff f8ca 	bl	8000558 <__aeabi_f2d>
 80013c4:	a350      	add	r3, pc, #320	; (adr r3, 8001508 <main+0x5e8>)
 80013c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013ca:	f7ff fba3 	bl	8000b14 <__aeabi_dcmpge>
 80013ce:	4603      	mov	r3, r0
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d002      	beq.n	80013da <main+0x4ba>
		  	  					  		{
		  	  					  			MinV = 3.2;
 80013d4:	4b52      	ldr	r3, [pc, #328]	; (8001520 <main+0x600>)
 80013d6:	4a57      	ldr	r2, [pc, #348]	; (8001534 <main+0x614>)
 80013d8:	601a      	str	r2, [r3, #0]
		  	  					  		}
		  	  					  		sprintf(temp, "Current V_High : [%d]\r\n" , MaxV);
 80013da:	4b4d      	ldr	r3, [pc, #308]	; (8001510 <main+0x5f0>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	4618      	mov	r0, r3
 80013e0:	f7ff f8ba 	bl	8000558 <__aeabi_f2d>
 80013e4:	4603      	mov	r3, r0
 80013e6:	460c      	mov	r4, r1
 80013e8:	461a      	mov	r2, r3
 80013ea:	4623      	mov	r3, r4
 80013ec:	494a      	ldr	r1, [pc, #296]	; (8001518 <main+0x5f8>)
 80013ee:	484b      	ldr	r0, [pc, #300]	; (800151c <main+0x5fc>)
 80013f0:	f004 feb2 	bl	8006158 <siprintf>
		  	  					  		sprintf(temp, "Current V_Low : [%d]\r\n" , MinV);
 80013f4:	4b4a      	ldr	r3, [pc, #296]	; (8001520 <main+0x600>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	4618      	mov	r0, r3
 80013fa:	f7ff f8ad 	bl	8000558 <__aeabi_f2d>
 80013fe:	4603      	mov	r3, r0
 8001400:	460c      	mov	r4, r1
 8001402:	461a      	mov	r2, r3
 8001404:	4623      	mov	r3, r4
 8001406:	4947      	ldr	r1, [pc, #284]	; (8001524 <main+0x604>)
 8001408:	4844      	ldr	r0, [pc, #272]	; (800151c <main+0x5fc>)
 800140a:	f004 fea5 	bl	8006158 <siprintf>
		  	  					  		HAL_UART_Transmit(&huart1, (uint8_t*)temp, strlen(temp),1000);
 800140e:	4843      	ldr	r0, [pc, #268]	; (800151c <main+0x5fc>)
 8001410:	f7fe fee6 	bl	80001e0 <strlen>
 8001414:	4603      	mov	r3, r0
 8001416:	b29a      	uxth	r2, r3
 8001418:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800141c:	493f      	ldr	r1, [pc, #252]	; (800151c <main+0x5fc>)
 800141e:	4842      	ldr	r0, [pc, #264]	; (8001528 <main+0x608>)
 8001420:	f003 ff71 	bl	8005306 <HAL_UART_Transmit>
		  	  					  		CurrentMode = Mode_SawTooth;
 8001424:	4b41      	ldr	r3, [pc, #260]	; (800152c <main+0x60c>)
 8001426:	2214      	movs	r2, #20
 8001428:	601a      	str	r2, [r3, #0]
		  	  					  		break;
 800142a:	e0c0      	b.n	80015ae <main+0x68e>

		  	  					  	case 'h' :	// Set V_Low -0.1V
		  	  					  		MinV -= 0.1;
 800142c:	4b3c      	ldr	r3, [pc, #240]	; (8001520 <main+0x600>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	4618      	mov	r0, r3
 8001432:	f7ff f891 	bl	8000558 <__aeabi_f2d>
 8001436:	a330      	add	r3, pc, #192	; (adr r3, 80014f8 <main+0x5d8>)
 8001438:	e9d3 2300 	ldrd	r2, r3, [r3]
 800143c:	f7fe ff2c 	bl	8000298 <__aeabi_dsub>
 8001440:	4603      	mov	r3, r0
 8001442:	460c      	mov	r4, r1
 8001444:	4618      	mov	r0, r3
 8001446:	4621      	mov	r1, r4
 8001448:	f7ff fb98 	bl	8000b7c <__aeabi_d2f>
 800144c:	4602      	mov	r2, r0
 800144e:	4b34      	ldr	r3, [pc, #208]	; (8001520 <main+0x600>)
 8001450:	601a      	str	r2, [r3, #0]
		  	  					  		if (MinV <= 0)
 8001452:	4b33      	ldr	r3, [pc, #204]	; (8001520 <main+0x600>)
 8001454:	edd3 7a00 	vldr	s15, [r3]
 8001458:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800145c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001460:	d803      	bhi.n	800146a <main+0x54a>
		  	  					  		{
		  	  					  			MinV = 0;
 8001462:	4b2f      	ldr	r3, [pc, #188]	; (8001520 <main+0x600>)
 8001464:	f04f 0200 	mov.w	r2, #0
 8001468:	601a      	str	r2, [r3, #0]
		  	  					  		}
		  	  					  		sprintf(temp, "Current V_High : [%d]\r\n" , MaxV);
 800146a:	4b29      	ldr	r3, [pc, #164]	; (8001510 <main+0x5f0>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	4618      	mov	r0, r3
 8001470:	f7ff f872 	bl	8000558 <__aeabi_f2d>
 8001474:	4603      	mov	r3, r0
 8001476:	460c      	mov	r4, r1
 8001478:	461a      	mov	r2, r3
 800147a:	4623      	mov	r3, r4
 800147c:	4926      	ldr	r1, [pc, #152]	; (8001518 <main+0x5f8>)
 800147e:	4827      	ldr	r0, [pc, #156]	; (800151c <main+0x5fc>)
 8001480:	f004 fe6a 	bl	8006158 <siprintf>
		  	  					  		sprintf(temp, "Current V_Low : [%d]\r\n" , MinV);
 8001484:	4b26      	ldr	r3, [pc, #152]	; (8001520 <main+0x600>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	4618      	mov	r0, r3
 800148a:	f7ff f865 	bl	8000558 <__aeabi_f2d>
 800148e:	4603      	mov	r3, r0
 8001490:	460c      	mov	r4, r1
 8001492:	461a      	mov	r2, r3
 8001494:	4623      	mov	r3, r4
 8001496:	4923      	ldr	r1, [pc, #140]	; (8001524 <main+0x604>)
 8001498:	4820      	ldr	r0, [pc, #128]	; (800151c <main+0x5fc>)
 800149a:	f004 fe5d 	bl	8006158 <siprintf>
		  	  					  		HAL_UART_Transmit(&huart1, (uint8_t*)temp, strlen(temp),1000);
 800149e:	481f      	ldr	r0, [pc, #124]	; (800151c <main+0x5fc>)
 80014a0:	f7fe fe9e 	bl	80001e0 <strlen>
 80014a4:	4603      	mov	r3, r0
 80014a6:	b29a      	uxth	r2, r3
 80014a8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014ac:	491b      	ldr	r1, [pc, #108]	; (800151c <main+0x5fc>)
 80014ae:	481e      	ldr	r0, [pc, #120]	; (8001528 <main+0x608>)
 80014b0:	f003 ff29 	bl	8005306 <HAL_UART_Transmit>
		  	  					  		CurrentMode = Mode_SawTooth;
 80014b4:	4b1d      	ldr	r3, [pc, #116]	; (800152c <main+0x60c>)
 80014b6:	2214      	movs	r2, #20
 80014b8:	601a      	str	r2, [r3, #0]
		  	  					  		break;
 80014ba:	e078      	b.n	80015ae <main+0x68e>

		  	  					  	case 'j' :	//Slop DOWN
		  	  					  		Slope = -1;
 80014bc:	4b1e      	ldr	r3, [pc, #120]	; (8001538 <main+0x618>)
 80014be:	f04f 32ff 	mov.w	r2, #4294967295
 80014c2:	601a      	str	r2, [r3, #0]
		  	  					  		sprintf(temp, "SLOPE DOWN");
 80014c4:	4b15      	ldr	r3, [pc, #84]	; (800151c <main+0x5fc>)
 80014c6:	4a1d      	ldr	r2, [pc, #116]	; (800153c <main+0x61c>)
 80014c8:	ca07      	ldmia	r2, {r0, r1, r2}
 80014ca:	c303      	stmia	r3!, {r0, r1}
 80014cc:	801a      	strh	r2, [r3, #0]
 80014ce:	3302      	adds	r3, #2
 80014d0:	0c12      	lsrs	r2, r2, #16
 80014d2:	701a      	strb	r2, [r3, #0]
		  	  					  		HAL_UART_Transmit(&huart1, (uint8_t*)temp, strlen(temp),1000);
 80014d4:	4811      	ldr	r0, [pc, #68]	; (800151c <main+0x5fc>)
 80014d6:	f7fe fe83 	bl	80001e0 <strlen>
 80014da:	4603      	mov	r3, r0
 80014dc:	b29a      	uxth	r2, r3
 80014de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014e2:	490e      	ldr	r1, [pc, #56]	; (800151c <main+0x5fc>)
 80014e4:	4810      	ldr	r0, [pc, #64]	; (8001528 <main+0x608>)
 80014e6:	f003 ff0e 	bl	8005306 <HAL_UART_Transmit>
		  	  					  		CurrentMode = Mode_SawTooth;
 80014ea:	4b10      	ldr	r3, [pc, #64]	; (800152c <main+0x60c>)
 80014ec:	2214      	movs	r2, #20
 80014ee:	601a      	str	r2, [r3, #0]
		  	  					  		break;
 80014f0:	e05d      	b.n	80015ae <main+0x68e>
 80014f2:	bf00      	nop
 80014f4:	f3af 8000 	nop.w
 80014f8:	9999999a 	.word	0x9999999a
 80014fc:	3fb99999 	.word	0x3fb99999
 8001500:	66666666 	.word	0x66666666
 8001504:	400a6666 	.word	0x400a6666
 8001508:	9999999a 	.word	0x9999999a
 800150c:	40099999 	.word	0x40099999
 8001510:	20000008 	.word	0x20000008
 8001514:	40533333 	.word	0x40533333
 8001518:	08006984 	.word	0x08006984
 800151c:	200000f4 	.word	0x200000f4
 8001520:	200000b0 	.word	0x200000b0
 8001524:	0800699c 	.word	0x0800699c
 8001528:	20000250 	.word	0x20000250
 800152c:	200000ac 	.word	0x200000ac
 8001530:	3dcccccd 	.word	0x3dcccccd
 8001534:	404ccccd 	.word	0x404ccccd
 8001538:	2000000c 	.word	0x2000000c
 800153c:	080069b4 	.word	0x080069b4

		  	  					  	case 'k' :	//Slop UP
		  	  					  		Slope = 1;
 8001540:	4b79      	ldr	r3, [pc, #484]	; (8001728 <main+0x808>)
 8001542:	2201      	movs	r2, #1
 8001544:	601a      	str	r2, [r3, #0]
		  	  					  		sprintf(temp, "SLOPE UP");
 8001546:	4b79      	ldr	r3, [pc, #484]	; (800172c <main+0x80c>)
 8001548:	4a79      	ldr	r2, [pc, #484]	; (8001730 <main+0x810>)
 800154a:	ca07      	ldmia	r2, {r0, r1, r2}
 800154c:	c303      	stmia	r3!, {r0, r1}
 800154e:	701a      	strb	r2, [r3, #0]
		  	  					  		HAL_UART_Transmit(&huart1, (uint8_t*)temp, strlen(temp),1000);
 8001550:	4876      	ldr	r0, [pc, #472]	; (800172c <main+0x80c>)
 8001552:	f7fe fe45 	bl	80001e0 <strlen>
 8001556:	4603      	mov	r3, r0
 8001558:	b29a      	uxth	r2, r3
 800155a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800155e:	4973      	ldr	r1, [pc, #460]	; (800172c <main+0x80c>)
 8001560:	4874      	ldr	r0, [pc, #464]	; (8001734 <main+0x814>)
 8001562:	f003 fed0 	bl	8005306 <HAL_UART_Transmit>
		  	  					  		CurrentMode = Mode_SawTooth;
 8001566:	4b74      	ldr	r3, [pc, #464]	; (8001738 <main+0x818>)
 8001568:	2214      	movs	r2, #20
 800156a:	601a      	str	r2, [r3, #0]
		  	  					  		break;
 800156c:	e01f      	b.n	80015ae <main+0x68e>

		  	  					  	case 'x' :	//back
		  	  					  		CurrentMode = Mode_MainMenu;
 800156e:	4b72      	ldr	r3, [pc, #456]	; (8001738 <main+0x818>)
 8001570:	2200      	movs	r2, #0
 8001572:	601a      	str	r2, [r3, #0]
		  	  					  		break;
 8001574:	e01b      	b.n	80015ae <main+0x68e>

		  	  					  	default :	//error
		  	  					  		{
		  	  					  			char temp[] = "\r\n\r\n!!!ERROR!!!\r\n\r\n";
 8001576:	4b71      	ldr	r3, [pc, #452]	; (800173c <main+0x81c>)
 8001578:	f107 04f4 	add.w	r4, r7, #244	; 0xf4
 800157c:	461d      	mov	r5, r3
 800157e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001580:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001582:	682b      	ldr	r3, [r5, #0]
 8001584:	6023      	str	r3, [r4, #0]
		  	  					  			HAL_UART_Transmit(&huart1, (uint8_t*)temp, strlen(temp),1000);
 8001586:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 800158a:	4618      	mov	r0, r3
 800158c:	f7fe fe28 	bl	80001e0 <strlen>
 8001590:	4603      	mov	r3, r0
 8001592:	b29a      	uxth	r2, r3
 8001594:	f107 01f4 	add.w	r1, r7, #244	; 0xf4
 8001598:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800159c:	4865      	ldr	r0, [pc, #404]	; (8001734 <main+0x814>)
 800159e:	f003 feb2 	bl	8005306 <HAL_UART_Transmit>
		  	  					  			CurrentMode = Mode_MainMenu;
 80015a2:	4b65      	ldr	r3, [pc, #404]	; (8001738 <main+0x818>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	601a      	str	r2, [r3, #0]
		  	  					  			break;
 80015a8:	bf00      	nop
 80015aa:	e000      	b.n	80015ae <main+0x68e>
		  	  					  	  	break;
 80015ac:	bf00      	nop
		  	  					  		}
		  	  					}
		  	  				if (micros() - timestamp > 100)	//100 microsec >> 10 kHz
 80015ae:	f000 fbab 	bl	8001d08 <micros>
 80015b2:	460a      	mov	r2, r1
 80015b4:	4601      	mov	r1, r0
 80015b6:	4b62      	ldr	r3, [pc, #392]	; (8001740 <main+0x820>)
 80015b8:	e9d3 5600 	ldrd	r5, r6, [r3]
 80015bc:	460b      	mov	r3, r1
 80015be:	4614      	mov	r4, r2
 80015c0:	1b5b      	subs	r3, r3, r5
 80015c2:	eb64 0406 	sbc.w	r4, r4, r6
 80015c6:	2c00      	cmp	r4, #0
 80015c8:	bf08      	it	eq
 80015ca:	2b65      	cmpeq	r3, #101	; 0x65
 80015cc:	f0c0 808b 	bcc.w	80016e6 <main+0x7c6>
		  	  						{
		  	  							timestamp = micros();
 80015d0:	f000 fb9a 	bl	8001d08 <micros>
 80015d4:	4603      	mov	r3, r0
 80015d6:	460c      	mov	r4, r1
 80015d8:	4a59      	ldr	r2, [pc, #356]	; (8001740 <main+0x820>)
 80015da:	e9c2 3400 	strd	r3, r4, [r2]
		  	  							if (Slope == 1)		//slope UP (min>>max)
 80015de:	4b52      	ldr	r3, [pc, #328]	; (8001728 <main+0x808>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	2b01      	cmp	r3, #1
 80015e4:	d13d      	bne.n	8001662 <main+0x742>
		  	  							{
		  	  								dataOut = MinV;
 80015e6:	4b57      	ldr	r3, [pc, #348]	; (8001744 <main+0x824>)
 80015e8:	edd3 7a00 	vldr	s15, [r3]
 80015ec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80015f0:	ee17 3a90 	vmov	r3, s15
 80015f4:	b29a      	uxth	r2, r3
 80015f6:	4b54      	ldr	r3, [pc, #336]	; (8001748 <main+0x828>)
 80015f8:	801a      	strh	r2, [r3, #0]
		  	  								dataOut += (MaxV - MinV)*4096/3.3;
 80015fa:	4b53      	ldr	r3, [pc, #332]	; (8001748 <main+0x828>)
 80015fc:	881b      	ldrh	r3, [r3, #0]
 80015fe:	4618      	mov	r0, r3
 8001600:	f7fe ff98 	bl	8000534 <__aeabi_i2d>
 8001604:	4604      	mov	r4, r0
 8001606:	460d      	mov	r5, r1
 8001608:	4b50      	ldr	r3, [pc, #320]	; (800174c <main+0x82c>)
 800160a:	ed93 7a00 	vldr	s14, [r3]
 800160e:	4b4d      	ldr	r3, [pc, #308]	; (8001744 <main+0x824>)
 8001610:	edd3 7a00 	vldr	s15, [r3]
 8001614:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001618:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 8001750 <main+0x830>
 800161c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001620:	ee17 0a90 	vmov	r0, s15
 8001624:	f7fe ff98 	bl	8000558 <__aeabi_f2d>
 8001628:	a33d      	add	r3, pc, #244	; (adr r3, 8001720 <main+0x800>)
 800162a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800162e:	f7ff f915 	bl	800085c <__aeabi_ddiv>
 8001632:	4602      	mov	r2, r0
 8001634:	460b      	mov	r3, r1
 8001636:	4620      	mov	r0, r4
 8001638:	4629      	mov	r1, r5
 800163a:	f7fe fe2f 	bl	800029c <__adddf3>
 800163e:	4603      	mov	r3, r0
 8001640:	460c      	mov	r4, r1
 8001642:	4618      	mov	r0, r3
 8001644:	4621      	mov	r1, r4
 8001646:	f7ff fa79 	bl	8000b3c <__aeabi_d2uiz>
 800164a:	4603      	mov	r3, r0
 800164c:	b29a      	uxth	r2, r3
 800164e:	4b3e      	ldr	r3, [pc, #248]	; (8001748 <main+0x828>)
 8001650:	801a      	strh	r2, [r3, #0]
		  	  								dataOut %= 4096;
 8001652:	4b3d      	ldr	r3, [pc, #244]	; (8001748 <main+0x828>)
 8001654:	881b      	ldrh	r3, [r3, #0]
 8001656:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800165a:	b29a      	uxth	r2, r3
 800165c:	4b3a      	ldr	r3, [pc, #232]	; (8001748 <main+0x828>)
 800165e:	801a      	strh	r2, [r3, #0]
		  	  								dataOut = MaxV;
		  	  								dataOut -= (MaxV - MinV)*4096/3.3;
		  	  								dataOut %= 4096;
		  	  							}
		  	  						}
		  	  				break;
 8001660:	e041      	b.n	80016e6 <main+0x7c6>
		  	  							else if (Slope == -1)	//slope DOWN (max>>min)
 8001662:	4b31      	ldr	r3, [pc, #196]	; (8001728 <main+0x808>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f1b3 3fff 	cmp.w	r3, #4294967295
 800166a:	d13c      	bne.n	80016e6 <main+0x7c6>
		  	  								dataOut = MaxV;
 800166c:	4b37      	ldr	r3, [pc, #220]	; (800174c <main+0x82c>)
 800166e:	edd3 7a00 	vldr	s15, [r3]
 8001672:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001676:	ee17 3a90 	vmov	r3, s15
 800167a:	b29a      	uxth	r2, r3
 800167c:	4b32      	ldr	r3, [pc, #200]	; (8001748 <main+0x828>)
 800167e:	801a      	strh	r2, [r3, #0]
		  	  								dataOut -= (MaxV - MinV)*4096/3.3;
 8001680:	4b31      	ldr	r3, [pc, #196]	; (8001748 <main+0x828>)
 8001682:	881b      	ldrh	r3, [r3, #0]
 8001684:	4618      	mov	r0, r3
 8001686:	f7fe ff55 	bl	8000534 <__aeabi_i2d>
 800168a:	4604      	mov	r4, r0
 800168c:	460d      	mov	r5, r1
 800168e:	4b2f      	ldr	r3, [pc, #188]	; (800174c <main+0x82c>)
 8001690:	ed93 7a00 	vldr	s14, [r3]
 8001694:	4b2b      	ldr	r3, [pc, #172]	; (8001744 <main+0x824>)
 8001696:	edd3 7a00 	vldr	s15, [r3]
 800169a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800169e:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 8001750 <main+0x830>
 80016a2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80016a6:	ee17 0a90 	vmov	r0, s15
 80016aa:	f7fe ff55 	bl	8000558 <__aeabi_f2d>
 80016ae:	a31c      	add	r3, pc, #112	; (adr r3, 8001720 <main+0x800>)
 80016b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016b4:	f7ff f8d2 	bl	800085c <__aeabi_ddiv>
 80016b8:	4602      	mov	r2, r0
 80016ba:	460b      	mov	r3, r1
 80016bc:	4620      	mov	r0, r4
 80016be:	4629      	mov	r1, r5
 80016c0:	f7fe fdea 	bl	8000298 <__aeabi_dsub>
 80016c4:	4603      	mov	r3, r0
 80016c6:	460c      	mov	r4, r1
 80016c8:	4618      	mov	r0, r3
 80016ca:	4621      	mov	r1, r4
 80016cc:	f7ff fa36 	bl	8000b3c <__aeabi_d2uiz>
 80016d0:	4603      	mov	r3, r0
 80016d2:	b29a      	uxth	r2, r3
 80016d4:	4b1c      	ldr	r3, [pc, #112]	; (8001748 <main+0x828>)
 80016d6:	801a      	strh	r2, [r3, #0]
		  	  								dataOut %= 4096;
 80016d8:	4b1b      	ldr	r3, [pc, #108]	; (8001748 <main+0x828>)
 80016da:	881b      	ldrh	r3, [r3, #0]
 80016dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80016e0:	b29a      	uxth	r2, r3
 80016e2:	4b19      	ldr	r3, [pc, #100]	; (8001748 <main+0x828>)
 80016e4:	801a      	strh	r2, [r3, #0]
		  	  				break;
 80016e6:	bf00      	nop
		  	  			}

			if (hspi3.State == HAL_SPI_STATE_READY && HAL_GPIO_ReadPin(SPI_SS_GPIO_Port, SPI_SS_Pin) == GPIO_PIN_SET)
 80016e8:	4b1a      	ldr	r3, [pc, #104]	; (8001754 <main+0x834>)
 80016ea:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80016ee:	b2db      	uxtb	r3, r3
 80016f0:	2b01      	cmp	r3, #1
 80016f2:	f47f ac3d 	bne.w	8000f70 <main+0x50>
 80016f6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80016fa:	4817      	ldr	r0, [pc, #92]	; (8001758 <main+0x838>)
 80016fc:	f002 f9d4 	bl	8003aa8 <HAL_GPIO_ReadPin>
 8001700:	4603      	mov	r3, r0
 8001702:	2b01      	cmp	r3, #1
 8001704:	f47f ac34 	bne.w	8000f70 <main+0x50>
			{
				MCP4922SetOutput(DACConfig, dataOut);
 8001708:	4b14      	ldr	r3, [pc, #80]	; (800175c <main+0x83c>)
 800170a:	781a      	ldrb	r2, [r3, #0]
 800170c:	4b0e      	ldr	r3, [pc, #56]	; (8001748 <main+0x828>)
 800170e:	881b      	ldrh	r3, [r3, #0]
 8001710:	4619      	mov	r1, r3
 8001712:	4610      	mov	r0, r2
 8001714:	f000 fa9a 	bl	8001c4c <MCP4922SetOutput>
	{
 8001718:	e42a      	b.n	8000f70 <main+0x50>
 800171a:	bf00      	nop
 800171c:	f3af 8000 	nop.w
 8001720:	66666666 	.word	0x66666666
 8001724:	400a6666 	.word	0x400a6666
 8001728:	2000000c 	.word	0x2000000c
 800172c:	200000f4 	.word	0x200000f4
 8001730:	080069c0 	.word	0x080069c0
 8001734:	20000250 	.word	0x20000250
 8001738:	200000ac 	.word	0x200000ac
 800173c:	08006b34 	.word	0x08006b34
 8001740:	20000158 	.word	0x20000158
 8001744:	200000b0 	.word	0x200000b0
 8001748:	200000a8 	.word	0x200000a8
 800174c:	20000008 	.word	0x20000008
 8001750:	45800000 	.word	0x45800000
 8001754:	200001b0 	.word	0x200001b0
 8001758:	40020400 	.word	0x40020400
 800175c:	20000000 	.word	0x20000000

08001760 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b094      	sub	sp, #80	; 0x50
 8001764:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001766:	f107 0320 	add.w	r3, r7, #32
 800176a:	2230      	movs	r2, #48	; 0x30
 800176c:	2100      	movs	r1, #0
 800176e:	4618      	mov	r0, r3
 8001770:	f004 fce9 	bl	8006146 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001774:	f107 030c 	add.w	r3, r7, #12
 8001778:	2200      	movs	r2, #0
 800177a:	601a      	str	r2, [r3, #0]
 800177c:	605a      	str	r2, [r3, #4]
 800177e:	609a      	str	r2, [r3, #8]
 8001780:	60da      	str	r2, [r3, #12]
 8001782:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001784:	2300      	movs	r3, #0
 8001786:	60bb      	str	r3, [r7, #8]
 8001788:	4b27      	ldr	r3, [pc, #156]	; (8001828 <SystemClock_Config+0xc8>)
 800178a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800178c:	4a26      	ldr	r2, [pc, #152]	; (8001828 <SystemClock_Config+0xc8>)
 800178e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001792:	6413      	str	r3, [r2, #64]	; 0x40
 8001794:	4b24      	ldr	r3, [pc, #144]	; (8001828 <SystemClock_Config+0xc8>)
 8001796:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001798:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800179c:	60bb      	str	r3, [r7, #8]
 800179e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80017a0:	2300      	movs	r3, #0
 80017a2:	607b      	str	r3, [r7, #4]
 80017a4:	4b21      	ldr	r3, [pc, #132]	; (800182c <SystemClock_Config+0xcc>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	4a20      	ldr	r2, [pc, #128]	; (800182c <SystemClock_Config+0xcc>)
 80017aa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80017ae:	6013      	str	r3, [r2, #0]
 80017b0:	4b1e      	ldr	r3, [pc, #120]	; (800182c <SystemClock_Config+0xcc>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80017b8:	607b      	str	r3, [r7, #4]
 80017ba:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80017bc:	2302      	movs	r3, #2
 80017be:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80017c0:	2301      	movs	r3, #1
 80017c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80017c4:	2310      	movs	r3, #16
 80017c6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80017c8:	2302      	movs	r3, #2
 80017ca:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80017cc:	2300      	movs	r3, #0
 80017ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80017d0:	2308      	movs	r3, #8
 80017d2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 80017d4:	2364      	movs	r3, #100	; 0x64
 80017d6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80017d8:	2302      	movs	r3, #2
 80017da:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80017dc:	2304      	movs	r3, #4
 80017de:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80017e0:	f107 0320 	add.w	r3, r7, #32
 80017e4:	4618      	mov	r0, r3
 80017e6:	f002 f991 	bl	8003b0c <HAL_RCC_OscConfig>
 80017ea:	4603      	mov	r3, r0
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d001      	beq.n	80017f4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80017f0:	f000 fafa 	bl	8001de8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80017f4:	230f      	movs	r3, #15
 80017f6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80017f8:	2302      	movs	r3, #2
 80017fa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80017fc:	2300      	movs	r3, #0
 80017fe:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001800:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001804:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001806:	2300      	movs	r3, #0
 8001808:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800180a:	f107 030c 	add.w	r3, r7, #12
 800180e:	2103      	movs	r1, #3
 8001810:	4618      	mov	r0, r3
 8001812:	f002 fbeb 	bl	8003fec <HAL_RCC_ClockConfig>
 8001816:	4603      	mov	r3, r0
 8001818:	2b00      	cmp	r3, #0
 800181a:	d001      	beq.n	8001820 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 800181c:	f000 fae4 	bl	8001de8 <Error_Handler>
  }
}
 8001820:	bf00      	nop
 8001822:	3750      	adds	r7, #80	; 0x50
 8001824:	46bd      	mov	sp, r7
 8001826:	bd80      	pop	{r7, pc}
 8001828:	40023800 	.word	0x40023800
 800182c:	40007000 	.word	0x40007000

08001830 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b084      	sub	sp, #16
 8001834:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001836:	463b      	mov	r3, r7
 8001838:	2200      	movs	r2, #0
 800183a:	601a      	str	r2, [r3, #0]
 800183c:	605a      	str	r2, [r3, #4]
 800183e:	609a      	str	r2, [r3, #8]
 8001840:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001842:	4b22      	ldr	r3, [pc, #136]	; (80018cc <MX_ADC1_Init+0x9c>)
 8001844:	4a22      	ldr	r2, [pc, #136]	; (80018d0 <MX_ADC1_Init+0xa0>)
 8001846:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001848:	4b20      	ldr	r3, [pc, #128]	; (80018cc <MX_ADC1_Init+0x9c>)
 800184a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800184e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001850:	4b1e      	ldr	r3, [pc, #120]	; (80018cc <MX_ADC1_Init+0x9c>)
 8001852:	2200      	movs	r2, #0
 8001854:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8001856:	4b1d      	ldr	r3, [pc, #116]	; (80018cc <MX_ADC1_Init+0x9c>)
 8001858:	2201      	movs	r2, #1
 800185a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800185c:	4b1b      	ldr	r3, [pc, #108]	; (80018cc <MX_ADC1_Init+0x9c>)
 800185e:	2200      	movs	r2, #0
 8001860:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001862:	4b1a      	ldr	r3, [pc, #104]	; (80018cc <MX_ADC1_Init+0x9c>)
 8001864:	2200      	movs	r2, #0
 8001866:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800186a:	4b18      	ldr	r3, [pc, #96]	; (80018cc <MX_ADC1_Init+0x9c>)
 800186c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001870:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 8001872:	4b16      	ldr	r3, [pc, #88]	; (80018cc <MX_ADC1_Init+0x9c>)
 8001874:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001878:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800187a:	4b14      	ldr	r3, [pc, #80]	; (80018cc <MX_ADC1_Init+0x9c>)
 800187c:	2200      	movs	r2, #0
 800187e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001880:	4b12      	ldr	r3, [pc, #72]	; (80018cc <MX_ADC1_Init+0x9c>)
 8001882:	2201      	movs	r2, #1
 8001884:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001886:	4b11      	ldr	r3, [pc, #68]	; (80018cc <MX_ADC1_Init+0x9c>)
 8001888:	2200      	movs	r2, #0
 800188a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800188e:	4b0f      	ldr	r3, [pc, #60]	; (80018cc <MX_ADC1_Init+0x9c>)
 8001890:	2201      	movs	r2, #1
 8001892:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001894:	480d      	ldr	r0, [pc, #52]	; (80018cc <MX_ADC1_Init+0x9c>)
 8001896:	f000 fda9 	bl	80023ec <HAL_ADC_Init>
 800189a:	4603      	mov	r3, r0
 800189c:	2b00      	cmp	r3, #0
 800189e:	d001      	beq.n	80018a4 <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 80018a0:	f000 faa2 	bl	8001de8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80018a4:	2300      	movs	r3, #0
 80018a6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80018a8:	2301      	movs	r3, #1
 80018aa:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80018ac:	2300      	movs	r3, #0
 80018ae:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80018b0:	463b      	mov	r3, r7
 80018b2:	4619      	mov	r1, r3
 80018b4:	4805      	ldr	r0, [pc, #20]	; (80018cc <MX_ADC1_Init+0x9c>)
 80018b6:	f001 f819 	bl	80028ec <HAL_ADC_ConfigChannel>
 80018ba:	4603      	mov	r3, r0
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d001      	beq.n	80018c4 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 80018c0:	f000 fa92 	bl	8001de8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80018c4:	bf00      	nop
 80018c6:	3710      	adds	r7, #16
 80018c8:	46bd      	mov	sp, r7
 80018ca:	bd80      	pop	{r7, pc}
 80018cc:	20000208 	.word	0x20000208
 80018d0:	40012000 	.word	0x40012000

080018d4 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80018d8:	4b18      	ldr	r3, [pc, #96]	; (800193c <MX_SPI3_Init+0x68>)
 80018da:	4a19      	ldr	r2, [pc, #100]	; (8001940 <MX_SPI3_Init+0x6c>)
 80018dc:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80018de:	4b17      	ldr	r3, [pc, #92]	; (800193c <MX_SPI3_Init+0x68>)
 80018e0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80018e4:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80018e6:	4b15      	ldr	r3, [pc, #84]	; (800193c <MX_SPI3_Init+0x68>)
 80018e8:	2200      	movs	r2, #0
 80018ea:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_16BIT;
 80018ec:	4b13      	ldr	r3, [pc, #76]	; (800193c <MX_SPI3_Init+0x68>)
 80018ee:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80018f2:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80018f4:	4b11      	ldr	r3, [pc, #68]	; (800193c <MX_SPI3_Init+0x68>)
 80018f6:	2200      	movs	r2, #0
 80018f8:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80018fa:	4b10      	ldr	r3, [pc, #64]	; (800193c <MX_SPI3_Init+0x68>)
 80018fc:	2200      	movs	r2, #0
 80018fe:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001900:	4b0e      	ldr	r3, [pc, #56]	; (800193c <MX_SPI3_Init+0x68>)
 8001902:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001906:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001908:	4b0c      	ldr	r3, [pc, #48]	; (800193c <MX_SPI3_Init+0x68>)
 800190a:	2208      	movs	r2, #8
 800190c:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800190e:	4b0b      	ldr	r3, [pc, #44]	; (800193c <MX_SPI3_Init+0x68>)
 8001910:	2200      	movs	r2, #0
 8001912:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001914:	4b09      	ldr	r3, [pc, #36]	; (800193c <MX_SPI3_Init+0x68>)
 8001916:	2200      	movs	r2, #0
 8001918:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800191a:	4b08      	ldr	r3, [pc, #32]	; (800193c <MX_SPI3_Init+0x68>)
 800191c:	2200      	movs	r2, #0
 800191e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8001920:	4b06      	ldr	r3, [pc, #24]	; (800193c <MX_SPI3_Init+0x68>)
 8001922:	220a      	movs	r2, #10
 8001924:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001926:	4805      	ldr	r0, [pc, #20]	; (800193c <MX_SPI3_Init+0x68>)
 8001928:	f002 fd52 	bl	80043d0 <HAL_SPI_Init>
 800192c:	4603      	mov	r3, r0
 800192e:	2b00      	cmp	r3, #0
 8001930:	d001      	beq.n	8001936 <MX_SPI3_Init+0x62>
  {
    Error_Handler();
 8001932:	f000 fa59 	bl	8001de8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001936:	bf00      	nop
 8001938:	bd80      	pop	{r7, pc}
 800193a:	bf00      	nop
 800193c:	200001b0 	.word	0x200001b0
 8001940:	40003c00 	.word	0x40003c00

08001944 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b086      	sub	sp, #24
 8001948:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800194a:	f107 0308 	add.w	r3, r7, #8
 800194e:	2200      	movs	r2, #0
 8001950:	601a      	str	r2, [r3, #0]
 8001952:	605a      	str	r2, [r3, #4]
 8001954:	609a      	str	r2, [r3, #8]
 8001956:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001958:	463b      	mov	r3, r7
 800195a:	2200      	movs	r2, #0
 800195c:	601a      	str	r2, [r3, #0]
 800195e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001960:	4b1c      	ldr	r3, [pc, #112]	; (80019d4 <MX_TIM3_Init+0x90>)
 8001962:	4a1d      	ldr	r2, [pc, #116]	; (80019d8 <MX_TIM3_Init+0x94>)
 8001964:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 99;
 8001966:	4b1b      	ldr	r3, [pc, #108]	; (80019d4 <MX_TIM3_Init+0x90>)
 8001968:	2263      	movs	r2, #99	; 0x63
 800196a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800196c:	4b19      	ldr	r3, [pc, #100]	; (80019d4 <MX_TIM3_Init+0x90>)
 800196e:	2200      	movs	r2, #0
 8001970:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100;
 8001972:	4b18      	ldr	r3, [pc, #96]	; (80019d4 <MX_TIM3_Init+0x90>)
 8001974:	2264      	movs	r2, #100	; 0x64
 8001976:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001978:	4b16      	ldr	r3, [pc, #88]	; (80019d4 <MX_TIM3_Init+0x90>)
 800197a:	2200      	movs	r2, #0
 800197c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800197e:	4b15      	ldr	r3, [pc, #84]	; (80019d4 <MX_TIM3_Init+0x90>)
 8001980:	2200      	movs	r2, #0
 8001982:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001984:	4813      	ldr	r0, [pc, #76]	; (80019d4 <MX_TIM3_Init+0x90>)
 8001986:	f003 f87b 	bl	8004a80 <HAL_TIM_Base_Init>
 800198a:	4603      	mov	r3, r0
 800198c:	2b00      	cmp	r3, #0
 800198e:	d001      	beq.n	8001994 <MX_TIM3_Init+0x50>
  {
    Error_Handler();
 8001990:	f000 fa2a 	bl	8001de8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001994:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001998:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800199a:	f107 0308 	add.w	r3, r7, #8
 800199e:	4619      	mov	r1, r3
 80019a0:	480c      	ldr	r0, [pc, #48]	; (80019d4 <MX_TIM3_Init+0x90>)
 80019a2:	f003 f9e8 	bl	8004d76 <HAL_TIM_ConfigClockSource>
 80019a6:	4603      	mov	r3, r0
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d001      	beq.n	80019b0 <MX_TIM3_Init+0x6c>
  {
    Error_Handler();
 80019ac:	f000 fa1c 	bl	8001de8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019b0:	2300      	movs	r3, #0
 80019b2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019b4:	2300      	movs	r3, #0
 80019b6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80019b8:	463b      	mov	r3, r7
 80019ba:	4619      	mov	r1, r3
 80019bc:	4805      	ldr	r0, [pc, #20]	; (80019d4 <MX_TIM3_Init+0x90>)
 80019be:	f003 fbd3 	bl	8005168 <HAL_TIMEx_MasterConfigSynchronization>
 80019c2:	4603      	mov	r3, r0
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d001      	beq.n	80019cc <MX_TIM3_Init+0x88>
  {
    Error_Handler();
 80019c8:	f000 fa0e 	bl	8001de8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80019cc:	bf00      	nop
 80019ce:	3718      	adds	r7, #24
 80019d0:	46bd      	mov	sp, r7
 80019d2:	bd80      	pop	{r7, pc}
 80019d4:	20000170 	.word	0x20000170
 80019d8:	40000400 	.word	0x40000400

080019dc <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 80019e0:	4b0e      	ldr	r3, [pc, #56]	; (8001a1c <MX_TIM11_Init+0x40>)
 80019e2:	4a0f      	ldr	r2, [pc, #60]	; (8001a20 <MX_TIM11_Init+0x44>)
 80019e4:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 99;
 80019e6:	4b0d      	ldr	r3, [pc, #52]	; (8001a1c <MX_TIM11_Init+0x40>)
 80019e8:	2263      	movs	r2, #99	; 0x63
 80019ea:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019ec:	4b0b      	ldr	r3, [pc, #44]	; (8001a1c <MX_TIM11_Init+0x40>)
 80019ee:	2200      	movs	r2, #0
 80019f0:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 80019f2:	4b0a      	ldr	r3, [pc, #40]	; (8001a1c <MX_TIM11_Init+0x40>)
 80019f4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80019f8:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019fa:	4b08      	ldr	r3, [pc, #32]	; (8001a1c <MX_TIM11_Init+0x40>)
 80019fc:	2200      	movs	r2, #0
 80019fe:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a00:	4b06      	ldr	r3, [pc, #24]	; (8001a1c <MX_TIM11_Init+0x40>)
 8001a02:	2200      	movs	r2, #0
 8001a04:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8001a06:	4805      	ldr	r0, [pc, #20]	; (8001a1c <MX_TIM11_Init+0x40>)
 8001a08:	f003 f83a 	bl	8004a80 <HAL_TIM_Base_Init>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d001      	beq.n	8001a16 <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 8001a12:	f000 f9e9 	bl	8001de8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8001a16:	bf00      	nop
 8001a18:	bd80      	pop	{r7, pc}
 8001a1a:	bf00      	nop
 8001a1c:	20000290 	.word	0x20000290
 8001a20:	40014800 	.word	0x40014800

08001a24 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001a28:	4b11      	ldr	r3, [pc, #68]	; (8001a70 <MX_USART1_UART_Init+0x4c>)
 8001a2a:	4a12      	ldr	r2, [pc, #72]	; (8001a74 <MX_USART1_UART_Init+0x50>)
 8001a2c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001a2e:	4b10      	ldr	r3, [pc, #64]	; (8001a70 <MX_USART1_UART_Init+0x4c>)
 8001a30:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001a34:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001a36:	4b0e      	ldr	r3, [pc, #56]	; (8001a70 <MX_USART1_UART_Init+0x4c>)
 8001a38:	2200      	movs	r2, #0
 8001a3a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001a3c:	4b0c      	ldr	r3, [pc, #48]	; (8001a70 <MX_USART1_UART_Init+0x4c>)
 8001a3e:	2200      	movs	r2, #0
 8001a40:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001a42:	4b0b      	ldr	r3, [pc, #44]	; (8001a70 <MX_USART1_UART_Init+0x4c>)
 8001a44:	2200      	movs	r2, #0
 8001a46:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001a48:	4b09      	ldr	r3, [pc, #36]	; (8001a70 <MX_USART1_UART_Init+0x4c>)
 8001a4a:	220c      	movs	r2, #12
 8001a4c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a4e:	4b08      	ldr	r3, [pc, #32]	; (8001a70 <MX_USART1_UART_Init+0x4c>)
 8001a50:	2200      	movs	r2, #0
 8001a52:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a54:	4b06      	ldr	r3, [pc, #24]	; (8001a70 <MX_USART1_UART_Init+0x4c>)
 8001a56:	2200      	movs	r2, #0
 8001a58:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001a5a:	4805      	ldr	r0, [pc, #20]	; (8001a70 <MX_USART1_UART_Init+0x4c>)
 8001a5c:	f003 fc06 	bl	800526c <HAL_UART_Init>
 8001a60:	4603      	mov	r3, r0
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d001      	beq.n	8001a6a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001a66:	f000 f9bf 	bl	8001de8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001a6a:	bf00      	nop
 8001a6c:	bd80      	pop	{r7, pc}
 8001a6e:	bf00      	nop
 8001a70:	20000250 	.word	0x20000250
 8001a74:	40011000 	.word	0x40011000

08001a78 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001a7c:	4b11      	ldr	r3, [pc, #68]	; (8001ac4 <MX_USART2_UART_Init+0x4c>)
 8001a7e:	4a12      	ldr	r2, [pc, #72]	; (8001ac8 <MX_USART2_UART_Init+0x50>)
 8001a80:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001a82:	4b10      	ldr	r3, [pc, #64]	; (8001ac4 <MX_USART2_UART_Init+0x4c>)
 8001a84:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001a88:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001a8a:	4b0e      	ldr	r3, [pc, #56]	; (8001ac4 <MX_USART2_UART_Init+0x4c>)
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001a90:	4b0c      	ldr	r3, [pc, #48]	; (8001ac4 <MX_USART2_UART_Init+0x4c>)
 8001a92:	2200      	movs	r2, #0
 8001a94:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001a96:	4b0b      	ldr	r3, [pc, #44]	; (8001ac4 <MX_USART2_UART_Init+0x4c>)
 8001a98:	2200      	movs	r2, #0
 8001a9a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001a9c:	4b09      	ldr	r3, [pc, #36]	; (8001ac4 <MX_USART2_UART_Init+0x4c>)
 8001a9e:	220c      	movs	r2, #12
 8001aa0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001aa2:	4b08      	ldr	r3, [pc, #32]	; (8001ac4 <MX_USART2_UART_Init+0x4c>)
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001aa8:	4b06      	ldr	r3, [pc, #24]	; (8001ac4 <MX_USART2_UART_Init+0x4c>)
 8001aaa:	2200      	movs	r2, #0
 8001aac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001aae:	4805      	ldr	r0, [pc, #20]	; (8001ac4 <MX_USART2_UART_Init+0x4c>)
 8001ab0:	f003 fbdc 	bl	800526c <HAL_UART_Init>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d001      	beq.n	8001abe <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001aba:	f000 f995 	bl	8001de8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001abe:	bf00      	nop
 8001ac0:	bd80      	pop	{r7, pc}
 8001ac2:	bf00      	nop
 8001ac4:	20000330 	.word	0x20000330
 8001ac8:	40004400 	.word	0x40004400

08001acc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b082      	sub	sp, #8
 8001ad0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	607b      	str	r3, [r7, #4]
 8001ad6:	4b0c      	ldr	r3, [pc, #48]	; (8001b08 <MX_DMA_Init+0x3c>)
 8001ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ada:	4a0b      	ldr	r2, [pc, #44]	; (8001b08 <MX_DMA_Init+0x3c>)
 8001adc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001ae0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ae2:	4b09      	ldr	r3, [pc, #36]	; (8001b08 <MX_DMA_Init+0x3c>)
 8001ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ae6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001aea:	607b      	str	r3, [r7, #4]
 8001aec:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001aee:	2200      	movs	r2, #0
 8001af0:	2100      	movs	r1, #0
 8001af2:	2038      	movs	r0, #56	; 0x38
 8001af4:	f001 fa8f 	bl	8003016 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001af8:	2038      	movs	r0, #56	; 0x38
 8001afa:	f001 faa8 	bl	800304e <HAL_NVIC_EnableIRQ>

}
 8001afe:	bf00      	nop
 8001b00:	3708      	adds	r7, #8
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bd80      	pop	{r7, pc}
 8001b06:	bf00      	nop
 8001b08:	40023800 	.word	0x40023800

08001b0c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b08a      	sub	sp, #40	; 0x28
 8001b10:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b12:	f107 0314 	add.w	r3, r7, #20
 8001b16:	2200      	movs	r2, #0
 8001b18:	601a      	str	r2, [r3, #0]
 8001b1a:	605a      	str	r2, [r3, #4]
 8001b1c:	609a      	str	r2, [r3, #8]
 8001b1e:	60da      	str	r2, [r3, #12]
 8001b20:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b22:	2300      	movs	r3, #0
 8001b24:	613b      	str	r3, [r7, #16]
 8001b26:	4b44      	ldr	r3, [pc, #272]	; (8001c38 <MX_GPIO_Init+0x12c>)
 8001b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b2a:	4a43      	ldr	r2, [pc, #268]	; (8001c38 <MX_GPIO_Init+0x12c>)
 8001b2c:	f043 0304 	orr.w	r3, r3, #4
 8001b30:	6313      	str	r3, [r2, #48]	; 0x30
 8001b32:	4b41      	ldr	r3, [pc, #260]	; (8001c38 <MX_GPIO_Init+0x12c>)
 8001b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b36:	f003 0304 	and.w	r3, r3, #4
 8001b3a:	613b      	str	r3, [r7, #16]
 8001b3c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001b3e:	2300      	movs	r3, #0
 8001b40:	60fb      	str	r3, [r7, #12]
 8001b42:	4b3d      	ldr	r3, [pc, #244]	; (8001c38 <MX_GPIO_Init+0x12c>)
 8001b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b46:	4a3c      	ldr	r2, [pc, #240]	; (8001c38 <MX_GPIO_Init+0x12c>)
 8001b48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b4c:	6313      	str	r3, [r2, #48]	; 0x30
 8001b4e:	4b3a      	ldr	r3, [pc, #232]	; (8001c38 <MX_GPIO_Init+0x12c>)
 8001b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b56:	60fb      	str	r3, [r7, #12]
 8001b58:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	60bb      	str	r3, [r7, #8]
 8001b5e:	4b36      	ldr	r3, [pc, #216]	; (8001c38 <MX_GPIO_Init+0x12c>)
 8001b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b62:	4a35      	ldr	r2, [pc, #212]	; (8001c38 <MX_GPIO_Init+0x12c>)
 8001b64:	f043 0301 	orr.w	r3, r3, #1
 8001b68:	6313      	str	r3, [r2, #48]	; 0x30
 8001b6a:	4b33      	ldr	r3, [pc, #204]	; (8001c38 <MX_GPIO_Init+0x12c>)
 8001b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b6e:	f003 0301 	and.w	r3, r3, #1
 8001b72:	60bb      	str	r3, [r7, #8]
 8001b74:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b76:	2300      	movs	r3, #0
 8001b78:	607b      	str	r3, [r7, #4]
 8001b7a:	4b2f      	ldr	r3, [pc, #188]	; (8001c38 <MX_GPIO_Init+0x12c>)
 8001b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b7e:	4a2e      	ldr	r2, [pc, #184]	; (8001c38 <MX_GPIO_Init+0x12c>)
 8001b80:	f043 0302 	orr.w	r3, r3, #2
 8001b84:	6313      	str	r3, [r2, #48]	; 0x30
 8001b86:	4b2c      	ldr	r3, [pc, #176]	; (8001c38 <MX_GPIO_Init+0x12c>)
 8001b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b8a:	f003 0302 	and.w	r3, r3, #2
 8001b8e:	607b      	str	r3, [r7, #4]
 8001b90:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001b92:	2200      	movs	r2, #0
 8001b94:	2120      	movs	r1, #32
 8001b96:	4829      	ldr	r0, [pc, #164]	; (8001c3c <MX_GPIO_Init+0x130>)
 8001b98:	f001 ff9e 	bl	8003ad8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI_SS_GPIO_Port, SPI_SS_Pin, GPIO_PIN_SET);
 8001b9c:	2201      	movs	r2, #1
 8001b9e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001ba2:	4827      	ldr	r0, [pc, #156]	; (8001c40 <MX_GPIO_Init+0x134>)
 8001ba4:	f001 ff98 	bl	8003ad8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SHDN_GPIO_Port, SHDN_Pin, GPIO_PIN_SET);
 8001ba8:	2201      	movs	r2, #1
 8001baa:	2180      	movs	r1, #128	; 0x80
 8001bac:	4825      	ldr	r0, [pc, #148]	; (8001c44 <MX_GPIO_Init+0x138>)
 8001bae:	f001 ff93 	bl	8003ad8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LOAD_GPIO_Port, LOAD_Pin, GPIO_PIN_SET);
 8001bb2:	2201      	movs	r2, #1
 8001bb4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001bb8:	4820      	ldr	r0, [pc, #128]	; (8001c3c <MX_GPIO_Init+0x130>)
 8001bba:	f001 ff8d 	bl	8003ad8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001bbe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001bc2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001bc4:	4b20      	ldr	r3, [pc, #128]	; (8001c48 <MX_GPIO_Init+0x13c>)
 8001bc6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bc8:	2300      	movs	r3, #0
 8001bca:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001bcc:	f107 0314 	add.w	r3, r7, #20
 8001bd0:	4619      	mov	r1, r3
 8001bd2:	481c      	ldr	r0, [pc, #112]	; (8001c44 <MX_GPIO_Init+0x138>)
 8001bd4:	f001 fde6 	bl	80037a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LOAD_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LOAD_Pin;
 8001bd8:	f44f 7308 	mov.w	r3, #544	; 0x220
 8001bdc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bde:	2301      	movs	r3, #1
 8001be0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001be2:	2300      	movs	r3, #0
 8001be4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001be6:	2300      	movs	r3, #0
 8001be8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bea:	f107 0314 	add.w	r3, r7, #20
 8001bee:	4619      	mov	r1, r3
 8001bf0:	4812      	ldr	r0, [pc, #72]	; (8001c3c <MX_GPIO_Init+0x130>)
 8001bf2:	f001 fdd7 	bl	80037a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI_SS_Pin */
  GPIO_InitStruct.Pin = SPI_SS_Pin;
 8001bf6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001bfa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bfc:	2301      	movs	r3, #1
 8001bfe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c00:	2300      	movs	r3, #0
 8001c02:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c04:	2300      	movs	r3, #0
 8001c06:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI_SS_GPIO_Port, &GPIO_InitStruct);
 8001c08:	f107 0314 	add.w	r3, r7, #20
 8001c0c:	4619      	mov	r1, r3
 8001c0e:	480c      	ldr	r0, [pc, #48]	; (8001c40 <MX_GPIO_Init+0x134>)
 8001c10:	f001 fdc8 	bl	80037a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : SHDN_Pin */
  GPIO_InitStruct.Pin = SHDN_Pin;
 8001c14:	2380      	movs	r3, #128	; 0x80
 8001c16:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c18:	2301      	movs	r3, #1
 8001c1a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c20:	2300      	movs	r3, #0
 8001c22:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SHDN_GPIO_Port, &GPIO_InitStruct);
 8001c24:	f107 0314 	add.w	r3, r7, #20
 8001c28:	4619      	mov	r1, r3
 8001c2a:	4806      	ldr	r0, [pc, #24]	; (8001c44 <MX_GPIO_Init+0x138>)
 8001c2c:	f001 fdba 	bl	80037a4 <HAL_GPIO_Init>

}
 8001c30:	bf00      	nop
 8001c32:	3728      	adds	r7, #40	; 0x28
 8001c34:	46bd      	mov	sp, r7
 8001c36:	bd80      	pop	{r7, pc}
 8001c38:	40023800 	.word	0x40023800
 8001c3c:	40020000 	.word	0x40020000
 8001c40:	40020400 	.word	0x40020400
 8001c44:	40020800 	.word	0x40020800
 8001c48:	10210000 	.word	0x10210000

08001c4c <MCP4922SetOutput>:

/* USER CODE BEGIN 4 */
void MCP4922SetOutput(uint8_t Config, uint16_t DACOutput)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b084      	sub	sp, #16
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	4603      	mov	r3, r0
 8001c54:	460a      	mov	r2, r1
 8001c56:	71fb      	strb	r3, [r7, #7]
 8001c58:	4613      	mov	r3, r2
 8001c5a:	80bb      	strh	r3, [r7, #4]
	uint32_t OutputPacket = (DACOutput & 0x0fff) | ((Config & 0xf) << 12);
 8001c5c:	88bb      	ldrh	r3, [r7, #4]
 8001c5e:	f3c3 020b 	ubfx	r2, r3, #0, #12
 8001c62:	79fb      	ldrb	r3, [r7, #7]
 8001c64:	031b      	lsls	r3, r3, #12
 8001c66:	b29b      	uxth	r3, r3
 8001c68:	4313      	orrs	r3, r2
 8001c6a:	60fb      	str	r3, [r7, #12]
	//outputpacket >> config 4 bits + DACOutput (data) 12 bits

	HAL_GPIO_WritePin(SPI_SS_GPIO_Port, SPI_SS_Pin, GPIO_PIN_RESET);
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001c72:	4807      	ldr	r0, [pc, #28]	; (8001c90 <MCP4922SetOutput+0x44>)
 8001c74:	f001 ff30 	bl	8003ad8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit_IT(&hspi3, &OutputPacket, 1);	//size 1 >> 1 outputpacket => 16 bits
 8001c78:	f107 030c 	add.w	r3, r7, #12
 8001c7c:	2201      	movs	r2, #1
 8001c7e:	4619      	mov	r1, r3
 8001c80:	4804      	ldr	r0, [pc, #16]	; (8001c94 <MCP4922SetOutput+0x48>)
 8001c82:	f002 fc09 	bl	8004498 <HAL_SPI_Transmit_IT>
}
 8001c86:	bf00      	nop
 8001c88:	3710      	adds	r7, #16
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bd80      	pop	{r7, pc}
 8001c8e:	bf00      	nop
 8001c90:	40020400 	.word	0x40020400
 8001c94:	200001b0 	.word	0x200001b0

08001c98 <HAL_SPI_TxCpltCallback>:

void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b082      	sub	sp, #8
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
	if (hspi == &hspi3)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	4a06      	ldr	r2, [pc, #24]	; (8001cbc <HAL_SPI_TxCpltCallback+0x24>)
 8001ca4:	4293      	cmp	r3, r2
 8001ca6:	d105      	bne.n	8001cb4 <HAL_SPI_TxCpltCallback+0x1c>
	{
		//transmit complete >> slave select turn to HIGH to tell that it's complete (every rounds)
		HAL_GPIO_WritePin(SPI_SS_GPIO_Port, SPI_SS_Pin, GPIO_PIN_SET);
 8001ca8:	2201      	movs	r2, #1
 8001caa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001cae:	4804      	ldr	r0, [pc, #16]	; (8001cc0 <HAL_SPI_TxCpltCallback+0x28>)
 8001cb0:	f001 ff12 	bl	8003ad8 <HAL_GPIO_WritePin>
	}
}
 8001cb4:	bf00      	nop
 8001cb6:	3708      	adds	r7, #8
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	bd80      	pop	{r7, pc}
 8001cbc:	200001b0 	.word	0x200001b0
 8001cc0:	40020400 	.word	0x40020400

08001cc4 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001cc4:	e92d 0890 	stmdb	sp!, {r4, r7, fp}
 8001cc8:	b083      	sub	sp, #12
 8001cca:	af00      	add	r7, sp, #0
 8001ccc:	6078      	str	r0, [r7, #4]
	if (htim == &htim11)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	4a0b      	ldr	r2, [pc, #44]	; (8001d00 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8001cd2:	4293      	cmp	r3, r2
 8001cd4:	d10d      	bne.n	8001cf2 <HAL_TIM_PeriodElapsedCallback+0x2e>
	{
		_micro += 65535;
 8001cd6:	4b0b      	ldr	r3, [pc, #44]	; (8001d04 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8001cd8:	e9d3 bc00 	ldrd	fp, ip, [r3]
 8001cdc:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001ce0:	f04f 0200 	mov.w	r2, #0
 8001ce4:	eb1b 0301 	adds.w	r3, fp, r1
 8001ce8:	eb4c 0402 	adc.w	r4, ip, r2
 8001cec:	4a05      	ldr	r2, [pc, #20]	; (8001d04 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8001cee:	e9c2 3400 	strd	r3, r4, [r2]
	}
}
 8001cf2:	bf00      	nop
 8001cf4:	370c      	adds	r7, #12
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	e8bd 0890 	ldmia.w	sp!, {r4, r7, fp}
 8001cfc:	4770      	bx	lr
 8001cfe:	bf00      	nop
 8001d00:	20000290 	.word	0x20000290
 8001d04:	200000a0 	.word	0x200000a0

08001d08 <micros>:

inline uint64_t micros()
{
 8001d08:	e92d 0890 	stmdb	sp!, {r4, r7, fp}
 8001d0c:	af00      	add	r7, sp, #0
	return htim11.Instance->CNT + _micro;
 8001d0e:	4b09      	ldr	r3, [pc, #36]	; (8001d34 <micros+0x2c>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d14:	4619      	mov	r1, r3
 8001d16:	f04f 0200 	mov.w	r2, #0
 8001d1a:	4b07      	ldr	r3, [pc, #28]	; (8001d38 <micros+0x30>)
 8001d1c:	e9d3 bc00 	ldrd	fp, ip, [r3]
 8001d20:	eb1b 0301 	adds.w	r3, fp, r1
 8001d24:	eb4c 0402 	adc.w	r4, ip, r2
}
 8001d28:	4618      	mov	r0, r3
 8001d2a:	4621      	mov	r1, r4
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	e8bd 0890 	ldmia.w	sp!, {r4, r7, fp}
 8001d32:	4770      	bx	lr
 8001d34:	20000290 	.word	0x20000290
 8001d38:	200000a0 	.word	0x200000a0

08001d3c <UARTReceiveIT>:
	HAL_UART_Transmit(&huart1, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);

}

int16_t UARTReceiveIT()
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	b083      	sub	sp, #12
 8001d40:	af00      	add	r7, sp, #0
    static uint32_t dataPos =0;
    int16_t data=-1;
 8001d42:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001d46:	80fb      	strh	r3, [r7, #6]
    if(huart1.RxXferSize - huart1.RxXferCount!=dataPos)
 8001d48:	4b12      	ldr	r3, [pc, #72]	; (8001d94 <UARTReceiveIT+0x58>)
 8001d4a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8001d4c:	461a      	mov	r2, r3
 8001d4e:	4b11      	ldr	r3, [pc, #68]	; (8001d94 <UARTReceiveIT+0x58>)
 8001d50:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001d52:	b29b      	uxth	r3, r3
 8001d54:	1ad3      	subs	r3, r2, r3
 8001d56:	461a      	mov	r2, r3
 8001d58:	4b0f      	ldr	r3, [pc, #60]	; (8001d98 <UARTReceiveIT+0x5c>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	429a      	cmp	r2, r3
 8001d5e:	d010      	beq.n	8001d82 <UARTReceiveIT+0x46>
    {
        data=RxDataBuffer[dataPos];
 8001d60:	4b0d      	ldr	r3, [pc, #52]	; (8001d98 <UARTReceiveIT+0x5c>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	4a0d      	ldr	r2, [pc, #52]	; (8001d9c <UARTReceiveIT+0x60>)
 8001d66:	5cd3      	ldrb	r3, [r2, r3]
 8001d68:	80fb      	strh	r3, [r7, #6]
        dataPos= (dataPos+1)%huart1.RxXferSize;
 8001d6a:	4b0b      	ldr	r3, [pc, #44]	; (8001d98 <UARTReceiveIT+0x5c>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	3301      	adds	r3, #1
 8001d70:	4a08      	ldr	r2, [pc, #32]	; (8001d94 <UARTReceiveIT+0x58>)
 8001d72:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
 8001d74:	fbb3 f1f2 	udiv	r1, r3, r2
 8001d78:	fb02 f201 	mul.w	r2, r2, r1
 8001d7c:	1a9b      	subs	r3, r3, r2
 8001d7e:	4a06      	ldr	r2, [pc, #24]	; (8001d98 <UARTReceiveIT+0x5c>)
 8001d80:	6013      	str	r3, [r2, #0]
    }
    return data;
 8001d82:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8001d86:	4618      	mov	r0, r3
 8001d88:	370c      	adds	r7, #12
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d90:	4770      	bx	lr
 8001d92:	bf00      	nop
 8001d94:	20000250 	.word	0x20000250
 8001d98:	20000160 	.word	0x20000160
 8001d9c:	200000d4 	.word	0x200000d4

08001da0 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001da0:	b590      	push	{r4, r7, lr}
 8001da2:	b083      	sub	sp, #12
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
    sprintf(TxDataBuffer, "Received:[%s]\r\n", RxDataBuffer);
 8001da8:	4a0b      	ldr	r2, [pc, #44]	; (8001dd8 <HAL_UART_RxCpltCallback+0x38>)
 8001daa:	490c      	ldr	r1, [pc, #48]	; (8001ddc <HAL_UART_RxCpltCallback+0x3c>)
 8001dac:	480c      	ldr	r0, [pc, #48]	; (8001de0 <HAL_UART_RxCpltCallback+0x40>)
 8001dae:	f004 f9d3 	bl	8006158 <siprintf>
    HAL_UART_Transmit(&huart1, (uint8_t)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8001db2:	4b0b      	ldr	r3, [pc, #44]	; (8001de0 <HAL_UART_RxCpltCallback+0x40>)
 8001db4:	b2db      	uxtb	r3, r3
 8001db6:	461c      	mov	r4, r3
 8001db8:	4809      	ldr	r0, [pc, #36]	; (8001de0 <HAL_UART_RxCpltCallback+0x40>)
 8001dba:	f7fe fa11 	bl	80001e0 <strlen>
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	b29a      	uxth	r2, r3
 8001dc2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001dc6:	4621      	mov	r1, r4
 8001dc8:	4806      	ldr	r0, [pc, #24]	; (8001de4 <HAL_UART_RxCpltCallback+0x44>)
 8001dca:	f003 fa9c 	bl	8005306 <HAL_UART_Transmit>
}
 8001dce:	bf00      	nop
 8001dd0:	370c      	adds	r7, #12
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	bd90      	pop	{r4, r7, pc}
 8001dd6:	bf00      	nop
 8001dd8:	200000d4 	.word	0x200000d4
 8001ddc:	08006b48 	.word	0x08006b48
 8001de0:	200000b4 	.word	0x200000b4
 8001de4:	20000250 	.word	0x20000250

08001de8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001de8:	b480      	push	{r7}
 8001dea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001dec:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001dee:	e7fe      	b.n	8001dee <Error_Handler+0x6>

08001df0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b082      	sub	sp, #8
 8001df4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001df6:	2300      	movs	r3, #0
 8001df8:	607b      	str	r3, [r7, #4]
 8001dfa:	4b10      	ldr	r3, [pc, #64]	; (8001e3c <HAL_MspInit+0x4c>)
 8001dfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dfe:	4a0f      	ldr	r2, [pc, #60]	; (8001e3c <HAL_MspInit+0x4c>)
 8001e00:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e04:	6453      	str	r3, [r2, #68]	; 0x44
 8001e06:	4b0d      	ldr	r3, [pc, #52]	; (8001e3c <HAL_MspInit+0x4c>)
 8001e08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e0e:	607b      	str	r3, [r7, #4]
 8001e10:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e12:	2300      	movs	r3, #0
 8001e14:	603b      	str	r3, [r7, #0]
 8001e16:	4b09      	ldr	r3, [pc, #36]	; (8001e3c <HAL_MspInit+0x4c>)
 8001e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e1a:	4a08      	ldr	r2, [pc, #32]	; (8001e3c <HAL_MspInit+0x4c>)
 8001e1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e20:	6413      	str	r3, [r2, #64]	; 0x40
 8001e22:	4b06      	ldr	r3, [pc, #24]	; (8001e3c <HAL_MspInit+0x4c>)
 8001e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e2a:	603b      	str	r3, [r7, #0]
 8001e2c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001e2e:	2007      	movs	r0, #7
 8001e30:	f001 f8e6 	bl	8003000 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e34:	bf00      	nop
 8001e36:	3708      	adds	r7, #8
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	bd80      	pop	{r7, pc}
 8001e3c:	40023800 	.word	0x40023800

08001e40 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b08a      	sub	sp, #40	; 0x28
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e48:	f107 0314 	add.w	r3, r7, #20
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	601a      	str	r2, [r3, #0]
 8001e50:	605a      	str	r2, [r3, #4]
 8001e52:	609a      	str	r2, [r3, #8]
 8001e54:	60da      	str	r2, [r3, #12]
 8001e56:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	4a33      	ldr	r2, [pc, #204]	; (8001f2c <HAL_ADC_MspInit+0xec>)
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d15f      	bne.n	8001f22 <HAL_ADC_MspInit+0xe2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001e62:	2300      	movs	r3, #0
 8001e64:	613b      	str	r3, [r7, #16]
 8001e66:	4b32      	ldr	r3, [pc, #200]	; (8001f30 <HAL_ADC_MspInit+0xf0>)
 8001e68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e6a:	4a31      	ldr	r2, [pc, #196]	; (8001f30 <HAL_ADC_MspInit+0xf0>)
 8001e6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e70:	6453      	str	r3, [r2, #68]	; 0x44
 8001e72:	4b2f      	ldr	r3, [pc, #188]	; (8001f30 <HAL_ADC_MspInit+0xf0>)
 8001e74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e7a:	613b      	str	r3, [r7, #16]
 8001e7c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e7e:	2300      	movs	r3, #0
 8001e80:	60fb      	str	r3, [r7, #12]
 8001e82:	4b2b      	ldr	r3, [pc, #172]	; (8001f30 <HAL_ADC_MspInit+0xf0>)
 8001e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e86:	4a2a      	ldr	r2, [pc, #168]	; (8001f30 <HAL_ADC_MspInit+0xf0>)
 8001e88:	f043 0301 	orr.w	r3, r3, #1
 8001e8c:	6313      	str	r3, [r2, #48]	; 0x30
 8001e8e:	4b28      	ldr	r3, [pc, #160]	; (8001f30 <HAL_ADC_MspInit+0xf0>)
 8001e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e92:	f003 0301 	and.w	r3, r3, #1
 8001e96:	60fb      	str	r3, [r7, #12]
 8001e98:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001e9a:	2301      	movs	r3, #1
 8001e9c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001e9e:	2303      	movs	r3, #3
 8001ea0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ea6:	f107 0314 	add.w	r3, r7, #20
 8001eaa:	4619      	mov	r1, r3
 8001eac:	4821      	ldr	r0, [pc, #132]	; (8001f34 <HAL_ADC_MspInit+0xf4>)
 8001eae:	f001 fc79 	bl	80037a4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001eb2:	4b21      	ldr	r3, [pc, #132]	; (8001f38 <HAL_ADC_MspInit+0xf8>)
 8001eb4:	4a21      	ldr	r2, [pc, #132]	; (8001f3c <HAL_ADC_MspInit+0xfc>)
 8001eb6:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001eb8:	4b1f      	ldr	r3, [pc, #124]	; (8001f38 <HAL_ADC_MspInit+0xf8>)
 8001eba:	2200      	movs	r2, #0
 8001ebc:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001ebe:	4b1e      	ldr	r3, [pc, #120]	; (8001f38 <HAL_ADC_MspInit+0xf8>)
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001ec4:	4b1c      	ldr	r3, [pc, #112]	; (8001f38 <HAL_ADC_MspInit+0xf8>)
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001eca:	4b1b      	ldr	r3, [pc, #108]	; (8001f38 <HAL_ADC_MspInit+0xf8>)
 8001ecc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001ed0:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001ed2:	4b19      	ldr	r3, [pc, #100]	; (8001f38 <HAL_ADC_MspInit+0xf8>)
 8001ed4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001ed8:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001eda:	4b17      	ldr	r3, [pc, #92]	; (8001f38 <HAL_ADC_MspInit+0xf8>)
 8001edc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001ee0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001ee2:	4b15      	ldr	r3, [pc, #84]	; (8001f38 <HAL_ADC_MspInit+0xf8>)
 8001ee4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001ee8:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001eea:	4b13      	ldr	r3, [pc, #76]	; (8001f38 <HAL_ADC_MspInit+0xf8>)
 8001eec:	2200      	movs	r2, #0
 8001eee:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001ef0:	4b11      	ldr	r3, [pc, #68]	; (8001f38 <HAL_ADC_MspInit+0xf8>)
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001ef6:	4810      	ldr	r0, [pc, #64]	; (8001f38 <HAL_ADC_MspInit+0xf8>)
 8001ef8:	f001 f8c4 	bl	8003084 <HAL_DMA_Init>
 8001efc:	4603      	mov	r3, r0
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d001      	beq.n	8001f06 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8001f02:	f7ff ff71 	bl	8001de8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	4a0b      	ldr	r2, [pc, #44]	; (8001f38 <HAL_ADC_MspInit+0xf8>)
 8001f0a:	639a      	str	r2, [r3, #56]	; 0x38
 8001f0c:	4a0a      	ldr	r2, [pc, #40]	; (8001f38 <HAL_ADC_MspInit+0xf8>)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8001f12:	2200      	movs	r2, #0
 8001f14:	2100      	movs	r1, #0
 8001f16:	2012      	movs	r0, #18
 8001f18:	f001 f87d 	bl	8003016 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001f1c:	2012      	movs	r0, #18
 8001f1e:	f001 f896 	bl	800304e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001f22:	bf00      	nop
 8001f24:	3728      	adds	r7, #40	; 0x28
 8001f26:	46bd      	mov	sp, r7
 8001f28:	bd80      	pop	{r7, pc}
 8001f2a:	bf00      	nop
 8001f2c:	40012000 	.word	0x40012000
 8001f30:	40023800 	.word	0x40023800
 8001f34:	40020000 	.word	0x40020000
 8001f38:	200002d0 	.word	0x200002d0
 8001f3c:	40026410 	.word	0x40026410

08001f40 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b08a      	sub	sp, #40	; 0x28
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f48:	f107 0314 	add.w	r3, r7, #20
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	601a      	str	r2, [r3, #0]
 8001f50:	605a      	str	r2, [r3, #4]
 8001f52:	609a      	str	r2, [r3, #8]
 8001f54:	60da      	str	r2, [r3, #12]
 8001f56:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	4a1d      	ldr	r2, [pc, #116]	; (8001fd4 <HAL_SPI_MspInit+0x94>)
 8001f5e:	4293      	cmp	r3, r2
 8001f60:	d133      	bne.n	8001fca <HAL_SPI_MspInit+0x8a>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001f62:	2300      	movs	r3, #0
 8001f64:	613b      	str	r3, [r7, #16]
 8001f66:	4b1c      	ldr	r3, [pc, #112]	; (8001fd8 <HAL_SPI_MspInit+0x98>)
 8001f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f6a:	4a1b      	ldr	r2, [pc, #108]	; (8001fd8 <HAL_SPI_MspInit+0x98>)
 8001f6c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001f70:	6413      	str	r3, [r2, #64]	; 0x40
 8001f72:	4b19      	ldr	r3, [pc, #100]	; (8001fd8 <HAL_SPI_MspInit+0x98>)
 8001f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f76:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001f7a:	613b      	str	r3, [r7, #16]
 8001f7c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f7e:	2300      	movs	r3, #0
 8001f80:	60fb      	str	r3, [r7, #12]
 8001f82:	4b15      	ldr	r3, [pc, #84]	; (8001fd8 <HAL_SPI_MspInit+0x98>)
 8001f84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f86:	4a14      	ldr	r2, [pc, #80]	; (8001fd8 <HAL_SPI_MspInit+0x98>)
 8001f88:	f043 0302 	orr.w	r3, r3, #2
 8001f8c:	6313      	str	r3, [r2, #48]	; 0x30
 8001f8e:	4b12      	ldr	r3, [pc, #72]	; (8001fd8 <HAL_SPI_MspInit+0x98>)
 8001f90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f92:	f003 0302 	and.w	r3, r3, #2
 8001f96:	60fb      	str	r3, [r7, #12]
 8001f98:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PB3     ------> SPI3_SCK
    PB4     ------> SPI3_MISO
    PB5     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8001f9a:	2338      	movs	r3, #56	; 0x38
 8001f9c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f9e:	2302      	movs	r3, #2
 8001fa0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fa6:	2303      	movs	r3, #3
 8001fa8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001faa:	2306      	movs	r3, #6
 8001fac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fae:	f107 0314 	add.w	r3, r7, #20
 8001fb2:	4619      	mov	r1, r3
 8001fb4:	4809      	ldr	r0, [pc, #36]	; (8001fdc <HAL_SPI_MspInit+0x9c>)
 8001fb6:	f001 fbf5 	bl	80037a4 <HAL_GPIO_Init>

    /* SPI3 interrupt Init */
    HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 8001fba:	2200      	movs	r2, #0
 8001fbc:	2100      	movs	r1, #0
 8001fbe:	2033      	movs	r0, #51	; 0x33
 8001fc0:	f001 f829 	bl	8003016 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 8001fc4:	2033      	movs	r0, #51	; 0x33
 8001fc6:	f001 f842 	bl	800304e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001fca:	bf00      	nop
 8001fcc:	3728      	adds	r7, #40	; 0x28
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	bd80      	pop	{r7, pc}
 8001fd2:	bf00      	nop
 8001fd4:	40003c00 	.word	0x40003c00
 8001fd8:	40023800 	.word	0x40023800
 8001fdc:	40020400 	.word	0x40020400

08001fe0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b084      	sub	sp, #16
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	4a18      	ldr	r2, [pc, #96]	; (8002050 <HAL_TIM_Base_MspInit+0x70>)
 8001fee:	4293      	cmp	r3, r2
 8001ff0:	d10e      	bne.n	8002010 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	60fb      	str	r3, [r7, #12]
 8001ff6:	4b17      	ldr	r3, [pc, #92]	; (8002054 <HAL_TIM_Base_MspInit+0x74>)
 8001ff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ffa:	4a16      	ldr	r2, [pc, #88]	; (8002054 <HAL_TIM_Base_MspInit+0x74>)
 8001ffc:	f043 0302 	orr.w	r3, r3, #2
 8002000:	6413      	str	r3, [r2, #64]	; 0x40
 8002002:	4b14      	ldr	r3, [pc, #80]	; (8002054 <HAL_TIM_Base_MspInit+0x74>)
 8002004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002006:	f003 0302 	and.w	r3, r3, #2
 800200a:	60fb      	str	r3, [r7, #12]
 800200c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 800200e:	e01a      	b.n	8002046 <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM11)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	4a10      	ldr	r2, [pc, #64]	; (8002058 <HAL_TIM_Base_MspInit+0x78>)
 8002016:	4293      	cmp	r3, r2
 8002018:	d115      	bne.n	8002046 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM11_CLK_ENABLE();
 800201a:	2300      	movs	r3, #0
 800201c:	60bb      	str	r3, [r7, #8]
 800201e:	4b0d      	ldr	r3, [pc, #52]	; (8002054 <HAL_TIM_Base_MspInit+0x74>)
 8002020:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002022:	4a0c      	ldr	r2, [pc, #48]	; (8002054 <HAL_TIM_Base_MspInit+0x74>)
 8002024:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002028:	6453      	str	r3, [r2, #68]	; 0x44
 800202a:	4b0a      	ldr	r3, [pc, #40]	; (8002054 <HAL_TIM_Base_MspInit+0x74>)
 800202c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800202e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002032:	60bb      	str	r3, [r7, #8]
 8002034:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8002036:	2200      	movs	r2, #0
 8002038:	2100      	movs	r1, #0
 800203a:	201a      	movs	r0, #26
 800203c:	f000 ffeb 	bl	8003016 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8002040:	201a      	movs	r0, #26
 8002042:	f001 f804 	bl	800304e <HAL_NVIC_EnableIRQ>
}
 8002046:	bf00      	nop
 8002048:	3710      	adds	r7, #16
 800204a:	46bd      	mov	sp, r7
 800204c:	bd80      	pop	{r7, pc}
 800204e:	bf00      	nop
 8002050:	40000400 	.word	0x40000400
 8002054:	40023800 	.word	0x40023800
 8002058:	40014800 	.word	0x40014800

0800205c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b08c      	sub	sp, #48	; 0x30
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002064:	f107 031c 	add.w	r3, r7, #28
 8002068:	2200      	movs	r2, #0
 800206a:	601a      	str	r2, [r3, #0]
 800206c:	605a      	str	r2, [r3, #4]
 800206e:	609a      	str	r2, [r3, #8]
 8002070:	60da      	str	r2, [r3, #12]
 8002072:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	4a36      	ldr	r2, [pc, #216]	; (8002154 <HAL_UART_MspInit+0xf8>)
 800207a:	4293      	cmp	r3, r2
 800207c:	d135      	bne.n	80020ea <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800207e:	2300      	movs	r3, #0
 8002080:	61bb      	str	r3, [r7, #24]
 8002082:	4b35      	ldr	r3, [pc, #212]	; (8002158 <HAL_UART_MspInit+0xfc>)
 8002084:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002086:	4a34      	ldr	r2, [pc, #208]	; (8002158 <HAL_UART_MspInit+0xfc>)
 8002088:	f043 0310 	orr.w	r3, r3, #16
 800208c:	6453      	str	r3, [r2, #68]	; 0x44
 800208e:	4b32      	ldr	r3, [pc, #200]	; (8002158 <HAL_UART_MspInit+0xfc>)
 8002090:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002092:	f003 0310 	and.w	r3, r3, #16
 8002096:	61bb      	str	r3, [r7, #24]
 8002098:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800209a:	2300      	movs	r3, #0
 800209c:	617b      	str	r3, [r7, #20]
 800209e:	4b2e      	ldr	r3, [pc, #184]	; (8002158 <HAL_UART_MspInit+0xfc>)
 80020a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020a2:	4a2d      	ldr	r2, [pc, #180]	; (8002158 <HAL_UART_MspInit+0xfc>)
 80020a4:	f043 0301 	orr.w	r3, r3, #1
 80020a8:	6313      	str	r3, [r2, #48]	; 0x30
 80020aa:	4b2b      	ldr	r3, [pc, #172]	; (8002158 <HAL_UART_MspInit+0xfc>)
 80020ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ae:	f003 0301 	and.w	r3, r3, #1
 80020b2:	617b      	str	r3, [r7, #20]
 80020b4:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PA15     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_15;
 80020b6:	f44f 4304 	mov.w	r3, #33792	; 0x8400
 80020ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020bc:	2302      	movs	r3, #2
 80020be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020c0:	2300      	movs	r3, #0
 80020c2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020c4:	2303      	movs	r3, #3
 80020c6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80020c8:	2307      	movs	r3, #7
 80020ca:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020cc:	f107 031c 	add.w	r3, r7, #28
 80020d0:	4619      	mov	r1, r3
 80020d2:	4822      	ldr	r0, [pc, #136]	; (800215c <HAL_UART_MspInit+0x100>)
 80020d4:	f001 fb66 	bl	80037a4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80020d8:	2200      	movs	r2, #0
 80020da:	2100      	movs	r1, #0
 80020dc:	2025      	movs	r0, #37	; 0x25
 80020de:	f000 ff9a 	bl	8003016 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80020e2:	2025      	movs	r0, #37	; 0x25
 80020e4:	f000 ffb3 	bl	800304e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80020e8:	e030      	b.n	800214c <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART2)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	4a1c      	ldr	r2, [pc, #112]	; (8002160 <HAL_UART_MspInit+0x104>)
 80020f0:	4293      	cmp	r3, r2
 80020f2:	d12b      	bne.n	800214c <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 80020f4:	2300      	movs	r3, #0
 80020f6:	613b      	str	r3, [r7, #16]
 80020f8:	4b17      	ldr	r3, [pc, #92]	; (8002158 <HAL_UART_MspInit+0xfc>)
 80020fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020fc:	4a16      	ldr	r2, [pc, #88]	; (8002158 <HAL_UART_MspInit+0xfc>)
 80020fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002102:	6413      	str	r3, [r2, #64]	; 0x40
 8002104:	4b14      	ldr	r3, [pc, #80]	; (8002158 <HAL_UART_MspInit+0xfc>)
 8002106:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002108:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800210c:	613b      	str	r3, [r7, #16]
 800210e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002110:	2300      	movs	r3, #0
 8002112:	60fb      	str	r3, [r7, #12]
 8002114:	4b10      	ldr	r3, [pc, #64]	; (8002158 <HAL_UART_MspInit+0xfc>)
 8002116:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002118:	4a0f      	ldr	r2, [pc, #60]	; (8002158 <HAL_UART_MspInit+0xfc>)
 800211a:	f043 0301 	orr.w	r3, r3, #1
 800211e:	6313      	str	r3, [r2, #48]	; 0x30
 8002120:	4b0d      	ldr	r3, [pc, #52]	; (8002158 <HAL_UART_MspInit+0xfc>)
 8002122:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002124:	f003 0301 	and.w	r3, r3, #1
 8002128:	60fb      	str	r3, [r7, #12]
 800212a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800212c:	230c      	movs	r3, #12
 800212e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002130:	2302      	movs	r3, #2
 8002132:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002134:	2300      	movs	r3, #0
 8002136:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002138:	2303      	movs	r3, #3
 800213a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800213c:	2307      	movs	r3, #7
 800213e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002140:	f107 031c 	add.w	r3, r7, #28
 8002144:	4619      	mov	r1, r3
 8002146:	4805      	ldr	r0, [pc, #20]	; (800215c <HAL_UART_MspInit+0x100>)
 8002148:	f001 fb2c 	bl	80037a4 <HAL_GPIO_Init>
}
 800214c:	bf00      	nop
 800214e:	3730      	adds	r7, #48	; 0x30
 8002150:	46bd      	mov	sp, r7
 8002152:	bd80      	pop	{r7, pc}
 8002154:	40011000 	.word	0x40011000
 8002158:	40023800 	.word	0x40023800
 800215c:	40020000 	.word	0x40020000
 8002160:	40004400 	.word	0x40004400

08002164 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002164:	b480      	push	{r7}
 8002166:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002168:	e7fe      	b.n	8002168 <NMI_Handler+0x4>

0800216a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800216a:	b480      	push	{r7}
 800216c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800216e:	e7fe      	b.n	800216e <HardFault_Handler+0x4>

08002170 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002170:	b480      	push	{r7}
 8002172:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002174:	e7fe      	b.n	8002174 <MemManage_Handler+0x4>

08002176 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002176:	b480      	push	{r7}
 8002178:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800217a:	e7fe      	b.n	800217a <BusFault_Handler+0x4>

0800217c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800217c:	b480      	push	{r7}
 800217e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002180:	e7fe      	b.n	8002180 <UsageFault_Handler+0x4>

08002182 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002182:	b480      	push	{r7}
 8002184:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002186:	bf00      	nop
 8002188:	46bd      	mov	sp, r7
 800218a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218e:	4770      	bx	lr

08002190 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002190:	b480      	push	{r7}
 8002192:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002194:	bf00      	nop
 8002196:	46bd      	mov	sp, r7
 8002198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219c:	4770      	bx	lr

0800219e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800219e:	b480      	push	{r7}
 80021a0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80021a2:	bf00      	nop
 80021a4:	46bd      	mov	sp, r7
 80021a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021aa:	4770      	bx	lr

080021ac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80021b0:	f000 f8fc 	bl	80023ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80021b4:	bf00      	nop
 80021b6:	bd80      	pop	{r7, pc}

080021b8 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80021bc:	4802      	ldr	r0, [pc, #8]	; (80021c8 <ADC_IRQHandler+0x10>)
 80021be:	f000 f958 	bl	8002472 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 80021c2:	bf00      	nop
 80021c4:	bd80      	pop	{r7, pc}
 80021c6:	bf00      	nop
 80021c8:	20000208 	.word	0x20000208

080021cc <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 80021d0:	4802      	ldr	r0, [pc, #8]	; (80021dc <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 80021d2:	f002 fcc8 	bl	8004b66 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 80021d6:	bf00      	nop
 80021d8:	bd80      	pop	{r7, pc}
 80021da:	bf00      	nop
 80021dc:	20000290 	.word	0x20000290

080021e0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80021e4:	4802      	ldr	r0, [pc, #8]	; (80021f0 <USART1_IRQHandler+0x10>)
 80021e6:	f003 f97d 	bl	80054e4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80021ea:	bf00      	nop
 80021ec:	bd80      	pop	{r7, pc}
 80021ee:	bf00      	nop
 80021f0:	20000250 	.word	0x20000250

080021f4 <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 80021f8:	4802      	ldr	r0, [pc, #8]	; (8002204 <SPI3_IRQHandler+0x10>)
 80021fa:	f002 f9cf 	bl	800459c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 80021fe:	bf00      	nop
 8002200:	bd80      	pop	{r7, pc}
 8002202:	bf00      	nop
 8002204:	200001b0 	.word	0x200001b0

08002208 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800220c:	4802      	ldr	r0, [pc, #8]	; (8002218 <DMA2_Stream0_IRQHandler+0x10>)
 800220e:	f001 f861 	bl	80032d4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002212:	bf00      	nop
 8002214:	bd80      	pop	{r7, pc}
 8002216:	bf00      	nop
 8002218:	200002d0 	.word	0x200002d0

0800221c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	b086      	sub	sp, #24
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002224:	4a14      	ldr	r2, [pc, #80]	; (8002278 <_sbrk+0x5c>)
 8002226:	4b15      	ldr	r3, [pc, #84]	; (800227c <_sbrk+0x60>)
 8002228:	1ad3      	subs	r3, r2, r3
 800222a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800222c:	697b      	ldr	r3, [r7, #20]
 800222e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002230:	4b13      	ldr	r3, [pc, #76]	; (8002280 <_sbrk+0x64>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	2b00      	cmp	r3, #0
 8002236:	d102      	bne.n	800223e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002238:	4b11      	ldr	r3, [pc, #68]	; (8002280 <_sbrk+0x64>)
 800223a:	4a12      	ldr	r2, [pc, #72]	; (8002284 <_sbrk+0x68>)
 800223c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800223e:	4b10      	ldr	r3, [pc, #64]	; (8002280 <_sbrk+0x64>)
 8002240:	681a      	ldr	r2, [r3, #0]
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	4413      	add	r3, r2
 8002246:	693a      	ldr	r2, [r7, #16]
 8002248:	429a      	cmp	r2, r3
 800224a:	d207      	bcs.n	800225c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800224c:	f003 ff46 	bl	80060dc <__errno>
 8002250:	4602      	mov	r2, r0
 8002252:	230c      	movs	r3, #12
 8002254:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8002256:	f04f 33ff 	mov.w	r3, #4294967295
 800225a:	e009      	b.n	8002270 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800225c:	4b08      	ldr	r3, [pc, #32]	; (8002280 <_sbrk+0x64>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002262:	4b07      	ldr	r3, [pc, #28]	; (8002280 <_sbrk+0x64>)
 8002264:	681a      	ldr	r2, [r3, #0]
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	4413      	add	r3, r2
 800226a:	4a05      	ldr	r2, [pc, #20]	; (8002280 <_sbrk+0x64>)
 800226c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800226e:	68fb      	ldr	r3, [r7, #12]
}
 8002270:	4618      	mov	r0, r3
 8002272:	3718      	adds	r7, #24
 8002274:	46bd      	mov	sp, r7
 8002276:	bd80      	pop	{r7, pc}
 8002278:	20020000 	.word	0x20020000
 800227c:	00000400 	.word	0x00000400
 8002280:	20000164 	.word	0x20000164
 8002284:	20000378 	.word	0x20000378

08002288 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002288:	b480      	push	{r7}
 800228a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800228c:	4b08      	ldr	r3, [pc, #32]	; (80022b0 <SystemInit+0x28>)
 800228e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002292:	4a07      	ldr	r2, [pc, #28]	; (80022b0 <SystemInit+0x28>)
 8002294:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002298:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800229c:	4b04      	ldr	r3, [pc, #16]	; (80022b0 <SystemInit+0x28>)
 800229e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80022a2:	609a      	str	r2, [r3, #8]
#endif
}
 80022a4:	bf00      	nop
 80022a6:	46bd      	mov	sp, r7
 80022a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ac:	4770      	bx	lr
 80022ae:	bf00      	nop
 80022b0:	e000ed00 	.word	0xe000ed00

080022b4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80022b4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80022ec <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80022b8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80022ba:	e003      	b.n	80022c4 <LoopCopyDataInit>

080022bc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80022bc:	4b0c      	ldr	r3, [pc, #48]	; (80022f0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80022be:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80022c0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80022c2:	3104      	adds	r1, #4

080022c4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80022c4:	480b      	ldr	r0, [pc, #44]	; (80022f4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80022c6:	4b0c      	ldr	r3, [pc, #48]	; (80022f8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80022c8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80022ca:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80022cc:	d3f6      	bcc.n	80022bc <CopyDataInit>
  ldr  r2, =_sbss
 80022ce:	4a0b      	ldr	r2, [pc, #44]	; (80022fc <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80022d0:	e002      	b.n	80022d8 <LoopFillZerobss>

080022d2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80022d2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80022d4:	f842 3b04 	str.w	r3, [r2], #4

080022d8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80022d8:	4b09      	ldr	r3, [pc, #36]	; (8002300 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80022da:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80022dc:	d3f9      	bcc.n	80022d2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80022de:	f7ff ffd3 	bl	8002288 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80022e2:	f003 ff01 	bl	80060e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80022e6:	f7fe fe1b 	bl	8000f20 <main>
  bx  lr    
 80022ea:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80022ec:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80022f0:	08006bbc 	.word	0x08006bbc
  ldr  r0, =_sdata
 80022f4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80022f8:	20000080 	.word	0x20000080
  ldr  r2, =_sbss
 80022fc:	20000080 	.word	0x20000080
  ldr  r3, = _ebss
 8002300:	20000378 	.word	0x20000378

08002304 <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002304:	e7fe      	b.n	8002304 <DMA1_Stream0_IRQHandler>
	...

08002308 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800230c:	4b0e      	ldr	r3, [pc, #56]	; (8002348 <HAL_Init+0x40>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	4a0d      	ldr	r2, [pc, #52]	; (8002348 <HAL_Init+0x40>)
 8002312:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002316:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002318:	4b0b      	ldr	r3, [pc, #44]	; (8002348 <HAL_Init+0x40>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	4a0a      	ldr	r2, [pc, #40]	; (8002348 <HAL_Init+0x40>)
 800231e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002322:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002324:	4b08      	ldr	r3, [pc, #32]	; (8002348 <HAL_Init+0x40>)
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	4a07      	ldr	r2, [pc, #28]	; (8002348 <HAL_Init+0x40>)
 800232a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800232e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002330:	2003      	movs	r0, #3
 8002332:	f000 fe65 	bl	8003000 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002336:	2000      	movs	r0, #0
 8002338:	f000 f808 	bl	800234c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800233c:	f7ff fd58 	bl	8001df0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002340:	2300      	movs	r3, #0
}
 8002342:	4618      	mov	r0, r3
 8002344:	bd80      	pop	{r7, pc}
 8002346:	bf00      	nop
 8002348:	40023c00 	.word	0x40023c00

0800234c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b082      	sub	sp, #8
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002354:	4b12      	ldr	r3, [pc, #72]	; (80023a0 <HAL_InitTick+0x54>)
 8002356:	681a      	ldr	r2, [r3, #0]
 8002358:	4b12      	ldr	r3, [pc, #72]	; (80023a4 <HAL_InitTick+0x58>)
 800235a:	781b      	ldrb	r3, [r3, #0]
 800235c:	4619      	mov	r1, r3
 800235e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002362:	fbb3 f3f1 	udiv	r3, r3, r1
 8002366:	fbb2 f3f3 	udiv	r3, r2, r3
 800236a:	4618      	mov	r0, r3
 800236c:	f000 fe7d 	bl	800306a <HAL_SYSTICK_Config>
 8002370:	4603      	mov	r3, r0
 8002372:	2b00      	cmp	r3, #0
 8002374:	d001      	beq.n	800237a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002376:	2301      	movs	r3, #1
 8002378:	e00e      	b.n	8002398 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	2b0f      	cmp	r3, #15
 800237e:	d80a      	bhi.n	8002396 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002380:	2200      	movs	r2, #0
 8002382:	6879      	ldr	r1, [r7, #4]
 8002384:	f04f 30ff 	mov.w	r0, #4294967295
 8002388:	f000 fe45 	bl	8003016 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800238c:	4a06      	ldr	r2, [pc, #24]	; (80023a8 <HAL_InitTick+0x5c>)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002392:	2300      	movs	r3, #0
 8002394:	e000      	b.n	8002398 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002396:	2301      	movs	r3, #1
}
 8002398:	4618      	mov	r0, r3
 800239a:	3708      	adds	r7, #8
 800239c:	46bd      	mov	sp, r7
 800239e:	bd80      	pop	{r7, pc}
 80023a0:	20000010 	.word	0x20000010
 80023a4:	20000018 	.word	0x20000018
 80023a8:	20000014 	.word	0x20000014

080023ac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80023ac:	b480      	push	{r7}
 80023ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80023b0:	4b06      	ldr	r3, [pc, #24]	; (80023cc <HAL_IncTick+0x20>)
 80023b2:	781b      	ldrb	r3, [r3, #0]
 80023b4:	461a      	mov	r2, r3
 80023b6:	4b06      	ldr	r3, [pc, #24]	; (80023d0 <HAL_IncTick+0x24>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	4413      	add	r3, r2
 80023bc:	4a04      	ldr	r2, [pc, #16]	; (80023d0 <HAL_IncTick+0x24>)
 80023be:	6013      	str	r3, [r2, #0]
}
 80023c0:	bf00      	nop
 80023c2:	46bd      	mov	sp, r7
 80023c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c8:	4770      	bx	lr
 80023ca:	bf00      	nop
 80023cc:	20000018 	.word	0x20000018
 80023d0:	20000370 	.word	0x20000370

080023d4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80023d4:	b480      	push	{r7}
 80023d6:	af00      	add	r7, sp, #0
  return uwTick;
 80023d8:	4b03      	ldr	r3, [pc, #12]	; (80023e8 <HAL_GetTick+0x14>)
 80023da:	681b      	ldr	r3, [r3, #0]
}
 80023dc:	4618      	mov	r0, r3
 80023de:	46bd      	mov	sp, r7
 80023e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e4:	4770      	bx	lr
 80023e6:	bf00      	nop
 80023e8:	20000370 	.word	0x20000370

080023ec <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b084      	sub	sp, #16
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80023f4:	2300      	movs	r3, #0
 80023f6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d101      	bne.n	8002402 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80023fe:	2301      	movs	r3, #1
 8002400:	e033      	b.n	800246a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002406:	2b00      	cmp	r3, #0
 8002408:	d109      	bne.n	800241e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800240a:	6878      	ldr	r0, [r7, #4]
 800240c:	f7ff fd18 	bl	8001e40 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	2200      	movs	r2, #0
 8002414:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	2200      	movs	r2, #0
 800241a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002422:	f003 0310 	and.w	r3, r3, #16
 8002426:	2b00      	cmp	r3, #0
 8002428:	d118      	bne.n	800245c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800242e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002432:	f023 0302 	bic.w	r3, r3, #2
 8002436:	f043 0202 	orr.w	r2, r3, #2
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800243e:	6878      	ldr	r0, [r7, #4]
 8002440:	f000 fb86 	bl	8002b50 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	2200      	movs	r2, #0
 8002448:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800244e:	f023 0303 	bic.w	r3, r3, #3
 8002452:	f043 0201 	orr.w	r2, r3, #1
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	641a      	str	r2, [r3, #64]	; 0x40
 800245a:	e001      	b.n	8002460 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800245c:	2301      	movs	r3, #1
 800245e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	2200      	movs	r2, #0
 8002464:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002468:	7bfb      	ldrb	r3, [r7, #15]
}
 800246a:	4618      	mov	r0, r3
 800246c:	3710      	adds	r7, #16
 800246e:	46bd      	mov	sp, r7
 8002470:	bd80      	pop	{r7, pc}

08002472 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8002472:	b580      	push	{r7, lr}
 8002474:	b084      	sub	sp, #16
 8002476:	af00      	add	r7, sp, #0
 8002478:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 800247a:	2300      	movs	r3, #0
 800247c:	60fb      	str	r3, [r7, #12]
 800247e:	2300      	movs	r3, #0
 8002480:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f003 0302 	and.w	r3, r3, #2
 800248c:	2b02      	cmp	r3, #2
 800248e:	bf0c      	ite	eq
 8002490:	2301      	moveq	r3, #1
 8002492:	2300      	movne	r3, #0
 8002494:	b2db      	uxtb	r3, r3
 8002496:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	685b      	ldr	r3, [r3, #4]
 800249e:	f003 0320 	and.w	r3, r3, #32
 80024a2:	2b20      	cmp	r3, #32
 80024a4:	bf0c      	ite	eq
 80024a6:	2301      	moveq	r3, #1
 80024a8:	2300      	movne	r3, #0
 80024aa:	b2db      	uxtb	r3, r3
 80024ac:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d049      	beq.n	8002548 <HAL_ADC_IRQHandler+0xd6>
 80024b4:	68bb      	ldr	r3, [r7, #8]
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d046      	beq.n	8002548 <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024be:	f003 0310 	and.w	r3, r3, #16
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d105      	bne.n	80024d2 <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ca:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	689b      	ldr	r3, [r3, #8]
 80024d8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d12b      	bne.n	8002538 <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d127      	bne.n	8002538 <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024ee:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d006      	beq.n	8002504 <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	689b      	ldr	r3, [r3, #8]
 80024fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002500:	2b00      	cmp	r3, #0
 8002502:	d119      	bne.n	8002538 <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	685a      	ldr	r2, [r3, #4]
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f022 0220 	bic.w	r2, r2, #32
 8002512:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002518:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002524:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002528:	2b00      	cmp	r3, #0
 800252a:	d105      	bne.n	8002538 <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002530:	f043 0201 	orr.w	r2, r3, #1
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002538:	6878      	ldr	r0, [r7, #4]
 800253a:	f000 f9af 	bl	800289c <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f06f 0212 	mvn.w	r2, #18
 8002546:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f003 0304 	and.w	r3, r3, #4
 8002552:	2b04      	cmp	r3, #4
 8002554:	bf0c      	ite	eq
 8002556:	2301      	moveq	r3, #1
 8002558:	2300      	movne	r3, #0
 800255a:	b2db      	uxtb	r3, r3
 800255c:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	685b      	ldr	r3, [r3, #4]
 8002564:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002568:	2b80      	cmp	r3, #128	; 0x80
 800256a:	bf0c      	ite	eq
 800256c:	2301      	moveq	r3, #1
 800256e:	2300      	movne	r3, #0
 8002570:	b2db      	uxtb	r3, r3
 8002572:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	2b00      	cmp	r3, #0
 8002578:	d057      	beq.n	800262a <HAL_ADC_IRQHandler+0x1b8>
 800257a:	68bb      	ldr	r3, [r7, #8]
 800257c:	2b00      	cmp	r3, #0
 800257e:	d054      	beq.n	800262a <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002584:	f003 0310 	and.w	r3, r3, #16
 8002588:	2b00      	cmp	r3, #0
 800258a:	d105      	bne.n	8002598 <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002590:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	689b      	ldr	r3, [r3, #8]
 800259e:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d139      	bne.n	800261a <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025ac:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d006      	beq.n	80025c2 <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	689b      	ldr	r3, [r3, #8]
 80025ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d12b      	bne.n	800261a <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	685b      	ldr	r3, [r3, #4]
 80025c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d124      	bne.n	800261a <HAL_ADC_IRQHandler+0x1a8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	689b      	ldr	r3, [r3, #8]
 80025d6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d11d      	bne.n	800261a <HAL_ADC_IRQHandler+0x1a8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d119      	bne.n	800261a <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	685a      	ldr	r2, [r3, #4]
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80025f4:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025fa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002606:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800260a:	2b00      	cmp	r3, #0
 800260c:	d105      	bne.n	800261a <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002612:	f043 0201 	orr.w	r2, r3, #1
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800261a:	6878      	ldr	r0, [r7, #4]
 800261c:	f000 fc16 	bl	8002e4c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f06f 020c 	mvn.w	r2, #12
 8002628:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f003 0301 	and.w	r3, r3, #1
 8002634:	2b01      	cmp	r3, #1
 8002636:	bf0c      	ite	eq
 8002638:	2301      	moveq	r3, #1
 800263a:	2300      	movne	r3, #0
 800263c:	b2db      	uxtb	r3, r3
 800263e:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	685b      	ldr	r3, [r3, #4]
 8002646:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800264a:	2b40      	cmp	r3, #64	; 0x40
 800264c:	bf0c      	ite	eq
 800264e:	2301      	moveq	r3, #1
 8002650:	2300      	movne	r3, #0
 8002652:	b2db      	uxtb	r3, r3
 8002654:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	2b00      	cmp	r3, #0
 800265a:	d017      	beq.n	800268c <HAL_ADC_IRQHandler+0x21a>
 800265c:	68bb      	ldr	r3, [r7, #8]
 800265e:	2b00      	cmp	r3, #0
 8002660:	d014      	beq.n	800268c <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f003 0301 	and.w	r3, r3, #1
 800266c:	2b01      	cmp	r3, #1
 800266e:	d10d      	bne.n	800268c <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002674:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800267c:	6878      	ldr	r0, [r7, #4]
 800267e:	f000 f921 	bl	80028c4 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f06f 0201 	mvn.w	r2, #1
 800268a:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f003 0320 	and.w	r3, r3, #32
 8002696:	2b20      	cmp	r3, #32
 8002698:	bf0c      	ite	eq
 800269a:	2301      	moveq	r3, #1
 800269c:	2300      	movne	r3, #0
 800269e:	b2db      	uxtb	r3, r3
 80026a0:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	685b      	ldr	r3, [r3, #4]
 80026a8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80026ac:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80026b0:	bf0c      	ite	eq
 80026b2:	2301      	moveq	r3, #1
 80026b4:	2300      	movne	r3, #0
 80026b6:	b2db      	uxtb	r3, r3
 80026b8:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d015      	beq.n	80026ec <HAL_ADC_IRQHandler+0x27a>
 80026c0:	68bb      	ldr	r3, [r7, #8]
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d012      	beq.n	80026ec <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026ca:	f043 0202 	orr.w	r2, r3, #2
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f06f 0220 	mvn.w	r2, #32
 80026da:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80026dc:	6878      	ldr	r0, [r7, #4]
 80026de:	f000 f8fb 	bl	80028d8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f06f 0220 	mvn.w	r2, #32
 80026ea:	601a      	str	r2, [r3, #0]
  }
}
 80026ec:	bf00      	nop
 80026ee:	3710      	adds	r7, #16
 80026f0:	46bd      	mov	sp, r7
 80026f2:	bd80      	pop	{r7, pc}

080026f4 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b086      	sub	sp, #24
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	60f8      	str	r0, [r7, #12]
 80026fc:	60b9      	str	r1, [r7, #8]
 80026fe:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8002700:	2300      	movs	r3, #0
 8002702:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800270a:	2b01      	cmp	r3, #1
 800270c:	d101      	bne.n	8002712 <HAL_ADC_Start_DMA+0x1e>
 800270e:	2302      	movs	r3, #2
 8002710:	e0b1      	b.n	8002876 <HAL_ADC_Start_DMA+0x182>
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	2201      	movs	r2, #1
 8002716:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	689b      	ldr	r3, [r3, #8]
 8002720:	f003 0301 	and.w	r3, r3, #1
 8002724:	2b01      	cmp	r3, #1
 8002726:	d018      	beq.n	800275a <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	689a      	ldr	r2, [r3, #8]
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f042 0201 	orr.w	r2, r2, #1
 8002736:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002738:	4b51      	ldr	r3, [pc, #324]	; (8002880 <HAL_ADC_Start_DMA+0x18c>)
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	4a51      	ldr	r2, [pc, #324]	; (8002884 <HAL_ADC_Start_DMA+0x190>)
 800273e:	fba2 2303 	umull	r2, r3, r2, r3
 8002742:	0c9a      	lsrs	r2, r3, #18
 8002744:	4613      	mov	r3, r2
 8002746:	005b      	lsls	r3, r3, #1
 8002748:	4413      	add	r3, r2
 800274a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800274c:	e002      	b.n	8002754 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800274e:	693b      	ldr	r3, [r7, #16]
 8002750:	3b01      	subs	r3, #1
 8002752:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002754:	693b      	ldr	r3, [r7, #16]
 8002756:	2b00      	cmp	r3, #0
 8002758:	d1f9      	bne.n	800274e <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	689b      	ldr	r3, [r3, #8]
 8002760:	f003 0301 	and.w	r3, r3, #1
 8002764:	2b01      	cmp	r3, #1
 8002766:	f040 8085 	bne.w	8002874 <HAL_ADC_Start_DMA+0x180>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800276e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002772:	f023 0301 	bic.w	r3, r3, #1
 8002776:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	685b      	ldr	r3, [r3, #4]
 8002784:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002788:	2b00      	cmp	r3, #0
 800278a:	d007      	beq.n	800279c <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002790:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002794:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027a0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80027a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80027a8:	d106      	bne.n	80027b8 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027ae:	f023 0206 	bic.w	r2, r3, #6
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	645a      	str	r2, [r3, #68]	; 0x44
 80027b6:	e002      	b.n	80027be <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	2200      	movs	r2, #0
 80027bc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	2200      	movs	r2, #0
 80027c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80027c6:	4b30      	ldr	r3, [pc, #192]	; (8002888 <HAL_ADC_Start_DMA+0x194>)
 80027c8:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027ce:	4a2f      	ldr	r2, [pc, #188]	; (800288c <HAL_ADC_Start_DMA+0x198>)
 80027d0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027d6:	4a2e      	ldr	r2, [pc, #184]	; (8002890 <HAL_ADC_Start_DMA+0x19c>)
 80027d8:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027de:	4a2d      	ldr	r2, [pc, #180]	; (8002894 <HAL_ADC_Start_DMA+0x1a0>)
 80027e0:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80027ea:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	685a      	ldr	r2, [r3, #4]
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80027fa:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	689a      	ldr	r2, [r3, #8]
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800280a:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	334c      	adds	r3, #76	; 0x4c
 8002816:	4619      	mov	r1, r3
 8002818:	68ba      	ldr	r2, [r7, #8]
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	f000 fce0 	bl	80031e0 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002820:	697b      	ldr	r3, [r7, #20]
 8002822:	685b      	ldr	r3, [r3, #4]
 8002824:	f003 031f 	and.w	r3, r3, #31
 8002828:	2b00      	cmp	r3, #0
 800282a:	d10f      	bne.n	800284c <HAL_ADC_Start_DMA+0x158>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	689b      	ldr	r3, [r3, #8]
 8002832:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002836:	2b00      	cmp	r3, #0
 8002838:	d11c      	bne.n	8002874 <HAL_ADC_Start_DMA+0x180>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	689a      	ldr	r2, [r3, #8]
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002848:	609a      	str	r2, [r3, #8]
 800284a:	e013      	b.n	8002874 <HAL_ADC_Start_DMA+0x180>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	4a11      	ldr	r2, [pc, #68]	; (8002898 <HAL_ADC_Start_DMA+0x1a4>)
 8002852:	4293      	cmp	r3, r2
 8002854:	d10e      	bne.n	8002874 <HAL_ADC_Start_DMA+0x180>
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	689b      	ldr	r3, [r3, #8]
 800285c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002860:	2b00      	cmp	r3, #0
 8002862:	d107      	bne.n	8002874 <HAL_ADC_Start_DMA+0x180>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	689a      	ldr	r2, [r3, #8]
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002872:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8002874:	2300      	movs	r3, #0
}
 8002876:	4618      	mov	r0, r3
 8002878:	3718      	adds	r7, #24
 800287a:	46bd      	mov	sp, r7
 800287c:	bd80      	pop	{r7, pc}
 800287e:	bf00      	nop
 8002880:	20000010 	.word	0x20000010
 8002884:	431bde83 	.word	0x431bde83
 8002888:	40012300 	.word	0x40012300
 800288c:	08002d49 	.word	0x08002d49
 8002890:	08002e03 	.word	0x08002e03
 8002894:	08002e1f 	.word	0x08002e1f
 8002898:	40012000 	.word	0x40012000

0800289c <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800289c:	b480      	push	{r7}
 800289e:	b083      	sub	sp, #12
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 80028a4:	bf00      	nop
 80028a6:	370c      	adds	r7, #12
 80028a8:	46bd      	mov	sp, r7
 80028aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ae:	4770      	bx	lr

080028b0 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80028b0:	b480      	push	{r7}
 80028b2:	b083      	sub	sp, #12
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80028b8:	bf00      	nop
 80028ba:	370c      	adds	r7, #12
 80028bc:	46bd      	mov	sp, r7
 80028be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c2:	4770      	bx	lr

080028c4 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80028c4:	b480      	push	{r7}
 80028c6:	b083      	sub	sp, #12
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 80028cc:	bf00      	nop
 80028ce:	370c      	adds	r7, #12
 80028d0:	46bd      	mov	sp, r7
 80028d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d6:	4770      	bx	lr

080028d8 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80028d8:	b480      	push	{r7}
 80028da:	b083      	sub	sp, #12
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80028e0:	bf00      	nop
 80028e2:	370c      	adds	r7, #12
 80028e4:	46bd      	mov	sp, r7
 80028e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ea:	4770      	bx	lr

080028ec <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80028ec:	b480      	push	{r7}
 80028ee:	b085      	sub	sp, #20
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
 80028f4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80028f6:	2300      	movs	r3, #0
 80028f8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002900:	2b01      	cmp	r3, #1
 8002902:	d101      	bne.n	8002908 <HAL_ADC_ConfigChannel+0x1c>
 8002904:	2302      	movs	r3, #2
 8002906:	e113      	b.n	8002b30 <HAL_ADC_ConfigChannel+0x244>
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2201      	movs	r2, #1
 800290c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	2b09      	cmp	r3, #9
 8002916:	d925      	bls.n	8002964 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	68d9      	ldr	r1, [r3, #12]
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	b29b      	uxth	r3, r3
 8002924:	461a      	mov	r2, r3
 8002926:	4613      	mov	r3, r2
 8002928:	005b      	lsls	r3, r3, #1
 800292a:	4413      	add	r3, r2
 800292c:	3b1e      	subs	r3, #30
 800292e:	2207      	movs	r2, #7
 8002930:	fa02 f303 	lsl.w	r3, r2, r3
 8002934:	43da      	mvns	r2, r3
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	400a      	ands	r2, r1
 800293c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	68d9      	ldr	r1, [r3, #12]
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	689a      	ldr	r2, [r3, #8]
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	b29b      	uxth	r3, r3
 800294e:	4618      	mov	r0, r3
 8002950:	4603      	mov	r3, r0
 8002952:	005b      	lsls	r3, r3, #1
 8002954:	4403      	add	r3, r0
 8002956:	3b1e      	subs	r3, #30
 8002958:	409a      	lsls	r2, r3
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	430a      	orrs	r2, r1
 8002960:	60da      	str	r2, [r3, #12]
 8002962:	e022      	b.n	80029aa <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	6919      	ldr	r1, [r3, #16]
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	b29b      	uxth	r3, r3
 8002970:	461a      	mov	r2, r3
 8002972:	4613      	mov	r3, r2
 8002974:	005b      	lsls	r3, r3, #1
 8002976:	4413      	add	r3, r2
 8002978:	2207      	movs	r2, #7
 800297a:	fa02 f303 	lsl.w	r3, r2, r3
 800297e:	43da      	mvns	r2, r3
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	400a      	ands	r2, r1
 8002986:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	6919      	ldr	r1, [r3, #16]
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	689a      	ldr	r2, [r3, #8]
 8002992:	683b      	ldr	r3, [r7, #0]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	b29b      	uxth	r3, r3
 8002998:	4618      	mov	r0, r3
 800299a:	4603      	mov	r3, r0
 800299c:	005b      	lsls	r3, r3, #1
 800299e:	4403      	add	r3, r0
 80029a0:	409a      	lsls	r2, r3
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	430a      	orrs	r2, r1
 80029a8:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	685b      	ldr	r3, [r3, #4]
 80029ae:	2b06      	cmp	r3, #6
 80029b0:	d824      	bhi.n	80029fc <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	685a      	ldr	r2, [r3, #4]
 80029bc:	4613      	mov	r3, r2
 80029be:	009b      	lsls	r3, r3, #2
 80029c0:	4413      	add	r3, r2
 80029c2:	3b05      	subs	r3, #5
 80029c4:	221f      	movs	r2, #31
 80029c6:	fa02 f303 	lsl.w	r3, r2, r3
 80029ca:	43da      	mvns	r2, r3
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	400a      	ands	r2, r1
 80029d2:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	b29b      	uxth	r3, r3
 80029e0:	4618      	mov	r0, r3
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	685a      	ldr	r2, [r3, #4]
 80029e6:	4613      	mov	r3, r2
 80029e8:	009b      	lsls	r3, r3, #2
 80029ea:	4413      	add	r3, r2
 80029ec:	3b05      	subs	r3, #5
 80029ee:	fa00 f203 	lsl.w	r2, r0, r3
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	430a      	orrs	r2, r1
 80029f8:	635a      	str	r2, [r3, #52]	; 0x34
 80029fa:	e04c      	b.n	8002a96 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	685b      	ldr	r3, [r3, #4]
 8002a00:	2b0c      	cmp	r3, #12
 8002a02:	d824      	bhi.n	8002a4e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	685a      	ldr	r2, [r3, #4]
 8002a0e:	4613      	mov	r3, r2
 8002a10:	009b      	lsls	r3, r3, #2
 8002a12:	4413      	add	r3, r2
 8002a14:	3b23      	subs	r3, #35	; 0x23
 8002a16:	221f      	movs	r2, #31
 8002a18:	fa02 f303 	lsl.w	r3, r2, r3
 8002a1c:	43da      	mvns	r2, r3
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	400a      	ands	r2, r1
 8002a24:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	b29b      	uxth	r3, r3
 8002a32:	4618      	mov	r0, r3
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	685a      	ldr	r2, [r3, #4]
 8002a38:	4613      	mov	r3, r2
 8002a3a:	009b      	lsls	r3, r3, #2
 8002a3c:	4413      	add	r3, r2
 8002a3e:	3b23      	subs	r3, #35	; 0x23
 8002a40:	fa00 f203 	lsl.w	r2, r0, r3
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	430a      	orrs	r2, r1
 8002a4a:	631a      	str	r2, [r3, #48]	; 0x30
 8002a4c:	e023      	b.n	8002a96 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	685a      	ldr	r2, [r3, #4]
 8002a58:	4613      	mov	r3, r2
 8002a5a:	009b      	lsls	r3, r3, #2
 8002a5c:	4413      	add	r3, r2
 8002a5e:	3b41      	subs	r3, #65	; 0x41
 8002a60:	221f      	movs	r2, #31
 8002a62:	fa02 f303 	lsl.w	r3, r2, r3
 8002a66:	43da      	mvns	r2, r3
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	400a      	ands	r2, r1
 8002a6e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	b29b      	uxth	r3, r3
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	685a      	ldr	r2, [r3, #4]
 8002a82:	4613      	mov	r3, r2
 8002a84:	009b      	lsls	r3, r3, #2
 8002a86:	4413      	add	r3, r2
 8002a88:	3b41      	subs	r3, #65	; 0x41
 8002a8a:	fa00 f203 	lsl.w	r2, r0, r3
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	430a      	orrs	r2, r1
 8002a94:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002a96:	4b29      	ldr	r3, [pc, #164]	; (8002b3c <HAL_ADC_ConfigChannel+0x250>)
 8002a98:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	4a28      	ldr	r2, [pc, #160]	; (8002b40 <HAL_ADC_ConfigChannel+0x254>)
 8002aa0:	4293      	cmp	r3, r2
 8002aa2:	d10f      	bne.n	8002ac4 <HAL_ADC_ConfigChannel+0x1d8>
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	2b12      	cmp	r3, #18
 8002aaa:	d10b      	bne.n	8002ac4 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	685b      	ldr	r3, [r3, #4]
 8002ab0:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	685b      	ldr	r3, [r3, #4]
 8002abc:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	4a1d      	ldr	r2, [pc, #116]	; (8002b40 <HAL_ADC_ConfigChannel+0x254>)
 8002aca:	4293      	cmp	r3, r2
 8002acc:	d12b      	bne.n	8002b26 <HAL_ADC_ConfigChannel+0x23a>
 8002ace:	683b      	ldr	r3, [r7, #0]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	4a1c      	ldr	r2, [pc, #112]	; (8002b44 <HAL_ADC_ConfigChannel+0x258>)
 8002ad4:	4293      	cmp	r3, r2
 8002ad6:	d003      	beq.n	8002ae0 <HAL_ADC_ConfigChannel+0x1f4>
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	2b11      	cmp	r3, #17
 8002ade:	d122      	bne.n	8002b26 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	685b      	ldr	r3, [r3, #4]
 8002ae4:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	685b      	ldr	r3, [r3, #4]
 8002af0:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	4a11      	ldr	r2, [pc, #68]	; (8002b44 <HAL_ADC_ConfigChannel+0x258>)
 8002afe:	4293      	cmp	r3, r2
 8002b00:	d111      	bne.n	8002b26 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002b02:	4b11      	ldr	r3, [pc, #68]	; (8002b48 <HAL_ADC_ConfigChannel+0x25c>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	4a11      	ldr	r2, [pc, #68]	; (8002b4c <HAL_ADC_ConfigChannel+0x260>)
 8002b08:	fba2 2303 	umull	r2, r3, r2, r3
 8002b0c:	0c9a      	lsrs	r2, r3, #18
 8002b0e:	4613      	mov	r3, r2
 8002b10:	009b      	lsls	r3, r3, #2
 8002b12:	4413      	add	r3, r2
 8002b14:	005b      	lsls	r3, r3, #1
 8002b16:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002b18:	e002      	b.n	8002b20 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002b1a:	68bb      	ldr	r3, [r7, #8]
 8002b1c:	3b01      	subs	r3, #1
 8002b1e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002b20:	68bb      	ldr	r3, [r7, #8]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d1f9      	bne.n	8002b1a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	2200      	movs	r2, #0
 8002b2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002b2e:	2300      	movs	r3, #0
}
 8002b30:	4618      	mov	r0, r3
 8002b32:	3714      	adds	r7, #20
 8002b34:	46bd      	mov	sp, r7
 8002b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3a:	4770      	bx	lr
 8002b3c:	40012300 	.word	0x40012300
 8002b40:	40012000 	.word	0x40012000
 8002b44:	10000012 	.word	0x10000012
 8002b48:	20000010 	.word	0x20000010
 8002b4c:	431bde83 	.word	0x431bde83

08002b50 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002b50:	b480      	push	{r7}
 8002b52:	b085      	sub	sp, #20
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002b58:	4b79      	ldr	r3, [pc, #484]	; (8002d40 <ADC_Init+0x1f0>)
 8002b5a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	685b      	ldr	r3, [r3, #4]
 8002b60:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	685a      	ldr	r2, [r3, #4]
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	685b      	ldr	r3, [r3, #4]
 8002b70:	431a      	orrs	r2, r3
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	685a      	ldr	r2, [r3, #4]
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002b84:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	6859      	ldr	r1, [r3, #4]
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	691b      	ldr	r3, [r3, #16]
 8002b90:	021a      	lsls	r2, r3, #8
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	430a      	orrs	r2, r1
 8002b98:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	685a      	ldr	r2, [r3, #4]
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002ba8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	6859      	ldr	r1, [r3, #4]
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	689a      	ldr	r2, [r3, #8]
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	430a      	orrs	r2, r1
 8002bba:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	689a      	ldr	r2, [r3, #8]
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002bca:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	6899      	ldr	r1, [r3, #8]
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	68da      	ldr	r2, [r3, #12]
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	430a      	orrs	r2, r1
 8002bdc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002be2:	4a58      	ldr	r2, [pc, #352]	; (8002d44 <ADC_Init+0x1f4>)
 8002be4:	4293      	cmp	r3, r2
 8002be6:	d022      	beq.n	8002c2e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	689a      	ldr	r2, [r3, #8]
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002bf6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	6899      	ldr	r1, [r3, #8]
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	430a      	orrs	r2, r1
 8002c08:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	689a      	ldr	r2, [r3, #8]
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002c18:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	6899      	ldr	r1, [r3, #8]
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	430a      	orrs	r2, r1
 8002c2a:	609a      	str	r2, [r3, #8]
 8002c2c:	e00f      	b.n	8002c4e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	689a      	ldr	r2, [r3, #8]
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002c3c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	689a      	ldr	r2, [r3, #8]
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002c4c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	689a      	ldr	r2, [r3, #8]
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f022 0202 	bic.w	r2, r2, #2
 8002c5c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	6899      	ldr	r1, [r3, #8]
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	7e1b      	ldrb	r3, [r3, #24]
 8002c68:	005a      	lsls	r2, r3, #1
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	430a      	orrs	r2, r1
 8002c70:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d01b      	beq.n	8002cb4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	685a      	ldr	r2, [r3, #4]
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002c8a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	685a      	ldr	r2, [r3, #4]
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002c9a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	6859      	ldr	r1, [r3, #4]
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ca6:	3b01      	subs	r3, #1
 8002ca8:	035a      	lsls	r2, r3, #13
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	430a      	orrs	r2, r1
 8002cb0:	605a      	str	r2, [r3, #4]
 8002cb2:	e007      	b.n	8002cc4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	685a      	ldr	r2, [r3, #4]
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002cc2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002cd2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	69db      	ldr	r3, [r3, #28]
 8002cde:	3b01      	subs	r3, #1
 8002ce0:	051a      	lsls	r2, r3, #20
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	430a      	orrs	r2, r1
 8002ce8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	689a      	ldr	r2, [r3, #8]
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002cf8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	6899      	ldr	r1, [r3, #8]
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002d06:	025a      	lsls	r2, r3, #9
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	430a      	orrs	r2, r1
 8002d0e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	689a      	ldr	r2, [r3, #8]
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d1e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	6899      	ldr	r1, [r3, #8]
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	695b      	ldr	r3, [r3, #20]
 8002d2a:	029a      	lsls	r2, r3, #10
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	430a      	orrs	r2, r1
 8002d32:	609a      	str	r2, [r3, #8]
}
 8002d34:	bf00      	nop
 8002d36:	3714      	adds	r7, #20
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3e:	4770      	bx	lr
 8002d40:	40012300 	.word	0x40012300
 8002d44:	0f000001 	.word	0x0f000001

08002d48 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b084      	sub	sp, #16
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d54:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d5a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d13c      	bne.n	8002ddc <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d66:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	689b      	ldr	r3, [r3, #8]
 8002d74:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d12b      	bne.n	8002dd4 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d127      	bne.n	8002dd4 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d8a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d006      	beq.n	8002da0 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	689b      	ldr	r3, [r3, #8]
 8002d98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d119      	bne.n	8002dd4 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	685a      	ldr	r2, [r3, #4]
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f022 0220 	bic.w	r2, r2, #32
 8002dae:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002db4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dc0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d105      	bne.n	8002dd4 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dcc:	f043 0201 	orr.w	r2, r3, #1
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002dd4:	68f8      	ldr	r0, [r7, #12]
 8002dd6:	f7ff fd61 	bl	800289c <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002dda:	e00e      	b.n	8002dfa <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002de0:	f003 0310 	and.w	r3, r3, #16
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d003      	beq.n	8002df0 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002de8:	68f8      	ldr	r0, [r7, #12]
 8002dea:	f7ff fd75 	bl	80028d8 <HAL_ADC_ErrorCallback>
}
 8002dee:	e004      	b.n	8002dfa <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002df4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002df6:	6878      	ldr	r0, [r7, #4]
 8002df8:	4798      	blx	r3
}
 8002dfa:	bf00      	nop
 8002dfc:	3710      	adds	r7, #16
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	bd80      	pop	{r7, pc}

08002e02 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002e02:	b580      	push	{r7, lr}
 8002e04:	b084      	sub	sp, #16
 8002e06:	af00      	add	r7, sp, #0
 8002e08:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e0e:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002e10:	68f8      	ldr	r0, [r7, #12]
 8002e12:	f7ff fd4d 	bl	80028b0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002e16:	bf00      	nop
 8002e18:	3710      	adds	r7, #16
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	bd80      	pop	{r7, pc}

08002e1e <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002e1e:	b580      	push	{r7, lr}
 8002e20:	b084      	sub	sp, #16
 8002e22:	af00      	add	r7, sp, #0
 8002e24:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e2a:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	2240      	movs	r2, #64	; 0x40
 8002e30:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e36:	f043 0204 	orr.w	r2, r3, #4
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002e3e:	68f8      	ldr	r0, [r7, #12]
 8002e40:	f7ff fd4a 	bl	80028d8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002e44:	bf00      	nop
 8002e46:	3710      	adds	r7, #16
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	bd80      	pop	{r7, pc}

08002e4c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002e4c:	b480      	push	{r7}
 8002e4e:	b083      	sub	sp, #12
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8002e54:	bf00      	nop
 8002e56:	370c      	adds	r7, #12
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5e:	4770      	bx	lr

08002e60 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e60:	b480      	push	{r7}
 8002e62:	b085      	sub	sp, #20
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	f003 0307 	and.w	r3, r3, #7
 8002e6e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002e70:	4b0c      	ldr	r3, [pc, #48]	; (8002ea4 <__NVIC_SetPriorityGrouping+0x44>)
 8002e72:	68db      	ldr	r3, [r3, #12]
 8002e74:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002e76:	68ba      	ldr	r2, [r7, #8]
 8002e78:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002e7c:	4013      	ands	r3, r2
 8002e7e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002e84:	68bb      	ldr	r3, [r7, #8]
 8002e86:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002e88:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002e8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e90:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002e92:	4a04      	ldr	r2, [pc, #16]	; (8002ea4 <__NVIC_SetPriorityGrouping+0x44>)
 8002e94:	68bb      	ldr	r3, [r7, #8]
 8002e96:	60d3      	str	r3, [r2, #12]
}
 8002e98:	bf00      	nop
 8002e9a:	3714      	adds	r7, #20
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea2:	4770      	bx	lr
 8002ea4:	e000ed00 	.word	0xe000ed00

08002ea8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002ea8:	b480      	push	{r7}
 8002eaa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002eac:	4b04      	ldr	r3, [pc, #16]	; (8002ec0 <__NVIC_GetPriorityGrouping+0x18>)
 8002eae:	68db      	ldr	r3, [r3, #12]
 8002eb0:	0a1b      	lsrs	r3, r3, #8
 8002eb2:	f003 0307 	and.w	r3, r3, #7
}
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ebe:	4770      	bx	lr
 8002ec0:	e000ed00 	.word	0xe000ed00

08002ec4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ec4:	b480      	push	{r7}
 8002ec6:	b083      	sub	sp, #12
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	4603      	mov	r3, r0
 8002ecc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ece:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	db0b      	blt.n	8002eee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002ed6:	79fb      	ldrb	r3, [r7, #7]
 8002ed8:	f003 021f 	and.w	r2, r3, #31
 8002edc:	4907      	ldr	r1, [pc, #28]	; (8002efc <__NVIC_EnableIRQ+0x38>)
 8002ede:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ee2:	095b      	lsrs	r3, r3, #5
 8002ee4:	2001      	movs	r0, #1
 8002ee6:	fa00 f202 	lsl.w	r2, r0, r2
 8002eea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002eee:	bf00      	nop
 8002ef0:	370c      	adds	r7, #12
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef8:	4770      	bx	lr
 8002efa:	bf00      	nop
 8002efc:	e000e100 	.word	0xe000e100

08002f00 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002f00:	b480      	push	{r7}
 8002f02:	b083      	sub	sp, #12
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	4603      	mov	r3, r0
 8002f08:	6039      	str	r1, [r7, #0]
 8002f0a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	db0a      	blt.n	8002f2a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f14:	683b      	ldr	r3, [r7, #0]
 8002f16:	b2da      	uxtb	r2, r3
 8002f18:	490c      	ldr	r1, [pc, #48]	; (8002f4c <__NVIC_SetPriority+0x4c>)
 8002f1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f1e:	0112      	lsls	r2, r2, #4
 8002f20:	b2d2      	uxtb	r2, r2
 8002f22:	440b      	add	r3, r1
 8002f24:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002f28:	e00a      	b.n	8002f40 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	b2da      	uxtb	r2, r3
 8002f2e:	4908      	ldr	r1, [pc, #32]	; (8002f50 <__NVIC_SetPriority+0x50>)
 8002f30:	79fb      	ldrb	r3, [r7, #7]
 8002f32:	f003 030f 	and.w	r3, r3, #15
 8002f36:	3b04      	subs	r3, #4
 8002f38:	0112      	lsls	r2, r2, #4
 8002f3a:	b2d2      	uxtb	r2, r2
 8002f3c:	440b      	add	r3, r1
 8002f3e:	761a      	strb	r2, [r3, #24]
}
 8002f40:	bf00      	nop
 8002f42:	370c      	adds	r7, #12
 8002f44:	46bd      	mov	sp, r7
 8002f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4a:	4770      	bx	lr
 8002f4c:	e000e100 	.word	0xe000e100
 8002f50:	e000ed00 	.word	0xe000ed00

08002f54 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f54:	b480      	push	{r7}
 8002f56:	b089      	sub	sp, #36	; 0x24
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	60f8      	str	r0, [r7, #12]
 8002f5c:	60b9      	str	r1, [r7, #8]
 8002f5e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	f003 0307 	and.w	r3, r3, #7
 8002f66:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002f68:	69fb      	ldr	r3, [r7, #28]
 8002f6a:	f1c3 0307 	rsb	r3, r3, #7
 8002f6e:	2b04      	cmp	r3, #4
 8002f70:	bf28      	it	cs
 8002f72:	2304      	movcs	r3, #4
 8002f74:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002f76:	69fb      	ldr	r3, [r7, #28]
 8002f78:	3304      	adds	r3, #4
 8002f7a:	2b06      	cmp	r3, #6
 8002f7c:	d902      	bls.n	8002f84 <NVIC_EncodePriority+0x30>
 8002f7e:	69fb      	ldr	r3, [r7, #28]
 8002f80:	3b03      	subs	r3, #3
 8002f82:	e000      	b.n	8002f86 <NVIC_EncodePriority+0x32>
 8002f84:	2300      	movs	r3, #0
 8002f86:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f88:	f04f 32ff 	mov.w	r2, #4294967295
 8002f8c:	69bb      	ldr	r3, [r7, #24]
 8002f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f92:	43da      	mvns	r2, r3
 8002f94:	68bb      	ldr	r3, [r7, #8]
 8002f96:	401a      	ands	r2, r3
 8002f98:	697b      	ldr	r3, [r7, #20]
 8002f9a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002f9c:	f04f 31ff 	mov.w	r1, #4294967295
 8002fa0:	697b      	ldr	r3, [r7, #20]
 8002fa2:	fa01 f303 	lsl.w	r3, r1, r3
 8002fa6:	43d9      	mvns	r1, r3
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002fac:	4313      	orrs	r3, r2
         );
}
 8002fae:	4618      	mov	r0, r3
 8002fb0:	3724      	adds	r7, #36	; 0x24
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb8:	4770      	bx	lr
	...

08002fbc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b082      	sub	sp, #8
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	3b01      	subs	r3, #1
 8002fc8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002fcc:	d301      	bcc.n	8002fd2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002fce:	2301      	movs	r3, #1
 8002fd0:	e00f      	b.n	8002ff2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002fd2:	4a0a      	ldr	r2, [pc, #40]	; (8002ffc <SysTick_Config+0x40>)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	3b01      	subs	r3, #1
 8002fd8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002fda:	210f      	movs	r1, #15
 8002fdc:	f04f 30ff 	mov.w	r0, #4294967295
 8002fe0:	f7ff ff8e 	bl	8002f00 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002fe4:	4b05      	ldr	r3, [pc, #20]	; (8002ffc <SysTick_Config+0x40>)
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002fea:	4b04      	ldr	r3, [pc, #16]	; (8002ffc <SysTick_Config+0x40>)
 8002fec:	2207      	movs	r2, #7
 8002fee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002ff0:	2300      	movs	r3, #0
}
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	3708      	adds	r7, #8
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	bd80      	pop	{r7, pc}
 8002ffa:	bf00      	nop
 8002ffc:	e000e010 	.word	0xe000e010

08003000 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003000:	b580      	push	{r7, lr}
 8003002:	b082      	sub	sp, #8
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003008:	6878      	ldr	r0, [r7, #4]
 800300a:	f7ff ff29 	bl	8002e60 <__NVIC_SetPriorityGrouping>
}
 800300e:	bf00      	nop
 8003010:	3708      	adds	r7, #8
 8003012:	46bd      	mov	sp, r7
 8003014:	bd80      	pop	{r7, pc}

08003016 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003016:	b580      	push	{r7, lr}
 8003018:	b086      	sub	sp, #24
 800301a:	af00      	add	r7, sp, #0
 800301c:	4603      	mov	r3, r0
 800301e:	60b9      	str	r1, [r7, #8]
 8003020:	607a      	str	r2, [r7, #4]
 8003022:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003024:	2300      	movs	r3, #0
 8003026:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003028:	f7ff ff3e 	bl	8002ea8 <__NVIC_GetPriorityGrouping>
 800302c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800302e:	687a      	ldr	r2, [r7, #4]
 8003030:	68b9      	ldr	r1, [r7, #8]
 8003032:	6978      	ldr	r0, [r7, #20]
 8003034:	f7ff ff8e 	bl	8002f54 <NVIC_EncodePriority>
 8003038:	4602      	mov	r2, r0
 800303a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800303e:	4611      	mov	r1, r2
 8003040:	4618      	mov	r0, r3
 8003042:	f7ff ff5d 	bl	8002f00 <__NVIC_SetPriority>
}
 8003046:	bf00      	nop
 8003048:	3718      	adds	r7, #24
 800304a:	46bd      	mov	sp, r7
 800304c:	bd80      	pop	{r7, pc}

0800304e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800304e:	b580      	push	{r7, lr}
 8003050:	b082      	sub	sp, #8
 8003052:	af00      	add	r7, sp, #0
 8003054:	4603      	mov	r3, r0
 8003056:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003058:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800305c:	4618      	mov	r0, r3
 800305e:	f7ff ff31 	bl	8002ec4 <__NVIC_EnableIRQ>
}
 8003062:	bf00      	nop
 8003064:	3708      	adds	r7, #8
 8003066:	46bd      	mov	sp, r7
 8003068:	bd80      	pop	{r7, pc}

0800306a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800306a:	b580      	push	{r7, lr}
 800306c:	b082      	sub	sp, #8
 800306e:	af00      	add	r7, sp, #0
 8003070:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003072:	6878      	ldr	r0, [r7, #4]
 8003074:	f7ff ffa2 	bl	8002fbc <SysTick_Config>
 8003078:	4603      	mov	r3, r0
}
 800307a:	4618      	mov	r0, r3
 800307c:	3708      	adds	r7, #8
 800307e:	46bd      	mov	sp, r7
 8003080:	bd80      	pop	{r7, pc}
	...

08003084 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003084:	b580      	push	{r7, lr}
 8003086:	b086      	sub	sp, #24
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800308c:	2300      	movs	r3, #0
 800308e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003090:	f7ff f9a0 	bl	80023d4 <HAL_GetTick>
 8003094:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	2b00      	cmp	r3, #0
 800309a:	d101      	bne.n	80030a0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800309c:	2301      	movs	r3, #1
 800309e:	e099      	b.n	80031d4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2200      	movs	r2, #0
 80030a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2202      	movs	r2, #2
 80030ac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	681a      	ldr	r2, [r3, #0]
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f022 0201 	bic.w	r2, r2, #1
 80030be:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80030c0:	e00f      	b.n	80030e2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80030c2:	f7ff f987 	bl	80023d4 <HAL_GetTick>
 80030c6:	4602      	mov	r2, r0
 80030c8:	693b      	ldr	r3, [r7, #16]
 80030ca:	1ad3      	subs	r3, r2, r3
 80030cc:	2b05      	cmp	r3, #5
 80030ce:	d908      	bls.n	80030e2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2220      	movs	r2, #32
 80030d4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	2203      	movs	r2, #3
 80030da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80030de:	2303      	movs	r3, #3
 80030e0:	e078      	b.n	80031d4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f003 0301 	and.w	r3, r3, #1
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d1e8      	bne.n	80030c2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80030f8:	697a      	ldr	r2, [r7, #20]
 80030fa:	4b38      	ldr	r3, [pc, #224]	; (80031dc <HAL_DMA_Init+0x158>)
 80030fc:	4013      	ands	r3, r2
 80030fe:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	685a      	ldr	r2, [r3, #4]
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	689b      	ldr	r3, [r3, #8]
 8003108:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800310e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	691b      	ldr	r3, [r3, #16]
 8003114:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800311a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	699b      	ldr	r3, [r3, #24]
 8003120:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003126:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6a1b      	ldr	r3, [r3, #32]
 800312c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800312e:	697a      	ldr	r2, [r7, #20]
 8003130:	4313      	orrs	r3, r2
 8003132:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003138:	2b04      	cmp	r3, #4
 800313a:	d107      	bne.n	800314c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003144:	4313      	orrs	r3, r2
 8003146:	697a      	ldr	r2, [r7, #20]
 8003148:	4313      	orrs	r3, r2
 800314a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	697a      	ldr	r2, [r7, #20]
 8003152:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	695b      	ldr	r3, [r3, #20]
 800315a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800315c:	697b      	ldr	r3, [r7, #20]
 800315e:	f023 0307 	bic.w	r3, r3, #7
 8003162:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003168:	697a      	ldr	r2, [r7, #20]
 800316a:	4313      	orrs	r3, r2
 800316c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003172:	2b04      	cmp	r3, #4
 8003174:	d117      	bne.n	80031a6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800317a:	697a      	ldr	r2, [r7, #20]
 800317c:	4313      	orrs	r3, r2
 800317e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003184:	2b00      	cmp	r3, #0
 8003186:	d00e      	beq.n	80031a6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003188:	6878      	ldr	r0, [r7, #4]
 800318a:	f000 fa91 	bl	80036b0 <DMA_CheckFifoParam>
 800318e:	4603      	mov	r3, r0
 8003190:	2b00      	cmp	r3, #0
 8003192:	d008      	beq.n	80031a6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2240      	movs	r2, #64	; 0x40
 8003198:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	2201      	movs	r2, #1
 800319e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80031a2:	2301      	movs	r3, #1
 80031a4:	e016      	b.n	80031d4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	697a      	ldr	r2, [r7, #20]
 80031ac:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80031ae:	6878      	ldr	r0, [r7, #4]
 80031b0:	f000 fa48 	bl	8003644 <DMA_CalcBaseAndBitshift>
 80031b4:	4603      	mov	r3, r0
 80031b6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031bc:	223f      	movs	r2, #63	; 0x3f
 80031be:	409a      	lsls	r2, r3
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2200      	movs	r2, #0
 80031c8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	2201      	movs	r2, #1
 80031ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80031d2:	2300      	movs	r3, #0
}
 80031d4:	4618      	mov	r0, r3
 80031d6:	3718      	adds	r7, #24
 80031d8:	46bd      	mov	sp, r7
 80031da:	bd80      	pop	{r7, pc}
 80031dc:	f010803f 	.word	0xf010803f

080031e0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	b086      	sub	sp, #24
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	60f8      	str	r0, [r7, #12]
 80031e8:	60b9      	str	r1, [r7, #8]
 80031ea:	607a      	str	r2, [r7, #4]
 80031ec:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80031ee:	2300      	movs	r3, #0
 80031f0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031f6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80031fe:	2b01      	cmp	r3, #1
 8003200:	d101      	bne.n	8003206 <HAL_DMA_Start_IT+0x26>
 8003202:	2302      	movs	r3, #2
 8003204:	e040      	b.n	8003288 <HAL_DMA_Start_IT+0xa8>
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	2201      	movs	r2, #1
 800320a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003214:	b2db      	uxtb	r3, r3
 8003216:	2b01      	cmp	r3, #1
 8003218:	d12f      	bne.n	800327a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	2202      	movs	r2, #2
 800321e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	2200      	movs	r2, #0
 8003226:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003228:	683b      	ldr	r3, [r7, #0]
 800322a:	687a      	ldr	r2, [r7, #4]
 800322c:	68b9      	ldr	r1, [r7, #8]
 800322e:	68f8      	ldr	r0, [r7, #12]
 8003230:	f000 f9da 	bl	80035e8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003238:	223f      	movs	r2, #63	; 0x3f
 800323a:	409a      	lsls	r2, r3
 800323c:	693b      	ldr	r3, [r7, #16]
 800323e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	681a      	ldr	r2, [r3, #0]
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f042 0216 	orr.w	r2, r2, #22
 800324e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003254:	2b00      	cmp	r3, #0
 8003256:	d007      	beq.n	8003268 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	681a      	ldr	r2, [r3, #0]
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f042 0208 	orr.w	r2, r2, #8
 8003266:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	681a      	ldr	r2, [r3, #0]
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f042 0201 	orr.w	r2, r2, #1
 8003276:	601a      	str	r2, [r3, #0]
 8003278:	e005      	b.n	8003286 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	2200      	movs	r2, #0
 800327e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003282:	2302      	movs	r3, #2
 8003284:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003286:	7dfb      	ldrb	r3, [r7, #23]
}
 8003288:	4618      	mov	r0, r3
 800328a:	3718      	adds	r7, #24
 800328c:	46bd      	mov	sp, r7
 800328e:	bd80      	pop	{r7, pc}

08003290 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003290:	b480      	push	{r7}
 8003292:	b083      	sub	sp, #12
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800329e:	b2db      	uxtb	r3, r3
 80032a0:	2b02      	cmp	r3, #2
 80032a2:	d004      	beq.n	80032ae <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2280      	movs	r2, #128	; 0x80
 80032a8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80032aa:	2301      	movs	r3, #1
 80032ac:	e00c      	b.n	80032c8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	2205      	movs	r2, #5
 80032b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	681a      	ldr	r2, [r3, #0]
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f022 0201 	bic.w	r2, r2, #1
 80032c4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80032c6:	2300      	movs	r3, #0
}
 80032c8:	4618      	mov	r0, r3
 80032ca:	370c      	adds	r7, #12
 80032cc:	46bd      	mov	sp, r7
 80032ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d2:	4770      	bx	lr

080032d4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	b086      	sub	sp, #24
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80032dc:	2300      	movs	r3, #0
 80032de:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80032e0:	4b92      	ldr	r3, [pc, #584]	; (800352c <HAL_DMA_IRQHandler+0x258>)
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	4a92      	ldr	r2, [pc, #584]	; (8003530 <HAL_DMA_IRQHandler+0x25c>)
 80032e6:	fba2 2303 	umull	r2, r3, r2, r3
 80032ea:	0a9b      	lsrs	r3, r3, #10
 80032ec:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032f2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80032f4:	693b      	ldr	r3, [r7, #16]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032fe:	2208      	movs	r2, #8
 8003300:	409a      	lsls	r2, r3
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	4013      	ands	r3, r2
 8003306:	2b00      	cmp	r3, #0
 8003308:	d01a      	beq.n	8003340 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f003 0304 	and.w	r3, r3, #4
 8003314:	2b00      	cmp	r3, #0
 8003316:	d013      	beq.n	8003340 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	681a      	ldr	r2, [r3, #0]
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f022 0204 	bic.w	r2, r2, #4
 8003326:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800332c:	2208      	movs	r2, #8
 800332e:	409a      	lsls	r2, r3
 8003330:	693b      	ldr	r3, [r7, #16]
 8003332:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003338:	f043 0201 	orr.w	r2, r3, #1
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003344:	2201      	movs	r2, #1
 8003346:	409a      	lsls	r2, r3
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	4013      	ands	r3, r2
 800334c:	2b00      	cmp	r3, #0
 800334e:	d012      	beq.n	8003376 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	695b      	ldr	r3, [r3, #20]
 8003356:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800335a:	2b00      	cmp	r3, #0
 800335c:	d00b      	beq.n	8003376 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003362:	2201      	movs	r2, #1
 8003364:	409a      	lsls	r2, r3
 8003366:	693b      	ldr	r3, [r7, #16]
 8003368:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800336e:	f043 0202 	orr.w	r2, r3, #2
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800337a:	2204      	movs	r2, #4
 800337c:	409a      	lsls	r2, r3
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	4013      	ands	r3, r2
 8003382:	2b00      	cmp	r3, #0
 8003384:	d012      	beq.n	80033ac <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f003 0302 	and.w	r3, r3, #2
 8003390:	2b00      	cmp	r3, #0
 8003392:	d00b      	beq.n	80033ac <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003398:	2204      	movs	r2, #4
 800339a:	409a      	lsls	r2, r3
 800339c:	693b      	ldr	r3, [r7, #16]
 800339e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033a4:	f043 0204 	orr.w	r2, r3, #4
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033b0:	2210      	movs	r2, #16
 80033b2:	409a      	lsls	r2, r3
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	4013      	ands	r3, r2
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d043      	beq.n	8003444 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f003 0308 	and.w	r3, r3, #8
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d03c      	beq.n	8003444 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033ce:	2210      	movs	r2, #16
 80033d0:	409a      	lsls	r2, r3
 80033d2:	693b      	ldr	r3, [r7, #16]
 80033d4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d018      	beq.n	8003416 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d108      	bne.n	8003404 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d024      	beq.n	8003444 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033fe:	6878      	ldr	r0, [r7, #4]
 8003400:	4798      	blx	r3
 8003402:	e01f      	b.n	8003444 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003408:	2b00      	cmp	r3, #0
 800340a:	d01b      	beq.n	8003444 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003410:	6878      	ldr	r0, [r7, #4]
 8003412:	4798      	blx	r3
 8003414:	e016      	b.n	8003444 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003420:	2b00      	cmp	r3, #0
 8003422:	d107      	bne.n	8003434 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	681a      	ldr	r2, [r3, #0]
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f022 0208 	bic.w	r2, r2, #8
 8003432:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003438:	2b00      	cmp	r3, #0
 800343a:	d003      	beq.n	8003444 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003440:	6878      	ldr	r0, [r7, #4]
 8003442:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003448:	2220      	movs	r2, #32
 800344a:	409a      	lsls	r2, r3
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	4013      	ands	r3, r2
 8003450:	2b00      	cmp	r3, #0
 8003452:	f000 808e 	beq.w	8003572 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f003 0310 	and.w	r3, r3, #16
 8003460:	2b00      	cmp	r3, #0
 8003462:	f000 8086 	beq.w	8003572 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800346a:	2220      	movs	r2, #32
 800346c:	409a      	lsls	r2, r3
 800346e:	693b      	ldr	r3, [r7, #16]
 8003470:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003478:	b2db      	uxtb	r3, r3
 800347a:	2b05      	cmp	r3, #5
 800347c:	d136      	bne.n	80034ec <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	681a      	ldr	r2, [r3, #0]
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f022 0216 	bic.w	r2, r2, #22
 800348c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	695a      	ldr	r2, [r3, #20]
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800349c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d103      	bne.n	80034ae <HAL_DMA_IRQHandler+0x1da>
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d007      	beq.n	80034be <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	681a      	ldr	r2, [r3, #0]
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f022 0208 	bic.w	r2, r2, #8
 80034bc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034c2:	223f      	movs	r2, #63	; 0x3f
 80034c4:	409a      	lsls	r2, r3
 80034c6:	693b      	ldr	r3, [r7, #16]
 80034c8:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	2200      	movs	r2, #0
 80034ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	2201      	movs	r2, #1
 80034d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d07d      	beq.n	80035de <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034e6:	6878      	ldr	r0, [r7, #4]
 80034e8:	4798      	blx	r3
        }
        return;
 80034ea:	e078      	b.n	80035de <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d01c      	beq.n	8003534 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003504:	2b00      	cmp	r3, #0
 8003506:	d108      	bne.n	800351a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800350c:	2b00      	cmp	r3, #0
 800350e:	d030      	beq.n	8003572 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003514:	6878      	ldr	r0, [r7, #4]
 8003516:	4798      	blx	r3
 8003518:	e02b      	b.n	8003572 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800351e:	2b00      	cmp	r3, #0
 8003520:	d027      	beq.n	8003572 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003526:	6878      	ldr	r0, [r7, #4]
 8003528:	4798      	blx	r3
 800352a:	e022      	b.n	8003572 <HAL_DMA_IRQHandler+0x29e>
 800352c:	20000010 	.word	0x20000010
 8003530:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800353e:	2b00      	cmp	r3, #0
 8003540:	d10f      	bne.n	8003562 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	681a      	ldr	r2, [r3, #0]
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f022 0210 	bic.w	r2, r2, #16
 8003550:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	2200      	movs	r2, #0
 8003556:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	2201      	movs	r2, #1
 800355e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003566:	2b00      	cmp	r3, #0
 8003568:	d003      	beq.n	8003572 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800356e:	6878      	ldr	r0, [r7, #4]
 8003570:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003576:	2b00      	cmp	r3, #0
 8003578:	d032      	beq.n	80035e0 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800357e:	f003 0301 	and.w	r3, r3, #1
 8003582:	2b00      	cmp	r3, #0
 8003584:	d022      	beq.n	80035cc <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	2205      	movs	r2, #5
 800358a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	681a      	ldr	r2, [r3, #0]
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f022 0201 	bic.w	r2, r2, #1
 800359c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800359e:	68bb      	ldr	r3, [r7, #8]
 80035a0:	3301      	adds	r3, #1
 80035a2:	60bb      	str	r3, [r7, #8]
 80035a4:	697a      	ldr	r2, [r7, #20]
 80035a6:	429a      	cmp	r2, r3
 80035a8:	d307      	bcc.n	80035ba <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f003 0301 	and.w	r3, r3, #1
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d1f2      	bne.n	800359e <HAL_DMA_IRQHandler+0x2ca>
 80035b8:	e000      	b.n	80035bc <HAL_DMA_IRQHandler+0x2e8>
          break;
 80035ba:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2200      	movs	r2, #0
 80035c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2201      	movs	r2, #1
 80035c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d005      	beq.n	80035e0 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035d8:	6878      	ldr	r0, [r7, #4]
 80035da:	4798      	blx	r3
 80035dc:	e000      	b.n	80035e0 <HAL_DMA_IRQHandler+0x30c>
        return;
 80035de:	bf00      	nop
    }
  }
}
 80035e0:	3718      	adds	r7, #24
 80035e2:	46bd      	mov	sp, r7
 80035e4:	bd80      	pop	{r7, pc}
 80035e6:	bf00      	nop

080035e8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80035e8:	b480      	push	{r7}
 80035ea:	b085      	sub	sp, #20
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	60f8      	str	r0, [r7, #12]
 80035f0:	60b9      	str	r1, [r7, #8]
 80035f2:	607a      	str	r2, [r7, #4]
 80035f4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	681a      	ldr	r2, [r3, #0]
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003604:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	683a      	ldr	r2, [r7, #0]
 800360c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	689b      	ldr	r3, [r3, #8]
 8003612:	2b40      	cmp	r3, #64	; 0x40
 8003614:	d108      	bne.n	8003628 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	687a      	ldr	r2, [r7, #4]
 800361c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	68ba      	ldr	r2, [r7, #8]
 8003624:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003626:	e007      	b.n	8003638 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	68ba      	ldr	r2, [r7, #8]
 800362e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	687a      	ldr	r2, [r7, #4]
 8003636:	60da      	str	r2, [r3, #12]
}
 8003638:	bf00      	nop
 800363a:	3714      	adds	r7, #20
 800363c:	46bd      	mov	sp, r7
 800363e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003642:	4770      	bx	lr

08003644 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003644:	b480      	push	{r7}
 8003646:	b085      	sub	sp, #20
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	b2db      	uxtb	r3, r3
 8003652:	3b10      	subs	r3, #16
 8003654:	4a14      	ldr	r2, [pc, #80]	; (80036a8 <DMA_CalcBaseAndBitshift+0x64>)
 8003656:	fba2 2303 	umull	r2, r3, r2, r3
 800365a:	091b      	lsrs	r3, r3, #4
 800365c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800365e:	4a13      	ldr	r2, [pc, #76]	; (80036ac <DMA_CalcBaseAndBitshift+0x68>)
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	4413      	add	r3, r2
 8003664:	781b      	ldrb	r3, [r3, #0]
 8003666:	461a      	mov	r2, r3
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	2b03      	cmp	r3, #3
 8003670:	d909      	bls.n	8003686 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800367a:	f023 0303 	bic.w	r3, r3, #3
 800367e:	1d1a      	adds	r2, r3, #4
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	659a      	str	r2, [r3, #88]	; 0x58
 8003684:	e007      	b.n	8003696 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800368e:	f023 0303 	bic.w	r3, r3, #3
 8003692:	687a      	ldr	r2, [r7, #4]
 8003694:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800369a:	4618      	mov	r0, r3
 800369c:	3714      	adds	r7, #20
 800369e:	46bd      	mov	sp, r7
 80036a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a4:	4770      	bx	lr
 80036a6:	bf00      	nop
 80036a8:	aaaaaaab 	.word	0xaaaaaaab
 80036ac:	08006b70 	.word	0x08006b70

080036b0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80036b0:	b480      	push	{r7}
 80036b2:	b085      	sub	sp, #20
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80036b8:	2300      	movs	r3, #0
 80036ba:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036c0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	699b      	ldr	r3, [r3, #24]
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d11f      	bne.n	800370a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80036ca:	68bb      	ldr	r3, [r7, #8]
 80036cc:	2b03      	cmp	r3, #3
 80036ce:	d855      	bhi.n	800377c <DMA_CheckFifoParam+0xcc>
 80036d0:	a201      	add	r2, pc, #4	; (adr r2, 80036d8 <DMA_CheckFifoParam+0x28>)
 80036d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036d6:	bf00      	nop
 80036d8:	080036e9 	.word	0x080036e9
 80036dc:	080036fb 	.word	0x080036fb
 80036e0:	080036e9 	.word	0x080036e9
 80036e4:	0800377d 	.word	0x0800377d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036ec:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d045      	beq.n	8003780 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 80036f4:	2301      	movs	r3, #1
 80036f6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80036f8:	e042      	b.n	8003780 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036fe:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003702:	d13f      	bne.n	8003784 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8003704:	2301      	movs	r3, #1
 8003706:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003708:	e03c      	b.n	8003784 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	699b      	ldr	r3, [r3, #24]
 800370e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003712:	d121      	bne.n	8003758 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003714:	68bb      	ldr	r3, [r7, #8]
 8003716:	2b03      	cmp	r3, #3
 8003718:	d836      	bhi.n	8003788 <DMA_CheckFifoParam+0xd8>
 800371a:	a201      	add	r2, pc, #4	; (adr r2, 8003720 <DMA_CheckFifoParam+0x70>)
 800371c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003720:	08003731 	.word	0x08003731
 8003724:	08003737 	.word	0x08003737
 8003728:	08003731 	.word	0x08003731
 800372c:	08003749 	.word	0x08003749
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003730:	2301      	movs	r3, #1
 8003732:	73fb      	strb	r3, [r7, #15]
      break;
 8003734:	e02f      	b.n	8003796 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800373a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800373e:	2b00      	cmp	r3, #0
 8003740:	d024      	beq.n	800378c <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8003742:	2301      	movs	r3, #1
 8003744:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003746:	e021      	b.n	800378c <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800374c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003750:	d11e      	bne.n	8003790 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8003752:	2301      	movs	r3, #1
 8003754:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003756:	e01b      	b.n	8003790 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003758:	68bb      	ldr	r3, [r7, #8]
 800375a:	2b02      	cmp	r3, #2
 800375c:	d902      	bls.n	8003764 <DMA_CheckFifoParam+0xb4>
 800375e:	2b03      	cmp	r3, #3
 8003760:	d003      	beq.n	800376a <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003762:	e018      	b.n	8003796 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8003764:	2301      	movs	r3, #1
 8003766:	73fb      	strb	r3, [r7, #15]
      break;
 8003768:	e015      	b.n	8003796 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800376e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003772:	2b00      	cmp	r3, #0
 8003774:	d00e      	beq.n	8003794 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8003776:	2301      	movs	r3, #1
 8003778:	73fb      	strb	r3, [r7, #15]
      break;
 800377a:	e00b      	b.n	8003794 <DMA_CheckFifoParam+0xe4>
      break;
 800377c:	bf00      	nop
 800377e:	e00a      	b.n	8003796 <DMA_CheckFifoParam+0xe6>
      break;
 8003780:	bf00      	nop
 8003782:	e008      	b.n	8003796 <DMA_CheckFifoParam+0xe6>
      break;
 8003784:	bf00      	nop
 8003786:	e006      	b.n	8003796 <DMA_CheckFifoParam+0xe6>
      break;
 8003788:	bf00      	nop
 800378a:	e004      	b.n	8003796 <DMA_CheckFifoParam+0xe6>
      break;
 800378c:	bf00      	nop
 800378e:	e002      	b.n	8003796 <DMA_CheckFifoParam+0xe6>
      break;   
 8003790:	bf00      	nop
 8003792:	e000      	b.n	8003796 <DMA_CheckFifoParam+0xe6>
      break;
 8003794:	bf00      	nop
    }
  } 
  
  return status; 
 8003796:	7bfb      	ldrb	r3, [r7, #15]
}
 8003798:	4618      	mov	r0, r3
 800379a:	3714      	adds	r7, #20
 800379c:	46bd      	mov	sp, r7
 800379e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a2:	4770      	bx	lr

080037a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80037a4:	b480      	push	{r7}
 80037a6:	b089      	sub	sp, #36	; 0x24
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]
 80037ac:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80037ae:	2300      	movs	r3, #0
 80037b0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80037b2:	2300      	movs	r3, #0
 80037b4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80037b6:	2300      	movs	r3, #0
 80037b8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80037ba:	2300      	movs	r3, #0
 80037bc:	61fb      	str	r3, [r7, #28]
 80037be:	e159      	b.n	8003a74 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80037c0:	2201      	movs	r2, #1
 80037c2:	69fb      	ldr	r3, [r7, #28]
 80037c4:	fa02 f303 	lsl.w	r3, r2, r3
 80037c8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80037ca:	683b      	ldr	r3, [r7, #0]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	697a      	ldr	r2, [r7, #20]
 80037d0:	4013      	ands	r3, r2
 80037d2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80037d4:	693a      	ldr	r2, [r7, #16]
 80037d6:	697b      	ldr	r3, [r7, #20]
 80037d8:	429a      	cmp	r2, r3
 80037da:	f040 8148 	bne.w	8003a6e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80037de:	683b      	ldr	r3, [r7, #0]
 80037e0:	685b      	ldr	r3, [r3, #4]
 80037e2:	2b01      	cmp	r3, #1
 80037e4:	d00b      	beq.n	80037fe <HAL_GPIO_Init+0x5a>
 80037e6:	683b      	ldr	r3, [r7, #0]
 80037e8:	685b      	ldr	r3, [r3, #4]
 80037ea:	2b02      	cmp	r3, #2
 80037ec:	d007      	beq.n	80037fe <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80037ee:	683b      	ldr	r3, [r7, #0]
 80037f0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80037f2:	2b11      	cmp	r3, #17
 80037f4:	d003      	beq.n	80037fe <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80037f6:	683b      	ldr	r3, [r7, #0]
 80037f8:	685b      	ldr	r3, [r3, #4]
 80037fa:	2b12      	cmp	r3, #18
 80037fc:	d130      	bne.n	8003860 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	689b      	ldr	r3, [r3, #8]
 8003802:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003804:	69fb      	ldr	r3, [r7, #28]
 8003806:	005b      	lsls	r3, r3, #1
 8003808:	2203      	movs	r2, #3
 800380a:	fa02 f303 	lsl.w	r3, r2, r3
 800380e:	43db      	mvns	r3, r3
 8003810:	69ba      	ldr	r2, [r7, #24]
 8003812:	4013      	ands	r3, r2
 8003814:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003816:	683b      	ldr	r3, [r7, #0]
 8003818:	68da      	ldr	r2, [r3, #12]
 800381a:	69fb      	ldr	r3, [r7, #28]
 800381c:	005b      	lsls	r3, r3, #1
 800381e:	fa02 f303 	lsl.w	r3, r2, r3
 8003822:	69ba      	ldr	r2, [r7, #24]
 8003824:	4313      	orrs	r3, r2
 8003826:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	69ba      	ldr	r2, [r7, #24]
 800382c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	685b      	ldr	r3, [r3, #4]
 8003832:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003834:	2201      	movs	r2, #1
 8003836:	69fb      	ldr	r3, [r7, #28]
 8003838:	fa02 f303 	lsl.w	r3, r2, r3
 800383c:	43db      	mvns	r3, r3
 800383e:	69ba      	ldr	r2, [r7, #24]
 8003840:	4013      	ands	r3, r2
 8003842:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003844:	683b      	ldr	r3, [r7, #0]
 8003846:	685b      	ldr	r3, [r3, #4]
 8003848:	091b      	lsrs	r3, r3, #4
 800384a:	f003 0201 	and.w	r2, r3, #1
 800384e:	69fb      	ldr	r3, [r7, #28]
 8003850:	fa02 f303 	lsl.w	r3, r2, r3
 8003854:	69ba      	ldr	r2, [r7, #24]
 8003856:	4313      	orrs	r3, r2
 8003858:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	69ba      	ldr	r2, [r7, #24]
 800385e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	68db      	ldr	r3, [r3, #12]
 8003864:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003866:	69fb      	ldr	r3, [r7, #28]
 8003868:	005b      	lsls	r3, r3, #1
 800386a:	2203      	movs	r2, #3
 800386c:	fa02 f303 	lsl.w	r3, r2, r3
 8003870:	43db      	mvns	r3, r3
 8003872:	69ba      	ldr	r2, [r7, #24]
 8003874:	4013      	ands	r3, r2
 8003876:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003878:	683b      	ldr	r3, [r7, #0]
 800387a:	689a      	ldr	r2, [r3, #8]
 800387c:	69fb      	ldr	r3, [r7, #28]
 800387e:	005b      	lsls	r3, r3, #1
 8003880:	fa02 f303 	lsl.w	r3, r2, r3
 8003884:	69ba      	ldr	r2, [r7, #24]
 8003886:	4313      	orrs	r3, r2
 8003888:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	69ba      	ldr	r2, [r7, #24]
 800388e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003890:	683b      	ldr	r3, [r7, #0]
 8003892:	685b      	ldr	r3, [r3, #4]
 8003894:	2b02      	cmp	r3, #2
 8003896:	d003      	beq.n	80038a0 <HAL_GPIO_Init+0xfc>
 8003898:	683b      	ldr	r3, [r7, #0]
 800389a:	685b      	ldr	r3, [r3, #4]
 800389c:	2b12      	cmp	r3, #18
 800389e:	d123      	bne.n	80038e8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80038a0:	69fb      	ldr	r3, [r7, #28]
 80038a2:	08da      	lsrs	r2, r3, #3
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	3208      	adds	r2, #8
 80038a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80038ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80038ae:	69fb      	ldr	r3, [r7, #28]
 80038b0:	f003 0307 	and.w	r3, r3, #7
 80038b4:	009b      	lsls	r3, r3, #2
 80038b6:	220f      	movs	r2, #15
 80038b8:	fa02 f303 	lsl.w	r3, r2, r3
 80038bc:	43db      	mvns	r3, r3
 80038be:	69ba      	ldr	r2, [r7, #24]
 80038c0:	4013      	ands	r3, r2
 80038c2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80038c4:	683b      	ldr	r3, [r7, #0]
 80038c6:	691a      	ldr	r2, [r3, #16]
 80038c8:	69fb      	ldr	r3, [r7, #28]
 80038ca:	f003 0307 	and.w	r3, r3, #7
 80038ce:	009b      	lsls	r3, r3, #2
 80038d0:	fa02 f303 	lsl.w	r3, r2, r3
 80038d4:	69ba      	ldr	r2, [r7, #24]
 80038d6:	4313      	orrs	r3, r2
 80038d8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80038da:	69fb      	ldr	r3, [r7, #28]
 80038dc:	08da      	lsrs	r2, r3, #3
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	3208      	adds	r2, #8
 80038e2:	69b9      	ldr	r1, [r7, #24]
 80038e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80038ee:	69fb      	ldr	r3, [r7, #28]
 80038f0:	005b      	lsls	r3, r3, #1
 80038f2:	2203      	movs	r2, #3
 80038f4:	fa02 f303 	lsl.w	r3, r2, r3
 80038f8:	43db      	mvns	r3, r3
 80038fa:	69ba      	ldr	r2, [r7, #24]
 80038fc:	4013      	ands	r3, r2
 80038fe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003900:	683b      	ldr	r3, [r7, #0]
 8003902:	685b      	ldr	r3, [r3, #4]
 8003904:	f003 0203 	and.w	r2, r3, #3
 8003908:	69fb      	ldr	r3, [r7, #28]
 800390a:	005b      	lsls	r3, r3, #1
 800390c:	fa02 f303 	lsl.w	r3, r2, r3
 8003910:	69ba      	ldr	r2, [r7, #24]
 8003912:	4313      	orrs	r3, r2
 8003914:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	69ba      	ldr	r2, [r7, #24]
 800391a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	685b      	ldr	r3, [r3, #4]
 8003920:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003924:	2b00      	cmp	r3, #0
 8003926:	f000 80a2 	beq.w	8003a6e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800392a:	2300      	movs	r3, #0
 800392c:	60fb      	str	r3, [r7, #12]
 800392e:	4b56      	ldr	r3, [pc, #344]	; (8003a88 <HAL_GPIO_Init+0x2e4>)
 8003930:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003932:	4a55      	ldr	r2, [pc, #340]	; (8003a88 <HAL_GPIO_Init+0x2e4>)
 8003934:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003938:	6453      	str	r3, [r2, #68]	; 0x44
 800393a:	4b53      	ldr	r3, [pc, #332]	; (8003a88 <HAL_GPIO_Init+0x2e4>)
 800393c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800393e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003942:	60fb      	str	r3, [r7, #12]
 8003944:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003946:	4a51      	ldr	r2, [pc, #324]	; (8003a8c <HAL_GPIO_Init+0x2e8>)
 8003948:	69fb      	ldr	r3, [r7, #28]
 800394a:	089b      	lsrs	r3, r3, #2
 800394c:	3302      	adds	r3, #2
 800394e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003952:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003954:	69fb      	ldr	r3, [r7, #28]
 8003956:	f003 0303 	and.w	r3, r3, #3
 800395a:	009b      	lsls	r3, r3, #2
 800395c:	220f      	movs	r2, #15
 800395e:	fa02 f303 	lsl.w	r3, r2, r3
 8003962:	43db      	mvns	r3, r3
 8003964:	69ba      	ldr	r2, [r7, #24]
 8003966:	4013      	ands	r3, r2
 8003968:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	4a48      	ldr	r2, [pc, #288]	; (8003a90 <HAL_GPIO_Init+0x2ec>)
 800396e:	4293      	cmp	r3, r2
 8003970:	d019      	beq.n	80039a6 <HAL_GPIO_Init+0x202>
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	4a47      	ldr	r2, [pc, #284]	; (8003a94 <HAL_GPIO_Init+0x2f0>)
 8003976:	4293      	cmp	r3, r2
 8003978:	d013      	beq.n	80039a2 <HAL_GPIO_Init+0x1fe>
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	4a46      	ldr	r2, [pc, #280]	; (8003a98 <HAL_GPIO_Init+0x2f4>)
 800397e:	4293      	cmp	r3, r2
 8003980:	d00d      	beq.n	800399e <HAL_GPIO_Init+0x1fa>
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	4a45      	ldr	r2, [pc, #276]	; (8003a9c <HAL_GPIO_Init+0x2f8>)
 8003986:	4293      	cmp	r3, r2
 8003988:	d007      	beq.n	800399a <HAL_GPIO_Init+0x1f6>
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	4a44      	ldr	r2, [pc, #272]	; (8003aa0 <HAL_GPIO_Init+0x2fc>)
 800398e:	4293      	cmp	r3, r2
 8003990:	d101      	bne.n	8003996 <HAL_GPIO_Init+0x1f2>
 8003992:	2304      	movs	r3, #4
 8003994:	e008      	b.n	80039a8 <HAL_GPIO_Init+0x204>
 8003996:	2307      	movs	r3, #7
 8003998:	e006      	b.n	80039a8 <HAL_GPIO_Init+0x204>
 800399a:	2303      	movs	r3, #3
 800399c:	e004      	b.n	80039a8 <HAL_GPIO_Init+0x204>
 800399e:	2302      	movs	r3, #2
 80039a0:	e002      	b.n	80039a8 <HAL_GPIO_Init+0x204>
 80039a2:	2301      	movs	r3, #1
 80039a4:	e000      	b.n	80039a8 <HAL_GPIO_Init+0x204>
 80039a6:	2300      	movs	r3, #0
 80039a8:	69fa      	ldr	r2, [r7, #28]
 80039aa:	f002 0203 	and.w	r2, r2, #3
 80039ae:	0092      	lsls	r2, r2, #2
 80039b0:	4093      	lsls	r3, r2
 80039b2:	69ba      	ldr	r2, [r7, #24]
 80039b4:	4313      	orrs	r3, r2
 80039b6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80039b8:	4934      	ldr	r1, [pc, #208]	; (8003a8c <HAL_GPIO_Init+0x2e8>)
 80039ba:	69fb      	ldr	r3, [r7, #28]
 80039bc:	089b      	lsrs	r3, r3, #2
 80039be:	3302      	adds	r3, #2
 80039c0:	69ba      	ldr	r2, [r7, #24]
 80039c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80039c6:	4b37      	ldr	r3, [pc, #220]	; (8003aa4 <HAL_GPIO_Init+0x300>)
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80039cc:	693b      	ldr	r3, [r7, #16]
 80039ce:	43db      	mvns	r3, r3
 80039d0:	69ba      	ldr	r2, [r7, #24]
 80039d2:	4013      	ands	r3, r2
 80039d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80039d6:	683b      	ldr	r3, [r7, #0]
 80039d8:	685b      	ldr	r3, [r3, #4]
 80039da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d003      	beq.n	80039ea <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80039e2:	69ba      	ldr	r2, [r7, #24]
 80039e4:	693b      	ldr	r3, [r7, #16]
 80039e6:	4313      	orrs	r3, r2
 80039e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80039ea:	4a2e      	ldr	r2, [pc, #184]	; (8003aa4 <HAL_GPIO_Init+0x300>)
 80039ec:	69bb      	ldr	r3, [r7, #24]
 80039ee:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80039f0:	4b2c      	ldr	r3, [pc, #176]	; (8003aa4 <HAL_GPIO_Init+0x300>)
 80039f2:	685b      	ldr	r3, [r3, #4]
 80039f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80039f6:	693b      	ldr	r3, [r7, #16]
 80039f8:	43db      	mvns	r3, r3
 80039fa:	69ba      	ldr	r2, [r7, #24]
 80039fc:	4013      	ands	r3, r2
 80039fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003a00:	683b      	ldr	r3, [r7, #0]
 8003a02:	685b      	ldr	r3, [r3, #4]
 8003a04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d003      	beq.n	8003a14 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003a0c:	69ba      	ldr	r2, [r7, #24]
 8003a0e:	693b      	ldr	r3, [r7, #16]
 8003a10:	4313      	orrs	r3, r2
 8003a12:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003a14:	4a23      	ldr	r2, [pc, #140]	; (8003aa4 <HAL_GPIO_Init+0x300>)
 8003a16:	69bb      	ldr	r3, [r7, #24]
 8003a18:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003a1a:	4b22      	ldr	r3, [pc, #136]	; (8003aa4 <HAL_GPIO_Init+0x300>)
 8003a1c:	689b      	ldr	r3, [r3, #8]
 8003a1e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a20:	693b      	ldr	r3, [r7, #16]
 8003a22:	43db      	mvns	r3, r3
 8003a24:	69ba      	ldr	r2, [r7, #24]
 8003a26:	4013      	ands	r3, r2
 8003a28:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003a2a:	683b      	ldr	r3, [r7, #0]
 8003a2c:	685b      	ldr	r3, [r3, #4]
 8003a2e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d003      	beq.n	8003a3e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003a36:	69ba      	ldr	r2, [r7, #24]
 8003a38:	693b      	ldr	r3, [r7, #16]
 8003a3a:	4313      	orrs	r3, r2
 8003a3c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003a3e:	4a19      	ldr	r2, [pc, #100]	; (8003aa4 <HAL_GPIO_Init+0x300>)
 8003a40:	69bb      	ldr	r3, [r7, #24]
 8003a42:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003a44:	4b17      	ldr	r3, [pc, #92]	; (8003aa4 <HAL_GPIO_Init+0x300>)
 8003a46:	68db      	ldr	r3, [r3, #12]
 8003a48:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a4a:	693b      	ldr	r3, [r7, #16]
 8003a4c:	43db      	mvns	r3, r3
 8003a4e:	69ba      	ldr	r2, [r7, #24]
 8003a50:	4013      	ands	r3, r2
 8003a52:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003a54:	683b      	ldr	r3, [r7, #0]
 8003a56:	685b      	ldr	r3, [r3, #4]
 8003a58:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d003      	beq.n	8003a68 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003a60:	69ba      	ldr	r2, [r7, #24]
 8003a62:	693b      	ldr	r3, [r7, #16]
 8003a64:	4313      	orrs	r3, r2
 8003a66:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003a68:	4a0e      	ldr	r2, [pc, #56]	; (8003aa4 <HAL_GPIO_Init+0x300>)
 8003a6a:	69bb      	ldr	r3, [r7, #24]
 8003a6c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003a6e:	69fb      	ldr	r3, [r7, #28]
 8003a70:	3301      	adds	r3, #1
 8003a72:	61fb      	str	r3, [r7, #28]
 8003a74:	69fb      	ldr	r3, [r7, #28]
 8003a76:	2b0f      	cmp	r3, #15
 8003a78:	f67f aea2 	bls.w	80037c0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003a7c:	bf00      	nop
 8003a7e:	3724      	adds	r7, #36	; 0x24
 8003a80:	46bd      	mov	sp, r7
 8003a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a86:	4770      	bx	lr
 8003a88:	40023800 	.word	0x40023800
 8003a8c:	40013800 	.word	0x40013800
 8003a90:	40020000 	.word	0x40020000
 8003a94:	40020400 	.word	0x40020400
 8003a98:	40020800 	.word	0x40020800
 8003a9c:	40020c00 	.word	0x40020c00
 8003aa0:	40021000 	.word	0x40021000
 8003aa4:	40013c00 	.word	0x40013c00

08003aa8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003aa8:	b480      	push	{r7}
 8003aaa:	b085      	sub	sp, #20
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
 8003ab0:	460b      	mov	r3, r1
 8003ab2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	691a      	ldr	r2, [r3, #16]
 8003ab8:	887b      	ldrh	r3, [r7, #2]
 8003aba:	4013      	ands	r3, r2
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d002      	beq.n	8003ac6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003ac0:	2301      	movs	r3, #1
 8003ac2:	73fb      	strb	r3, [r7, #15]
 8003ac4:	e001      	b.n	8003aca <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003ac6:	2300      	movs	r3, #0
 8003ac8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003aca:	7bfb      	ldrb	r3, [r7, #15]
}
 8003acc:	4618      	mov	r0, r3
 8003ace:	3714      	adds	r7, #20
 8003ad0:	46bd      	mov	sp, r7
 8003ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad6:	4770      	bx	lr

08003ad8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003ad8:	b480      	push	{r7}
 8003ada:	b083      	sub	sp, #12
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]
 8003ae0:	460b      	mov	r3, r1
 8003ae2:	807b      	strh	r3, [r7, #2]
 8003ae4:	4613      	mov	r3, r2
 8003ae6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003ae8:	787b      	ldrb	r3, [r7, #1]
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d003      	beq.n	8003af6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003aee:	887a      	ldrh	r2, [r7, #2]
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003af4:	e003      	b.n	8003afe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003af6:	887b      	ldrh	r3, [r7, #2]
 8003af8:	041a      	lsls	r2, r3, #16
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	619a      	str	r2, [r3, #24]
}
 8003afe:	bf00      	nop
 8003b00:	370c      	adds	r7, #12
 8003b02:	46bd      	mov	sp, r7
 8003b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b08:	4770      	bx	lr
	...

08003b0c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003b0c:	b580      	push	{r7, lr}
 8003b0e:	b086      	sub	sp, #24
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d101      	bne.n	8003b1e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003b1a:	2301      	movs	r3, #1
 8003b1c:	e25b      	b.n	8003fd6 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f003 0301 	and.w	r3, r3, #1
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d075      	beq.n	8003c16 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003b2a:	4ba3      	ldr	r3, [pc, #652]	; (8003db8 <HAL_RCC_OscConfig+0x2ac>)
 8003b2c:	689b      	ldr	r3, [r3, #8]
 8003b2e:	f003 030c 	and.w	r3, r3, #12
 8003b32:	2b04      	cmp	r3, #4
 8003b34:	d00c      	beq.n	8003b50 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003b36:	4ba0      	ldr	r3, [pc, #640]	; (8003db8 <HAL_RCC_OscConfig+0x2ac>)
 8003b38:	689b      	ldr	r3, [r3, #8]
 8003b3a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003b3e:	2b08      	cmp	r3, #8
 8003b40:	d112      	bne.n	8003b68 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003b42:	4b9d      	ldr	r3, [pc, #628]	; (8003db8 <HAL_RCC_OscConfig+0x2ac>)
 8003b44:	685b      	ldr	r3, [r3, #4]
 8003b46:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b4a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003b4e:	d10b      	bne.n	8003b68 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b50:	4b99      	ldr	r3, [pc, #612]	; (8003db8 <HAL_RCC_OscConfig+0x2ac>)
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d05b      	beq.n	8003c14 <HAL_RCC_OscConfig+0x108>
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	685b      	ldr	r3, [r3, #4]
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d157      	bne.n	8003c14 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003b64:	2301      	movs	r3, #1
 8003b66:	e236      	b.n	8003fd6 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	685b      	ldr	r3, [r3, #4]
 8003b6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b70:	d106      	bne.n	8003b80 <HAL_RCC_OscConfig+0x74>
 8003b72:	4b91      	ldr	r3, [pc, #580]	; (8003db8 <HAL_RCC_OscConfig+0x2ac>)
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	4a90      	ldr	r2, [pc, #576]	; (8003db8 <HAL_RCC_OscConfig+0x2ac>)
 8003b78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b7c:	6013      	str	r3, [r2, #0]
 8003b7e:	e01d      	b.n	8003bbc <HAL_RCC_OscConfig+0xb0>
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	685b      	ldr	r3, [r3, #4]
 8003b84:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003b88:	d10c      	bne.n	8003ba4 <HAL_RCC_OscConfig+0x98>
 8003b8a:	4b8b      	ldr	r3, [pc, #556]	; (8003db8 <HAL_RCC_OscConfig+0x2ac>)
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	4a8a      	ldr	r2, [pc, #552]	; (8003db8 <HAL_RCC_OscConfig+0x2ac>)
 8003b90:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003b94:	6013      	str	r3, [r2, #0]
 8003b96:	4b88      	ldr	r3, [pc, #544]	; (8003db8 <HAL_RCC_OscConfig+0x2ac>)
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	4a87      	ldr	r2, [pc, #540]	; (8003db8 <HAL_RCC_OscConfig+0x2ac>)
 8003b9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ba0:	6013      	str	r3, [r2, #0]
 8003ba2:	e00b      	b.n	8003bbc <HAL_RCC_OscConfig+0xb0>
 8003ba4:	4b84      	ldr	r3, [pc, #528]	; (8003db8 <HAL_RCC_OscConfig+0x2ac>)
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	4a83      	ldr	r2, [pc, #524]	; (8003db8 <HAL_RCC_OscConfig+0x2ac>)
 8003baa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003bae:	6013      	str	r3, [r2, #0]
 8003bb0:	4b81      	ldr	r3, [pc, #516]	; (8003db8 <HAL_RCC_OscConfig+0x2ac>)
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	4a80      	ldr	r2, [pc, #512]	; (8003db8 <HAL_RCC_OscConfig+0x2ac>)
 8003bb6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003bba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	685b      	ldr	r3, [r3, #4]
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d013      	beq.n	8003bec <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bc4:	f7fe fc06 	bl	80023d4 <HAL_GetTick>
 8003bc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003bca:	e008      	b.n	8003bde <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003bcc:	f7fe fc02 	bl	80023d4 <HAL_GetTick>
 8003bd0:	4602      	mov	r2, r0
 8003bd2:	693b      	ldr	r3, [r7, #16]
 8003bd4:	1ad3      	subs	r3, r2, r3
 8003bd6:	2b64      	cmp	r3, #100	; 0x64
 8003bd8:	d901      	bls.n	8003bde <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003bda:	2303      	movs	r3, #3
 8003bdc:	e1fb      	b.n	8003fd6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003bde:	4b76      	ldr	r3, [pc, #472]	; (8003db8 <HAL_RCC_OscConfig+0x2ac>)
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d0f0      	beq.n	8003bcc <HAL_RCC_OscConfig+0xc0>
 8003bea:	e014      	b.n	8003c16 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bec:	f7fe fbf2 	bl	80023d4 <HAL_GetTick>
 8003bf0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003bf2:	e008      	b.n	8003c06 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003bf4:	f7fe fbee 	bl	80023d4 <HAL_GetTick>
 8003bf8:	4602      	mov	r2, r0
 8003bfa:	693b      	ldr	r3, [r7, #16]
 8003bfc:	1ad3      	subs	r3, r2, r3
 8003bfe:	2b64      	cmp	r3, #100	; 0x64
 8003c00:	d901      	bls.n	8003c06 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003c02:	2303      	movs	r3, #3
 8003c04:	e1e7      	b.n	8003fd6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c06:	4b6c      	ldr	r3, [pc, #432]	; (8003db8 <HAL_RCC_OscConfig+0x2ac>)
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d1f0      	bne.n	8003bf4 <HAL_RCC_OscConfig+0xe8>
 8003c12:	e000      	b.n	8003c16 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c14:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f003 0302 	and.w	r3, r3, #2
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d063      	beq.n	8003cea <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003c22:	4b65      	ldr	r3, [pc, #404]	; (8003db8 <HAL_RCC_OscConfig+0x2ac>)
 8003c24:	689b      	ldr	r3, [r3, #8]
 8003c26:	f003 030c 	and.w	r3, r3, #12
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d00b      	beq.n	8003c46 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003c2e:	4b62      	ldr	r3, [pc, #392]	; (8003db8 <HAL_RCC_OscConfig+0x2ac>)
 8003c30:	689b      	ldr	r3, [r3, #8]
 8003c32:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003c36:	2b08      	cmp	r3, #8
 8003c38:	d11c      	bne.n	8003c74 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003c3a:	4b5f      	ldr	r3, [pc, #380]	; (8003db8 <HAL_RCC_OscConfig+0x2ac>)
 8003c3c:	685b      	ldr	r3, [r3, #4]
 8003c3e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d116      	bne.n	8003c74 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c46:	4b5c      	ldr	r3, [pc, #368]	; (8003db8 <HAL_RCC_OscConfig+0x2ac>)
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f003 0302 	and.w	r3, r3, #2
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d005      	beq.n	8003c5e <HAL_RCC_OscConfig+0x152>
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	68db      	ldr	r3, [r3, #12]
 8003c56:	2b01      	cmp	r3, #1
 8003c58:	d001      	beq.n	8003c5e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003c5a:	2301      	movs	r3, #1
 8003c5c:	e1bb      	b.n	8003fd6 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c5e:	4b56      	ldr	r3, [pc, #344]	; (8003db8 <HAL_RCC_OscConfig+0x2ac>)
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	691b      	ldr	r3, [r3, #16]
 8003c6a:	00db      	lsls	r3, r3, #3
 8003c6c:	4952      	ldr	r1, [pc, #328]	; (8003db8 <HAL_RCC_OscConfig+0x2ac>)
 8003c6e:	4313      	orrs	r3, r2
 8003c70:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c72:	e03a      	b.n	8003cea <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	68db      	ldr	r3, [r3, #12]
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d020      	beq.n	8003cbe <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003c7c:	4b4f      	ldr	r3, [pc, #316]	; (8003dbc <HAL_RCC_OscConfig+0x2b0>)
 8003c7e:	2201      	movs	r2, #1
 8003c80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c82:	f7fe fba7 	bl	80023d4 <HAL_GetTick>
 8003c86:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c88:	e008      	b.n	8003c9c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003c8a:	f7fe fba3 	bl	80023d4 <HAL_GetTick>
 8003c8e:	4602      	mov	r2, r0
 8003c90:	693b      	ldr	r3, [r7, #16]
 8003c92:	1ad3      	subs	r3, r2, r3
 8003c94:	2b02      	cmp	r3, #2
 8003c96:	d901      	bls.n	8003c9c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003c98:	2303      	movs	r3, #3
 8003c9a:	e19c      	b.n	8003fd6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c9c:	4b46      	ldr	r3, [pc, #280]	; (8003db8 <HAL_RCC_OscConfig+0x2ac>)
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f003 0302 	and.w	r3, r3, #2
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d0f0      	beq.n	8003c8a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ca8:	4b43      	ldr	r3, [pc, #268]	; (8003db8 <HAL_RCC_OscConfig+0x2ac>)
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	691b      	ldr	r3, [r3, #16]
 8003cb4:	00db      	lsls	r3, r3, #3
 8003cb6:	4940      	ldr	r1, [pc, #256]	; (8003db8 <HAL_RCC_OscConfig+0x2ac>)
 8003cb8:	4313      	orrs	r3, r2
 8003cba:	600b      	str	r3, [r1, #0]
 8003cbc:	e015      	b.n	8003cea <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003cbe:	4b3f      	ldr	r3, [pc, #252]	; (8003dbc <HAL_RCC_OscConfig+0x2b0>)
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cc4:	f7fe fb86 	bl	80023d4 <HAL_GetTick>
 8003cc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003cca:	e008      	b.n	8003cde <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003ccc:	f7fe fb82 	bl	80023d4 <HAL_GetTick>
 8003cd0:	4602      	mov	r2, r0
 8003cd2:	693b      	ldr	r3, [r7, #16]
 8003cd4:	1ad3      	subs	r3, r2, r3
 8003cd6:	2b02      	cmp	r3, #2
 8003cd8:	d901      	bls.n	8003cde <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003cda:	2303      	movs	r3, #3
 8003cdc:	e17b      	b.n	8003fd6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003cde:	4b36      	ldr	r3, [pc, #216]	; (8003db8 <HAL_RCC_OscConfig+0x2ac>)
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f003 0302 	and.w	r3, r3, #2
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d1f0      	bne.n	8003ccc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f003 0308 	and.w	r3, r3, #8
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d030      	beq.n	8003d58 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	695b      	ldr	r3, [r3, #20]
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d016      	beq.n	8003d2c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003cfe:	4b30      	ldr	r3, [pc, #192]	; (8003dc0 <HAL_RCC_OscConfig+0x2b4>)
 8003d00:	2201      	movs	r2, #1
 8003d02:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d04:	f7fe fb66 	bl	80023d4 <HAL_GetTick>
 8003d08:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d0a:	e008      	b.n	8003d1e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003d0c:	f7fe fb62 	bl	80023d4 <HAL_GetTick>
 8003d10:	4602      	mov	r2, r0
 8003d12:	693b      	ldr	r3, [r7, #16]
 8003d14:	1ad3      	subs	r3, r2, r3
 8003d16:	2b02      	cmp	r3, #2
 8003d18:	d901      	bls.n	8003d1e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003d1a:	2303      	movs	r3, #3
 8003d1c:	e15b      	b.n	8003fd6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d1e:	4b26      	ldr	r3, [pc, #152]	; (8003db8 <HAL_RCC_OscConfig+0x2ac>)
 8003d20:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d22:	f003 0302 	and.w	r3, r3, #2
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d0f0      	beq.n	8003d0c <HAL_RCC_OscConfig+0x200>
 8003d2a:	e015      	b.n	8003d58 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003d2c:	4b24      	ldr	r3, [pc, #144]	; (8003dc0 <HAL_RCC_OscConfig+0x2b4>)
 8003d2e:	2200      	movs	r2, #0
 8003d30:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d32:	f7fe fb4f 	bl	80023d4 <HAL_GetTick>
 8003d36:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d38:	e008      	b.n	8003d4c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003d3a:	f7fe fb4b 	bl	80023d4 <HAL_GetTick>
 8003d3e:	4602      	mov	r2, r0
 8003d40:	693b      	ldr	r3, [r7, #16]
 8003d42:	1ad3      	subs	r3, r2, r3
 8003d44:	2b02      	cmp	r3, #2
 8003d46:	d901      	bls.n	8003d4c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003d48:	2303      	movs	r3, #3
 8003d4a:	e144      	b.n	8003fd6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d4c:	4b1a      	ldr	r3, [pc, #104]	; (8003db8 <HAL_RCC_OscConfig+0x2ac>)
 8003d4e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d50:	f003 0302 	and.w	r3, r3, #2
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d1f0      	bne.n	8003d3a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f003 0304 	and.w	r3, r3, #4
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	f000 80a0 	beq.w	8003ea6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d66:	2300      	movs	r3, #0
 8003d68:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003d6a:	4b13      	ldr	r3, [pc, #76]	; (8003db8 <HAL_RCC_OscConfig+0x2ac>)
 8003d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d10f      	bne.n	8003d96 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d76:	2300      	movs	r3, #0
 8003d78:	60bb      	str	r3, [r7, #8]
 8003d7a:	4b0f      	ldr	r3, [pc, #60]	; (8003db8 <HAL_RCC_OscConfig+0x2ac>)
 8003d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d7e:	4a0e      	ldr	r2, [pc, #56]	; (8003db8 <HAL_RCC_OscConfig+0x2ac>)
 8003d80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d84:	6413      	str	r3, [r2, #64]	; 0x40
 8003d86:	4b0c      	ldr	r3, [pc, #48]	; (8003db8 <HAL_RCC_OscConfig+0x2ac>)
 8003d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d8e:	60bb      	str	r3, [r7, #8]
 8003d90:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d92:	2301      	movs	r3, #1
 8003d94:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d96:	4b0b      	ldr	r3, [pc, #44]	; (8003dc4 <HAL_RCC_OscConfig+0x2b8>)
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d121      	bne.n	8003de6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003da2:	4b08      	ldr	r3, [pc, #32]	; (8003dc4 <HAL_RCC_OscConfig+0x2b8>)
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	4a07      	ldr	r2, [pc, #28]	; (8003dc4 <HAL_RCC_OscConfig+0x2b8>)
 8003da8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003dac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003dae:	f7fe fb11 	bl	80023d4 <HAL_GetTick>
 8003db2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003db4:	e011      	b.n	8003dda <HAL_RCC_OscConfig+0x2ce>
 8003db6:	bf00      	nop
 8003db8:	40023800 	.word	0x40023800
 8003dbc:	42470000 	.word	0x42470000
 8003dc0:	42470e80 	.word	0x42470e80
 8003dc4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003dc8:	f7fe fb04 	bl	80023d4 <HAL_GetTick>
 8003dcc:	4602      	mov	r2, r0
 8003dce:	693b      	ldr	r3, [r7, #16]
 8003dd0:	1ad3      	subs	r3, r2, r3
 8003dd2:	2b02      	cmp	r3, #2
 8003dd4:	d901      	bls.n	8003dda <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003dd6:	2303      	movs	r3, #3
 8003dd8:	e0fd      	b.n	8003fd6 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003dda:	4b81      	ldr	r3, [pc, #516]	; (8003fe0 <HAL_RCC_OscConfig+0x4d4>)
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d0f0      	beq.n	8003dc8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	689b      	ldr	r3, [r3, #8]
 8003dea:	2b01      	cmp	r3, #1
 8003dec:	d106      	bne.n	8003dfc <HAL_RCC_OscConfig+0x2f0>
 8003dee:	4b7d      	ldr	r3, [pc, #500]	; (8003fe4 <HAL_RCC_OscConfig+0x4d8>)
 8003df0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003df2:	4a7c      	ldr	r2, [pc, #496]	; (8003fe4 <HAL_RCC_OscConfig+0x4d8>)
 8003df4:	f043 0301 	orr.w	r3, r3, #1
 8003df8:	6713      	str	r3, [r2, #112]	; 0x70
 8003dfa:	e01c      	b.n	8003e36 <HAL_RCC_OscConfig+0x32a>
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	689b      	ldr	r3, [r3, #8]
 8003e00:	2b05      	cmp	r3, #5
 8003e02:	d10c      	bne.n	8003e1e <HAL_RCC_OscConfig+0x312>
 8003e04:	4b77      	ldr	r3, [pc, #476]	; (8003fe4 <HAL_RCC_OscConfig+0x4d8>)
 8003e06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e08:	4a76      	ldr	r2, [pc, #472]	; (8003fe4 <HAL_RCC_OscConfig+0x4d8>)
 8003e0a:	f043 0304 	orr.w	r3, r3, #4
 8003e0e:	6713      	str	r3, [r2, #112]	; 0x70
 8003e10:	4b74      	ldr	r3, [pc, #464]	; (8003fe4 <HAL_RCC_OscConfig+0x4d8>)
 8003e12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e14:	4a73      	ldr	r2, [pc, #460]	; (8003fe4 <HAL_RCC_OscConfig+0x4d8>)
 8003e16:	f043 0301 	orr.w	r3, r3, #1
 8003e1a:	6713      	str	r3, [r2, #112]	; 0x70
 8003e1c:	e00b      	b.n	8003e36 <HAL_RCC_OscConfig+0x32a>
 8003e1e:	4b71      	ldr	r3, [pc, #452]	; (8003fe4 <HAL_RCC_OscConfig+0x4d8>)
 8003e20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e22:	4a70      	ldr	r2, [pc, #448]	; (8003fe4 <HAL_RCC_OscConfig+0x4d8>)
 8003e24:	f023 0301 	bic.w	r3, r3, #1
 8003e28:	6713      	str	r3, [r2, #112]	; 0x70
 8003e2a:	4b6e      	ldr	r3, [pc, #440]	; (8003fe4 <HAL_RCC_OscConfig+0x4d8>)
 8003e2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e2e:	4a6d      	ldr	r2, [pc, #436]	; (8003fe4 <HAL_RCC_OscConfig+0x4d8>)
 8003e30:	f023 0304 	bic.w	r3, r3, #4
 8003e34:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	689b      	ldr	r3, [r3, #8]
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d015      	beq.n	8003e6a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e3e:	f7fe fac9 	bl	80023d4 <HAL_GetTick>
 8003e42:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e44:	e00a      	b.n	8003e5c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003e46:	f7fe fac5 	bl	80023d4 <HAL_GetTick>
 8003e4a:	4602      	mov	r2, r0
 8003e4c:	693b      	ldr	r3, [r7, #16]
 8003e4e:	1ad3      	subs	r3, r2, r3
 8003e50:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e54:	4293      	cmp	r3, r2
 8003e56:	d901      	bls.n	8003e5c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003e58:	2303      	movs	r3, #3
 8003e5a:	e0bc      	b.n	8003fd6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e5c:	4b61      	ldr	r3, [pc, #388]	; (8003fe4 <HAL_RCC_OscConfig+0x4d8>)
 8003e5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e60:	f003 0302 	and.w	r3, r3, #2
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d0ee      	beq.n	8003e46 <HAL_RCC_OscConfig+0x33a>
 8003e68:	e014      	b.n	8003e94 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e6a:	f7fe fab3 	bl	80023d4 <HAL_GetTick>
 8003e6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e70:	e00a      	b.n	8003e88 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003e72:	f7fe faaf 	bl	80023d4 <HAL_GetTick>
 8003e76:	4602      	mov	r2, r0
 8003e78:	693b      	ldr	r3, [r7, #16]
 8003e7a:	1ad3      	subs	r3, r2, r3
 8003e7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e80:	4293      	cmp	r3, r2
 8003e82:	d901      	bls.n	8003e88 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003e84:	2303      	movs	r3, #3
 8003e86:	e0a6      	b.n	8003fd6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e88:	4b56      	ldr	r3, [pc, #344]	; (8003fe4 <HAL_RCC_OscConfig+0x4d8>)
 8003e8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e8c:	f003 0302 	and.w	r3, r3, #2
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d1ee      	bne.n	8003e72 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003e94:	7dfb      	ldrb	r3, [r7, #23]
 8003e96:	2b01      	cmp	r3, #1
 8003e98:	d105      	bne.n	8003ea6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e9a:	4b52      	ldr	r3, [pc, #328]	; (8003fe4 <HAL_RCC_OscConfig+0x4d8>)
 8003e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e9e:	4a51      	ldr	r2, [pc, #324]	; (8003fe4 <HAL_RCC_OscConfig+0x4d8>)
 8003ea0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ea4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	699b      	ldr	r3, [r3, #24]
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	f000 8092 	beq.w	8003fd4 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003eb0:	4b4c      	ldr	r3, [pc, #304]	; (8003fe4 <HAL_RCC_OscConfig+0x4d8>)
 8003eb2:	689b      	ldr	r3, [r3, #8]
 8003eb4:	f003 030c 	and.w	r3, r3, #12
 8003eb8:	2b08      	cmp	r3, #8
 8003eba:	d05c      	beq.n	8003f76 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	699b      	ldr	r3, [r3, #24]
 8003ec0:	2b02      	cmp	r3, #2
 8003ec2:	d141      	bne.n	8003f48 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ec4:	4b48      	ldr	r3, [pc, #288]	; (8003fe8 <HAL_RCC_OscConfig+0x4dc>)
 8003ec6:	2200      	movs	r2, #0
 8003ec8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003eca:	f7fe fa83 	bl	80023d4 <HAL_GetTick>
 8003ece:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ed0:	e008      	b.n	8003ee4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ed2:	f7fe fa7f 	bl	80023d4 <HAL_GetTick>
 8003ed6:	4602      	mov	r2, r0
 8003ed8:	693b      	ldr	r3, [r7, #16]
 8003eda:	1ad3      	subs	r3, r2, r3
 8003edc:	2b02      	cmp	r3, #2
 8003ede:	d901      	bls.n	8003ee4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003ee0:	2303      	movs	r3, #3
 8003ee2:	e078      	b.n	8003fd6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ee4:	4b3f      	ldr	r3, [pc, #252]	; (8003fe4 <HAL_RCC_OscConfig+0x4d8>)
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d1f0      	bne.n	8003ed2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	69da      	ldr	r2, [r3, #28]
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	6a1b      	ldr	r3, [r3, #32]
 8003ef8:	431a      	orrs	r2, r3
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003efe:	019b      	lsls	r3, r3, #6
 8003f00:	431a      	orrs	r2, r3
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f06:	085b      	lsrs	r3, r3, #1
 8003f08:	3b01      	subs	r3, #1
 8003f0a:	041b      	lsls	r3, r3, #16
 8003f0c:	431a      	orrs	r2, r3
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f12:	061b      	lsls	r3, r3, #24
 8003f14:	4933      	ldr	r1, [pc, #204]	; (8003fe4 <HAL_RCC_OscConfig+0x4d8>)
 8003f16:	4313      	orrs	r3, r2
 8003f18:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003f1a:	4b33      	ldr	r3, [pc, #204]	; (8003fe8 <HAL_RCC_OscConfig+0x4dc>)
 8003f1c:	2201      	movs	r2, #1
 8003f1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f20:	f7fe fa58 	bl	80023d4 <HAL_GetTick>
 8003f24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f26:	e008      	b.n	8003f3a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f28:	f7fe fa54 	bl	80023d4 <HAL_GetTick>
 8003f2c:	4602      	mov	r2, r0
 8003f2e:	693b      	ldr	r3, [r7, #16]
 8003f30:	1ad3      	subs	r3, r2, r3
 8003f32:	2b02      	cmp	r3, #2
 8003f34:	d901      	bls.n	8003f3a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003f36:	2303      	movs	r3, #3
 8003f38:	e04d      	b.n	8003fd6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f3a:	4b2a      	ldr	r3, [pc, #168]	; (8003fe4 <HAL_RCC_OscConfig+0x4d8>)
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d0f0      	beq.n	8003f28 <HAL_RCC_OscConfig+0x41c>
 8003f46:	e045      	b.n	8003fd4 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f48:	4b27      	ldr	r3, [pc, #156]	; (8003fe8 <HAL_RCC_OscConfig+0x4dc>)
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f4e:	f7fe fa41 	bl	80023d4 <HAL_GetTick>
 8003f52:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f54:	e008      	b.n	8003f68 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f56:	f7fe fa3d 	bl	80023d4 <HAL_GetTick>
 8003f5a:	4602      	mov	r2, r0
 8003f5c:	693b      	ldr	r3, [r7, #16]
 8003f5e:	1ad3      	subs	r3, r2, r3
 8003f60:	2b02      	cmp	r3, #2
 8003f62:	d901      	bls.n	8003f68 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003f64:	2303      	movs	r3, #3
 8003f66:	e036      	b.n	8003fd6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f68:	4b1e      	ldr	r3, [pc, #120]	; (8003fe4 <HAL_RCC_OscConfig+0x4d8>)
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d1f0      	bne.n	8003f56 <HAL_RCC_OscConfig+0x44a>
 8003f74:	e02e      	b.n	8003fd4 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	699b      	ldr	r3, [r3, #24]
 8003f7a:	2b01      	cmp	r3, #1
 8003f7c:	d101      	bne.n	8003f82 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003f7e:	2301      	movs	r3, #1
 8003f80:	e029      	b.n	8003fd6 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003f82:	4b18      	ldr	r3, [pc, #96]	; (8003fe4 <HAL_RCC_OscConfig+0x4d8>)
 8003f84:	685b      	ldr	r3, [r3, #4]
 8003f86:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	69db      	ldr	r3, [r3, #28]
 8003f92:	429a      	cmp	r2, r3
 8003f94:	d11c      	bne.n	8003fd0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003fa0:	429a      	cmp	r2, r3
 8003fa2:	d115      	bne.n	8003fd0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003fa4:	68fa      	ldr	r2, [r7, #12]
 8003fa6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003faa:	4013      	ands	r3, r2
 8003fac:	687a      	ldr	r2, [r7, #4]
 8003fae:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003fb0:	4293      	cmp	r3, r2
 8003fb2:	d10d      	bne.n	8003fd0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003fbe:	429a      	cmp	r2, r3
 8003fc0:	d106      	bne.n	8003fd0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003fcc:	429a      	cmp	r2, r3
 8003fce:	d001      	beq.n	8003fd4 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8003fd0:	2301      	movs	r3, #1
 8003fd2:	e000      	b.n	8003fd6 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8003fd4:	2300      	movs	r3, #0
}
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	3718      	adds	r7, #24
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	bd80      	pop	{r7, pc}
 8003fde:	bf00      	nop
 8003fe0:	40007000 	.word	0x40007000
 8003fe4:	40023800 	.word	0x40023800
 8003fe8:	42470060 	.word	0x42470060

08003fec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003fec:	b580      	push	{r7, lr}
 8003fee:	b084      	sub	sp, #16
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]
 8003ff4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d101      	bne.n	8004000 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003ffc:	2301      	movs	r3, #1
 8003ffe:	e0cc      	b.n	800419a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004000:	4b68      	ldr	r3, [pc, #416]	; (80041a4 <HAL_RCC_ClockConfig+0x1b8>)
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f003 030f 	and.w	r3, r3, #15
 8004008:	683a      	ldr	r2, [r7, #0]
 800400a:	429a      	cmp	r2, r3
 800400c:	d90c      	bls.n	8004028 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800400e:	4b65      	ldr	r3, [pc, #404]	; (80041a4 <HAL_RCC_ClockConfig+0x1b8>)
 8004010:	683a      	ldr	r2, [r7, #0]
 8004012:	b2d2      	uxtb	r2, r2
 8004014:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004016:	4b63      	ldr	r3, [pc, #396]	; (80041a4 <HAL_RCC_ClockConfig+0x1b8>)
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f003 030f 	and.w	r3, r3, #15
 800401e:	683a      	ldr	r2, [r7, #0]
 8004020:	429a      	cmp	r2, r3
 8004022:	d001      	beq.n	8004028 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004024:	2301      	movs	r3, #1
 8004026:	e0b8      	b.n	800419a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f003 0302 	and.w	r3, r3, #2
 8004030:	2b00      	cmp	r3, #0
 8004032:	d020      	beq.n	8004076 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f003 0304 	and.w	r3, r3, #4
 800403c:	2b00      	cmp	r3, #0
 800403e:	d005      	beq.n	800404c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004040:	4b59      	ldr	r3, [pc, #356]	; (80041a8 <HAL_RCC_ClockConfig+0x1bc>)
 8004042:	689b      	ldr	r3, [r3, #8]
 8004044:	4a58      	ldr	r2, [pc, #352]	; (80041a8 <HAL_RCC_ClockConfig+0x1bc>)
 8004046:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800404a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f003 0308 	and.w	r3, r3, #8
 8004054:	2b00      	cmp	r3, #0
 8004056:	d005      	beq.n	8004064 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004058:	4b53      	ldr	r3, [pc, #332]	; (80041a8 <HAL_RCC_ClockConfig+0x1bc>)
 800405a:	689b      	ldr	r3, [r3, #8]
 800405c:	4a52      	ldr	r2, [pc, #328]	; (80041a8 <HAL_RCC_ClockConfig+0x1bc>)
 800405e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004062:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004064:	4b50      	ldr	r3, [pc, #320]	; (80041a8 <HAL_RCC_ClockConfig+0x1bc>)
 8004066:	689b      	ldr	r3, [r3, #8]
 8004068:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	689b      	ldr	r3, [r3, #8]
 8004070:	494d      	ldr	r1, [pc, #308]	; (80041a8 <HAL_RCC_ClockConfig+0x1bc>)
 8004072:	4313      	orrs	r3, r2
 8004074:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f003 0301 	and.w	r3, r3, #1
 800407e:	2b00      	cmp	r3, #0
 8004080:	d044      	beq.n	800410c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	685b      	ldr	r3, [r3, #4]
 8004086:	2b01      	cmp	r3, #1
 8004088:	d107      	bne.n	800409a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800408a:	4b47      	ldr	r3, [pc, #284]	; (80041a8 <HAL_RCC_ClockConfig+0x1bc>)
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004092:	2b00      	cmp	r3, #0
 8004094:	d119      	bne.n	80040ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004096:	2301      	movs	r3, #1
 8004098:	e07f      	b.n	800419a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	685b      	ldr	r3, [r3, #4]
 800409e:	2b02      	cmp	r3, #2
 80040a0:	d003      	beq.n	80040aa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80040a6:	2b03      	cmp	r3, #3
 80040a8:	d107      	bne.n	80040ba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80040aa:	4b3f      	ldr	r3, [pc, #252]	; (80041a8 <HAL_RCC_ClockConfig+0x1bc>)
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d109      	bne.n	80040ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80040b6:	2301      	movs	r3, #1
 80040b8:	e06f      	b.n	800419a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040ba:	4b3b      	ldr	r3, [pc, #236]	; (80041a8 <HAL_RCC_ClockConfig+0x1bc>)
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f003 0302 	and.w	r3, r3, #2
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d101      	bne.n	80040ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80040c6:	2301      	movs	r3, #1
 80040c8:	e067      	b.n	800419a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80040ca:	4b37      	ldr	r3, [pc, #220]	; (80041a8 <HAL_RCC_ClockConfig+0x1bc>)
 80040cc:	689b      	ldr	r3, [r3, #8]
 80040ce:	f023 0203 	bic.w	r2, r3, #3
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	685b      	ldr	r3, [r3, #4]
 80040d6:	4934      	ldr	r1, [pc, #208]	; (80041a8 <HAL_RCC_ClockConfig+0x1bc>)
 80040d8:	4313      	orrs	r3, r2
 80040da:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80040dc:	f7fe f97a 	bl	80023d4 <HAL_GetTick>
 80040e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040e2:	e00a      	b.n	80040fa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80040e4:	f7fe f976 	bl	80023d4 <HAL_GetTick>
 80040e8:	4602      	mov	r2, r0
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	1ad3      	subs	r3, r2, r3
 80040ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80040f2:	4293      	cmp	r3, r2
 80040f4:	d901      	bls.n	80040fa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80040f6:	2303      	movs	r3, #3
 80040f8:	e04f      	b.n	800419a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040fa:	4b2b      	ldr	r3, [pc, #172]	; (80041a8 <HAL_RCC_ClockConfig+0x1bc>)
 80040fc:	689b      	ldr	r3, [r3, #8]
 80040fe:	f003 020c 	and.w	r2, r3, #12
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	685b      	ldr	r3, [r3, #4]
 8004106:	009b      	lsls	r3, r3, #2
 8004108:	429a      	cmp	r2, r3
 800410a:	d1eb      	bne.n	80040e4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800410c:	4b25      	ldr	r3, [pc, #148]	; (80041a4 <HAL_RCC_ClockConfig+0x1b8>)
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f003 030f 	and.w	r3, r3, #15
 8004114:	683a      	ldr	r2, [r7, #0]
 8004116:	429a      	cmp	r2, r3
 8004118:	d20c      	bcs.n	8004134 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800411a:	4b22      	ldr	r3, [pc, #136]	; (80041a4 <HAL_RCC_ClockConfig+0x1b8>)
 800411c:	683a      	ldr	r2, [r7, #0]
 800411e:	b2d2      	uxtb	r2, r2
 8004120:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004122:	4b20      	ldr	r3, [pc, #128]	; (80041a4 <HAL_RCC_ClockConfig+0x1b8>)
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f003 030f 	and.w	r3, r3, #15
 800412a:	683a      	ldr	r2, [r7, #0]
 800412c:	429a      	cmp	r2, r3
 800412e:	d001      	beq.n	8004134 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004130:	2301      	movs	r3, #1
 8004132:	e032      	b.n	800419a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f003 0304 	and.w	r3, r3, #4
 800413c:	2b00      	cmp	r3, #0
 800413e:	d008      	beq.n	8004152 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004140:	4b19      	ldr	r3, [pc, #100]	; (80041a8 <HAL_RCC_ClockConfig+0x1bc>)
 8004142:	689b      	ldr	r3, [r3, #8]
 8004144:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	68db      	ldr	r3, [r3, #12]
 800414c:	4916      	ldr	r1, [pc, #88]	; (80041a8 <HAL_RCC_ClockConfig+0x1bc>)
 800414e:	4313      	orrs	r3, r2
 8004150:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f003 0308 	and.w	r3, r3, #8
 800415a:	2b00      	cmp	r3, #0
 800415c:	d009      	beq.n	8004172 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800415e:	4b12      	ldr	r3, [pc, #72]	; (80041a8 <HAL_RCC_ClockConfig+0x1bc>)
 8004160:	689b      	ldr	r3, [r3, #8]
 8004162:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	691b      	ldr	r3, [r3, #16]
 800416a:	00db      	lsls	r3, r3, #3
 800416c:	490e      	ldr	r1, [pc, #56]	; (80041a8 <HAL_RCC_ClockConfig+0x1bc>)
 800416e:	4313      	orrs	r3, r2
 8004170:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004172:	f000 f821 	bl	80041b8 <HAL_RCC_GetSysClockFreq>
 8004176:	4601      	mov	r1, r0
 8004178:	4b0b      	ldr	r3, [pc, #44]	; (80041a8 <HAL_RCC_ClockConfig+0x1bc>)
 800417a:	689b      	ldr	r3, [r3, #8]
 800417c:	091b      	lsrs	r3, r3, #4
 800417e:	f003 030f 	and.w	r3, r3, #15
 8004182:	4a0a      	ldr	r2, [pc, #40]	; (80041ac <HAL_RCC_ClockConfig+0x1c0>)
 8004184:	5cd3      	ldrb	r3, [r2, r3]
 8004186:	fa21 f303 	lsr.w	r3, r1, r3
 800418a:	4a09      	ldr	r2, [pc, #36]	; (80041b0 <HAL_RCC_ClockConfig+0x1c4>)
 800418c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800418e:	4b09      	ldr	r3, [pc, #36]	; (80041b4 <HAL_RCC_ClockConfig+0x1c8>)
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	4618      	mov	r0, r3
 8004194:	f7fe f8da 	bl	800234c <HAL_InitTick>

  return HAL_OK;
 8004198:	2300      	movs	r3, #0
}
 800419a:	4618      	mov	r0, r3
 800419c:	3710      	adds	r7, #16
 800419e:	46bd      	mov	sp, r7
 80041a0:	bd80      	pop	{r7, pc}
 80041a2:	bf00      	nop
 80041a4:	40023c00 	.word	0x40023c00
 80041a8:	40023800 	.word	0x40023800
 80041ac:	08006b58 	.word	0x08006b58
 80041b0:	20000010 	.word	0x20000010
 80041b4:	20000014 	.word	0x20000014

080041b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80041b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80041ba:	b085      	sub	sp, #20
 80041bc:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80041be:	2300      	movs	r3, #0
 80041c0:	607b      	str	r3, [r7, #4]
 80041c2:	2300      	movs	r3, #0
 80041c4:	60fb      	str	r3, [r7, #12]
 80041c6:	2300      	movs	r3, #0
 80041c8:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80041ca:	2300      	movs	r3, #0
 80041cc:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80041ce:	4b63      	ldr	r3, [pc, #396]	; (800435c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80041d0:	689b      	ldr	r3, [r3, #8]
 80041d2:	f003 030c 	and.w	r3, r3, #12
 80041d6:	2b04      	cmp	r3, #4
 80041d8:	d007      	beq.n	80041ea <HAL_RCC_GetSysClockFreq+0x32>
 80041da:	2b08      	cmp	r3, #8
 80041dc:	d008      	beq.n	80041f0 <HAL_RCC_GetSysClockFreq+0x38>
 80041de:	2b00      	cmp	r3, #0
 80041e0:	f040 80b4 	bne.w	800434c <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80041e4:	4b5e      	ldr	r3, [pc, #376]	; (8004360 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80041e6:	60bb      	str	r3, [r7, #8]
       break;
 80041e8:	e0b3      	b.n	8004352 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80041ea:	4b5e      	ldr	r3, [pc, #376]	; (8004364 <HAL_RCC_GetSysClockFreq+0x1ac>)
 80041ec:	60bb      	str	r3, [r7, #8]
      break;
 80041ee:	e0b0      	b.n	8004352 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80041f0:	4b5a      	ldr	r3, [pc, #360]	; (800435c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80041f2:	685b      	ldr	r3, [r3, #4]
 80041f4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80041f8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80041fa:	4b58      	ldr	r3, [pc, #352]	; (800435c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80041fc:	685b      	ldr	r3, [r3, #4]
 80041fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004202:	2b00      	cmp	r3, #0
 8004204:	d04a      	beq.n	800429c <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004206:	4b55      	ldr	r3, [pc, #340]	; (800435c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004208:	685b      	ldr	r3, [r3, #4]
 800420a:	099b      	lsrs	r3, r3, #6
 800420c:	f04f 0400 	mov.w	r4, #0
 8004210:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004214:	f04f 0200 	mov.w	r2, #0
 8004218:	ea03 0501 	and.w	r5, r3, r1
 800421c:	ea04 0602 	and.w	r6, r4, r2
 8004220:	4629      	mov	r1, r5
 8004222:	4632      	mov	r2, r6
 8004224:	f04f 0300 	mov.w	r3, #0
 8004228:	f04f 0400 	mov.w	r4, #0
 800422c:	0154      	lsls	r4, r2, #5
 800422e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004232:	014b      	lsls	r3, r1, #5
 8004234:	4619      	mov	r1, r3
 8004236:	4622      	mov	r2, r4
 8004238:	1b49      	subs	r1, r1, r5
 800423a:	eb62 0206 	sbc.w	r2, r2, r6
 800423e:	f04f 0300 	mov.w	r3, #0
 8004242:	f04f 0400 	mov.w	r4, #0
 8004246:	0194      	lsls	r4, r2, #6
 8004248:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800424c:	018b      	lsls	r3, r1, #6
 800424e:	1a5b      	subs	r3, r3, r1
 8004250:	eb64 0402 	sbc.w	r4, r4, r2
 8004254:	f04f 0100 	mov.w	r1, #0
 8004258:	f04f 0200 	mov.w	r2, #0
 800425c:	00e2      	lsls	r2, r4, #3
 800425e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004262:	00d9      	lsls	r1, r3, #3
 8004264:	460b      	mov	r3, r1
 8004266:	4614      	mov	r4, r2
 8004268:	195b      	adds	r3, r3, r5
 800426a:	eb44 0406 	adc.w	r4, r4, r6
 800426e:	f04f 0100 	mov.w	r1, #0
 8004272:	f04f 0200 	mov.w	r2, #0
 8004276:	0262      	lsls	r2, r4, #9
 8004278:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 800427c:	0259      	lsls	r1, r3, #9
 800427e:	460b      	mov	r3, r1
 8004280:	4614      	mov	r4, r2
 8004282:	4618      	mov	r0, r3
 8004284:	4621      	mov	r1, r4
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	f04f 0400 	mov.w	r4, #0
 800428c:	461a      	mov	r2, r3
 800428e:	4623      	mov	r3, r4
 8004290:	f7fc fcc4 	bl	8000c1c <__aeabi_uldivmod>
 8004294:	4603      	mov	r3, r0
 8004296:	460c      	mov	r4, r1
 8004298:	60fb      	str	r3, [r7, #12]
 800429a:	e049      	b.n	8004330 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800429c:	4b2f      	ldr	r3, [pc, #188]	; (800435c <HAL_RCC_GetSysClockFreq+0x1a4>)
 800429e:	685b      	ldr	r3, [r3, #4]
 80042a0:	099b      	lsrs	r3, r3, #6
 80042a2:	f04f 0400 	mov.w	r4, #0
 80042a6:	f240 11ff 	movw	r1, #511	; 0x1ff
 80042aa:	f04f 0200 	mov.w	r2, #0
 80042ae:	ea03 0501 	and.w	r5, r3, r1
 80042b2:	ea04 0602 	and.w	r6, r4, r2
 80042b6:	4629      	mov	r1, r5
 80042b8:	4632      	mov	r2, r6
 80042ba:	f04f 0300 	mov.w	r3, #0
 80042be:	f04f 0400 	mov.w	r4, #0
 80042c2:	0154      	lsls	r4, r2, #5
 80042c4:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80042c8:	014b      	lsls	r3, r1, #5
 80042ca:	4619      	mov	r1, r3
 80042cc:	4622      	mov	r2, r4
 80042ce:	1b49      	subs	r1, r1, r5
 80042d0:	eb62 0206 	sbc.w	r2, r2, r6
 80042d4:	f04f 0300 	mov.w	r3, #0
 80042d8:	f04f 0400 	mov.w	r4, #0
 80042dc:	0194      	lsls	r4, r2, #6
 80042de:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80042e2:	018b      	lsls	r3, r1, #6
 80042e4:	1a5b      	subs	r3, r3, r1
 80042e6:	eb64 0402 	sbc.w	r4, r4, r2
 80042ea:	f04f 0100 	mov.w	r1, #0
 80042ee:	f04f 0200 	mov.w	r2, #0
 80042f2:	00e2      	lsls	r2, r4, #3
 80042f4:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80042f8:	00d9      	lsls	r1, r3, #3
 80042fa:	460b      	mov	r3, r1
 80042fc:	4614      	mov	r4, r2
 80042fe:	195b      	adds	r3, r3, r5
 8004300:	eb44 0406 	adc.w	r4, r4, r6
 8004304:	f04f 0100 	mov.w	r1, #0
 8004308:	f04f 0200 	mov.w	r2, #0
 800430c:	02a2      	lsls	r2, r4, #10
 800430e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8004312:	0299      	lsls	r1, r3, #10
 8004314:	460b      	mov	r3, r1
 8004316:	4614      	mov	r4, r2
 8004318:	4618      	mov	r0, r3
 800431a:	4621      	mov	r1, r4
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	f04f 0400 	mov.w	r4, #0
 8004322:	461a      	mov	r2, r3
 8004324:	4623      	mov	r3, r4
 8004326:	f7fc fc79 	bl	8000c1c <__aeabi_uldivmod>
 800432a:	4603      	mov	r3, r0
 800432c:	460c      	mov	r4, r1
 800432e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004330:	4b0a      	ldr	r3, [pc, #40]	; (800435c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004332:	685b      	ldr	r3, [r3, #4]
 8004334:	0c1b      	lsrs	r3, r3, #16
 8004336:	f003 0303 	and.w	r3, r3, #3
 800433a:	3301      	adds	r3, #1
 800433c:	005b      	lsls	r3, r3, #1
 800433e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004340:	68fa      	ldr	r2, [r7, #12]
 8004342:	683b      	ldr	r3, [r7, #0]
 8004344:	fbb2 f3f3 	udiv	r3, r2, r3
 8004348:	60bb      	str	r3, [r7, #8]
      break;
 800434a:	e002      	b.n	8004352 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800434c:	4b04      	ldr	r3, [pc, #16]	; (8004360 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800434e:	60bb      	str	r3, [r7, #8]
      break;
 8004350:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004352:	68bb      	ldr	r3, [r7, #8]
}
 8004354:	4618      	mov	r0, r3
 8004356:	3714      	adds	r7, #20
 8004358:	46bd      	mov	sp, r7
 800435a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800435c:	40023800 	.word	0x40023800
 8004360:	00f42400 	.word	0x00f42400
 8004364:	007a1200 	.word	0x007a1200

08004368 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004368:	b480      	push	{r7}
 800436a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800436c:	4b03      	ldr	r3, [pc, #12]	; (800437c <HAL_RCC_GetHCLKFreq+0x14>)
 800436e:	681b      	ldr	r3, [r3, #0]
}
 8004370:	4618      	mov	r0, r3
 8004372:	46bd      	mov	sp, r7
 8004374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004378:	4770      	bx	lr
 800437a:	bf00      	nop
 800437c:	20000010 	.word	0x20000010

08004380 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004380:	b580      	push	{r7, lr}
 8004382:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004384:	f7ff fff0 	bl	8004368 <HAL_RCC_GetHCLKFreq>
 8004388:	4601      	mov	r1, r0
 800438a:	4b05      	ldr	r3, [pc, #20]	; (80043a0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800438c:	689b      	ldr	r3, [r3, #8]
 800438e:	0a9b      	lsrs	r3, r3, #10
 8004390:	f003 0307 	and.w	r3, r3, #7
 8004394:	4a03      	ldr	r2, [pc, #12]	; (80043a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004396:	5cd3      	ldrb	r3, [r2, r3]
 8004398:	fa21 f303 	lsr.w	r3, r1, r3
}
 800439c:	4618      	mov	r0, r3
 800439e:	bd80      	pop	{r7, pc}
 80043a0:	40023800 	.word	0x40023800
 80043a4:	08006b68 	.word	0x08006b68

080043a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80043a8:	b580      	push	{r7, lr}
 80043aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80043ac:	f7ff ffdc 	bl	8004368 <HAL_RCC_GetHCLKFreq>
 80043b0:	4601      	mov	r1, r0
 80043b2:	4b05      	ldr	r3, [pc, #20]	; (80043c8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80043b4:	689b      	ldr	r3, [r3, #8]
 80043b6:	0b5b      	lsrs	r3, r3, #13
 80043b8:	f003 0307 	and.w	r3, r3, #7
 80043bc:	4a03      	ldr	r2, [pc, #12]	; (80043cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80043be:	5cd3      	ldrb	r3, [r2, r3]
 80043c0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80043c4:	4618      	mov	r0, r3
 80043c6:	bd80      	pop	{r7, pc}
 80043c8:	40023800 	.word	0x40023800
 80043cc:	08006b68 	.word	0x08006b68

080043d0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80043d0:	b580      	push	{r7, lr}
 80043d2:	b082      	sub	sp, #8
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d101      	bne.n	80043e2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80043de:	2301      	movs	r3, #1
 80043e0:	e056      	b.n	8004490 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	2200      	movs	r2, #0
 80043e6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80043ee:	b2db      	uxtb	r3, r3
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d106      	bne.n	8004402 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2200      	movs	r2, #0
 80043f8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80043fc:	6878      	ldr	r0, [r7, #4]
 80043fe:	f7fd fd9f 	bl	8001f40 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	2202      	movs	r2, #2
 8004406:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	681a      	ldr	r2, [r3, #0]
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004418:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	685a      	ldr	r2, [r3, #4]
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	689b      	ldr	r3, [r3, #8]
 8004422:	431a      	orrs	r2, r3
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	68db      	ldr	r3, [r3, #12]
 8004428:	431a      	orrs	r2, r3
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	691b      	ldr	r3, [r3, #16]
 800442e:	431a      	orrs	r2, r3
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	695b      	ldr	r3, [r3, #20]
 8004434:	431a      	orrs	r2, r3
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	699b      	ldr	r3, [r3, #24]
 800443a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800443e:	431a      	orrs	r2, r3
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	69db      	ldr	r3, [r3, #28]
 8004444:	431a      	orrs	r2, r3
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6a1b      	ldr	r3, [r3, #32]
 800444a:	ea42 0103 	orr.w	r1, r2, r3
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	430a      	orrs	r2, r1
 8004458:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	699b      	ldr	r3, [r3, #24]
 800445e:	0c1b      	lsrs	r3, r3, #16
 8004460:	f003 0104 	and.w	r1, r3, #4
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	430a      	orrs	r2, r1
 800446e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	69da      	ldr	r2, [r3, #28]
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800447e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2200      	movs	r2, #0
 8004484:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	2201      	movs	r2, #1
 800448a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800448e:	2300      	movs	r3, #0
}
 8004490:	4618      	mov	r0, r3
 8004492:	3708      	adds	r7, #8
 8004494:	46bd      	mov	sp, r7
 8004496:	bd80      	pop	{r7, pc}

08004498 <HAL_SPI_Transmit_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8004498:	b480      	push	{r7}
 800449a:	b087      	sub	sp, #28
 800449c:	af00      	add	r7, sp, #0
 800449e:	60f8      	str	r0, [r7, #12]
 80044a0:	60b9      	str	r1, [r7, #8]
 80044a2:	4613      	mov	r3, r2
 80044a4:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80044a6:	2300      	movs	r3, #0
 80044a8:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80044b0:	2b01      	cmp	r3, #1
 80044b2:	d101      	bne.n	80044b8 <HAL_SPI_Transmit_IT+0x20>
 80044b4:	2302      	movs	r3, #2
 80044b6:	e067      	b.n	8004588 <HAL_SPI_Transmit_IT+0xf0>
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	2201      	movs	r2, #1
 80044bc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if ((pData == NULL) || (Size == 0U))
 80044c0:	68bb      	ldr	r3, [r7, #8]
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d002      	beq.n	80044cc <HAL_SPI_Transmit_IT+0x34>
 80044c6:	88fb      	ldrh	r3, [r7, #6]
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d102      	bne.n	80044d2 <HAL_SPI_Transmit_IT+0x3a>
  {
    errorcode = HAL_ERROR;
 80044cc:	2301      	movs	r3, #1
 80044ce:	75fb      	strb	r3, [r7, #23]
    goto error;
 80044d0:	e055      	b.n	800457e <HAL_SPI_Transmit_IT+0xe6>
  }

  if (hspi->State != HAL_SPI_STATE_READY)
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80044d8:	b2db      	uxtb	r3, r3
 80044da:	2b01      	cmp	r3, #1
 80044dc:	d002      	beq.n	80044e4 <HAL_SPI_Transmit_IT+0x4c>
  {
    errorcode = HAL_BUSY;
 80044de:	2302      	movs	r3, #2
 80044e0:	75fb      	strb	r3, [r7, #23]
    goto error;
 80044e2:	e04c      	b.n	800457e <HAL_SPI_Transmit_IT+0xe6>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	2203      	movs	r2, #3
 80044e8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	2200      	movs	r2, #0
 80044f0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	68ba      	ldr	r2, [r7, #8]
 80044f6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	88fa      	ldrh	r2, [r7, #6]
 80044fc:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	88fa      	ldrh	r2, [r7, #6]
 8004502:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	2200      	movs	r2, #0
 8004508:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	2200      	movs	r2, #0
 800450e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	2200      	movs	r2, #0
 8004514:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	2200      	movs	r2, #0
 800451a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	68db      	ldr	r3, [r3, #12]
 8004520:	2b00      	cmp	r3, #0
 8004522:	d003      	beq.n	800452c <HAL_SPI_Transmit_IT+0x94>
  {
    hspi->TxISR = SPI_TxISR_16BIT;
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	4a1b      	ldr	r2, [pc, #108]	; (8004594 <HAL_SPI_Transmit_IT+0xfc>)
 8004528:	645a      	str	r2, [r3, #68]	; 0x44
 800452a:	e002      	b.n	8004532 <HAL_SPI_Transmit_IT+0x9a>
  }
  else
  {
    hspi->TxISR = SPI_TxISR_8BIT;
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	4a1a      	ldr	r2, [pc, #104]	; (8004598 <HAL_SPI_Transmit_IT+0x100>)
 8004530:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	689b      	ldr	r3, [r3, #8]
 8004536:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800453a:	d107      	bne.n	800454c <HAL_SPI_Transmit_IT+0xb4>
  {
    SPI_1LINE_TX(hspi);
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	681a      	ldr	r2, [r3, #0]
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800454a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	685a      	ldr	r2, [r3, #4]
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f042 02a0 	orr.w	r2, r2, #160	; 0xa0
 800455a:	605a      	str	r2, [r3, #4]


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004566:	2b40      	cmp	r3, #64	; 0x40
 8004568:	d008      	beq.n	800457c <HAL_SPI_Transmit_IT+0xe4>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	681a      	ldr	r2, [r3, #0]
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004578:	601a      	str	r2, [r3, #0]
 800457a:	e000      	b.n	800457e <HAL_SPI_Transmit_IT+0xe6>
  }

error :
 800457c:	bf00      	nop
  __HAL_UNLOCK(hspi);
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	2200      	movs	r2, #0
 8004582:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004586:	7dfb      	ldrb	r3, [r7, #23]
}
 8004588:	4618      	mov	r0, r3
 800458a:	371c      	adds	r7, #28
 800458c:	46bd      	mov	sp, r7
 800458e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004592:	4770      	bx	lr
 8004594:	0800481f 	.word	0x0800481f
 8004598:	080047d9 	.word	0x080047d9

0800459c <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800459c:	b580      	push	{r7, lr}
 800459e:	b088      	sub	sp, #32
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	685b      	ldr	r3, [r3, #4]
 80045aa:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	689b      	ldr	r3, [r3, #8]
 80045b2:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80045b4:	69bb      	ldr	r3, [r7, #24]
 80045b6:	099b      	lsrs	r3, r3, #6
 80045b8:	f003 0301 	and.w	r3, r3, #1
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d10f      	bne.n	80045e0 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80045c0:	69bb      	ldr	r3, [r7, #24]
 80045c2:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d00a      	beq.n	80045e0 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80045ca:	69fb      	ldr	r3, [r7, #28]
 80045cc:	099b      	lsrs	r3, r3, #6
 80045ce:	f003 0301 	and.w	r3, r3, #1
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d004      	beq.n	80045e0 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045da:	6878      	ldr	r0, [r7, #4]
 80045dc:	4798      	blx	r3
    return;
 80045de:	e0d8      	b.n	8004792 <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80045e0:	69bb      	ldr	r3, [r7, #24]
 80045e2:	085b      	lsrs	r3, r3, #1
 80045e4:	f003 0301 	and.w	r3, r3, #1
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d00a      	beq.n	8004602 <HAL_SPI_IRQHandler+0x66>
 80045ec:	69fb      	ldr	r3, [r7, #28]
 80045ee:	09db      	lsrs	r3, r3, #7
 80045f0:	f003 0301 	and.w	r3, r3, #1
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d004      	beq.n	8004602 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045fc:	6878      	ldr	r0, [r7, #4]
 80045fe:	4798      	blx	r3
    return;
 8004600:	e0c7      	b.n	8004792 <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8004602:	69bb      	ldr	r3, [r7, #24]
 8004604:	095b      	lsrs	r3, r3, #5
 8004606:	f003 0301 	and.w	r3, r3, #1
 800460a:	2b00      	cmp	r3, #0
 800460c:	d10c      	bne.n	8004628 <HAL_SPI_IRQHandler+0x8c>
 800460e:	69bb      	ldr	r3, [r7, #24]
 8004610:	099b      	lsrs	r3, r3, #6
 8004612:	f003 0301 	and.w	r3, r3, #1
 8004616:	2b00      	cmp	r3, #0
 8004618:	d106      	bne.n	8004628 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800461a:	69bb      	ldr	r3, [r7, #24]
 800461c:	0a1b      	lsrs	r3, r3, #8
 800461e:	f003 0301 	and.w	r3, r3, #1
 8004622:	2b00      	cmp	r3, #0
 8004624:	f000 80b5 	beq.w	8004792 <HAL_SPI_IRQHandler+0x1f6>
 8004628:	69fb      	ldr	r3, [r7, #28]
 800462a:	095b      	lsrs	r3, r3, #5
 800462c:	f003 0301 	and.w	r3, r3, #1
 8004630:	2b00      	cmp	r3, #0
 8004632:	f000 80ae 	beq.w	8004792 <HAL_SPI_IRQHandler+0x1f6>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8004636:	69bb      	ldr	r3, [r7, #24]
 8004638:	099b      	lsrs	r3, r3, #6
 800463a:	f003 0301 	and.w	r3, r3, #1
 800463e:	2b00      	cmp	r3, #0
 8004640:	d023      	beq.n	800468a <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004648:	b2db      	uxtb	r3, r3
 800464a:	2b03      	cmp	r3, #3
 800464c:	d011      	beq.n	8004672 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004652:	f043 0204 	orr.w	r2, r3, #4
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800465a:	2300      	movs	r3, #0
 800465c:	617b      	str	r3, [r7, #20]
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	68db      	ldr	r3, [r3, #12]
 8004664:	617b      	str	r3, [r7, #20]
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	689b      	ldr	r3, [r3, #8]
 800466c:	617b      	str	r3, [r7, #20]
 800466e:	697b      	ldr	r3, [r7, #20]
 8004670:	e00b      	b.n	800468a <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004672:	2300      	movs	r3, #0
 8004674:	613b      	str	r3, [r7, #16]
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	68db      	ldr	r3, [r3, #12]
 800467c:	613b      	str	r3, [r7, #16]
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	689b      	ldr	r3, [r3, #8]
 8004684:	613b      	str	r3, [r7, #16]
 8004686:	693b      	ldr	r3, [r7, #16]
        return;
 8004688:	e083      	b.n	8004792 <HAL_SPI_IRQHandler+0x1f6>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800468a:	69bb      	ldr	r3, [r7, #24]
 800468c:	095b      	lsrs	r3, r3, #5
 800468e:	f003 0301 	and.w	r3, r3, #1
 8004692:	2b00      	cmp	r3, #0
 8004694:	d014      	beq.n	80046c0 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800469a:	f043 0201 	orr.w	r2, r3, #1
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80046a2:	2300      	movs	r3, #0
 80046a4:	60fb      	str	r3, [r7, #12]
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	689b      	ldr	r3, [r3, #8]
 80046ac:	60fb      	str	r3, [r7, #12]
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	681a      	ldr	r2, [r3, #0]
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80046bc:	601a      	str	r2, [r3, #0]
 80046be:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80046c0:	69bb      	ldr	r3, [r7, #24]
 80046c2:	0a1b      	lsrs	r3, r3, #8
 80046c4:	f003 0301 	and.w	r3, r3, #1
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d00c      	beq.n	80046e6 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046d0:	f043 0208 	orr.w	r2, r3, #8
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80046d8:	2300      	movs	r3, #0
 80046da:	60bb      	str	r3, [r7, #8]
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	689b      	ldr	r3, [r3, #8]
 80046e2:	60bb      	str	r3, [r7, #8]
 80046e4:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d050      	beq.n	8004790 <HAL_SPI_IRQHandler+0x1f4>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	685a      	ldr	r2, [r3, #4]
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80046fc:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	2201      	movs	r2, #1
 8004702:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8004706:	69fb      	ldr	r3, [r7, #28]
 8004708:	f003 0302 	and.w	r3, r3, #2
 800470c:	2b00      	cmp	r3, #0
 800470e:	d104      	bne.n	800471a <HAL_SPI_IRQHandler+0x17e>
 8004710:	69fb      	ldr	r3, [r7, #28]
 8004712:	f003 0301 	and.w	r3, r3, #1
 8004716:	2b00      	cmp	r3, #0
 8004718:	d034      	beq.n	8004784 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	685a      	ldr	r2, [r3, #4]
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f022 0203 	bic.w	r2, r2, #3
 8004728:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800472e:	2b00      	cmp	r3, #0
 8004730:	d011      	beq.n	8004756 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004736:	4a18      	ldr	r2, [pc, #96]	; (8004798 <HAL_SPI_IRQHandler+0x1fc>)
 8004738:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800473e:	4618      	mov	r0, r3
 8004740:	f7fe fda6 	bl	8003290 <HAL_DMA_Abort_IT>
 8004744:	4603      	mov	r3, r0
 8004746:	2b00      	cmp	r3, #0
 8004748:	d005      	beq.n	8004756 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800474e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800475a:	2b00      	cmp	r3, #0
 800475c:	d016      	beq.n	800478c <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004762:	4a0d      	ldr	r2, [pc, #52]	; (8004798 <HAL_SPI_IRQHandler+0x1fc>)
 8004764:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800476a:	4618      	mov	r0, r3
 800476c:	f7fe fd90 	bl	8003290 <HAL_DMA_Abort_IT>
 8004770:	4603      	mov	r3, r0
 8004772:	2b00      	cmp	r3, #0
 8004774:	d00a      	beq.n	800478c <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800477a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8004782:	e003      	b.n	800478c <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8004784:	6878      	ldr	r0, [r7, #4]
 8004786:	f000 f809 	bl	800479c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800478a:	e000      	b.n	800478e <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 800478c:	bf00      	nop
    return;
 800478e:	bf00      	nop
 8004790:	bf00      	nop
  }
}
 8004792:	3720      	adds	r7, #32
 8004794:	46bd      	mov	sp, r7
 8004796:	bd80      	pop	{r7, pc}
 8004798:	080047b1 	.word	0x080047b1

0800479c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800479c:	b480      	push	{r7}
 800479e:	b083      	sub	sp, #12
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80047a4:	bf00      	nop
 80047a6:	370c      	adds	r7, #12
 80047a8:	46bd      	mov	sp, r7
 80047aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ae:	4770      	bx	lr

080047b0 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80047b0:	b580      	push	{r7, lr}
 80047b2:	b084      	sub	sp, #16
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047bc:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	2200      	movs	r2, #0
 80047c2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	2200      	movs	r2, #0
 80047c8:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80047ca:	68f8      	ldr	r0, [r7, #12]
 80047cc:	f7ff ffe6 	bl	800479c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80047d0:	bf00      	nop
 80047d2:	3710      	adds	r7, #16
 80047d4:	46bd      	mov	sp, r7
 80047d6:	bd80      	pop	{r7, pc}

080047d8 <SPI_TxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 80047d8:	b580      	push	{r7, lr}
 80047da:	b082      	sub	sp, #8
 80047dc:	af00      	add	r7, sp, #0
 80047de:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	330c      	adds	r3, #12
 80047ea:	7812      	ldrb	r2, [r2, #0]
 80047ec:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047f2:	1c5a      	adds	r2, r3, #1
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80047fc:	b29b      	uxth	r3, r3
 80047fe:	3b01      	subs	r3, #1
 8004800:	b29a      	uxth	r2, r3
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	86da      	strh	r2, [r3, #54]	; 0x36

  if (hspi->TxXferCount == 0U)
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800480a:	b29b      	uxth	r3, r3
 800480c:	2b00      	cmp	r3, #0
 800480e:	d102      	bne.n	8004816 <SPI_TxISR_8BIT+0x3e>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 8004810:	6878      	ldr	r0, [r7, #4]
 8004812:	f000 f8d3 	bl	80049bc <SPI_CloseTx_ISR>
  }
}
 8004816:	bf00      	nop
 8004818:	3708      	adds	r7, #8
 800481a:	46bd      	mov	sp, r7
 800481c:	bd80      	pop	{r7, pc}

0800481e <SPI_TxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 800481e:	b580      	push	{r7, lr}
 8004820:	b082      	sub	sp, #8
 8004822:	af00      	add	r7, sp, #0
 8004824:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800482a:	881a      	ldrh	r2, [r3, #0]
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004836:	1c9a      	adds	r2, r3, #2
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004840:	b29b      	uxth	r3, r3
 8004842:	3b01      	subs	r3, #1
 8004844:	b29a      	uxth	r2, r3
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	86da      	strh	r2, [r3, #54]	; 0x36

  if (hspi->TxXferCount == 0U)
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800484e:	b29b      	uxth	r3, r3
 8004850:	2b00      	cmp	r3, #0
 8004852:	d102      	bne.n	800485a <SPI_TxISR_16BIT+0x3c>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 8004854:	6878      	ldr	r0, [r7, #4]
 8004856:	f000 f8b1 	bl	80049bc <SPI_CloseTx_ISR>
  }
}
 800485a:	bf00      	nop
 800485c:	3708      	adds	r7, #8
 800485e:	46bd      	mov	sp, r7
 8004860:	bd80      	pop	{r7, pc}

08004862 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004862:	b580      	push	{r7, lr}
 8004864:	b084      	sub	sp, #16
 8004866:	af00      	add	r7, sp, #0
 8004868:	60f8      	str	r0, [r7, #12]
 800486a:	60b9      	str	r1, [r7, #8]
 800486c:	603b      	str	r3, [r7, #0]
 800486e:	4613      	mov	r3, r2
 8004870:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004872:	e04c      	b.n	800490e <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004874:	683b      	ldr	r3, [r7, #0]
 8004876:	f1b3 3fff 	cmp.w	r3, #4294967295
 800487a:	d048      	beq.n	800490e <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800487c:	f7fd fdaa 	bl	80023d4 <HAL_GetTick>
 8004880:	4602      	mov	r2, r0
 8004882:	69bb      	ldr	r3, [r7, #24]
 8004884:	1ad3      	subs	r3, r2, r3
 8004886:	683a      	ldr	r2, [r7, #0]
 8004888:	429a      	cmp	r2, r3
 800488a:	d902      	bls.n	8004892 <SPI_WaitFlagStateUntilTimeout+0x30>
 800488c:	683b      	ldr	r3, [r7, #0]
 800488e:	2b00      	cmp	r3, #0
 8004890:	d13d      	bne.n	800490e <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	685a      	ldr	r2, [r3, #4]
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80048a0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	685b      	ldr	r3, [r3, #4]
 80048a6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80048aa:	d111      	bne.n	80048d0 <SPI_WaitFlagStateUntilTimeout+0x6e>
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	689b      	ldr	r3, [r3, #8]
 80048b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80048b4:	d004      	beq.n	80048c0 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	689b      	ldr	r3, [r3, #8]
 80048ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80048be:	d107      	bne.n	80048d0 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	681a      	ldr	r2, [r3, #0]
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80048ce:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048d4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80048d8:	d10f      	bne.n	80048fa <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	681a      	ldr	r2, [r3, #0]
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80048e8:	601a      	str	r2, [r3, #0]
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	681a      	ldr	r2, [r3, #0]
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80048f8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	2201      	movs	r2, #1
 80048fe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	2200      	movs	r2, #0
 8004906:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800490a:	2303      	movs	r3, #3
 800490c:	e00f      	b.n	800492e <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	689a      	ldr	r2, [r3, #8]
 8004914:	68bb      	ldr	r3, [r7, #8]
 8004916:	4013      	ands	r3, r2
 8004918:	68ba      	ldr	r2, [r7, #8]
 800491a:	429a      	cmp	r2, r3
 800491c:	bf0c      	ite	eq
 800491e:	2301      	moveq	r3, #1
 8004920:	2300      	movne	r3, #0
 8004922:	b2db      	uxtb	r3, r3
 8004924:	461a      	mov	r2, r3
 8004926:	79fb      	ldrb	r3, [r7, #7]
 8004928:	429a      	cmp	r2, r3
 800492a:	d1a3      	bne.n	8004874 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800492c:	2300      	movs	r3, #0
}
 800492e:	4618      	mov	r0, r3
 8004930:	3710      	adds	r7, #16
 8004932:	46bd      	mov	sp, r7
 8004934:	bd80      	pop	{r7, pc}
	...

08004938 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004938:	b580      	push	{r7, lr}
 800493a:	b088      	sub	sp, #32
 800493c:	af02      	add	r7, sp, #8
 800493e:	60f8      	str	r0, [r7, #12]
 8004940:	60b9      	str	r1, [r7, #8]
 8004942:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004944:	4b1b      	ldr	r3, [pc, #108]	; (80049b4 <SPI_EndRxTxTransaction+0x7c>)
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	4a1b      	ldr	r2, [pc, #108]	; (80049b8 <SPI_EndRxTxTransaction+0x80>)
 800494a:	fba2 2303 	umull	r2, r3, r2, r3
 800494e:	0d5b      	lsrs	r3, r3, #21
 8004950:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004954:	fb02 f303 	mul.w	r3, r2, r3
 8004958:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	685b      	ldr	r3, [r3, #4]
 800495e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004962:	d112      	bne.n	800498a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	9300      	str	r3, [sp, #0]
 8004968:	68bb      	ldr	r3, [r7, #8]
 800496a:	2200      	movs	r2, #0
 800496c:	2180      	movs	r1, #128	; 0x80
 800496e:	68f8      	ldr	r0, [r7, #12]
 8004970:	f7ff ff77 	bl	8004862 <SPI_WaitFlagStateUntilTimeout>
 8004974:	4603      	mov	r3, r0
 8004976:	2b00      	cmp	r3, #0
 8004978:	d016      	beq.n	80049a8 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800497e:	f043 0220 	orr.w	r2, r3, #32
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004986:	2303      	movs	r3, #3
 8004988:	e00f      	b.n	80049aa <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800498a:	697b      	ldr	r3, [r7, #20]
 800498c:	2b00      	cmp	r3, #0
 800498e:	d00a      	beq.n	80049a6 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8004990:	697b      	ldr	r3, [r7, #20]
 8004992:	3b01      	subs	r3, #1
 8004994:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	689b      	ldr	r3, [r3, #8]
 800499c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049a0:	2b80      	cmp	r3, #128	; 0x80
 80049a2:	d0f2      	beq.n	800498a <SPI_EndRxTxTransaction+0x52>
 80049a4:	e000      	b.n	80049a8 <SPI_EndRxTxTransaction+0x70>
        break;
 80049a6:	bf00      	nop
  }

  return HAL_OK;
 80049a8:	2300      	movs	r3, #0
}
 80049aa:	4618      	mov	r0, r3
 80049ac:	3718      	adds	r7, #24
 80049ae:	46bd      	mov	sp, r7
 80049b0:	bd80      	pop	{r7, pc}
 80049b2:	bf00      	nop
 80049b4:	20000010 	.word	0x20000010
 80049b8:	165e9f81 	.word	0x165e9f81

080049bc <SPI_CloseTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseTx_ISR(SPI_HandleTypeDef *hspi)
{
 80049bc:	b580      	push	{r7, lr}
 80049be:	b086      	sub	sp, #24
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 80049c4:	4b2c      	ldr	r3, [pc, #176]	; (8004a78 <SPI_CloseTx_ISR+0xbc>)
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	4a2c      	ldr	r2, [pc, #176]	; (8004a7c <SPI_CloseTx_ISR+0xc0>)
 80049ca:	fba2 2303 	umull	r2, r3, r2, r3
 80049ce:	0a5b      	lsrs	r3, r3, #9
 80049d0:	2264      	movs	r2, #100	; 0x64
 80049d2:	fb02 f303 	mul.w	r3, r2, r3
 80049d6:	613b      	str	r3, [r7, #16]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80049d8:	f7fd fcfc 	bl	80023d4 <HAL_GetTick>
 80049dc:	6178      	str	r0, [r7, #20]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 80049de:	693b      	ldr	r3, [r7, #16]
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d106      	bne.n	80049f2 <SPI_CloseTx_ISR+0x36>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049e8:	f043 0220 	orr.w	r2, r3, #32
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80049f0:	e009      	b.n	8004a06 <SPI_CloseTx_ISR+0x4a>
    }
    count--;
 80049f2:	693b      	ldr	r3, [r7, #16]
 80049f4:	3b01      	subs	r3, #1
 80049f6:	613b      	str	r3, [r7, #16]
  } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	689b      	ldr	r3, [r3, #8]
 80049fe:	f003 0302 	and.w	r3, r3, #2
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d0eb      	beq.n	80049de <SPI_CloseTx_ISR+0x22>

  /* Disable TXE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	685a      	ldr	r2, [r3, #4]
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004a14:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8004a16:	697a      	ldr	r2, [r7, #20]
 8004a18:	2164      	movs	r1, #100	; 0x64
 8004a1a:	6878      	ldr	r0, [r7, #4]
 8004a1c:	f7ff ff8c 	bl	8004938 <SPI_EndRxTxTransaction>
 8004a20:	4603      	mov	r3, r0
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d005      	beq.n	8004a32 <SPI_CloseTx_ISR+0x76>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a2a:	f043 0220 	orr.w	r2, r3, #32
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	689b      	ldr	r3, [r3, #8]
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d10a      	bne.n	8004a50 <SPI_CloseTx_ISR+0x94>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004a3a:	2300      	movs	r3, #0
 8004a3c:	60fb      	str	r3, [r7, #12]
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	68db      	ldr	r3, [r3, #12]
 8004a44:	60fb      	str	r3, [r7, #12]
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	689b      	ldr	r3, [r3, #8]
 8004a4c:	60fb      	str	r3, [r7, #12]
 8004a4e:	68fb      	ldr	r3, [r7, #12]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	2201      	movs	r2, #1
 8004a54:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d003      	beq.n	8004a68 <SPI_CloseTx_ISR+0xac>
  {
    /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 8004a60:	6878      	ldr	r0, [r7, #4]
 8004a62:	f7ff fe9b 	bl	800479c <HAL_SPI_ErrorCallback>
    hspi->TxCpltCallback(hspi);
#else
    HAL_SPI_TxCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 8004a66:	e002      	b.n	8004a6e <SPI_CloseTx_ISR+0xb2>
    HAL_SPI_TxCpltCallback(hspi);
 8004a68:	6878      	ldr	r0, [r7, #4]
 8004a6a:	f7fd f915 	bl	8001c98 <HAL_SPI_TxCpltCallback>
}
 8004a6e:	bf00      	nop
 8004a70:	3718      	adds	r7, #24
 8004a72:	46bd      	mov	sp, r7
 8004a74:	bd80      	pop	{r7, pc}
 8004a76:	bf00      	nop
 8004a78:	20000010 	.word	0x20000010
 8004a7c:	057619f1 	.word	0x057619f1

08004a80 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004a80:	b580      	push	{r7, lr}
 8004a82:	b082      	sub	sp, #8
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d101      	bne.n	8004a92 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004a8e:	2301      	movs	r3, #1
 8004a90:	e01d      	b.n	8004ace <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a98:	b2db      	uxtb	r3, r3
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d106      	bne.n	8004aac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	2200      	movs	r2, #0
 8004aa2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004aa6:	6878      	ldr	r0, [r7, #4]
 8004aa8:	f7fd fa9a 	bl	8001fe0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	2202      	movs	r2, #2
 8004ab0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681a      	ldr	r2, [r3, #0]
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	3304      	adds	r3, #4
 8004abc:	4619      	mov	r1, r3
 8004abe:	4610      	mov	r0, r2
 8004ac0:	f000 fa38 	bl	8004f34 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	2201      	movs	r2, #1
 8004ac8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004acc:	2300      	movs	r3, #0
}
 8004ace:	4618      	mov	r0, r3
 8004ad0:	3708      	adds	r7, #8
 8004ad2:	46bd      	mov	sp, r7
 8004ad4:	bd80      	pop	{r7, pc}

08004ad6 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004ad6:	b480      	push	{r7}
 8004ad8:	b085      	sub	sp, #20
 8004ada:	af00      	add	r7, sp, #0
 8004adc:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	2202      	movs	r2, #2
 8004ae2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	689b      	ldr	r3, [r3, #8]
 8004aec:	f003 0307 	and.w	r3, r3, #7
 8004af0:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	2b06      	cmp	r3, #6
 8004af6:	d007      	beq.n	8004b08 <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	681a      	ldr	r2, [r3, #0]
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f042 0201 	orr.w	r2, r2, #1
 8004b06:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	2201      	movs	r2, #1
 8004b0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8004b10:	2300      	movs	r3, #0
}
 8004b12:	4618      	mov	r0, r3
 8004b14:	3714      	adds	r7, #20
 8004b16:	46bd      	mov	sp, r7
 8004b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1c:	4770      	bx	lr

08004b1e <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004b1e:	b480      	push	{r7}
 8004b20:	b085      	sub	sp, #20
 8004b22:	af00      	add	r7, sp, #0
 8004b24:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	68da      	ldr	r2, [r3, #12]
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f042 0201 	orr.w	r2, r2, #1
 8004b34:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	689b      	ldr	r3, [r3, #8]
 8004b3c:	f003 0307 	and.w	r3, r3, #7
 8004b40:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	2b06      	cmp	r3, #6
 8004b46:	d007      	beq.n	8004b58 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	681a      	ldr	r2, [r3, #0]
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f042 0201 	orr.w	r2, r2, #1
 8004b56:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004b58:	2300      	movs	r3, #0
}
 8004b5a:	4618      	mov	r0, r3
 8004b5c:	3714      	adds	r7, #20
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b64:	4770      	bx	lr

08004b66 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004b66:	b580      	push	{r7, lr}
 8004b68:	b082      	sub	sp, #8
 8004b6a:	af00      	add	r7, sp, #0
 8004b6c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	691b      	ldr	r3, [r3, #16]
 8004b74:	f003 0302 	and.w	r3, r3, #2
 8004b78:	2b02      	cmp	r3, #2
 8004b7a:	d122      	bne.n	8004bc2 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	68db      	ldr	r3, [r3, #12]
 8004b82:	f003 0302 	and.w	r3, r3, #2
 8004b86:	2b02      	cmp	r3, #2
 8004b88:	d11b      	bne.n	8004bc2 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f06f 0202 	mvn.w	r2, #2
 8004b92:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	2201      	movs	r2, #1
 8004b98:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	699b      	ldr	r3, [r3, #24]
 8004ba0:	f003 0303 	and.w	r3, r3, #3
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d003      	beq.n	8004bb0 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004ba8:	6878      	ldr	r0, [r7, #4]
 8004baa:	f000 f9a5 	bl	8004ef8 <HAL_TIM_IC_CaptureCallback>
 8004bae:	e005      	b.n	8004bbc <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004bb0:	6878      	ldr	r0, [r7, #4]
 8004bb2:	f000 f997 	bl	8004ee4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004bb6:	6878      	ldr	r0, [r7, #4]
 8004bb8:	f000 f9a8 	bl	8004f0c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	2200      	movs	r2, #0
 8004bc0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	691b      	ldr	r3, [r3, #16]
 8004bc8:	f003 0304 	and.w	r3, r3, #4
 8004bcc:	2b04      	cmp	r3, #4
 8004bce:	d122      	bne.n	8004c16 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	68db      	ldr	r3, [r3, #12]
 8004bd6:	f003 0304 	and.w	r3, r3, #4
 8004bda:	2b04      	cmp	r3, #4
 8004bdc:	d11b      	bne.n	8004c16 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f06f 0204 	mvn.w	r2, #4
 8004be6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	2202      	movs	r2, #2
 8004bec:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	699b      	ldr	r3, [r3, #24]
 8004bf4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d003      	beq.n	8004c04 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004bfc:	6878      	ldr	r0, [r7, #4]
 8004bfe:	f000 f97b 	bl	8004ef8 <HAL_TIM_IC_CaptureCallback>
 8004c02:	e005      	b.n	8004c10 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c04:	6878      	ldr	r0, [r7, #4]
 8004c06:	f000 f96d 	bl	8004ee4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c0a:	6878      	ldr	r0, [r7, #4]
 8004c0c:	f000 f97e 	bl	8004f0c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	2200      	movs	r2, #0
 8004c14:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	691b      	ldr	r3, [r3, #16]
 8004c1c:	f003 0308 	and.w	r3, r3, #8
 8004c20:	2b08      	cmp	r3, #8
 8004c22:	d122      	bne.n	8004c6a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	68db      	ldr	r3, [r3, #12]
 8004c2a:	f003 0308 	and.w	r3, r3, #8
 8004c2e:	2b08      	cmp	r3, #8
 8004c30:	d11b      	bne.n	8004c6a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f06f 0208 	mvn.w	r2, #8
 8004c3a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2204      	movs	r2, #4
 8004c40:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	69db      	ldr	r3, [r3, #28]
 8004c48:	f003 0303 	and.w	r3, r3, #3
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d003      	beq.n	8004c58 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c50:	6878      	ldr	r0, [r7, #4]
 8004c52:	f000 f951 	bl	8004ef8 <HAL_TIM_IC_CaptureCallback>
 8004c56:	e005      	b.n	8004c64 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c58:	6878      	ldr	r0, [r7, #4]
 8004c5a:	f000 f943 	bl	8004ee4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c5e:	6878      	ldr	r0, [r7, #4]
 8004c60:	f000 f954 	bl	8004f0c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	2200      	movs	r2, #0
 8004c68:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	691b      	ldr	r3, [r3, #16]
 8004c70:	f003 0310 	and.w	r3, r3, #16
 8004c74:	2b10      	cmp	r3, #16
 8004c76:	d122      	bne.n	8004cbe <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	68db      	ldr	r3, [r3, #12]
 8004c7e:	f003 0310 	and.w	r3, r3, #16
 8004c82:	2b10      	cmp	r3, #16
 8004c84:	d11b      	bne.n	8004cbe <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	f06f 0210 	mvn.w	r2, #16
 8004c8e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	2208      	movs	r2, #8
 8004c94:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	69db      	ldr	r3, [r3, #28]
 8004c9c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d003      	beq.n	8004cac <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ca4:	6878      	ldr	r0, [r7, #4]
 8004ca6:	f000 f927 	bl	8004ef8 <HAL_TIM_IC_CaptureCallback>
 8004caa:	e005      	b.n	8004cb8 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004cac:	6878      	ldr	r0, [r7, #4]
 8004cae:	f000 f919 	bl	8004ee4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004cb2:	6878      	ldr	r0, [r7, #4]
 8004cb4:	f000 f92a 	bl	8004f0c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	2200      	movs	r2, #0
 8004cbc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	691b      	ldr	r3, [r3, #16]
 8004cc4:	f003 0301 	and.w	r3, r3, #1
 8004cc8:	2b01      	cmp	r3, #1
 8004cca:	d10e      	bne.n	8004cea <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	68db      	ldr	r3, [r3, #12]
 8004cd2:	f003 0301 	and.w	r3, r3, #1
 8004cd6:	2b01      	cmp	r3, #1
 8004cd8:	d107      	bne.n	8004cea <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f06f 0201 	mvn.w	r2, #1
 8004ce2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004ce4:	6878      	ldr	r0, [r7, #4]
 8004ce6:	f7fc ffed 	bl	8001cc4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	691b      	ldr	r3, [r3, #16]
 8004cf0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cf4:	2b80      	cmp	r3, #128	; 0x80
 8004cf6:	d10e      	bne.n	8004d16 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	68db      	ldr	r3, [r3, #12]
 8004cfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d02:	2b80      	cmp	r3, #128	; 0x80
 8004d04:	d107      	bne.n	8004d16 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004d0e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004d10:	6878      	ldr	r0, [r7, #4]
 8004d12:	f000 faa1 	bl	8005258 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	691b      	ldr	r3, [r3, #16]
 8004d1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d20:	2b40      	cmp	r3, #64	; 0x40
 8004d22:	d10e      	bne.n	8004d42 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	68db      	ldr	r3, [r3, #12]
 8004d2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d2e:	2b40      	cmp	r3, #64	; 0x40
 8004d30:	d107      	bne.n	8004d42 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004d3a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004d3c:	6878      	ldr	r0, [r7, #4]
 8004d3e:	f000 f8ef 	bl	8004f20 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	691b      	ldr	r3, [r3, #16]
 8004d48:	f003 0320 	and.w	r3, r3, #32
 8004d4c:	2b20      	cmp	r3, #32
 8004d4e:	d10e      	bne.n	8004d6e <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	68db      	ldr	r3, [r3, #12]
 8004d56:	f003 0320 	and.w	r3, r3, #32
 8004d5a:	2b20      	cmp	r3, #32
 8004d5c:	d107      	bne.n	8004d6e <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f06f 0220 	mvn.w	r2, #32
 8004d66:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004d68:	6878      	ldr	r0, [r7, #4]
 8004d6a:	f000 fa6b 	bl	8005244 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004d6e:	bf00      	nop
 8004d70:	3708      	adds	r7, #8
 8004d72:	46bd      	mov	sp, r7
 8004d74:	bd80      	pop	{r7, pc}

08004d76 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004d76:	b580      	push	{r7, lr}
 8004d78:	b084      	sub	sp, #16
 8004d7a:	af00      	add	r7, sp, #0
 8004d7c:	6078      	str	r0, [r7, #4]
 8004d7e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d86:	2b01      	cmp	r3, #1
 8004d88:	d101      	bne.n	8004d8e <HAL_TIM_ConfigClockSource+0x18>
 8004d8a:	2302      	movs	r3, #2
 8004d8c:	e0a6      	b.n	8004edc <HAL_TIM_ConfigClockSource+0x166>
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	2201      	movs	r2, #1
 8004d92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	2202      	movs	r2, #2
 8004d9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	689b      	ldr	r3, [r3, #8]
 8004da4:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004dac:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004db4:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	68fa      	ldr	r2, [r7, #12]
 8004dbc:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004dbe:	683b      	ldr	r3, [r7, #0]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	2b40      	cmp	r3, #64	; 0x40
 8004dc4:	d067      	beq.n	8004e96 <HAL_TIM_ConfigClockSource+0x120>
 8004dc6:	2b40      	cmp	r3, #64	; 0x40
 8004dc8:	d80b      	bhi.n	8004de2 <HAL_TIM_ConfigClockSource+0x6c>
 8004dca:	2b10      	cmp	r3, #16
 8004dcc:	d073      	beq.n	8004eb6 <HAL_TIM_ConfigClockSource+0x140>
 8004dce:	2b10      	cmp	r3, #16
 8004dd0:	d802      	bhi.n	8004dd8 <HAL_TIM_ConfigClockSource+0x62>
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d06f      	beq.n	8004eb6 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8004dd6:	e078      	b.n	8004eca <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004dd8:	2b20      	cmp	r3, #32
 8004dda:	d06c      	beq.n	8004eb6 <HAL_TIM_ConfigClockSource+0x140>
 8004ddc:	2b30      	cmp	r3, #48	; 0x30
 8004dde:	d06a      	beq.n	8004eb6 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8004de0:	e073      	b.n	8004eca <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004de2:	2b70      	cmp	r3, #112	; 0x70
 8004de4:	d00d      	beq.n	8004e02 <HAL_TIM_ConfigClockSource+0x8c>
 8004de6:	2b70      	cmp	r3, #112	; 0x70
 8004de8:	d804      	bhi.n	8004df4 <HAL_TIM_ConfigClockSource+0x7e>
 8004dea:	2b50      	cmp	r3, #80	; 0x50
 8004dec:	d033      	beq.n	8004e56 <HAL_TIM_ConfigClockSource+0xe0>
 8004dee:	2b60      	cmp	r3, #96	; 0x60
 8004df0:	d041      	beq.n	8004e76 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8004df2:	e06a      	b.n	8004eca <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004df4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004df8:	d066      	beq.n	8004ec8 <HAL_TIM_ConfigClockSource+0x152>
 8004dfa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004dfe:	d017      	beq.n	8004e30 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8004e00:	e063      	b.n	8004eca <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	6818      	ldr	r0, [r3, #0]
 8004e06:	683b      	ldr	r3, [r7, #0]
 8004e08:	6899      	ldr	r1, [r3, #8]
 8004e0a:	683b      	ldr	r3, [r7, #0]
 8004e0c:	685a      	ldr	r2, [r3, #4]
 8004e0e:	683b      	ldr	r3, [r7, #0]
 8004e10:	68db      	ldr	r3, [r3, #12]
 8004e12:	f000 f989 	bl	8005128 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	689b      	ldr	r3, [r3, #8]
 8004e1c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004e24:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	68fa      	ldr	r2, [r7, #12]
 8004e2c:	609a      	str	r2, [r3, #8]
      break;
 8004e2e:	e04c      	b.n	8004eca <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	6818      	ldr	r0, [r3, #0]
 8004e34:	683b      	ldr	r3, [r7, #0]
 8004e36:	6899      	ldr	r1, [r3, #8]
 8004e38:	683b      	ldr	r3, [r7, #0]
 8004e3a:	685a      	ldr	r2, [r3, #4]
 8004e3c:	683b      	ldr	r3, [r7, #0]
 8004e3e:	68db      	ldr	r3, [r3, #12]
 8004e40:	f000 f972 	bl	8005128 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	689a      	ldr	r2, [r3, #8]
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004e52:	609a      	str	r2, [r3, #8]
      break;
 8004e54:	e039      	b.n	8004eca <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	6818      	ldr	r0, [r3, #0]
 8004e5a:	683b      	ldr	r3, [r7, #0]
 8004e5c:	6859      	ldr	r1, [r3, #4]
 8004e5e:	683b      	ldr	r3, [r7, #0]
 8004e60:	68db      	ldr	r3, [r3, #12]
 8004e62:	461a      	mov	r2, r3
 8004e64:	f000 f8e6 	bl	8005034 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	2150      	movs	r1, #80	; 0x50
 8004e6e:	4618      	mov	r0, r3
 8004e70:	f000 f93f 	bl	80050f2 <TIM_ITRx_SetConfig>
      break;
 8004e74:	e029      	b.n	8004eca <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	6818      	ldr	r0, [r3, #0]
 8004e7a:	683b      	ldr	r3, [r7, #0]
 8004e7c:	6859      	ldr	r1, [r3, #4]
 8004e7e:	683b      	ldr	r3, [r7, #0]
 8004e80:	68db      	ldr	r3, [r3, #12]
 8004e82:	461a      	mov	r2, r3
 8004e84:	f000 f905 	bl	8005092 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	2160      	movs	r1, #96	; 0x60
 8004e8e:	4618      	mov	r0, r3
 8004e90:	f000 f92f 	bl	80050f2 <TIM_ITRx_SetConfig>
      break;
 8004e94:	e019      	b.n	8004eca <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	6818      	ldr	r0, [r3, #0]
 8004e9a:	683b      	ldr	r3, [r7, #0]
 8004e9c:	6859      	ldr	r1, [r3, #4]
 8004e9e:	683b      	ldr	r3, [r7, #0]
 8004ea0:	68db      	ldr	r3, [r3, #12]
 8004ea2:	461a      	mov	r2, r3
 8004ea4:	f000 f8c6 	bl	8005034 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	2140      	movs	r1, #64	; 0x40
 8004eae:	4618      	mov	r0, r3
 8004eb0:	f000 f91f 	bl	80050f2 <TIM_ITRx_SetConfig>
      break;
 8004eb4:	e009      	b.n	8004eca <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681a      	ldr	r2, [r3, #0]
 8004eba:	683b      	ldr	r3, [r7, #0]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	4619      	mov	r1, r3
 8004ec0:	4610      	mov	r0, r2
 8004ec2:	f000 f916 	bl	80050f2 <TIM_ITRx_SetConfig>
      break;
 8004ec6:	e000      	b.n	8004eca <HAL_TIM_ConfigClockSource+0x154>
      break;
 8004ec8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	2201      	movs	r2, #1
 8004ece:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	2200      	movs	r2, #0
 8004ed6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004eda:	2300      	movs	r3, #0
}
 8004edc:	4618      	mov	r0, r3
 8004ede:	3710      	adds	r7, #16
 8004ee0:	46bd      	mov	sp, r7
 8004ee2:	bd80      	pop	{r7, pc}

08004ee4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004ee4:	b480      	push	{r7}
 8004ee6:	b083      	sub	sp, #12
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004eec:	bf00      	nop
 8004eee:	370c      	adds	r7, #12
 8004ef0:	46bd      	mov	sp, r7
 8004ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef6:	4770      	bx	lr

08004ef8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004ef8:	b480      	push	{r7}
 8004efa:	b083      	sub	sp, #12
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004f00:	bf00      	nop
 8004f02:	370c      	adds	r7, #12
 8004f04:	46bd      	mov	sp, r7
 8004f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0a:	4770      	bx	lr

08004f0c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004f0c:	b480      	push	{r7}
 8004f0e:	b083      	sub	sp, #12
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004f14:	bf00      	nop
 8004f16:	370c      	adds	r7, #12
 8004f18:	46bd      	mov	sp, r7
 8004f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f1e:	4770      	bx	lr

08004f20 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004f20:	b480      	push	{r7}
 8004f22:	b083      	sub	sp, #12
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004f28:	bf00      	nop
 8004f2a:	370c      	adds	r7, #12
 8004f2c:	46bd      	mov	sp, r7
 8004f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f32:	4770      	bx	lr

08004f34 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004f34:	b480      	push	{r7}
 8004f36:	b085      	sub	sp, #20
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	6078      	str	r0, [r7, #4]
 8004f3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	4a34      	ldr	r2, [pc, #208]	; (8005018 <TIM_Base_SetConfig+0xe4>)
 8004f48:	4293      	cmp	r3, r2
 8004f4a:	d00f      	beq.n	8004f6c <TIM_Base_SetConfig+0x38>
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f52:	d00b      	beq.n	8004f6c <TIM_Base_SetConfig+0x38>
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	4a31      	ldr	r2, [pc, #196]	; (800501c <TIM_Base_SetConfig+0xe8>)
 8004f58:	4293      	cmp	r3, r2
 8004f5a:	d007      	beq.n	8004f6c <TIM_Base_SetConfig+0x38>
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	4a30      	ldr	r2, [pc, #192]	; (8005020 <TIM_Base_SetConfig+0xec>)
 8004f60:	4293      	cmp	r3, r2
 8004f62:	d003      	beq.n	8004f6c <TIM_Base_SetConfig+0x38>
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	4a2f      	ldr	r2, [pc, #188]	; (8005024 <TIM_Base_SetConfig+0xf0>)
 8004f68:	4293      	cmp	r3, r2
 8004f6a:	d108      	bne.n	8004f7e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f72:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004f74:	683b      	ldr	r3, [r7, #0]
 8004f76:	685b      	ldr	r3, [r3, #4]
 8004f78:	68fa      	ldr	r2, [r7, #12]
 8004f7a:	4313      	orrs	r3, r2
 8004f7c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	4a25      	ldr	r2, [pc, #148]	; (8005018 <TIM_Base_SetConfig+0xe4>)
 8004f82:	4293      	cmp	r3, r2
 8004f84:	d01b      	beq.n	8004fbe <TIM_Base_SetConfig+0x8a>
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f8c:	d017      	beq.n	8004fbe <TIM_Base_SetConfig+0x8a>
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	4a22      	ldr	r2, [pc, #136]	; (800501c <TIM_Base_SetConfig+0xe8>)
 8004f92:	4293      	cmp	r3, r2
 8004f94:	d013      	beq.n	8004fbe <TIM_Base_SetConfig+0x8a>
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	4a21      	ldr	r2, [pc, #132]	; (8005020 <TIM_Base_SetConfig+0xec>)
 8004f9a:	4293      	cmp	r3, r2
 8004f9c:	d00f      	beq.n	8004fbe <TIM_Base_SetConfig+0x8a>
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	4a20      	ldr	r2, [pc, #128]	; (8005024 <TIM_Base_SetConfig+0xf0>)
 8004fa2:	4293      	cmp	r3, r2
 8004fa4:	d00b      	beq.n	8004fbe <TIM_Base_SetConfig+0x8a>
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	4a1f      	ldr	r2, [pc, #124]	; (8005028 <TIM_Base_SetConfig+0xf4>)
 8004faa:	4293      	cmp	r3, r2
 8004fac:	d007      	beq.n	8004fbe <TIM_Base_SetConfig+0x8a>
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	4a1e      	ldr	r2, [pc, #120]	; (800502c <TIM_Base_SetConfig+0xf8>)
 8004fb2:	4293      	cmp	r3, r2
 8004fb4:	d003      	beq.n	8004fbe <TIM_Base_SetConfig+0x8a>
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	4a1d      	ldr	r2, [pc, #116]	; (8005030 <TIM_Base_SetConfig+0xfc>)
 8004fba:	4293      	cmp	r3, r2
 8004fbc:	d108      	bne.n	8004fd0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004fc4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004fc6:	683b      	ldr	r3, [r7, #0]
 8004fc8:	68db      	ldr	r3, [r3, #12]
 8004fca:	68fa      	ldr	r2, [r7, #12]
 8004fcc:	4313      	orrs	r3, r2
 8004fce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004fd6:	683b      	ldr	r3, [r7, #0]
 8004fd8:	695b      	ldr	r3, [r3, #20]
 8004fda:	4313      	orrs	r3, r2
 8004fdc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	68fa      	ldr	r2, [r7, #12]
 8004fe2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004fe4:	683b      	ldr	r3, [r7, #0]
 8004fe6:	689a      	ldr	r2, [r3, #8]
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004fec:	683b      	ldr	r3, [r7, #0]
 8004fee:	681a      	ldr	r2, [r3, #0]
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	4a08      	ldr	r2, [pc, #32]	; (8005018 <TIM_Base_SetConfig+0xe4>)
 8004ff8:	4293      	cmp	r3, r2
 8004ffa:	d103      	bne.n	8005004 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004ffc:	683b      	ldr	r3, [r7, #0]
 8004ffe:	691a      	ldr	r2, [r3, #16]
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	2201      	movs	r2, #1
 8005008:	615a      	str	r2, [r3, #20]
}
 800500a:	bf00      	nop
 800500c:	3714      	adds	r7, #20
 800500e:	46bd      	mov	sp, r7
 8005010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005014:	4770      	bx	lr
 8005016:	bf00      	nop
 8005018:	40010000 	.word	0x40010000
 800501c:	40000400 	.word	0x40000400
 8005020:	40000800 	.word	0x40000800
 8005024:	40000c00 	.word	0x40000c00
 8005028:	40014000 	.word	0x40014000
 800502c:	40014400 	.word	0x40014400
 8005030:	40014800 	.word	0x40014800

08005034 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005034:	b480      	push	{r7}
 8005036:	b087      	sub	sp, #28
 8005038:	af00      	add	r7, sp, #0
 800503a:	60f8      	str	r0, [r7, #12]
 800503c:	60b9      	str	r1, [r7, #8]
 800503e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	6a1b      	ldr	r3, [r3, #32]
 8005044:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	6a1b      	ldr	r3, [r3, #32]
 800504a:	f023 0201 	bic.w	r2, r3, #1
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	699b      	ldr	r3, [r3, #24]
 8005056:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005058:	693b      	ldr	r3, [r7, #16]
 800505a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800505e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	011b      	lsls	r3, r3, #4
 8005064:	693a      	ldr	r2, [r7, #16]
 8005066:	4313      	orrs	r3, r2
 8005068:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800506a:	697b      	ldr	r3, [r7, #20]
 800506c:	f023 030a 	bic.w	r3, r3, #10
 8005070:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005072:	697a      	ldr	r2, [r7, #20]
 8005074:	68bb      	ldr	r3, [r7, #8]
 8005076:	4313      	orrs	r3, r2
 8005078:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	693a      	ldr	r2, [r7, #16]
 800507e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	697a      	ldr	r2, [r7, #20]
 8005084:	621a      	str	r2, [r3, #32]
}
 8005086:	bf00      	nop
 8005088:	371c      	adds	r7, #28
 800508a:	46bd      	mov	sp, r7
 800508c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005090:	4770      	bx	lr

08005092 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005092:	b480      	push	{r7}
 8005094:	b087      	sub	sp, #28
 8005096:	af00      	add	r7, sp, #0
 8005098:	60f8      	str	r0, [r7, #12]
 800509a:	60b9      	str	r1, [r7, #8]
 800509c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	6a1b      	ldr	r3, [r3, #32]
 80050a2:	f023 0210 	bic.w	r2, r3, #16
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	699b      	ldr	r3, [r3, #24]
 80050ae:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	6a1b      	ldr	r3, [r3, #32]
 80050b4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80050b6:	697b      	ldr	r3, [r7, #20]
 80050b8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80050bc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	031b      	lsls	r3, r3, #12
 80050c2:	697a      	ldr	r2, [r7, #20]
 80050c4:	4313      	orrs	r3, r2
 80050c6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80050c8:	693b      	ldr	r3, [r7, #16]
 80050ca:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80050ce:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80050d0:	68bb      	ldr	r3, [r7, #8]
 80050d2:	011b      	lsls	r3, r3, #4
 80050d4:	693a      	ldr	r2, [r7, #16]
 80050d6:	4313      	orrs	r3, r2
 80050d8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	697a      	ldr	r2, [r7, #20]
 80050de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	693a      	ldr	r2, [r7, #16]
 80050e4:	621a      	str	r2, [r3, #32]
}
 80050e6:	bf00      	nop
 80050e8:	371c      	adds	r7, #28
 80050ea:	46bd      	mov	sp, r7
 80050ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f0:	4770      	bx	lr

080050f2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80050f2:	b480      	push	{r7}
 80050f4:	b085      	sub	sp, #20
 80050f6:	af00      	add	r7, sp, #0
 80050f8:	6078      	str	r0, [r7, #4]
 80050fa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	689b      	ldr	r3, [r3, #8]
 8005100:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005108:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800510a:	683a      	ldr	r2, [r7, #0]
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	4313      	orrs	r3, r2
 8005110:	f043 0307 	orr.w	r3, r3, #7
 8005114:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	68fa      	ldr	r2, [r7, #12]
 800511a:	609a      	str	r2, [r3, #8]
}
 800511c:	bf00      	nop
 800511e:	3714      	adds	r7, #20
 8005120:	46bd      	mov	sp, r7
 8005122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005126:	4770      	bx	lr

08005128 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005128:	b480      	push	{r7}
 800512a:	b087      	sub	sp, #28
 800512c:	af00      	add	r7, sp, #0
 800512e:	60f8      	str	r0, [r7, #12]
 8005130:	60b9      	str	r1, [r7, #8]
 8005132:	607a      	str	r2, [r7, #4]
 8005134:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	689b      	ldr	r3, [r3, #8]
 800513a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800513c:	697b      	ldr	r3, [r7, #20]
 800513e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005142:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005144:	683b      	ldr	r3, [r7, #0]
 8005146:	021a      	lsls	r2, r3, #8
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	431a      	orrs	r2, r3
 800514c:	68bb      	ldr	r3, [r7, #8]
 800514e:	4313      	orrs	r3, r2
 8005150:	697a      	ldr	r2, [r7, #20]
 8005152:	4313      	orrs	r3, r2
 8005154:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	697a      	ldr	r2, [r7, #20]
 800515a:	609a      	str	r2, [r3, #8]
}
 800515c:	bf00      	nop
 800515e:	371c      	adds	r7, #28
 8005160:	46bd      	mov	sp, r7
 8005162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005166:	4770      	bx	lr

08005168 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005168:	b480      	push	{r7}
 800516a:	b085      	sub	sp, #20
 800516c:	af00      	add	r7, sp, #0
 800516e:	6078      	str	r0, [r7, #4]
 8005170:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005178:	2b01      	cmp	r3, #1
 800517a:	d101      	bne.n	8005180 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800517c:	2302      	movs	r3, #2
 800517e:	e050      	b.n	8005222 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	2201      	movs	r2, #1
 8005184:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	2202      	movs	r2, #2
 800518c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	685b      	ldr	r3, [r3, #4]
 8005196:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	689b      	ldr	r3, [r3, #8]
 800519e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051a6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80051a8:	683b      	ldr	r3, [r7, #0]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	68fa      	ldr	r2, [r7, #12]
 80051ae:	4313      	orrs	r3, r2
 80051b0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	68fa      	ldr	r2, [r7, #12]
 80051b8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	4a1c      	ldr	r2, [pc, #112]	; (8005230 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80051c0:	4293      	cmp	r3, r2
 80051c2:	d018      	beq.n	80051f6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051cc:	d013      	beq.n	80051f6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	4a18      	ldr	r2, [pc, #96]	; (8005234 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80051d4:	4293      	cmp	r3, r2
 80051d6:	d00e      	beq.n	80051f6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	4a16      	ldr	r2, [pc, #88]	; (8005238 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80051de:	4293      	cmp	r3, r2
 80051e0:	d009      	beq.n	80051f6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	4a15      	ldr	r2, [pc, #84]	; (800523c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80051e8:	4293      	cmp	r3, r2
 80051ea:	d004      	beq.n	80051f6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	4a13      	ldr	r2, [pc, #76]	; (8005240 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80051f2:	4293      	cmp	r3, r2
 80051f4:	d10c      	bne.n	8005210 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80051f6:	68bb      	ldr	r3, [r7, #8]
 80051f8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80051fc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80051fe:	683b      	ldr	r3, [r7, #0]
 8005200:	685b      	ldr	r3, [r3, #4]
 8005202:	68ba      	ldr	r2, [r7, #8]
 8005204:	4313      	orrs	r3, r2
 8005206:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	68ba      	ldr	r2, [r7, #8]
 800520e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	2201      	movs	r2, #1
 8005214:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	2200      	movs	r2, #0
 800521c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005220:	2300      	movs	r3, #0
}
 8005222:	4618      	mov	r0, r3
 8005224:	3714      	adds	r7, #20
 8005226:	46bd      	mov	sp, r7
 8005228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800522c:	4770      	bx	lr
 800522e:	bf00      	nop
 8005230:	40010000 	.word	0x40010000
 8005234:	40000400 	.word	0x40000400
 8005238:	40000800 	.word	0x40000800
 800523c:	40000c00 	.word	0x40000c00
 8005240:	40014000 	.word	0x40014000

08005244 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005244:	b480      	push	{r7}
 8005246:	b083      	sub	sp, #12
 8005248:	af00      	add	r7, sp, #0
 800524a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800524c:	bf00      	nop
 800524e:	370c      	adds	r7, #12
 8005250:	46bd      	mov	sp, r7
 8005252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005256:	4770      	bx	lr

08005258 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005258:	b480      	push	{r7}
 800525a:	b083      	sub	sp, #12
 800525c:	af00      	add	r7, sp, #0
 800525e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005260:	bf00      	nop
 8005262:	370c      	adds	r7, #12
 8005264:	46bd      	mov	sp, r7
 8005266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526a:	4770      	bx	lr

0800526c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800526c:	b580      	push	{r7, lr}
 800526e:	b082      	sub	sp, #8
 8005270:	af00      	add	r7, sp, #0
 8005272:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	2b00      	cmp	r3, #0
 8005278:	d101      	bne.n	800527e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800527a:	2301      	movs	r3, #1
 800527c:	e03f      	b.n	80052fe <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005284:	b2db      	uxtb	r3, r3
 8005286:	2b00      	cmp	r3, #0
 8005288:	d106      	bne.n	8005298 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	2200      	movs	r2, #0
 800528e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005292:	6878      	ldr	r0, [r7, #4]
 8005294:	f7fc fee2 	bl	800205c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	2224      	movs	r2, #36	; 0x24
 800529c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	68da      	ldr	r2, [r3, #12]
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80052ae:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80052b0:	6878      	ldr	r0, [r7, #4]
 80052b2:	f000 fb97 	bl	80059e4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	691a      	ldr	r2, [r3, #16]
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80052c4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	695a      	ldr	r2, [r3, #20]
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80052d4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	68da      	ldr	r2, [r3, #12]
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80052e4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	2200      	movs	r2, #0
 80052ea:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	2220      	movs	r2, #32
 80052f0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	2220      	movs	r2, #32
 80052f8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80052fc:	2300      	movs	r3, #0
}
 80052fe:	4618      	mov	r0, r3
 8005300:	3708      	adds	r7, #8
 8005302:	46bd      	mov	sp, r7
 8005304:	bd80      	pop	{r7, pc}

08005306 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005306:	b580      	push	{r7, lr}
 8005308:	b088      	sub	sp, #32
 800530a:	af02      	add	r7, sp, #8
 800530c:	60f8      	str	r0, [r7, #12]
 800530e:	60b9      	str	r1, [r7, #8]
 8005310:	603b      	str	r3, [r7, #0]
 8005312:	4613      	mov	r3, r2
 8005314:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8005316:	2300      	movs	r3, #0
 8005318:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005320:	b2db      	uxtb	r3, r3
 8005322:	2b20      	cmp	r3, #32
 8005324:	f040 8083 	bne.w	800542e <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8005328:	68bb      	ldr	r3, [r7, #8]
 800532a:	2b00      	cmp	r3, #0
 800532c:	d002      	beq.n	8005334 <HAL_UART_Transmit+0x2e>
 800532e:	88fb      	ldrh	r3, [r7, #6]
 8005330:	2b00      	cmp	r3, #0
 8005332:	d101      	bne.n	8005338 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8005334:	2301      	movs	r3, #1
 8005336:	e07b      	b.n	8005430 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800533e:	2b01      	cmp	r3, #1
 8005340:	d101      	bne.n	8005346 <HAL_UART_Transmit+0x40>
 8005342:	2302      	movs	r3, #2
 8005344:	e074      	b.n	8005430 <HAL_UART_Transmit+0x12a>
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	2201      	movs	r2, #1
 800534a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	2200      	movs	r2, #0
 8005352:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	2221      	movs	r2, #33	; 0x21
 8005358:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800535c:	f7fd f83a 	bl	80023d4 <HAL_GetTick>
 8005360:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	88fa      	ldrh	r2, [r7, #6]
 8005366:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	88fa      	ldrh	r2, [r7, #6]
 800536c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	2200      	movs	r2, #0
 8005372:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8005376:	e042      	b.n	80053fe <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800537c:	b29b      	uxth	r3, r3
 800537e:	3b01      	subs	r3, #1
 8005380:	b29a      	uxth	r2, r3
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	689b      	ldr	r3, [r3, #8]
 800538a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800538e:	d122      	bne.n	80053d6 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005390:	683b      	ldr	r3, [r7, #0]
 8005392:	9300      	str	r3, [sp, #0]
 8005394:	697b      	ldr	r3, [r7, #20]
 8005396:	2200      	movs	r2, #0
 8005398:	2180      	movs	r1, #128	; 0x80
 800539a:	68f8      	ldr	r0, [r7, #12]
 800539c:	f000 f9b6 	bl	800570c <UART_WaitOnFlagUntilTimeout>
 80053a0:	4603      	mov	r3, r0
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d001      	beq.n	80053aa <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 80053a6:	2303      	movs	r3, #3
 80053a8:	e042      	b.n	8005430 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 80053aa:	68bb      	ldr	r3, [r7, #8]
 80053ac:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80053ae:	693b      	ldr	r3, [r7, #16]
 80053b0:	881b      	ldrh	r3, [r3, #0]
 80053b2:	461a      	mov	r2, r3
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80053bc:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	691b      	ldr	r3, [r3, #16]
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d103      	bne.n	80053ce <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 80053c6:	68bb      	ldr	r3, [r7, #8]
 80053c8:	3302      	adds	r3, #2
 80053ca:	60bb      	str	r3, [r7, #8]
 80053cc:	e017      	b.n	80053fe <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 80053ce:	68bb      	ldr	r3, [r7, #8]
 80053d0:	3301      	adds	r3, #1
 80053d2:	60bb      	str	r3, [r7, #8]
 80053d4:	e013      	b.n	80053fe <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80053d6:	683b      	ldr	r3, [r7, #0]
 80053d8:	9300      	str	r3, [sp, #0]
 80053da:	697b      	ldr	r3, [r7, #20]
 80053dc:	2200      	movs	r2, #0
 80053de:	2180      	movs	r1, #128	; 0x80
 80053e0:	68f8      	ldr	r0, [r7, #12]
 80053e2:	f000 f993 	bl	800570c <UART_WaitOnFlagUntilTimeout>
 80053e6:	4603      	mov	r3, r0
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d001      	beq.n	80053f0 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 80053ec:	2303      	movs	r3, #3
 80053ee:	e01f      	b.n	8005430 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80053f0:	68bb      	ldr	r3, [r7, #8]
 80053f2:	1c5a      	adds	r2, r3, #1
 80053f4:	60ba      	str	r2, [r7, #8]
 80053f6:	781a      	ldrb	r2, [r3, #0]
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005402:	b29b      	uxth	r3, r3
 8005404:	2b00      	cmp	r3, #0
 8005406:	d1b7      	bne.n	8005378 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005408:	683b      	ldr	r3, [r7, #0]
 800540a:	9300      	str	r3, [sp, #0]
 800540c:	697b      	ldr	r3, [r7, #20]
 800540e:	2200      	movs	r2, #0
 8005410:	2140      	movs	r1, #64	; 0x40
 8005412:	68f8      	ldr	r0, [r7, #12]
 8005414:	f000 f97a 	bl	800570c <UART_WaitOnFlagUntilTimeout>
 8005418:	4603      	mov	r3, r0
 800541a:	2b00      	cmp	r3, #0
 800541c:	d001      	beq.n	8005422 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 800541e:	2303      	movs	r3, #3
 8005420:	e006      	b.n	8005430 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	2220      	movs	r2, #32
 8005426:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 800542a:	2300      	movs	r3, #0
 800542c:	e000      	b.n	8005430 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 800542e:	2302      	movs	r3, #2
  }
}
 8005430:	4618      	mov	r0, r3
 8005432:	3718      	adds	r7, #24
 8005434:	46bd      	mov	sp, r7
 8005436:	bd80      	pop	{r7, pc}

08005438 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005438:	b480      	push	{r7}
 800543a:	b085      	sub	sp, #20
 800543c:	af00      	add	r7, sp, #0
 800543e:	60f8      	str	r0, [r7, #12]
 8005440:	60b9      	str	r1, [r7, #8]
 8005442:	4613      	mov	r3, r2
 8005444:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800544c:	b2db      	uxtb	r3, r3
 800544e:	2b20      	cmp	r3, #32
 8005450:	d140      	bne.n	80054d4 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005452:	68bb      	ldr	r3, [r7, #8]
 8005454:	2b00      	cmp	r3, #0
 8005456:	d002      	beq.n	800545e <HAL_UART_Receive_IT+0x26>
 8005458:	88fb      	ldrh	r3, [r7, #6]
 800545a:	2b00      	cmp	r3, #0
 800545c:	d101      	bne.n	8005462 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800545e:	2301      	movs	r3, #1
 8005460:	e039      	b.n	80054d6 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005468:	2b01      	cmp	r3, #1
 800546a:	d101      	bne.n	8005470 <HAL_UART_Receive_IT+0x38>
 800546c:	2302      	movs	r3, #2
 800546e:	e032      	b.n	80054d6 <HAL_UART_Receive_IT+0x9e>
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	2201      	movs	r2, #1
 8005474:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	68ba      	ldr	r2, [r7, #8]
 800547c:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	88fa      	ldrh	r2, [r7, #6]
 8005482:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	88fa      	ldrh	r2, [r7, #6]
 8005488:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	2200      	movs	r2, #0
 800548e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	2222      	movs	r2, #34	; 0x22
 8005494:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	2200      	movs	r2, #0
 800549c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	68da      	ldr	r2, [r3, #12]
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80054ae:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	695a      	ldr	r2, [r3, #20]
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	f042 0201 	orr.w	r2, r2, #1
 80054be:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	68da      	ldr	r2, [r3, #12]
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	f042 0220 	orr.w	r2, r2, #32
 80054ce:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80054d0:	2300      	movs	r3, #0
 80054d2:	e000      	b.n	80054d6 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 80054d4:	2302      	movs	r3, #2
  }
}
 80054d6:	4618      	mov	r0, r3
 80054d8:	3714      	adds	r7, #20
 80054da:	46bd      	mov	sp, r7
 80054dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e0:	4770      	bx	lr
	...

080054e4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80054e4:	b580      	push	{r7, lr}
 80054e6:	b088      	sub	sp, #32
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	68db      	ldr	r3, [r3, #12]
 80054fa:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	695b      	ldr	r3, [r3, #20]
 8005502:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8005504:	2300      	movs	r3, #0
 8005506:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8005508:	2300      	movs	r3, #0
 800550a:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800550c:	69fb      	ldr	r3, [r7, #28]
 800550e:	f003 030f 	and.w	r3, r3, #15
 8005512:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8005514:	693b      	ldr	r3, [r7, #16]
 8005516:	2b00      	cmp	r3, #0
 8005518:	d10d      	bne.n	8005536 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800551a:	69fb      	ldr	r3, [r7, #28]
 800551c:	f003 0320 	and.w	r3, r3, #32
 8005520:	2b00      	cmp	r3, #0
 8005522:	d008      	beq.n	8005536 <HAL_UART_IRQHandler+0x52>
 8005524:	69bb      	ldr	r3, [r7, #24]
 8005526:	f003 0320 	and.w	r3, r3, #32
 800552a:	2b00      	cmp	r3, #0
 800552c:	d003      	beq.n	8005536 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800552e:	6878      	ldr	r0, [r7, #4]
 8005530:	f000 f9d6 	bl	80058e0 <UART_Receive_IT>
      return;
 8005534:	e0d1      	b.n	80056da <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005536:	693b      	ldr	r3, [r7, #16]
 8005538:	2b00      	cmp	r3, #0
 800553a:	f000 80b0 	beq.w	800569e <HAL_UART_IRQHandler+0x1ba>
 800553e:	697b      	ldr	r3, [r7, #20]
 8005540:	f003 0301 	and.w	r3, r3, #1
 8005544:	2b00      	cmp	r3, #0
 8005546:	d105      	bne.n	8005554 <HAL_UART_IRQHandler+0x70>
 8005548:	69bb      	ldr	r3, [r7, #24]
 800554a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800554e:	2b00      	cmp	r3, #0
 8005550:	f000 80a5 	beq.w	800569e <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005554:	69fb      	ldr	r3, [r7, #28]
 8005556:	f003 0301 	and.w	r3, r3, #1
 800555a:	2b00      	cmp	r3, #0
 800555c:	d00a      	beq.n	8005574 <HAL_UART_IRQHandler+0x90>
 800555e:	69bb      	ldr	r3, [r7, #24]
 8005560:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005564:	2b00      	cmp	r3, #0
 8005566:	d005      	beq.n	8005574 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800556c:	f043 0201 	orr.w	r2, r3, #1
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005574:	69fb      	ldr	r3, [r7, #28]
 8005576:	f003 0304 	and.w	r3, r3, #4
 800557a:	2b00      	cmp	r3, #0
 800557c:	d00a      	beq.n	8005594 <HAL_UART_IRQHandler+0xb0>
 800557e:	697b      	ldr	r3, [r7, #20]
 8005580:	f003 0301 	and.w	r3, r3, #1
 8005584:	2b00      	cmp	r3, #0
 8005586:	d005      	beq.n	8005594 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800558c:	f043 0202 	orr.w	r2, r3, #2
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005594:	69fb      	ldr	r3, [r7, #28]
 8005596:	f003 0302 	and.w	r3, r3, #2
 800559a:	2b00      	cmp	r3, #0
 800559c:	d00a      	beq.n	80055b4 <HAL_UART_IRQHandler+0xd0>
 800559e:	697b      	ldr	r3, [r7, #20]
 80055a0:	f003 0301 	and.w	r3, r3, #1
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d005      	beq.n	80055b4 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055ac:	f043 0204 	orr.w	r2, r3, #4
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80055b4:	69fb      	ldr	r3, [r7, #28]
 80055b6:	f003 0308 	and.w	r3, r3, #8
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d00f      	beq.n	80055de <HAL_UART_IRQHandler+0xfa>
 80055be:	69bb      	ldr	r3, [r7, #24]
 80055c0:	f003 0320 	and.w	r3, r3, #32
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d104      	bne.n	80055d2 <HAL_UART_IRQHandler+0xee>
 80055c8:	697b      	ldr	r3, [r7, #20]
 80055ca:	f003 0301 	and.w	r3, r3, #1
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d005      	beq.n	80055de <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055d6:	f043 0208 	orr.w	r2, r3, #8
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d078      	beq.n	80056d8 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80055e6:	69fb      	ldr	r3, [r7, #28]
 80055e8:	f003 0320 	and.w	r3, r3, #32
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d007      	beq.n	8005600 <HAL_UART_IRQHandler+0x11c>
 80055f0:	69bb      	ldr	r3, [r7, #24]
 80055f2:	f003 0320 	and.w	r3, r3, #32
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d002      	beq.n	8005600 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 80055fa:	6878      	ldr	r0, [r7, #4]
 80055fc:	f000 f970 	bl	80058e0 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	695b      	ldr	r3, [r3, #20]
 8005606:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800560a:	2b40      	cmp	r3, #64	; 0x40
 800560c:	bf0c      	ite	eq
 800560e:	2301      	moveq	r3, #1
 8005610:	2300      	movne	r3, #0
 8005612:	b2db      	uxtb	r3, r3
 8005614:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800561a:	f003 0308 	and.w	r3, r3, #8
 800561e:	2b00      	cmp	r3, #0
 8005620:	d102      	bne.n	8005628 <HAL_UART_IRQHandler+0x144>
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	2b00      	cmp	r3, #0
 8005626:	d031      	beq.n	800568c <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005628:	6878      	ldr	r0, [r7, #4]
 800562a:	f000 f8b9 	bl	80057a0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	695b      	ldr	r3, [r3, #20]
 8005634:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005638:	2b40      	cmp	r3, #64	; 0x40
 800563a:	d123      	bne.n	8005684 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	695a      	ldr	r2, [r3, #20]
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800564a:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005650:	2b00      	cmp	r3, #0
 8005652:	d013      	beq.n	800567c <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005658:	4a21      	ldr	r2, [pc, #132]	; (80056e0 <HAL_UART_IRQHandler+0x1fc>)
 800565a:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005660:	4618      	mov	r0, r3
 8005662:	f7fd fe15 	bl	8003290 <HAL_DMA_Abort_IT>
 8005666:	4603      	mov	r3, r0
 8005668:	2b00      	cmp	r3, #0
 800566a:	d016      	beq.n	800569a <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005670:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005672:	687a      	ldr	r2, [r7, #4]
 8005674:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005676:	4610      	mov	r0, r2
 8005678:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800567a:	e00e      	b.n	800569a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800567c:	6878      	ldr	r0, [r7, #4]
 800567e:	f000 f83b 	bl	80056f8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005682:	e00a      	b.n	800569a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005684:	6878      	ldr	r0, [r7, #4]
 8005686:	f000 f837 	bl	80056f8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800568a:	e006      	b.n	800569a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800568c:	6878      	ldr	r0, [r7, #4]
 800568e:	f000 f833 	bl	80056f8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	2200      	movs	r2, #0
 8005696:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8005698:	e01e      	b.n	80056d8 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800569a:	bf00      	nop
    return;
 800569c:	e01c      	b.n	80056d8 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800569e:	69fb      	ldr	r3, [r7, #28]
 80056a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d008      	beq.n	80056ba <HAL_UART_IRQHandler+0x1d6>
 80056a8:	69bb      	ldr	r3, [r7, #24]
 80056aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d003      	beq.n	80056ba <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 80056b2:	6878      	ldr	r0, [r7, #4]
 80056b4:	f000 f8a6 	bl	8005804 <UART_Transmit_IT>
    return;
 80056b8:	e00f      	b.n	80056da <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80056ba:	69fb      	ldr	r3, [r7, #28]
 80056bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d00a      	beq.n	80056da <HAL_UART_IRQHandler+0x1f6>
 80056c4:	69bb      	ldr	r3, [r7, #24]
 80056c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d005      	beq.n	80056da <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 80056ce:	6878      	ldr	r0, [r7, #4]
 80056d0:	f000 f8ee 	bl	80058b0 <UART_EndTransmit_IT>
    return;
 80056d4:	bf00      	nop
 80056d6:	e000      	b.n	80056da <HAL_UART_IRQHandler+0x1f6>
    return;
 80056d8:	bf00      	nop
  }
}
 80056da:	3720      	adds	r7, #32
 80056dc:	46bd      	mov	sp, r7
 80056de:	bd80      	pop	{r7, pc}
 80056e0:	080057dd 	.word	0x080057dd

080056e4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80056e4:	b480      	push	{r7}
 80056e6:	b083      	sub	sp, #12
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80056ec:	bf00      	nop
 80056ee:	370c      	adds	r7, #12
 80056f0:	46bd      	mov	sp, r7
 80056f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f6:	4770      	bx	lr

080056f8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80056f8:	b480      	push	{r7}
 80056fa:	b083      	sub	sp, #12
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005700:	bf00      	nop
 8005702:	370c      	adds	r7, #12
 8005704:	46bd      	mov	sp, r7
 8005706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800570a:	4770      	bx	lr

0800570c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800570c:	b580      	push	{r7, lr}
 800570e:	b084      	sub	sp, #16
 8005710:	af00      	add	r7, sp, #0
 8005712:	60f8      	str	r0, [r7, #12]
 8005714:	60b9      	str	r1, [r7, #8]
 8005716:	603b      	str	r3, [r7, #0]
 8005718:	4613      	mov	r3, r2
 800571a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800571c:	e02c      	b.n	8005778 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800571e:	69bb      	ldr	r3, [r7, #24]
 8005720:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005724:	d028      	beq.n	8005778 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005726:	69bb      	ldr	r3, [r7, #24]
 8005728:	2b00      	cmp	r3, #0
 800572a:	d007      	beq.n	800573c <UART_WaitOnFlagUntilTimeout+0x30>
 800572c:	f7fc fe52 	bl	80023d4 <HAL_GetTick>
 8005730:	4602      	mov	r2, r0
 8005732:	683b      	ldr	r3, [r7, #0]
 8005734:	1ad3      	subs	r3, r2, r3
 8005736:	69ba      	ldr	r2, [r7, #24]
 8005738:	429a      	cmp	r2, r3
 800573a:	d21d      	bcs.n	8005778 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	68da      	ldr	r2, [r3, #12]
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800574a:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	695a      	ldr	r2, [r3, #20]
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	f022 0201 	bic.w	r2, r2, #1
 800575a:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	2220      	movs	r2, #32
 8005760:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	2220      	movs	r2, #32
 8005768:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	2200      	movs	r2, #0
 8005770:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8005774:	2303      	movs	r3, #3
 8005776:	e00f      	b.n	8005798 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	681a      	ldr	r2, [r3, #0]
 800577e:	68bb      	ldr	r3, [r7, #8]
 8005780:	4013      	ands	r3, r2
 8005782:	68ba      	ldr	r2, [r7, #8]
 8005784:	429a      	cmp	r2, r3
 8005786:	bf0c      	ite	eq
 8005788:	2301      	moveq	r3, #1
 800578a:	2300      	movne	r3, #0
 800578c:	b2db      	uxtb	r3, r3
 800578e:	461a      	mov	r2, r3
 8005790:	79fb      	ldrb	r3, [r7, #7]
 8005792:	429a      	cmp	r2, r3
 8005794:	d0c3      	beq.n	800571e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005796:	2300      	movs	r3, #0
}
 8005798:	4618      	mov	r0, r3
 800579a:	3710      	adds	r7, #16
 800579c:	46bd      	mov	sp, r7
 800579e:	bd80      	pop	{r7, pc}

080057a0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80057a0:	b480      	push	{r7}
 80057a2:	b083      	sub	sp, #12
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	68da      	ldr	r2, [r3, #12]
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80057b6:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	695a      	ldr	r2, [r3, #20]
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	f022 0201 	bic.w	r2, r2, #1
 80057c6:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	2220      	movs	r2, #32
 80057cc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 80057d0:	bf00      	nop
 80057d2:	370c      	adds	r7, #12
 80057d4:	46bd      	mov	sp, r7
 80057d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057da:	4770      	bx	lr

080057dc <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80057dc:	b580      	push	{r7, lr}
 80057de:	b084      	sub	sp, #16
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057e8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	2200      	movs	r2, #0
 80057ee:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	2200      	movs	r2, #0
 80057f4:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80057f6:	68f8      	ldr	r0, [r7, #12]
 80057f8:	f7ff ff7e 	bl	80056f8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80057fc:	bf00      	nop
 80057fe:	3710      	adds	r7, #16
 8005800:	46bd      	mov	sp, r7
 8005802:	bd80      	pop	{r7, pc}

08005804 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005804:	b480      	push	{r7}
 8005806:	b085      	sub	sp, #20
 8005808:	af00      	add	r7, sp, #0
 800580a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005812:	b2db      	uxtb	r3, r3
 8005814:	2b21      	cmp	r3, #33	; 0x21
 8005816:	d144      	bne.n	80058a2 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	689b      	ldr	r3, [r3, #8]
 800581c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005820:	d11a      	bne.n	8005858 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	6a1b      	ldr	r3, [r3, #32]
 8005826:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	881b      	ldrh	r3, [r3, #0]
 800582c:	461a      	mov	r2, r3
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005836:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	691b      	ldr	r3, [r3, #16]
 800583c:	2b00      	cmp	r3, #0
 800583e:	d105      	bne.n	800584c <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	6a1b      	ldr	r3, [r3, #32]
 8005844:	1c9a      	adds	r2, r3, #2
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	621a      	str	r2, [r3, #32]
 800584a:	e00e      	b.n	800586a <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	6a1b      	ldr	r3, [r3, #32]
 8005850:	1c5a      	adds	r2, r3, #1
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	621a      	str	r2, [r3, #32]
 8005856:	e008      	b.n	800586a <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	6a1b      	ldr	r3, [r3, #32]
 800585c:	1c59      	adds	r1, r3, #1
 800585e:	687a      	ldr	r2, [r7, #4]
 8005860:	6211      	str	r1, [r2, #32]
 8005862:	781a      	ldrb	r2, [r3, #0]
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800586e:	b29b      	uxth	r3, r3
 8005870:	3b01      	subs	r3, #1
 8005872:	b29b      	uxth	r3, r3
 8005874:	687a      	ldr	r2, [r7, #4]
 8005876:	4619      	mov	r1, r3
 8005878:	84d1      	strh	r1, [r2, #38]	; 0x26
 800587a:	2b00      	cmp	r3, #0
 800587c:	d10f      	bne.n	800589e <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	68da      	ldr	r2, [r3, #12]
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800588c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	68da      	ldr	r2, [r3, #12]
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800589c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800589e:	2300      	movs	r3, #0
 80058a0:	e000      	b.n	80058a4 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80058a2:	2302      	movs	r3, #2
  }
}
 80058a4:	4618      	mov	r0, r3
 80058a6:	3714      	adds	r7, #20
 80058a8:	46bd      	mov	sp, r7
 80058aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ae:	4770      	bx	lr

080058b0 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80058b0:	b580      	push	{r7, lr}
 80058b2:	b082      	sub	sp, #8
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	68da      	ldr	r2, [r3, #12]
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80058c6:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	2220      	movs	r2, #32
 80058cc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80058d0:	6878      	ldr	r0, [r7, #4]
 80058d2:	f7ff ff07 	bl	80056e4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80058d6:	2300      	movs	r3, #0
}
 80058d8:	4618      	mov	r0, r3
 80058da:	3708      	adds	r7, #8
 80058dc:	46bd      	mov	sp, r7
 80058de:	bd80      	pop	{r7, pc}

080058e0 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80058e0:	b580      	push	{r7, lr}
 80058e2:	b084      	sub	sp, #16
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80058ee:	b2db      	uxtb	r3, r3
 80058f0:	2b22      	cmp	r3, #34	; 0x22
 80058f2:	d171      	bne.n	80059d8 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	689b      	ldr	r3, [r3, #8]
 80058f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80058fc:	d123      	bne.n	8005946 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005902:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	691b      	ldr	r3, [r3, #16]
 8005908:	2b00      	cmp	r3, #0
 800590a:	d10e      	bne.n	800592a <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	685b      	ldr	r3, [r3, #4]
 8005912:	b29b      	uxth	r3, r3
 8005914:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005918:	b29a      	uxth	r2, r3
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005922:	1c9a      	adds	r2, r3, #2
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	629a      	str	r2, [r3, #40]	; 0x28
 8005928:	e029      	b.n	800597e <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	685b      	ldr	r3, [r3, #4]
 8005930:	b29b      	uxth	r3, r3
 8005932:	b2db      	uxtb	r3, r3
 8005934:	b29a      	uxth	r2, r3
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800593e:	1c5a      	adds	r2, r3, #1
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	629a      	str	r2, [r3, #40]	; 0x28
 8005944:	e01b      	b.n	800597e <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	691b      	ldr	r3, [r3, #16]
 800594a:	2b00      	cmp	r3, #0
 800594c:	d10a      	bne.n	8005964 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	6858      	ldr	r0, [r3, #4]
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005958:	1c59      	adds	r1, r3, #1
 800595a:	687a      	ldr	r2, [r7, #4]
 800595c:	6291      	str	r1, [r2, #40]	; 0x28
 800595e:	b2c2      	uxtb	r2, r0
 8005960:	701a      	strb	r2, [r3, #0]
 8005962:	e00c      	b.n	800597e <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	685b      	ldr	r3, [r3, #4]
 800596a:	b2da      	uxtb	r2, r3
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005970:	1c58      	adds	r0, r3, #1
 8005972:	6879      	ldr	r1, [r7, #4]
 8005974:	6288      	str	r0, [r1, #40]	; 0x28
 8005976:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800597a:	b2d2      	uxtb	r2, r2
 800597c:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005982:	b29b      	uxth	r3, r3
 8005984:	3b01      	subs	r3, #1
 8005986:	b29b      	uxth	r3, r3
 8005988:	687a      	ldr	r2, [r7, #4]
 800598a:	4619      	mov	r1, r3
 800598c:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800598e:	2b00      	cmp	r3, #0
 8005990:	d120      	bne.n	80059d4 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	68da      	ldr	r2, [r3, #12]
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	f022 0220 	bic.w	r2, r2, #32
 80059a0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	68da      	ldr	r2, [r3, #12]
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80059b0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	695a      	ldr	r2, [r3, #20]
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	f022 0201 	bic.w	r2, r2, #1
 80059c0:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	2220      	movs	r2, #32
 80059c6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80059ca:	6878      	ldr	r0, [r7, #4]
 80059cc:	f7fc f9e8 	bl	8001da0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 80059d0:	2300      	movs	r3, #0
 80059d2:	e002      	b.n	80059da <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 80059d4:	2300      	movs	r3, #0
 80059d6:	e000      	b.n	80059da <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 80059d8:	2302      	movs	r3, #2
  }
}
 80059da:	4618      	mov	r0, r3
 80059dc:	3710      	adds	r7, #16
 80059de:	46bd      	mov	sp, r7
 80059e0:	bd80      	pop	{r7, pc}
	...

080059e4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80059e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059e8:	b085      	sub	sp, #20
 80059ea:	af00      	add	r7, sp, #0
 80059ec:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	691b      	ldr	r3, [r3, #16]
 80059f4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	68da      	ldr	r2, [r3, #12]
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	430a      	orrs	r2, r1
 8005a02:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	689a      	ldr	r2, [r3, #8]
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	691b      	ldr	r3, [r3, #16]
 8005a0c:	431a      	orrs	r2, r3
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	695b      	ldr	r3, [r3, #20]
 8005a12:	431a      	orrs	r2, r3
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	69db      	ldr	r3, [r3, #28]
 8005a18:	4313      	orrs	r3, r2
 8005a1a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	68db      	ldr	r3, [r3, #12]
 8005a22:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8005a26:	f023 030c 	bic.w	r3, r3, #12
 8005a2a:	687a      	ldr	r2, [r7, #4]
 8005a2c:	6812      	ldr	r2, [r2, #0]
 8005a2e:	68f9      	ldr	r1, [r7, #12]
 8005a30:	430b      	orrs	r3, r1
 8005a32:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	695b      	ldr	r3, [r3, #20]
 8005a3a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	699a      	ldr	r2, [r3, #24]
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	430a      	orrs	r2, r1
 8005a48:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	69db      	ldr	r3, [r3, #28]
 8005a4e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005a52:	f040 818b 	bne.w	8005d6c <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	4ac1      	ldr	r2, [pc, #772]	; (8005d60 <UART_SetConfig+0x37c>)
 8005a5c:	4293      	cmp	r3, r2
 8005a5e:	d005      	beq.n	8005a6c <UART_SetConfig+0x88>
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	4abf      	ldr	r2, [pc, #764]	; (8005d64 <UART_SetConfig+0x380>)
 8005a66:	4293      	cmp	r3, r2
 8005a68:	f040 80bd 	bne.w	8005be6 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005a6c:	f7fe fc9c 	bl	80043a8 <HAL_RCC_GetPCLK2Freq>
 8005a70:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005a72:	68bb      	ldr	r3, [r7, #8]
 8005a74:	461d      	mov	r5, r3
 8005a76:	f04f 0600 	mov.w	r6, #0
 8005a7a:	46a8      	mov	r8, r5
 8005a7c:	46b1      	mov	r9, r6
 8005a7e:	eb18 0308 	adds.w	r3, r8, r8
 8005a82:	eb49 0409 	adc.w	r4, r9, r9
 8005a86:	4698      	mov	r8, r3
 8005a88:	46a1      	mov	r9, r4
 8005a8a:	eb18 0805 	adds.w	r8, r8, r5
 8005a8e:	eb49 0906 	adc.w	r9, r9, r6
 8005a92:	f04f 0100 	mov.w	r1, #0
 8005a96:	f04f 0200 	mov.w	r2, #0
 8005a9a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005a9e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005aa2:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005aa6:	4688      	mov	r8, r1
 8005aa8:	4691      	mov	r9, r2
 8005aaa:	eb18 0005 	adds.w	r0, r8, r5
 8005aae:	eb49 0106 	adc.w	r1, r9, r6
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	685b      	ldr	r3, [r3, #4]
 8005ab6:	461d      	mov	r5, r3
 8005ab8:	f04f 0600 	mov.w	r6, #0
 8005abc:	196b      	adds	r3, r5, r5
 8005abe:	eb46 0406 	adc.w	r4, r6, r6
 8005ac2:	461a      	mov	r2, r3
 8005ac4:	4623      	mov	r3, r4
 8005ac6:	f7fb f8a9 	bl	8000c1c <__aeabi_uldivmod>
 8005aca:	4603      	mov	r3, r0
 8005acc:	460c      	mov	r4, r1
 8005ace:	461a      	mov	r2, r3
 8005ad0:	4ba5      	ldr	r3, [pc, #660]	; (8005d68 <UART_SetConfig+0x384>)
 8005ad2:	fba3 2302 	umull	r2, r3, r3, r2
 8005ad6:	095b      	lsrs	r3, r3, #5
 8005ad8:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005adc:	68bb      	ldr	r3, [r7, #8]
 8005ade:	461d      	mov	r5, r3
 8005ae0:	f04f 0600 	mov.w	r6, #0
 8005ae4:	46a9      	mov	r9, r5
 8005ae6:	46b2      	mov	sl, r6
 8005ae8:	eb19 0309 	adds.w	r3, r9, r9
 8005aec:	eb4a 040a 	adc.w	r4, sl, sl
 8005af0:	4699      	mov	r9, r3
 8005af2:	46a2      	mov	sl, r4
 8005af4:	eb19 0905 	adds.w	r9, r9, r5
 8005af8:	eb4a 0a06 	adc.w	sl, sl, r6
 8005afc:	f04f 0100 	mov.w	r1, #0
 8005b00:	f04f 0200 	mov.w	r2, #0
 8005b04:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005b08:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005b0c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005b10:	4689      	mov	r9, r1
 8005b12:	4692      	mov	sl, r2
 8005b14:	eb19 0005 	adds.w	r0, r9, r5
 8005b18:	eb4a 0106 	adc.w	r1, sl, r6
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	685b      	ldr	r3, [r3, #4]
 8005b20:	461d      	mov	r5, r3
 8005b22:	f04f 0600 	mov.w	r6, #0
 8005b26:	196b      	adds	r3, r5, r5
 8005b28:	eb46 0406 	adc.w	r4, r6, r6
 8005b2c:	461a      	mov	r2, r3
 8005b2e:	4623      	mov	r3, r4
 8005b30:	f7fb f874 	bl	8000c1c <__aeabi_uldivmod>
 8005b34:	4603      	mov	r3, r0
 8005b36:	460c      	mov	r4, r1
 8005b38:	461a      	mov	r2, r3
 8005b3a:	4b8b      	ldr	r3, [pc, #556]	; (8005d68 <UART_SetConfig+0x384>)
 8005b3c:	fba3 1302 	umull	r1, r3, r3, r2
 8005b40:	095b      	lsrs	r3, r3, #5
 8005b42:	2164      	movs	r1, #100	; 0x64
 8005b44:	fb01 f303 	mul.w	r3, r1, r3
 8005b48:	1ad3      	subs	r3, r2, r3
 8005b4a:	00db      	lsls	r3, r3, #3
 8005b4c:	3332      	adds	r3, #50	; 0x32
 8005b4e:	4a86      	ldr	r2, [pc, #536]	; (8005d68 <UART_SetConfig+0x384>)
 8005b50:	fba2 2303 	umull	r2, r3, r2, r3
 8005b54:	095b      	lsrs	r3, r3, #5
 8005b56:	005b      	lsls	r3, r3, #1
 8005b58:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005b5c:	4498      	add	r8, r3
 8005b5e:	68bb      	ldr	r3, [r7, #8]
 8005b60:	461d      	mov	r5, r3
 8005b62:	f04f 0600 	mov.w	r6, #0
 8005b66:	46a9      	mov	r9, r5
 8005b68:	46b2      	mov	sl, r6
 8005b6a:	eb19 0309 	adds.w	r3, r9, r9
 8005b6e:	eb4a 040a 	adc.w	r4, sl, sl
 8005b72:	4699      	mov	r9, r3
 8005b74:	46a2      	mov	sl, r4
 8005b76:	eb19 0905 	adds.w	r9, r9, r5
 8005b7a:	eb4a 0a06 	adc.w	sl, sl, r6
 8005b7e:	f04f 0100 	mov.w	r1, #0
 8005b82:	f04f 0200 	mov.w	r2, #0
 8005b86:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005b8a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005b8e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005b92:	4689      	mov	r9, r1
 8005b94:	4692      	mov	sl, r2
 8005b96:	eb19 0005 	adds.w	r0, r9, r5
 8005b9a:	eb4a 0106 	adc.w	r1, sl, r6
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	685b      	ldr	r3, [r3, #4]
 8005ba2:	461d      	mov	r5, r3
 8005ba4:	f04f 0600 	mov.w	r6, #0
 8005ba8:	196b      	adds	r3, r5, r5
 8005baa:	eb46 0406 	adc.w	r4, r6, r6
 8005bae:	461a      	mov	r2, r3
 8005bb0:	4623      	mov	r3, r4
 8005bb2:	f7fb f833 	bl	8000c1c <__aeabi_uldivmod>
 8005bb6:	4603      	mov	r3, r0
 8005bb8:	460c      	mov	r4, r1
 8005bba:	461a      	mov	r2, r3
 8005bbc:	4b6a      	ldr	r3, [pc, #424]	; (8005d68 <UART_SetConfig+0x384>)
 8005bbe:	fba3 1302 	umull	r1, r3, r3, r2
 8005bc2:	095b      	lsrs	r3, r3, #5
 8005bc4:	2164      	movs	r1, #100	; 0x64
 8005bc6:	fb01 f303 	mul.w	r3, r1, r3
 8005bca:	1ad3      	subs	r3, r2, r3
 8005bcc:	00db      	lsls	r3, r3, #3
 8005bce:	3332      	adds	r3, #50	; 0x32
 8005bd0:	4a65      	ldr	r2, [pc, #404]	; (8005d68 <UART_SetConfig+0x384>)
 8005bd2:	fba2 2303 	umull	r2, r3, r2, r3
 8005bd6:	095b      	lsrs	r3, r3, #5
 8005bd8:	f003 0207 	and.w	r2, r3, #7
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	4442      	add	r2, r8
 8005be2:	609a      	str	r2, [r3, #8]
 8005be4:	e26f      	b.n	80060c6 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005be6:	f7fe fbcb 	bl	8004380 <HAL_RCC_GetPCLK1Freq>
 8005bea:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005bec:	68bb      	ldr	r3, [r7, #8]
 8005bee:	461d      	mov	r5, r3
 8005bf0:	f04f 0600 	mov.w	r6, #0
 8005bf4:	46a8      	mov	r8, r5
 8005bf6:	46b1      	mov	r9, r6
 8005bf8:	eb18 0308 	adds.w	r3, r8, r8
 8005bfc:	eb49 0409 	adc.w	r4, r9, r9
 8005c00:	4698      	mov	r8, r3
 8005c02:	46a1      	mov	r9, r4
 8005c04:	eb18 0805 	adds.w	r8, r8, r5
 8005c08:	eb49 0906 	adc.w	r9, r9, r6
 8005c0c:	f04f 0100 	mov.w	r1, #0
 8005c10:	f04f 0200 	mov.w	r2, #0
 8005c14:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005c18:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005c1c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005c20:	4688      	mov	r8, r1
 8005c22:	4691      	mov	r9, r2
 8005c24:	eb18 0005 	adds.w	r0, r8, r5
 8005c28:	eb49 0106 	adc.w	r1, r9, r6
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	685b      	ldr	r3, [r3, #4]
 8005c30:	461d      	mov	r5, r3
 8005c32:	f04f 0600 	mov.w	r6, #0
 8005c36:	196b      	adds	r3, r5, r5
 8005c38:	eb46 0406 	adc.w	r4, r6, r6
 8005c3c:	461a      	mov	r2, r3
 8005c3e:	4623      	mov	r3, r4
 8005c40:	f7fa ffec 	bl	8000c1c <__aeabi_uldivmod>
 8005c44:	4603      	mov	r3, r0
 8005c46:	460c      	mov	r4, r1
 8005c48:	461a      	mov	r2, r3
 8005c4a:	4b47      	ldr	r3, [pc, #284]	; (8005d68 <UART_SetConfig+0x384>)
 8005c4c:	fba3 2302 	umull	r2, r3, r3, r2
 8005c50:	095b      	lsrs	r3, r3, #5
 8005c52:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005c56:	68bb      	ldr	r3, [r7, #8]
 8005c58:	461d      	mov	r5, r3
 8005c5a:	f04f 0600 	mov.w	r6, #0
 8005c5e:	46a9      	mov	r9, r5
 8005c60:	46b2      	mov	sl, r6
 8005c62:	eb19 0309 	adds.w	r3, r9, r9
 8005c66:	eb4a 040a 	adc.w	r4, sl, sl
 8005c6a:	4699      	mov	r9, r3
 8005c6c:	46a2      	mov	sl, r4
 8005c6e:	eb19 0905 	adds.w	r9, r9, r5
 8005c72:	eb4a 0a06 	adc.w	sl, sl, r6
 8005c76:	f04f 0100 	mov.w	r1, #0
 8005c7a:	f04f 0200 	mov.w	r2, #0
 8005c7e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005c82:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005c86:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005c8a:	4689      	mov	r9, r1
 8005c8c:	4692      	mov	sl, r2
 8005c8e:	eb19 0005 	adds.w	r0, r9, r5
 8005c92:	eb4a 0106 	adc.w	r1, sl, r6
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	685b      	ldr	r3, [r3, #4]
 8005c9a:	461d      	mov	r5, r3
 8005c9c:	f04f 0600 	mov.w	r6, #0
 8005ca0:	196b      	adds	r3, r5, r5
 8005ca2:	eb46 0406 	adc.w	r4, r6, r6
 8005ca6:	461a      	mov	r2, r3
 8005ca8:	4623      	mov	r3, r4
 8005caa:	f7fa ffb7 	bl	8000c1c <__aeabi_uldivmod>
 8005cae:	4603      	mov	r3, r0
 8005cb0:	460c      	mov	r4, r1
 8005cb2:	461a      	mov	r2, r3
 8005cb4:	4b2c      	ldr	r3, [pc, #176]	; (8005d68 <UART_SetConfig+0x384>)
 8005cb6:	fba3 1302 	umull	r1, r3, r3, r2
 8005cba:	095b      	lsrs	r3, r3, #5
 8005cbc:	2164      	movs	r1, #100	; 0x64
 8005cbe:	fb01 f303 	mul.w	r3, r1, r3
 8005cc2:	1ad3      	subs	r3, r2, r3
 8005cc4:	00db      	lsls	r3, r3, #3
 8005cc6:	3332      	adds	r3, #50	; 0x32
 8005cc8:	4a27      	ldr	r2, [pc, #156]	; (8005d68 <UART_SetConfig+0x384>)
 8005cca:	fba2 2303 	umull	r2, r3, r2, r3
 8005cce:	095b      	lsrs	r3, r3, #5
 8005cd0:	005b      	lsls	r3, r3, #1
 8005cd2:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005cd6:	4498      	add	r8, r3
 8005cd8:	68bb      	ldr	r3, [r7, #8]
 8005cda:	461d      	mov	r5, r3
 8005cdc:	f04f 0600 	mov.w	r6, #0
 8005ce0:	46a9      	mov	r9, r5
 8005ce2:	46b2      	mov	sl, r6
 8005ce4:	eb19 0309 	adds.w	r3, r9, r9
 8005ce8:	eb4a 040a 	adc.w	r4, sl, sl
 8005cec:	4699      	mov	r9, r3
 8005cee:	46a2      	mov	sl, r4
 8005cf0:	eb19 0905 	adds.w	r9, r9, r5
 8005cf4:	eb4a 0a06 	adc.w	sl, sl, r6
 8005cf8:	f04f 0100 	mov.w	r1, #0
 8005cfc:	f04f 0200 	mov.w	r2, #0
 8005d00:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005d04:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005d08:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005d0c:	4689      	mov	r9, r1
 8005d0e:	4692      	mov	sl, r2
 8005d10:	eb19 0005 	adds.w	r0, r9, r5
 8005d14:	eb4a 0106 	adc.w	r1, sl, r6
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	685b      	ldr	r3, [r3, #4]
 8005d1c:	461d      	mov	r5, r3
 8005d1e:	f04f 0600 	mov.w	r6, #0
 8005d22:	196b      	adds	r3, r5, r5
 8005d24:	eb46 0406 	adc.w	r4, r6, r6
 8005d28:	461a      	mov	r2, r3
 8005d2a:	4623      	mov	r3, r4
 8005d2c:	f7fa ff76 	bl	8000c1c <__aeabi_uldivmod>
 8005d30:	4603      	mov	r3, r0
 8005d32:	460c      	mov	r4, r1
 8005d34:	461a      	mov	r2, r3
 8005d36:	4b0c      	ldr	r3, [pc, #48]	; (8005d68 <UART_SetConfig+0x384>)
 8005d38:	fba3 1302 	umull	r1, r3, r3, r2
 8005d3c:	095b      	lsrs	r3, r3, #5
 8005d3e:	2164      	movs	r1, #100	; 0x64
 8005d40:	fb01 f303 	mul.w	r3, r1, r3
 8005d44:	1ad3      	subs	r3, r2, r3
 8005d46:	00db      	lsls	r3, r3, #3
 8005d48:	3332      	adds	r3, #50	; 0x32
 8005d4a:	4a07      	ldr	r2, [pc, #28]	; (8005d68 <UART_SetConfig+0x384>)
 8005d4c:	fba2 2303 	umull	r2, r3, r2, r3
 8005d50:	095b      	lsrs	r3, r3, #5
 8005d52:	f003 0207 	and.w	r2, r3, #7
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	4442      	add	r2, r8
 8005d5c:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8005d5e:	e1b2      	b.n	80060c6 <UART_SetConfig+0x6e2>
 8005d60:	40011000 	.word	0x40011000
 8005d64:	40011400 	.word	0x40011400
 8005d68:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	4ad7      	ldr	r2, [pc, #860]	; (80060d0 <UART_SetConfig+0x6ec>)
 8005d72:	4293      	cmp	r3, r2
 8005d74:	d005      	beq.n	8005d82 <UART_SetConfig+0x39e>
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	4ad6      	ldr	r2, [pc, #856]	; (80060d4 <UART_SetConfig+0x6f0>)
 8005d7c:	4293      	cmp	r3, r2
 8005d7e:	f040 80d1 	bne.w	8005f24 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8005d82:	f7fe fb11 	bl	80043a8 <HAL_RCC_GetPCLK2Freq>
 8005d86:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005d88:	68bb      	ldr	r3, [r7, #8]
 8005d8a:	469a      	mov	sl, r3
 8005d8c:	f04f 0b00 	mov.w	fp, #0
 8005d90:	46d0      	mov	r8, sl
 8005d92:	46d9      	mov	r9, fp
 8005d94:	eb18 0308 	adds.w	r3, r8, r8
 8005d98:	eb49 0409 	adc.w	r4, r9, r9
 8005d9c:	4698      	mov	r8, r3
 8005d9e:	46a1      	mov	r9, r4
 8005da0:	eb18 080a 	adds.w	r8, r8, sl
 8005da4:	eb49 090b 	adc.w	r9, r9, fp
 8005da8:	f04f 0100 	mov.w	r1, #0
 8005dac:	f04f 0200 	mov.w	r2, #0
 8005db0:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005db4:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005db8:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005dbc:	4688      	mov	r8, r1
 8005dbe:	4691      	mov	r9, r2
 8005dc0:	eb1a 0508 	adds.w	r5, sl, r8
 8005dc4:	eb4b 0609 	adc.w	r6, fp, r9
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	685b      	ldr	r3, [r3, #4]
 8005dcc:	4619      	mov	r1, r3
 8005dce:	f04f 0200 	mov.w	r2, #0
 8005dd2:	f04f 0300 	mov.w	r3, #0
 8005dd6:	f04f 0400 	mov.w	r4, #0
 8005dda:	0094      	lsls	r4, r2, #2
 8005ddc:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005de0:	008b      	lsls	r3, r1, #2
 8005de2:	461a      	mov	r2, r3
 8005de4:	4623      	mov	r3, r4
 8005de6:	4628      	mov	r0, r5
 8005de8:	4631      	mov	r1, r6
 8005dea:	f7fa ff17 	bl	8000c1c <__aeabi_uldivmod>
 8005dee:	4603      	mov	r3, r0
 8005df0:	460c      	mov	r4, r1
 8005df2:	461a      	mov	r2, r3
 8005df4:	4bb8      	ldr	r3, [pc, #736]	; (80060d8 <UART_SetConfig+0x6f4>)
 8005df6:	fba3 2302 	umull	r2, r3, r3, r2
 8005dfa:	095b      	lsrs	r3, r3, #5
 8005dfc:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005e00:	68bb      	ldr	r3, [r7, #8]
 8005e02:	469b      	mov	fp, r3
 8005e04:	f04f 0c00 	mov.w	ip, #0
 8005e08:	46d9      	mov	r9, fp
 8005e0a:	46e2      	mov	sl, ip
 8005e0c:	eb19 0309 	adds.w	r3, r9, r9
 8005e10:	eb4a 040a 	adc.w	r4, sl, sl
 8005e14:	4699      	mov	r9, r3
 8005e16:	46a2      	mov	sl, r4
 8005e18:	eb19 090b 	adds.w	r9, r9, fp
 8005e1c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005e20:	f04f 0100 	mov.w	r1, #0
 8005e24:	f04f 0200 	mov.w	r2, #0
 8005e28:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005e2c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005e30:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005e34:	4689      	mov	r9, r1
 8005e36:	4692      	mov	sl, r2
 8005e38:	eb1b 0509 	adds.w	r5, fp, r9
 8005e3c:	eb4c 060a 	adc.w	r6, ip, sl
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	685b      	ldr	r3, [r3, #4]
 8005e44:	4619      	mov	r1, r3
 8005e46:	f04f 0200 	mov.w	r2, #0
 8005e4a:	f04f 0300 	mov.w	r3, #0
 8005e4e:	f04f 0400 	mov.w	r4, #0
 8005e52:	0094      	lsls	r4, r2, #2
 8005e54:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005e58:	008b      	lsls	r3, r1, #2
 8005e5a:	461a      	mov	r2, r3
 8005e5c:	4623      	mov	r3, r4
 8005e5e:	4628      	mov	r0, r5
 8005e60:	4631      	mov	r1, r6
 8005e62:	f7fa fedb 	bl	8000c1c <__aeabi_uldivmod>
 8005e66:	4603      	mov	r3, r0
 8005e68:	460c      	mov	r4, r1
 8005e6a:	461a      	mov	r2, r3
 8005e6c:	4b9a      	ldr	r3, [pc, #616]	; (80060d8 <UART_SetConfig+0x6f4>)
 8005e6e:	fba3 1302 	umull	r1, r3, r3, r2
 8005e72:	095b      	lsrs	r3, r3, #5
 8005e74:	2164      	movs	r1, #100	; 0x64
 8005e76:	fb01 f303 	mul.w	r3, r1, r3
 8005e7a:	1ad3      	subs	r3, r2, r3
 8005e7c:	011b      	lsls	r3, r3, #4
 8005e7e:	3332      	adds	r3, #50	; 0x32
 8005e80:	4a95      	ldr	r2, [pc, #596]	; (80060d8 <UART_SetConfig+0x6f4>)
 8005e82:	fba2 2303 	umull	r2, r3, r2, r3
 8005e86:	095b      	lsrs	r3, r3, #5
 8005e88:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005e8c:	4498      	add	r8, r3
 8005e8e:	68bb      	ldr	r3, [r7, #8]
 8005e90:	469b      	mov	fp, r3
 8005e92:	f04f 0c00 	mov.w	ip, #0
 8005e96:	46d9      	mov	r9, fp
 8005e98:	46e2      	mov	sl, ip
 8005e9a:	eb19 0309 	adds.w	r3, r9, r9
 8005e9e:	eb4a 040a 	adc.w	r4, sl, sl
 8005ea2:	4699      	mov	r9, r3
 8005ea4:	46a2      	mov	sl, r4
 8005ea6:	eb19 090b 	adds.w	r9, r9, fp
 8005eaa:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005eae:	f04f 0100 	mov.w	r1, #0
 8005eb2:	f04f 0200 	mov.w	r2, #0
 8005eb6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005eba:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005ebe:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005ec2:	4689      	mov	r9, r1
 8005ec4:	4692      	mov	sl, r2
 8005ec6:	eb1b 0509 	adds.w	r5, fp, r9
 8005eca:	eb4c 060a 	adc.w	r6, ip, sl
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	685b      	ldr	r3, [r3, #4]
 8005ed2:	4619      	mov	r1, r3
 8005ed4:	f04f 0200 	mov.w	r2, #0
 8005ed8:	f04f 0300 	mov.w	r3, #0
 8005edc:	f04f 0400 	mov.w	r4, #0
 8005ee0:	0094      	lsls	r4, r2, #2
 8005ee2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005ee6:	008b      	lsls	r3, r1, #2
 8005ee8:	461a      	mov	r2, r3
 8005eea:	4623      	mov	r3, r4
 8005eec:	4628      	mov	r0, r5
 8005eee:	4631      	mov	r1, r6
 8005ef0:	f7fa fe94 	bl	8000c1c <__aeabi_uldivmod>
 8005ef4:	4603      	mov	r3, r0
 8005ef6:	460c      	mov	r4, r1
 8005ef8:	461a      	mov	r2, r3
 8005efa:	4b77      	ldr	r3, [pc, #476]	; (80060d8 <UART_SetConfig+0x6f4>)
 8005efc:	fba3 1302 	umull	r1, r3, r3, r2
 8005f00:	095b      	lsrs	r3, r3, #5
 8005f02:	2164      	movs	r1, #100	; 0x64
 8005f04:	fb01 f303 	mul.w	r3, r1, r3
 8005f08:	1ad3      	subs	r3, r2, r3
 8005f0a:	011b      	lsls	r3, r3, #4
 8005f0c:	3332      	adds	r3, #50	; 0x32
 8005f0e:	4a72      	ldr	r2, [pc, #456]	; (80060d8 <UART_SetConfig+0x6f4>)
 8005f10:	fba2 2303 	umull	r2, r3, r2, r3
 8005f14:	095b      	lsrs	r3, r3, #5
 8005f16:	f003 020f 	and.w	r2, r3, #15
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	4442      	add	r2, r8
 8005f20:	609a      	str	r2, [r3, #8]
 8005f22:	e0d0      	b.n	80060c6 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8005f24:	f7fe fa2c 	bl	8004380 <HAL_RCC_GetPCLK1Freq>
 8005f28:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005f2a:	68bb      	ldr	r3, [r7, #8]
 8005f2c:	469a      	mov	sl, r3
 8005f2e:	f04f 0b00 	mov.w	fp, #0
 8005f32:	46d0      	mov	r8, sl
 8005f34:	46d9      	mov	r9, fp
 8005f36:	eb18 0308 	adds.w	r3, r8, r8
 8005f3a:	eb49 0409 	adc.w	r4, r9, r9
 8005f3e:	4698      	mov	r8, r3
 8005f40:	46a1      	mov	r9, r4
 8005f42:	eb18 080a 	adds.w	r8, r8, sl
 8005f46:	eb49 090b 	adc.w	r9, r9, fp
 8005f4a:	f04f 0100 	mov.w	r1, #0
 8005f4e:	f04f 0200 	mov.w	r2, #0
 8005f52:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005f56:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005f5a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005f5e:	4688      	mov	r8, r1
 8005f60:	4691      	mov	r9, r2
 8005f62:	eb1a 0508 	adds.w	r5, sl, r8
 8005f66:	eb4b 0609 	adc.w	r6, fp, r9
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	685b      	ldr	r3, [r3, #4]
 8005f6e:	4619      	mov	r1, r3
 8005f70:	f04f 0200 	mov.w	r2, #0
 8005f74:	f04f 0300 	mov.w	r3, #0
 8005f78:	f04f 0400 	mov.w	r4, #0
 8005f7c:	0094      	lsls	r4, r2, #2
 8005f7e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005f82:	008b      	lsls	r3, r1, #2
 8005f84:	461a      	mov	r2, r3
 8005f86:	4623      	mov	r3, r4
 8005f88:	4628      	mov	r0, r5
 8005f8a:	4631      	mov	r1, r6
 8005f8c:	f7fa fe46 	bl	8000c1c <__aeabi_uldivmod>
 8005f90:	4603      	mov	r3, r0
 8005f92:	460c      	mov	r4, r1
 8005f94:	461a      	mov	r2, r3
 8005f96:	4b50      	ldr	r3, [pc, #320]	; (80060d8 <UART_SetConfig+0x6f4>)
 8005f98:	fba3 2302 	umull	r2, r3, r3, r2
 8005f9c:	095b      	lsrs	r3, r3, #5
 8005f9e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005fa2:	68bb      	ldr	r3, [r7, #8]
 8005fa4:	469b      	mov	fp, r3
 8005fa6:	f04f 0c00 	mov.w	ip, #0
 8005faa:	46d9      	mov	r9, fp
 8005fac:	46e2      	mov	sl, ip
 8005fae:	eb19 0309 	adds.w	r3, r9, r9
 8005fb2:	eb4a 040a 	adc.w	r4, sl, sl
 8005fb6:	4699      	mov	r9, r3
 8005fb8:	46a2      	mov	sl, r4
 8005fba:	eb19 090b 	adds.w	r9, r9, fp
 8005fbe:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005fc2:	f04f 0100 	mov.w	r1, #0
 8005fc6:	f04f 0200 	mov.w	r2, #0
 8005fca:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005fce:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005fd2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005fd6:	4689      	mov	r9, r1
 8005fd8:	4692      	mov	sl, r2
 8005fda:	eb1b 0509 	adds.w	r5, fp, r9
 8005fde:	eb4c 060a 	adc.w	r6, ip, sl
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	685b      	ldr	r3, [r3, #4]
 8005fe6:	4619      	mov	r1, r3
 8005fe8:	f04f 0200 	mov.w	r2, #0
 8005fec:	f04f 0300 	mov.w	r3, #0
 8005ff0:	f04f 0400 	mov.w	r4, #0
 8005ff4:	0094      	lsls	r4, r2, #2
 8005ff6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005ffa:	008b      	lsls	r3, r1, #2
 8005ffc:	461a      	mov	r2, r3
 8005ffe:	4623      	mov	r3, r4
 8006000:	4628      	mov	r0, r5
 8006002:	4631      	mov	r1, r6
 8006004:	f7fa fe0a 	bl	8000c1c <__aeabi_uldivmod>
 8006008:	4603      	mov	r3, r0
 800600a:	460c      	mov	r4, r1
 800600c:	461a      	mov	r2, r3
 800600e:	4b32      	ldr	r3, [pc, #200]	; (80060d8 <UART_SetConfig+0x6f4>)
 8006010:	fba3 1302 	umull	r1, r3, r3, r2
 8006014:	095b      	lsrs	r3, r3, #5
 8006016:	2164      	movs	r1, #100	; 0x64
 8006018:	fb01 f303 	mul.w	r3, r1, r3
 800601c:	1ad3      	subs	r3, r2, r3
 800601e:	011b      	lsls	r3, r3, #4
 8006020:	3332      	adds	r3, #50	; 0x32
 8006022:	4a2d      	ldr	r2, [pc, #180]	; (80060d8 <UART_SetConfig+0x6f4>)
 8006024:	fba2 2303 	umull	r2, r3, r2, r3
 8006028:	095b      	lsrs	r3, r3, #5
 800602a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800602e:	4498      	add	r8, r3
 8006030:	68bb      	ldr	r3, [r7, #8]
 8006032:	469b      	mov	fp, r3
 8006034:	f04f 0c00 	mov.w	ip, #0
 8006038:	46d9      	mov	r9, fp
 800603a:	46e2      	mov	sl, ip
 800603c:	eb19 0309 	adds.w	r3, r9, r9
 8006040:	eb4a 040a 	adc.w	r4, sl, sl
 8006044:	4699      	mov	r9, r3
 8006046:	46a2      	mov	sl, r4
 8006048:	eb19 090b 	adds.w	r9, r9, fp
 800604c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006050:	f04f 0100 	mov.w	r1, #0
 8006054:	f04f 0200 	mov.w	r2, #0
 8006058:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800605c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006060:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006064:	4689      	mov	r9, r1
 8006066:	4692      	mov	sl, r2
 8006068:	eb1b 0509 	adds.w	r5, fp, r9
 800606c:	eb4c 060a 	adc.w	r6, ip, sl
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	685b      	ldr	r3, [r3, #4]
 8006074:	4619      	mov	r1, r3
 8006076:	f04f 0200 	mov.w	r2, #0
 800607a:	f04f 0300 	mov.w	r3, #0
 800607e:	f04f 0400 	mov.w	r4, #0
 8006082:	0094      	lsls	r4, r2, #2
 8006084:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006088:	008b      	lsls	r3, r1, #2
 800608a:	461a      	mov	r2, r3
 800608c:	4623      	mov	r3, r4
 800608e:	4628      	mov	r0, r5
 8006090:	4631      	mov	r1, r6
 8006092:	f7fa fdc3 	bl	8000c1c <__aeabi_uldivmod>
 8006096:	4603      	mov	r3, r0
 8006098:	460c      	mov	r4, r1
 800609a:	461a      	mov	r2, r3
 800609c:	4b0e      	ldr	r3, [pc, #56]	; (80060d8 <UART_SetConfig+0x6f4>)
 800609e:	fba3 1302 	umull	r1, r3, r3, r2
 80060a2:	095b      	lsrs	r3, r3, #5
 80060a4:	2164      	movs	r1, #100	; 0x64
 80060a6:	fb01 f303 	mul.w	r3, r1, r3
 80060aa:	1ad3      	subs	r3, r2, r3
 80060ac:	011b      	lsls	r3, r3, #4
 80060ae:	3332      	adds	r3, #50	; 0x32
 80060b0:	4a09      	ldr	r2, [pc, #36]	; (80060d8 <UART_SetConfig+0x6f4>)
 80060b2:	fba2 2303 	umull	r2, r3, r2, r3
 80060b6:	095b      	lsrs	r3, r3, #5
 80060b8:	f003 020f 	and.w	r2, r3, #15
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	4442      	add	r2, r8
 80060c2:	609a      	str	r2, [r3, #8]
}
 80060c4:	e7ff      	b.n	80060c6 <UART_SetConfig+0x6e2>
 80060c6:	bf00      	nop
 80060c8:	3714      	adds	r7, #20
 80060ca:	46bd      	mov	sp, r7
 80060cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80060d0:	40011000 	.word	0x40011000
 80060d4:	40011400 	.word	0x40011400
 80060d8:	51eb851f 	.word	0x51eb851f

080060dc <__errno>:
 80060dc:	4b01      	ldr	r3, [pc, #4]	; (80060e4 <__errno+0x8>)
 80060de:	6818      	ldr	r0, [r3, #0]
 80060e0:	4770      	bx	lr
 80060e2:	bf00      	nop
 80060e4:	2000001c 	.word	0x2000001c

080060e8 <__libc_init_array>:
 80060e8:	b570      	push	{r4, r5, r6, lr}
 80060ea:	4e0d      	ldr	r6, [pc, #52]	; (8006120 <__libc_init_array+0x38>)
 80060ec:	4c0d      	ldr	r4, [pc, #52]	; (8006124 <__libc_init_array+0x3c>)
 80060ee:	1ba4      	subs	r4, r4, r6
 80060f0:	10a4      	asrs	r4, r4, #2
 80060f2:	2500      	movs	r5, #0
 80060f4:	42a5      	cmp	r5, r4
 80060f6:	d109      	bne.n	800610c <__libc_init_array+0x24>
 80060f8:	4e0b      	ldr	r6, [pc, #44]	; (8006128 <__libc_init_array+0x40>)
 80060fa:	4c0c      	ldr	r4, [pc, #48]	; (800612c <__libc_init_array+0x44>)
 80060fc:	f000 fc28 	bl	8006950 <_init>
 8006100:	1ba4      	subs	r4, r4, r6
 8006102:	10a4      	asrs	r4, r4, #2
 8006104:	2500      	movs	r5, #0
 8006106:	42a5      	cmp	r5, r4
 8006108:	d105      	bne.n	8006116 <__libc_init_array+0x2e>
 800610a:	bd70      	pop	{r4, r5, r6, pc}
 800610c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006110:	4798      	blx	r3
 8006112:	3501      	adds	r5, #1
 8006114:	e7ee      	b.n	80060f4 <__libc_init_array+0xc>
 8006116:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800611a:	4798      	blx	r3
 800611c:	3501      	adds	r5, #1
 800611e:	e7f2      	b.n	8006106 <__libc_init_array+0x1e>
 8006120:	08006bb4 	.word	0x08006bb4
 8006124:	08006bb4 	.word	0x08006bb4
 8006128:	08006bb4 	.word	0x08006bb4
 800612c:	08006bb8 	.word	0x08006bb8

08006130 <memcpy>:
 8006130:	b510      	push	{r4, lr}
 8006132:	1e43      	subs	r3, r0, #1
 8006134:	440a      	add	r2, r1
 8006136:	4291      	cmp	r1, r2
 8006138:	d100      	bne.n	800613c <memcpy+0xc>
 800613a:	bd10      	pop	{r4, pc}
 800613c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006140:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006144:	e7f7      	b.n	8006136 <memcpy+0x6>

08006146 <memset>:
 8006146:	4402      	add	r2, r0
 8006148:	4603      	mov	r3, r0
 800614a:	4293      	cmp	r3, r2
 800614c:	d100      	bne.n	8006150 <memset+0xa>
 800614e:	4770      	bx	lr
 8006150:	f803 1b01 	strb.w	r1, [r3], #1
 8006154:	e7f9      	b.n	800614a <memset+0x4>
	...

08006158 <siprintf>:
 8006158:	b40e      	push	{r1, r2, r3}
 800615a:	b500      	push	{lr}
 800615c:	b09c      	sub	sp, #112	; 0x70
 800615e:	ab1d      	add	r3, sp, #116	; 0x74
 8006160:	9002      	str	r0, [sp, #8]
 8006162:	9006      	str	r0, [sp, #24]
 8006164:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006168:	4809      	ldr	r0, [pc, #36]	; (8006190 <siprintf+0x38>)
 800616a:	9107      	str	r1, [sp, #28]
 800616c:	9104      	str	r1, [sp, #16]
 800616e:	4909      	ldr	r1, [pc, #36]	; (8006194 <siprintf+0x3c>)
 8006170:	f853 2b04 	ldr.w	r2, [r3], #4
 8006174:	9105      	str	r1, [sp, #20]
 8006176:	6800      	ldr	r0, [r0, #0]
 8006178:	9301      	str	r3, [sp, #4]
 800617a:	a902      	add	r1, sp, #8
 800617c:	f000 f866 	bl	800624c <_svfiprintf_r>
 8006180:	9b02      	ldr	r3, [sp, #8]
 8006182:	2200      	movs	r2, #0
 8006184:	701a      	strb	r2, [r3, #0]
 8006186:	b01c      	add	sp, #112	; 0x70
 8006188:	f85d eb04 	ldr.w	lr, [sp], #4
 800618c:	b003      	add	sp, #12
 800618e:	4770      	bx	lr
 8006190:	2000001c 	.word	0x2000001c
 8006194:	ffff0208 	.word	0xffff0208

08006198 <__ssputs_r>:
 8006198:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800619c:	688e      	ldr	r6, [r1, #8]
 800619e:	429e      	cmp	r6, r3
 80061a0:	4682      	mov	sl, r0
 80061a2:	460c      	mov	r4, r1
 80061a4:	4690      	mov	r8, r2
 80061a6:	4699      	mov	r9, r3
 80061a8:	d837      	bhi.n	800621a <__ssputs_r+0x82>
 80061aa:	898a      	ldrh	r2, [r1, #12]
 80061ac:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80061b0:	d031      	beq.n	8006216 <__ssputs_r+0x7e>
 80061b2:	6825      	ldr	r5, [r4, #0]
 80061b4:	6909      	ldr	r1, [r1, #16]
 80061b6:	1a6f      	subs	r7, r5, r1
 80061b8:	6965      	ldr	r5, [r4, #20]
 80061ba:	2302      	movs	r3, #2
 80061bc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80061c0:	fb95 f5f3 	sdiv	r5, r5, r3
 80061c4:	f109 0301 	add.w	r3, r9, #1
 80061c8:	443b      	add	r3, r7
 80061ca:	429d      	cmp	r5, r3
 80061cc:	bf38      	it	cc
 80061ce:	461d      	movcc	r5, r3
 80061d0:	0553      	lsls	r3, r2, #21
 80061d2:	d530      	bpl.n	8006236 <__ssputs_r+0x9e>
 80061d4:	4629      	mov	r1, r5
 80061d6:	f000 fb21 	bl	800681c <_malloc_r>
 80061da:	4606      	mov	r6, r0
 80061dc:	b950      	cbnz	r0, 80061f4 <__ssputs_r+0x5c>
 80061de:	230c      	movs	r3, #12
 80061e0:	f8ca 3000 	str.w	r3, [sl]
 80061e4:	89a3      	ldrh	r3, [r4, #12]
 80061e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80061ea:	81a3      	strh	r3, [r4, #12]
 80061ec:	f04f 30ff 	mov.w	r0, #4294967295
 80061f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80061f4:	463a      	mov	r2, r7
 80061f6:	6921      	ldr	r1, [r4, #16]
 80061f8:	f7ff ff9a 	bl	8006130 <memcpy>
 80061fc:	89a3      	ldrh	r3, [r4, #12]
 80061fe:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006202:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006206:	81a3      	strh	r3, [r4, #12]
 8006208:	6126      	str	r6, [r4, #16]
 800620a:	6165      	str	r5, [r4, #20]
 800620c:	443e      	add	r6, r7
 800620e:	1bed      	subs	r5, r5, r7
 8006210:	6026      	str	r6, [r4, #0]
 8006212:	60a5      	str	r5, [r4, #8]
 8006214:	464e      	mov	r6, r9
 8006216:	454e      	cmp	r6, r9
 8006218:	d900      	bls.n	800621c <__ssputs_r+0x84>
 800621a:	464e      	mov	r6, r9
 800621c:	4632      	mov	r2, r6
 800621e:	4641      	mov	r1, r8
 8006220:	6820      	ldr	r0, [r4, #0]
 8006222:	f000 fa93 	bl	800674c <memmove>
 8006226:	68a3      	ldr	r3, [r4, #8]
 8006228:	1b9b      	subs	r3, r3, r6
 800622a:	60a3      	str	r3, [r4, #8]
 800622c:	6823      	ldr	r3, [r4, #0]
 800622e:	441e      	add	r6, r3
 8006230:	6026      	str	r6, [r4, #0]
 8006232:	2000      	movs	r0, #0
 8006234:	e7dc      	b.n	80061f0 <__ssputs_r+0x58>
 8006236:	462a      	mov	r2, r5
 8006238:	f000 fb4a 	bl	80068d0 <_realloc_r>
 800623c:	4606      	mov	r6, r0
 800623e:	2800      	cmp	r0, #0
 8006240:	d1e2      	bne.n	8006208 <__ssputs_r+0x70>
 8006242:	6921      	ldr	r1, [r4, #16]
 8006244:	4650      	mov	r0, sl
 8006246:	f000 fa9b 	bl	8006780 <_free_r>
 800624a:	e7c8      	b.n	80061de <__ssputs_r+0x46>

0800624c <_svfiprintf_r>:
 800624c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006250:	461d      	mov	r5, r3
 8006252:	898b      	ldrh	r3, [r1, #12]
 8006254:	061f      	lsls	r7, r3, #24
 8006256:	b09d      	sub	sp, #116	; 0x74
 8006258:	4680      	mov	r8, r0
 800625a:	460c      	mov	r4, r1
 800625c:	4616      	mov	r6, r2
 800625e:	d50f      	bpl.n	8006280 <_svfiprintf_r+0x34>
 8006260:	690b      	ldr	r3, [r1, #16]
 8006262:	b96b      	cbnz	r3, 8006280 <_svfiprintf_r+0x34>
 8006264:	2140      	movs	r1, #64	; 0x40
 8006266:	f000 fad9 	bl	800681c <_malloc_r>
 800626a:	6020      	str	r0, [r4, #0]
 800626c:	6120      	str	r0, [r4, #16]
 800626e:	b928      	cbnz	r0, 800627c <_svfiprintf_r+0x30>
 8006270:	230c      	movs	r3, #12
 8006272:	f8c8 3000 	str.w	r3, [r8]
 8006276:	f04f 30ff 	mov.w	r0, #4294967295
 800627a:	e0c8      	b.n	800640e <_svfiprintf_r+0x1c2>
 800627c:	2340      	movs	r3, #64	; 0x40
 800627e:	6163      	str	r3, [r4, #20]
 8006280:	2300      	movs	r3, #0
 8006282:	9309      	str	r3, [sp, #36]	; 0x24
 8006284:	2320      	movs	r3, #32
 8006286:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800628a:	2330      	movs	r3, #48	; 0x30
 800628c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006290:	9503      	str	r5, [sp, #12]
 8006292:	f04f 0b01 	mov.w	fp, #1
 8006296:	4637      	mov	r7, r6
 8006298:	463d      	mov	r5, r7
 800629a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800629e:	b10b      	cbz	r3, 80062a4 <_svfiprintf_r+0x58>
 80062a0:	2b25      	cmp	r3, #37	; 0x25
 80062a2:	d13e      	bne.n	8006322 <_svfiprintf_r+0xd6>
 80062a4:	ebb7 0a06 	subs.w	sl, r7, r6
 80062a8:	d00b      	beq.n	80062c2 <_svfiprintf_r+0x76>
 80062aa:	4653      	mov	r3, sl
 80062ac:	4632      	mov	r2, r6
 80062ae:	4621      	mov	r1, r4
 80062b0:	4640      	mov	r0, r8
 80062b2:	f7ff ff71 	bl	8006198 <__ssputs_r>
 80062b6:	3001      	adds	r0, #1
 80062b8:	f000 80a4 	beq.w	8006404 <_svfiprintf_r+0x1b8>
 80062bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80062be:	4453      	add	r3, sl
 80062c0:	9309      	str	r3, [sp, #36]	; 0x24
 80062c2:	783b      	ldrb	r3, [r7, #0]
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	f000 809d 	beq.w	8006404 <_svfiprintf_r+0x1b8>
 80062ca:	2300      	movs	r3, #0
 80062cc:	f04f 32ff 	mov.w	r2, #4294967295
 80062d0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80062d4:	9304      	str	r3, [sp, #16]
 80062d6:	9307      	str	r3, [sp, #28]
 80062d8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80062dc:	931a      	str	r3, [sp, #104]	; 0x68
 80062de:	462f      	mov	r7, r5
 80062e0:	2205      	movs	r2, #5
 80062e2:	f817 1b01 	ldrb.w	r1, [r7], #1
 80062e6:	4850      	ldr	r0, [pc, #320]	; (8006428 <_svfiprintf_r+0x1dc>)
 80062e8:	f7f9 ff82 	bl	80001f0 <memchr>
 80062ec:	9b04      	ldr	r3, [sp, #16]
 80062ee:	b9d0      	cbnz	r0, 8006326 <_svfiprintf_r+0xda>
 80062f0:	06d9      	lsls	r1, r3, #27
 80062f2:	bf44      	itt	mi
 80062f4:	2220      	movmi	r2, #32
 80062f6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80062fa:	071a      	lsls	r2, r3, #28
 80062fc:	bf44      	itt	mi
 80062fe:	222b      	movmi	r2, #43	; 0x2b
 8006300:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006304:	782a      	ldrb	r2, [r5, #0]
 8006306:	2a2a      	cmp	r2, #42	; 0x2a
 8006308:	d015      	beq.n	8006336 <_svfiprintf_r+0xea>
 800630a:	9a07      	ldr	r2, [sp, #28]
 800630c:	462f      	mov	r7, r5
 800630e:	2000      	movs	r0, #0
 8006310:	250a      	movs	r5, #10
 8006312:	4639      	mov	r1, r7
 8006314:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006318:	3b30      	subs	r3, #48	; 0x30
 800631a:	2b09      	cmp	r3, #9
 800631c:	d94d      	bls.n	80063ba <_svfiprintf_r+0x16e>
 800631e:	b1b8      	cbz	r0, 8006350 <_svfiprintf_r+0x104>
 8006320:	e00f      	b.n	8006342 <_svfiprintf_r+0xf6>
 8006322:	462f      	mov	r7, r5
 8006324:	e7b8      	b.n	8006298 <_svfiprintf_r+0x4c>
 8006326:	4a40      	ldr	r2, [pc, #256]	; (8006428 <_svfiprintf_r+0x1dc>)
 8006328:	1a80      	subs	r0, r0, r2
 800632a:	fa0b f000 	lsl.w	r0, fp, r0
 800632e:	4318      	orrs	r0, r3
 8006330:	9004      	str	r0, [sp, #16]
 8006332:	463d      	mov	r5, r7
 8006334:	e7d3      	b.n	80062de <_svfiprintf_r+0x92>
 8006336:	9a03      	ldr	r2, [sp, #12]
 8006338:	1d11      	adds	r1, r2, #4
 800633a:	6812      	ldr	r2, [r2, #0]
 800633c:	9103      	str	r1, [sp, #12]
 800633e:	2a00      	cmp	r2, #0
 8006340:	db01      	blt.n	8006346 <_svfiprintf_r+0xfa>
 8006342:	9207      	str	r2, [sp, #28]
 8006344:	e004      	b.n	8006350 <_svfiprintf_r+0x104>
 8006346:	4252      	negs	r2, r2
 8006348:	f043 0302 	orr.w	r3, r3, #2
 800634c:	9207      	str	r2, [sp, #28]
 800634e:	9304      	str	r3, [sp, #16]
 8006350:	783b      	ldrb	r3, [r7, #0]
 8006352:	2b2e      	cmp	r3, #46	; 0x2e
 8006354:	d10c      	bne.n	8006370 <_svfiprintf_r+0x124>
 8006356:	787b      	ldrb	r3, [r7, #1]
 8006358:	2b2a      	cmp	r3, #42	; 0x2a
 800635a:	d133      	bne.n	80063c4 <_svfiprintf_r+0x178>
 800635c:	9b03      	ldr	r3, [sp, #12]
 800635e:	1d1a      	adds	r2, r3, #4
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	9203      	str	r2, [sp, #12]
 8006364:	2b00      	cmp	r3, #0
 8006366:	bfb8      	it	lt
 8006368:	f04f 33ff 	movlt.w	r3, #4294967295
 800636c:	3702      	adds	r7, #2
 800636e:	9305      	str	r3, [sp, #20]
 8006370:	4d2e      	ldr	r5, [pc, #184]	; (800642c <_svfiprintf_r+0x1e0>)
 8006372:	7839      	ldrb	r1, [r7, #0]
 8006374:	2203      	movs	r2, #3
 8006376:	4628      	mov	r0, r5
 8006378:	f7f9 ff3a 	bl	80001f0 <memchr>
 800637c:	b138      	cbz	r0, 800638e <_svfiprintf_r+0x142>
 800637e:	2340      	movs	r3, #64	; 0x40
 8006380:	1b40      	subs	r0, r0, r5
 8006382:	fa03 f000 	lsl.w	r0, r3, r0
 8006386:	9b04      	ldr	r3, [sp, #16]
 8006388:	4303      	orrs	r3, r0
 800638a:	3701      	adds	r7, #1
 800638c:	9304      	str	r3, [sp, #16]
 800638e:	7839      	ldrb	r1, [r7, #0]
 8006390:	4827      	ldr	r0, [pc, #156]	; (8006430 <_svfiprintf_r+0x1e4>)
 8006392:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006396:	2206      	movs	r2, #6
 8006398:	1c7e      	adds	r6, r7, #1
 800639a:	f7f9 ff29 	bl	80001f0 <memchr>
 800639e:	2800      	cmp	r0, #0
 80063a0:	d038      	beq.n	8006414 <_svfiprintf_r+0x1c8>
 80063a2:	4b24      	ldr	r3, [pc, #144]	; (8006434 <_svfiprintf_r+0x1e8>)
 80063a4:	bb13      	cbnz	r3, 80063ec <_svfiprintf_r+0x1a0>
 80063a6:	9b03      	ldr	r3, [sp, #12]
 80063a8:	3307      	adds	r3, #7
 80063aa:	f023 0307 	bic.w	r3, r3, #7
 80063ae:	3308      	adds	r3, #8
 80063b0:	9303      	str	r3, [sp, #12]
 80063b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80063b4:	444b      	add	r3, r9
 80063b6:	9309      	str	r3, [sp, #36]	; 0x24
 80063b8:	e76d      	b.n	8006296 <_svfiprintf_r+0x4a>
 80063ba:	fb05 3202 	mla	r2, r5, r2, r3
 80063be:	2001      	movs	r0, #1
 80063c0:	460f      	mov	r7, r1
 80063c2:	e7a6      	b.n	8006312 <_svfiprintf_r+0xc6>
 80063c4:	2300      	movs	r3, #0
 80063c6:	3701      	adds	r7, #1
 80063c8:	9305      	str	r3, [sp, #20]
 80063ca:	4619      	mov	r1, r3
 80063cc:	250a      	movs	r5, #10
 80063ce:	4638      	mov	r0, r7
 80063d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80063d4:	3a30      	subs	r2, #48	; 0x30
 80063d6:	2a09      	cmp	r2, #9
 80063d8:	d903      	bls.n	80063e2 <_svfiprintf_r+0x196>
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d0c8      	beq.n	8006370 <_svfiprintf_r+0x124>
 80063de:	9105      	str	r1, [sp, #20]
 80063e0:	e7c6      	b.n	8006370 <_svfiprintf_r+0x124>
 80063e2:	fb05 2101 	mla	r1, r5, r1, r2
 80063e6:	2301      	movs	r3, #1
 80063e8:	4607      	mov	r7, r0
 80063ea:	e7f0      	b.n	80063ce <_svfiprintf_r+0x182>
 80063ec:	ab03      	add	r3, sp, #12
 80063ee:	9300      	str	r3, [sp, #0]
 80063f0:	4622      	mov	r2, r4
 80063f2:	4b11      	ldr	r3, [pc, #68]	; (8006438 <_svfiprintf_r+0x1ec>)
 80063f4:	a904      	add	r1, sp, #16
 80063f6:	4640      	mov	r0, r8
 80063f8:	f3af 8000 	nop.w
 80063fc:	f1b0 3fff 	cmp.w	r0, #4294967295
 8006400:	4681      	mov	r9, r0
 8006402:	d1d6      	bne.n	80063b2 <_svfiprintf_r+0x166>
 8006404:	89a3      	ldrh	r3, [r4, #12]
 8006406:	065b      	lsls	r3, r3, #25
 8006408:	f53f af35 	bmi.w	8006276 <_svfiprintf_r+0x2a>
 800640c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800640e:	b01d      	add	sp, #116	; 0x74
 8006410:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006414:	ab03      	add	r3, sp, #12
 8006416:	9300      	str	r3, [sp, #0]
 8006418:	4622      	mov	r2, r4
 800641a:	4b07      	ldr	r3, [pc, #28]	; (8006438 <_svfiprintf_r+0x1ec>)
 800641c:	a904      	add	r1, sp, #16
 800641e:	4640      	mov	r0, r8
 8006420:	f000 f882 	bl	8006528 <_printf_i>
 8006424:	e7ea      	b.n	80063fc <_svfiprintf_r+0x1b0>
 8006426:	bf00      	nop
 8006428:	08006b78 	.word	0x08006b78
 800642c:	08006b7e 	.word	0x08006b7e
 8006430:	08006b82 	.word	0x08006b82
 8006434:	00000000 	.word	0x00000000
 8006438:	08006199 	.word	0x08006199

0800643c <_printf_common>:
 800643c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006440:	4691      	mov	r9, r2
 8006442:	461f      	mov	r7, r3
 8006444:	688a      	ldr	r2, [r1, #8]
 8006446:	690b      	ldr	r3, [r1, #16]
 8006448:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800644c:	4293      	cmp	r3, r2
 800644e:	bfb8      	it	lt
 8006450:	4613      	movlt	r3, r2
 8006452:	f8c9 3000 	str.w	r3, [r9]
 8006456:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800645a:	4606      	mov	r6, r0
 800645c:	460c      	mov	r4, r1
 800645e:	b112      	cbz	r2, 8006466 <_printf_common+0x2a>
 8006460:	3301      	adds	r3, #1
 8006462:	f8c9 3000 	str.w	r3, [r9]
 8006466:	6823      	ldr	r3, [r4, #0]
 8006468:	0699      	lsls	r1, r3, #26
 800646a:	bf42      	ittt	mi
 800646c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8006470:	3302      	addmi	r3, #2
 8006472:	f8c9 3000 	strmi.w	r3, [r9]
 8006476:	6825      	ldr	r5, [r4, #0]
 8006478:	f015 0506 	ands.w	r5, r5, #6
 800647c:	d107      	bne.n	800648e <_printf_common+0x52>
 800647e:	f104 0a19 	add.w	sl, r4, #25
 8006482:	68e3      	ldr	r3, [r4, #12]
 8006484:	f8d9 2000 	ldr.w	r2, [r9]
 8006488:	1a9b      	subs	r3, r3, r2
 800648a:	42ab      	cmp	r3, r5
 800648c:	dc28      	bgt.n	80064e0 <_printf_common+0xa4>
 800648e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8006492:	6822      	ldr	r2, [r4, #0]
 8006494:	3300      	adds	r3, #0
 8006496:	bf18      	it	ne
 8006498:	2301      	movne	r3, #1
 800649a:	0692      	lsls	r2, r2, #26
 800649c:	d42d      	bmi.n	80064fa <_printf_common+0xbe>
 800649e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80064a2:	4639      	mov	r1, r7
 80064a4:	4630      	mov	r0, r6
 80064a6:	47c0      	blx	r8
 80064a8:	3001      	adds	r0, #1
 80064aa:	d020      	beq.n	80064ee <_printf_common+0xb2>
 80064ac:	6823      	ldr	r3, [r4, #0]
 80064ae:	68e5      	ldr	r5, [r4, #12]
 80064b0:	f8d9 2000 	ldr.w	r2, [r9]
 80064b4:	f003 0306 	and.w	r3, r3, #6
 80064b8:	2b04      	cmp	r3, #4
 80064ba:	bf08      	it	eq
 80064bc:	1aad      	subeq	r5, r5, r2
 80064be:	68a3      	ldr	r3, [r4, #8]
 80064c0:	6922      	ldr	r2, [r4, #16]
 80064c2:	bf0c      	ite	eq
 80064c4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80064c8:	2500      	movne	r5, #0
 80064ca:	4293      	cmp	r3, r2
 80064cc:	bfc4      	itt	gt
 80064ce:	1a9b      	subgt	r3, r3, r2
 80064d0:	18ed      	addgt	r5, r5, r3
 80064d2:	f04f 0900 	mov.w	r9, #0
 80064d6:	341a      	adds	r4, #26
 80064d8:	454d      	cmp	r5, r9
 80064da:	d11a      	bne.n	8006512 <_printf_common+0xd6>
 80064dc:	2000      	movs	r0, #0
 80064de:	e008      	b.n	80064f2 <_printf_common+0xb6>
 80064e0:	2301      	movs	r3, #1
 80064e2:	4652      	mov	r2, sl
 80064e4:	4639      	mov	r1, r7
 80064e6:	4630      	mov	r0, r6
 80064e8:	47c0      	blx	r8
 80064ea:	3001      	adds	r0, #1
 80064ec:	d103      	bne.n	80064f6 <_printf_common+0xba>
 80064ee:	f04f 30ff 	mov.w	r0, #4294967295
 80064f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80064f6:	3501      	adds	r5, #1
 80064f8:	e7c3      	b.n	8006482 <_printf_common+0x46>
 80064fa:	18e1      	adds	r1, r4, r3
 80064fc:	1c5a      	adds	r2, r3, #1
 80064fe:	2030      	movs	r0, #48	; 0x30
 8006500:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006504:	4422      	add	r2, r4
 8006506:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800650a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800650e:	3302      	adds	r3, #2
 8006510:	e7c5      	b.n	800649e <_printf_common+0x62>
 8006512:	2301      	movs	r3, #1
 8006514:	4622      	mov	r2, r4
 8006516:	4639      	mov	r1, r7
 8006518:	4630      	mov	r0, r6
 800651a:	47c0      	blx	r8
 800651c:	3001      	adds	r0, #1
 800651e:	d0e6      	beq.n	80064ee <_printf_common+0xb2>
 8006520:	f109 0901 	add.w	r9, r9, #1
 8006524:	e7d8      	b.n	80064d8 <_printf_common+0x9c>
	...

08006528 <_printf_i>:
 8006528:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800652c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8006530:	460c      	mov	r4, r1
 8006532:	7e09      	ldrb	r1, [r1, #24]
 8006534:	b085      	sub	sp, #20
 8006536:	296e      	cmp	r1, #110	; 0x6e
 8006538:	4617      	mov	r7, r2
 800653a:	4606      	mov	r6, r0
 800653c:	4698      	mov	r8, r3
 800653e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006540:	f000 80b3 	beq.w	80066aa <_printf_i+0x182>
 8006544:	d822      	bhi.n	800658c <_printf_i+0x64>
 8006546:	2963      	cmp	r1, #99	; 0x63
 8006548:	d036      	beq.n	80065b8 <_printf_i+0x90>
 800654a:	d80a      	bhi.n	8006562 <_printf_i+0x3a>
 800654c:	2900      	cmp	r1, #0
 800654e:	f000 80b9 	beq.w	80066c4 <_printf_i+0x19c>
 8006552:	2958      	cmp	r1, #88	; 0x58
 8006554:	f000 8083 	beq.w	800665e <_printf_i+0x136>
 8006558:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800655c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8006560:	e032      	b.n	80065c8 <_printf_i+0xa0>
 8006562:	2964      	cmp	r1, #100	; 0x64
 8006564:	d001      	beq.n	800656a <_printf_i+0x42>
 8006566:	2969      	cmp	r1, #105	; 0x69
 8006568:	d1f6      	bne.n	8006558 <_printf_i+0x30>
 800656a:	6820      	ldr	r0, [r4, #0]
 800656c:	6813      	ldr	r3, [r2, #0]
 800656e:	0605      	lsls	r5, r0, #24
 8006570:	f103 0104 	add.w	r1, r3, #4
 8006574:	d52a      	bpl.n	80065cc <_printf_i+0xa4>
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	6011      	str	r1, [r2, #0]
 800657a:	2b00      	cmp	r3, #0
 800657c:	da03      	bge.n	8006586 <_printf_i+0x5e>
 800657e:	222d      	movs	r2, #45	; 0x2d
 8006580:	425b      	negs	r3, r3
 8006582:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8006586:	486f      	ldr	r0, [pc, #444]	; (8006744 <_printf_i+0x21c>)
 8006588:	220a      	movs	r2, #10
 800658a:	e039      	b.n	8006600 <_printf_i+0xd8>
 800658c:	2973      	cmp	r1, #115	; 0x73
 800658e:	f000 809d 	beq.w	80066cc <_printf_i+0x1a4>
 8006592:	d808      	bhi.n	80065a6 <_printf_i+0x7e>
 8006594:	296f      	cmp	r1, #111	; 0x6f
 8006596:	d020      	beq.n	80065da <_printf_i+0xb2>
 8006598:	2970      	cmp	r1, #112	; 0x70
 800659a:	d1dd      	bne.n	8006558 <_printf_i+0x30>
 800659c:	6823      	ldr	r3, [r4, #0]
 800659e:	f043 0320 	orr.w	r3, r3, #32
 80065a2:	6023      	str	r3, [r4, #0]
 80065a4:	e003      	b.n	80065ae <_printf_i+0x86>
 80065a6:	2975      	cmp	r1, #117	; 0x75
 80065a8:	d017      	beq.n	80065da <_printf_i+0xb2>
 80065aa:	2978      	cmp	r1, #120	; 0x78
 80065ac:	d1d4      	bne.n	8006558 <_printf_i+0x30>
 80065ae:	2378      	movs	r3, #120	; 0x78
 80065b0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80065b4:	4864      	ldr	r0, [pc, #400]	; (8006748 <_printf_i+0x220>)
 80065b6:	e055      	b.n	8006664 <_printf_i+0x13c>
 80065b8:	6813      	ldr	r3, [r2, #0]
 80065ba:	1d19      	adds	r1, r3, #4
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	6011      	str	r1, [r2, #0]
 80065c0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80065c4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80065c8:	2301      	movs	r3, #1
 80065ca:	e08c      	b.n	80066e6 <_printf_i+0x1be>
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	6011      	str	r1, [r2, #0]
 80065d0:	f010 0f40 	tst.w	r0, #64	; 0x40
 80065d4:	bf18      	it	ne
 80065d6:	b21b      	sxthne	r3, r3
 80065d8:	e7cf      	b.n	800657a <_printf_i+0x52>
 80065da:	6813      	ldr	r3, [r2, #0]
 80065dc:	6825      	ldr	r5, [r4, #0]
 80065de:	1d18      	adds	r0, r3, #4
 80065e0:	6010      	str	r0, [r2, #0]
 80065e2:	0628      	lsls	r0, r5, #24
 80065e4:	d501      	bpl.n	80065ea <_printf_i+0xc2>
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	e002      	b.n	80065f0 <_printf_i+0xc8>
 80065ea:	0668      	lsls	r0, r5, #25
 80065ec:	d5fb      	bpl.n	80065e6 <_printf_i+0xbe>
 80065ee:	881b      	ldrh	r3, [r3, #0]
 80065f0:	4854      	ldr	r0, [pc, #336]	; (8006744 <_printf_i+0x21c>)
 80065f2:	296f      	cmp	r1, #111	; 0x6f
 80065f4:	bf14      	ite	ne
 80065f6:	220a      	movne	r2, #10
 80065f8:	2208      	moveq	r2, #8
 80065fa:	2100      	movs	r1, #0
 80065fc:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006600:	6865      	ldr	r5, [r4, #4]
 8006602:	60a5      	str	r5, [r4, #8]
 8006604:	2d00      	cmp	r5, #0
 8006606:	f2c0 8095 	blt.w	8006734 <_printf_i+0x20c>
 800660a:	6821      	ldr	r1, [r4, #0]
 800660c:	f021 0104 	bic.w	r1, r1, #4
 8006610:	6021      	str	r1, [r4, #0]
 8006612:	2b00      	cmp	r3, #0
 8006614:	d13d      	bne.n	8006692 <_printf_i+0x16a>
 8006616:	2d00      	cmp	r5, #0
 8006618:	f040 808e 	bne.w	8006738 <_printf_i+0x210>
 800661c:	4665      	mov	r5, ip
 800661e:	2a08      	cmp	r2, #8
 8006620:	d10b      	bne.n	800663a <_printf_i+0x112>
 8006622:	6823      	ldr	r3, [r4, #0]
 8006624:	07db      	lsls	r3, r3, #31
 8006626:	d508      	bpl.n	800663a <_printf_i+0x112>
 8006628:	6923      	ldr	r3, [r4, #16]
 800662a:	6862      	ldr	r2, [r4, #4]
 800662c:	429a      	cmp	r2, r3
 800662e:	bfde      	ittt	le
 8006630:	2330      	movle	r3, #48	; 0x30
 8006632:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006636:	f105 35ff 	addle.w	r5, r5, #4294967295
 800663a:	ebac 0305 	sub.w	r3, ip, r5
 800663e:	6123      	str	r3, [r4, #16]
 8006640:	f8cd 8000 	str.w	r8, [sp]
 8006644:	463b      	mov	r3, r7
 8006646:	aa03      	add	r2, sp, #12
 8006648:	4621      	mov	r1, r4
 800664a:	4630      	mov	r0, r6
 800664c:	f7ff fef6 	bl	800643c <_printf_common>
 8006650:	3001      	adds	r0, #1
 8006652:	d14d      	bne.n	80066f0 <_printf_i+0x1c8>
 8006654:	f04f 30ff 	mov.w	r0, #4294967295
 8006658:	b005      	add	sp, #20
 800665a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800665e:	4839      	ldr	r0, [pc, #228]	; (8006744 <_printf_i+0x21c>)
 8006660:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8006664:	6813      	ldr	r3, [r2, #0]
 8006666:	6821      	ldr	r1, [r4, #0]
 8006668:	1d1d      	adds	r5, r3, #4
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	6015      	str	r5, [r2, #0]
 800666e:	060a      	lsls	r2, r1, #24
 8006670:	d50b      	bpl.n	800668a <_printf_i+0x162>
 8006672:	07ca      	lsls	r2, r1, #31
 8006674:	bf44      	itt	mi
 8006676:	f041 0120 	orrmi.w	r1, r1, #32
 800667a:	6021      	strmi	r1, [r4, #0]
 800667c:	b91b      	cbnz	r3, 8006686 <_printf_i+0x15e>
 800667e:	6822      	ldr	r2, [r4, #0]
 8006680:	f022 0220 	bic.w	r2, r2, #32
 8006684:	6022      	str	r2, [r4, #0]
 8006686:	2210      	movs	r2, #16
 8006688:	e7b7      	b.n	80065fa <_printf_i+0xd2>
 800668a:	064d      	lsls	r5, r1, #25
 800668c:	bf48      	it	mi
 800668e:	b29b      	uxthmi	r3, r3
 8006690:	e7ef      	b.n	8006672 <_printf_i+0x14a>
 8006692:	4665      	mov	r5, ip
 8006694:	fbb3 f1f2 	udiv	r1, r3, r2
 8006698:	fb02 3311 	mls	r3, r2, r1, r3
 800669c:	5cc3      	ldrb	r3, [r0, r3]
 800669e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80066a2:	460b      	mov	r3, r1
 80066a4:	2900      	cmp	r1, #0
 80066a6:	d1f5      	bne.n	8006694 <_printf_i+0x16c>
 80066a8:	e7b9      	b.n	800661e <_printf_i+0xf6>
 80066aa:	6813      	ldr	r3, [r2, #0]
 80066ac:	6825      	ldr	r5, [r4, #0]
 80066ae:	6961      	ldr	r1, [r4, #20]
 80066b0:	1d18      	adds	r0, r3, #4
 80066b2:	6010      	str	r0, [r2, #0]
 80066b4:	0628      	lsls	r0, r5, #24
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	d501      	bpl.n	80066be <_printf_i+0x196>
 80066ba:	6019      	str	r1, [r3, #0]
 80066bc:	e002      	b.n	80066c4 <_printf_i+0x19c>
 80066be:	066a      	lsls	r2, r5, #25
 80066c0:	d5fb      	bpl.n	80066ba <_printf_i+0x192>
 80066c2:	8019      	strh	r1, [r3, #0]
 80066c4:	2300      	movs	r3, #0
 80066c6:	6123      	str	r3, [r4, #16]
 80066c8:	4665      	mov	r5, ip
 80066ca:	e7b9      	b.n	8006640 <_printf_i+0x118>
 80066cc:	6813      	ldr	r3, [r2, #0]
 80066ce:	1d19      	adds	r1, r3, #4
 80066d0:	6011      	str	r1, [r2, #0]
 80066d2:	681d      	ldr	r5, [r3, #0]
 80066d4:	6862      	ldr	r2, [r4, #4]
 80066d6:	2100      	movs	r1, #0
 80066d8:	4628      	mov	r0, r5
 80066da:	f7f9 fd89 	bl	80001f0 <memchr>
 80066de:	b108      	cbz	r0, 80066e4 <_printf_i+0x1bc>
 80066e0:	1b40      	subs	r0, r0, r5
 80066e2:	6060      	str	r0, [r4, #4]
 80066e4:	6863      	ldr	r3, [r4, #4]
 80066e6:	6123      	str	r3, [r4, #16]
 80066e8:	2300      	movs	r3, #0
 80066ea:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80066ee:	e7a7      	b.n	8006640 <_printf_i+0x118>
 80066f0:	6923      	ldr	r3, [r4, #16]
 80066f2:	462a      	mov	r2, r5
 80066f4:	4639      	mov	r1, r7
 80066f6:	4630      	mov	r0, r6
 80066f8:	47c0      	blx	r8
 80066fa:	3001      	adds	r0, #1
 80066fc:	d0aa      	beq.n	8006654 <_printf_i+0x12c>
 80066fe:	6823      	ldr	r3, [r4, #0]
 8006700:	079b      	lsls	r3, r3, #30
 8006702:	d413      	bmi.n	800672c <_printf_i+0x204>
 8006704:	68e0      	ldr	r0, [r4, #12]
 8006706:	9b03      	ldr	r3, [sp, #12]
 8006708:	4298      	cmp	r0, r3
 800670a:	bfb8      	it	lt
 800670c:	4618      	movlt	r0, r3
 800670e:	e7a3      	b.n	8006658 <_printf_i+0x130>
 8006710:	2301      	movs	r3, #1
 8006712:	464a      	mov	r2, r9
 8006714:	4639      	mov	r1, r7
 8006716:	4630      	mov	r0, r6
 8006718:	47c0      	blx	r8
 800671a:	3001      	adds	r0, #1
 800671c:	d09a      	beq.n	8006654 <_printf_i+0x12c>
 800671e:	3501      	adds	r5, #1
 8006720:	68e3      	ldr	r3, [r4, #12]
 8006722:	9a03      	ldr	r2, [sp, #12]
 8006724:	1a9b      	subs	r3, r3, r2
 8006726:	42ab      	cmp	r3, r5
 8006728:	dcf2      	bgt.n	8006710 <_printf_i+0x1e8>
 800672a:	e7eb      	b.n	8006704 <_printf_i+0x1dc>
 800672c:	2500      	movs	r5, #0
 800672e:	f104 0919 	add.w	r9, r4, #25
 8006732:	e7f5      	b.n	8006720 <_printf_i+0x1f8>
 8006734:	2b00      	cmp	r3, #0
 8006736:	d1ac      	bne.n	8006692 <_printf_i+0x16a>
 8006738:	7803      	ldrb	r3, [r0, #0]
 800673a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800673e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006742:	e76c      	b.n	800661e <_printf_i+0xf6>
 8006744:	08006b89 	.word	0x08006b89
 8006748:	08006b9a 	.word	0x08006b9a

0800674c <memmove>:
 800674c:	4288      	cmp	r0, r1
 800674e:	b510      	push	{r4, lr}
 8006750:	eb01 0302 	add.w	r3, r1, r2
 8006754:	d807      	bhi.n	8006766 <memmove+0x1a>
 8006756:	1e42      	subs	r2, r0, #1
 8006758:	4299      	cmp	r1, r3
 800675a:	d00a      	beq.n	8006772 <memmove+0x26>
 800675c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006760:	f802 4f01 	strb.w	r4, [r2, #1]!
 8006764:	e7f8      	b.n	8006758 <memmove+0xc>
 8006766:	4283      	cmp	r3, r0
 8006768:	d9f5      	bls.n	8006756 <memmove+0xa>
 800676a:	1881      	adds	r1, r0, r2
 800676c:	1ad2      	subs	r2, r2, r3
 800676e:	42d3      	cmn	r3, r2
 8006770:	d100      	bne.n	8006774 <memmove+0x28>
 8006772:	bd10      	pop	{r4, pc}
 8006774:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006778:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800677c:	e7f7      	b.n	800676e <memmove+0x22>
	...

08006780 <_free_r>:
 8006780:	b538      	push	{r3, r4, r5, lr}
 8006782:	4605      	mov	r5, r0
 8006784:	2900      	cmp	r1, #0
 8006786:	d045      	beq.n	8006814 <_free_r+0x94>
 8006788:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800678c:	1f0c      	subs	r4, r1, #4
 800678e:	2b00      	cmp	r3, #0
 8006790:	bfb8      	it	lt
 8006792:	18e4      	addlt	r4, r4, r3
 8006794:	f000 f8d2 	bl	800693c <__malloc_lock>
 8006798:	4a1f      	ldr	r2, [pc, #124]	; (8006818 <_free_r+0x98>)
 800679a:	6813      	ldr	r3, [r2, #0]
 800679c:	4610      	mov	r0, r2
 800679e:	b933      	cbnz	r3, 80067ae <_free_r+0x2e>
 80067a0:	6063      	str	r3, [r4, #4]
 80067a2:	6014      	str	r4, [r2, #0]
 80067a4:	4628      	mov	r0, r5
 80067a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80067aa:	f000 b8c8 	b.w	800693e <__malloc_unlock>
 80067ae:	42a3      	cmp	r3, r4
 80067b0:	d90c      	bls.n	80067cc <_free_r+0x4c>
 80067b2:	6821      	ldr	r1, [r4, #0]
 80067b4:	1862      	adds	r2, r4, r1
 80067b6:	4293      	cmp	r3, r2
 80067b8:	bf04      	itt	eq
 80067ba:	681a      	ldreq	r2, [r3, #0]
 80067bc:	685b      	ldreq	r3, [r3, #4]
 80067be:	6063      	str	r3, [r4, #4]
 80067c0:	bf04      	itt	eq
 80067c2:	1852      	addeq	r2, r2, r1
 80067c4:	6022      	streq	r2, [r4, #0]
 80067c6:	6004      	str	r4, [r0, #0]
 80067c8:	e7ec      	b.n	80067a4 <_free_r+0x24>
 80067ca:	4613      	mov	r3, r2
 80067cc:	685a      	ldr	r2, [r3, #4]
 80067ce:	b10a      	cbz	r2, 80067d4 <_free_r+0x54>
 80067d0:	42a2      	cmp	r2, r4
 80067d2:	d9fa      	bls.n	80067ca <_free_r+0x4a>
 80067d4:	6819      	ldr	r1, [r3, #0]
 80067d6:	1858      	adds	r0, r3, r1
 80067d8:	42a0      	cmp	r0, r4
 80067da:	d10b      	bne.n	80067f4 <_free_r+0x74>
 80067dc:	6820      	ldr	r0, [r4, #0]
 80067de:	4401      	add	r1, r0
 80067e0:	1858      	adds	r0, r3, r1
 80067e2:	4282      	cmp	r2, r0
 80067e4:	6019      	str	r1, [r3, #0]
 80067e6:	d1dd      	bne.n	80067a4 <_free_r+0x24>
 80067e8:	6810      	ldr	r0, [r2, #0]
 80067ea:	6852      	ldr	r2, [r2, #4]
 80067ec:	605a      	str	r2, [r3, #4]
 80067ee:	4401      	add	r1, r0
 80067f0:	6019      	str	r1, [r3, #0]
 80067f2:	e7d7      	b.n	80067a4 <_free_r+0x24>
 80067f4:	d902      	bls.n	80067fc <_free_r+0x7c>
 80067f6:	230c      	movs	r3, #12
 80067f8:	602b      	str	r3, [r5, #0]
 80067fa:	e7d3      	b.n	80067a4 <_free_r+0x24>
 80067fc:	6820      	ldr	r0, [r4, #0]
 80067fe:	1821      	adds	r1, r4, r0
 8006800:	428a      	cmp	r2, r1
 8006802:	bf04      	itt	eq
 8006804:	6811      	ldreq	r1, [r2, #0]
 8006806:	6852      	ldreq	r2, [r2, #4]
 8006808:	6062      	str	r2, [r4, #4]
 800680a:	bf04      	itt	eq
 800680c:	1809      	addeq	r1, r1, r0
 800680e:	6021      	streq	r1, [r4, #0]
 8006810:	605c      	str	r4, [r3, #4]
 8006812:	e7c7      	b.n	80067a4 <_free_r+0x24>
 8006814:	bd38      	pop	{r3, r4, r5, pc}
 8006816:	bf00      	nop
 8006818:	20000168 	.word	0x20000168

0800681c <_malloc_r>:
 800681c:	b570      	push	{r4, r5, r6, lr}
 800681e:	1ccd      	adds	r5, r1, #3
 8006820:	f025 0503 	bic.w	r5, r5, #3
 8006824:	3508      	adds	r5, #8
 8006826:	2d0c      	cmp	r5, #12
 8006828:	bf38      	it	cc
 800682a:	250c      	movcc	r5, #12
 800682c:	2d00      	cmp	r5, #0
 800682e:	4606      	mov	r6, r0
 8006830:	db01      	blt.n	8006836 <_malloc_r+0x1a>
 8006832:	42a9      	cmp	r1, r5
 8006834:	d903      	bls.n	800683e <_malloc_r+0x22>
 8006836:	230c      	movs	r3, #12
 8006838:	6033      	str	r3, [r6, #0]
 800683a:	2000      	movs	r0, #0
 800683c:	bd70      	pop	{r4, r5, r6, pc}
 800683e:	f000 f87d 	bl	800693c <__malloc_lock>
 8006842:	4a21      	ldr	r2, [pc, #132]	; (80068c8 <_malloc_r+0xac>)
 8006844:	6814      	ldr	r4, [r2, #0]
 8006846:	4621      	mov	r1, r4
 8006848:	b991      	cbnz	r1, 8006870 <_malloc_r+0x54>
 800684a:	4c20      	ldr	r4, [pc, #128]	; (80068cc <_malloc_r+0xb0>)
 800684c:	6823      	ldr	r3, [r4, #0]
 800684e:	b91b      	cbnz	r3, 8006858 <_malloc_r+0x3c>
 8006850:	4630      	mov	r0, r6
 8006852:	f000 f863 	bl	800691c <_sbrk_r>
 8006856:	6020      	str	r0, [r4, #0]
 8006858:	4629      	mov	r1, r5
 800685a:	4630      	mov	r0, r6
 800685c:	f000 f85e 	bl	800691c <_sbrk_r>
 8006860:	1c43      	adds	r3, r0, #1
 8006862:	d124      	bne.n	80068ae <_malloc_r+0x92>
 8006864:	230c      	movs	r3, #12
 8006866:	6033      	str	r3, [r6, #0]
 8006868:	4630      	mov	r0, r6
 800686a:	f000 f868 	bl	800693e <__malloc_unlock>
 800686e:	e7e4      	b.n	800683a <_malloc_r+0x1e>
 8006870:	680b      	ldr	r3, [r1, #0]
 8006872:	1b5b      	subs	r3, r3, r5
 8006874:	d418      	bmi.n	80068a8 <_malloc_r+0x8c>
 8006876:	2b0b      	cmp	r3, #11
 8006878:	d90f      	bls.n	800689a <_malloc_r+0x7e>
 800687a:	600b      	str	r3, [r1, #0]
 800687c:	50cd      	str	r5, [r1, r3]
 800687e:	18cc      	adds	r4, r1, r3
 8006880:	4630      	mov	r0, r6
 8006882:	f000 f85c 	bl	800693e <__malloc_unlock>
 8006886:	f104 000b 	add.w	r0, r4, #11
 800688a:	1d23      	adds	r3, r4, #4
 800688c:	f020 0007 	bic.w	r0, r0, #7
 8006890:	1ac3      	subs	r3, r0, r3
 8006892:	d0d3      	beq.n	800683c <_malloc_r+0x20>
 8006894:	425a      	negs	r2, r3
 8006896:	50e2      	str	r2, [r4, r3]
 8006898:	e7d0      	b.n	800683c <_malloc_r+0x20>
 800689a:	428c      	cmp	r4, r1
 800689c:	684b      	ldr	r3, [r1, #4]
 800689e:	bf16      	itet	ne
 80068a0:	6063      	strne	r3, [r4, #4]
 80068a2:	6013      	streq	r3, [r2, #0]
 80068a4:	460c      	movne	r4, r1
 80068a6:	e7eb      	b.n	8006880 <_malloc_r+0x64>
 80068a8:	460c      	mov	r4, r1
 80068aa:	6849      	ldr	r1, [r1, #4]
 80068ac:	e7cc      	b.n	8006848 <_malloc_r+0x2c>
 80068ae:	1cc4      	adds	r4, r0, #3
 80068b0:	f024 0403 	bic.w	r4, r4, #3
 80068b4:	42a0      	cmp	r0, r4
 80068b6:	d005      	beq.n	80068c4 <_malloc_r+0xa8>
 80068b8:	1a21      	subs	r1, r4, r0
 80068ba:	4630      	mov	r0, r6
 80068bc:	f000 f82e 	bl	800691c <_sbrk_r>
 80068c0:	3001      	adds	r0, #1
 80068c2:	d0cf      	beq.n	8006864 <_malloc_r+0x48>
 80068c4:	6025      	str	r5, [r4, #0]
 80068c6:	e7db      	b.n	8006880 <_malloc_r+0x64>
 80068c8:	20000168 	.word	0x20000168
 80068cc:	2000016c 	.word	0x2000016c

080068d0 <_realloc_r>:
 80068d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068d2:	4607      	mov	r7, r0
 80068d4:	4614      	mov	r4, r2
 80068d6:	460e      	mov	r6, r1
 80068d8:	b921      	cbnz	r1, 80068e4 <_realloc_r+0x14>
 80068da:	4611      	mov	r1, r2
 80068dc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80068e0:	f7ff bf9c 	b.w	800681c <_malloc_r>
 80068e4:	b922      	cbnz	r2, 80068f0 <_realloc_r+0x20>
 80068e6:	f7ff ff4b 	bl	8006780 <_free_r>
 80068ea:	4625      	mov	r5, r4
 80068ec:	4628      	mov	r0, r5
 80068ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80068f0:	f000 f826 	bl	8006940 <_malloc_usable_size_r>
 80068f4:	42a0      	cmp	r0, r4
 80068f6:	d20f      	bcs.n	8006918 <_realloc_r+0x48>
 80068f8:	4621      	mov	r1, r4
 80068fa:	4638      	mov	r0, r7
 80068fc:	f7ff ff8e 	bl	800681c <_malloc_r>
 8006900:	4605      	mov	r5, r0
 8006902:	2800      	cmp	r0, #0
 8006904:	d0f2      	beq.n	80068ec <_realloc_r+0x1c>
 8006906:	4631      	mov	r1, r6
 8006908:	4622      	mov	r2, r4
 800690a:	f7ff fc11 	bl	8006130 <memcpy>
 800690e:	4631      	mov	r1, r6
 8006910:	4638      	mov	r0, r7
 8006912:	f7ff ff35 	bl	8006780 <_free_r>
 8006916:	e7e9      	b.n	80068ec <_realloc_r+0x1c>
 8006918:	4635      	mov	r5, r6
 800691a:	e7e7      	b.n	80068ec <_realloc_r+0x1c>

0800691c <_sbrk_r>:
 800691c:	b538      	push	{r3, r4, r5, lr}
 800691e:	4c06      	ldr	r4, [pc, #24]	; (8006938 <_sbrk_r+0x1c>)
 8006920:	2300      	movs	r3, #0
 8006922:	4605      	mov	r5, r0
 8006924:	4608      	mov	r0, r1
 8006926:	6023      	str	r3, [r4, #0]
 8006928:	f7fb fc78 	bl	800221c <_sbrk>
 800692c:	1c43      	adds	r3, r0, #1
 800692e:	d102      	bne.n	8006936 <_sbrk_r+0x1a>
 8006930:	6823      	ldr	r3, [r4, #0]
 8006932:	b103      	cbz	r3, 8006936 <_sbrk_r+0x1a>
 8006934:	602b      	str	r3, [r5, #0]
 8006936:	bd38      	pop	{r3, r4, r5, pc}
 8006938:	20000374 	.word	0x20000374

0800693c <__malloc_lock>:
 800693c:	4770      	bx	lr

0800693e <__malloc_unlock>:
 800693e:	4770      	bx	lr

08006940 <_malloc_usable_size_r>:
 8006940:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006944:	1f18      	subs	r0, r3, #4
 8006946:	2b00      	cmp	r3, #0
 8006948:	bfbc      	itt	lt
 800694a:	580b      	ldrlt	r3, [r1, r0]
 800694c:	18c0      	addlt	r0, r0, r3
 800694e:	4770      	bx	lr

08006950 <_init>:
 8006950:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006952:	bf00      	nop
 8006954:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006956:	bc08      	pop	{r3}
 8006958:	469e      	mov	lr, r3
 800695a:	4770      	bx	lr

0800695c <_fini>:
 800695c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800695e:	bf00      	nop
 8006960:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006962:	bc08      	pop	{r3}
 8006964:	469e      	mov	lr, r3
 8006966:	4770      	bx	lr
