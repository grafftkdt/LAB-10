
LAB 10.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003e74  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  0800400c  0800400c  0001400c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800402c  0800402c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  0800402c  0800402c  0001402c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004034  08004034  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004034  08004034  00014034  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004038  08004038  00014038  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800403c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000220  2000000c  08004048  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000022c  08004048  0002022c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e28a  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001e6a  00000000  00000000  0002e2c6  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000f28  00000000  00000000  00030130  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000e30  00000000  00000000  00031058  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000165f6  00000000  00000000  00031e88  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000aa29  00000000  00000000  0004847e  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008f5b6  00000000  00000000  00052ea7  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e245d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004028  00000000  00000000  000e24d8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000000c 	.word	0x2000000c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08003ff4 	.word	0x08003ff4

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000010 	.word	0x20000010
 80001d4:	08003ff4 	.word	0x08003ff4

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b972 	b.w	80004d4 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9e08      	ldr	r6, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	4688      	mov	r8, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14b      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000216:	428a      	cmp	r2, r1
 8000218:	4615      	mov	r5, r2
 800021a:	d967      	bls.n	80002ec <__udivmoddi4+0xe4>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b14a      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000222:	f1c2 0720 	rsb	r7, r2, #32
 8000226:	fa01 f302 	lsl.w	r3, r1, r2
 800022a:	fa20 f707 	lsr.w	r7, r0, r7
 800022e:	4095      	lsls	r5, r2
 8000230:	ea47 0803 	orr.w	r8, r7, r3
 8000234:	4094      	lsls	r4, r2
 8000236:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800023a:	0c23      	lsrs	r3, r4, #16
 800023c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000240:	fa1f fc85 	uxth.w	ip, r5
 8000244:	fb0e 8817 	mls	r8, lr, r7, r8
 8000248:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800024c:	fb07 f10c 	mul.w	r1, r7, ip
 8000250:	4299      	cmp	r1, r3
 8000252:	d909      	bls.n	8000268 <__udivmoddi4+0x60>
 8000254:	18eb      	adds	r3, r5, r3
 8000256:	f107 30ff 	add.w	r0, r7, #4294967295
 800025a:	f080 811b 	bcs.w	8000494 <__udivmoddi4+0x28c>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 8118 	bls.w	8000494 <__udivmoddi4+0x28c>
 8000264:	3f02      	subs	r7, #2
 8000266:	442b      	add	r3, r5
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000270:	fb0e 3310 	mls	r3, lr, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 fc0c 	mul.w	ip, r0, ip
 800027c:	45a4      	cmp	ip, r4
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x8c>
 8000280:	192c      	adds	r4, r5, r4
 8000282:	f100 33ff 	add.w	r3, r0, #4294967295
 8000286:	f080 8107 	bcs.w	8000498 <__udivmoddi4+0x290>
 800028a:	45a4      	cmp	ip, r4
 800028c:	f240 8104 	bls.w	8000498 <__udivmoddi4+0x290>
 8000290:	3802      	subs	r0, #2
 8000292:	442c      	add	r4, r5
 8000294:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000298:	eba4 040c 	sub.w	r4, r4, ip
 800029c:	2700      	movs	r7, #0
 800029e:	b11e      	cbz	r6, 80002a8 <__udivmoddi4+0xa0>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c6 4300 	strd	r4, r3, [r6]
 80002a8:	4639      	mov	r1, r7
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d909      	bls.n	80002c6 <__udivmoddi4+0xbe>
 80002b2:	2e00      	cmp	r6, #0
 80002b4:	f000 80eb 	beq.w	800048e <__udivmoddi4+0x286>
 80002b8:	2700      	movs	r7, #0
 80002ba:	e9c6 0100 	strd	r0, r1, [r6]
 80002be:	4638      	mov	r0, r7
 80002c0:	4639      	mov	r1, r7
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	fab3 f783 	clz	r7, r3
 80002ca:	2f00      	cmp	r7, #0
 80002cc:	d147      	bne.n	800035e <__udivmoddi4+0x156>
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d302      	bcc.n	80002d8 <__udivmoddi4+0xd0>
 80002d2:	4282      	cmp	r2, r0
 80002d4:	f200 80fa 	bhi.w	80004cc <__udivmoddi4+0x2c4>
 80002d8:	1a84      	subs	r4, r0, r2
 80002da:	eb61 0303 	sbc.w	r3, r1, r3
 80002de:	2001      	movs	r0, #1
 80002e0:	4698      	mov	r8, r3
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	d0e0      	beq.n	80002a8 <__udivmoddi4+0xa0>
 80002e6:	e9c6 4800 	strd	r4, r8, [r6]
 80002ea:	e7dd      	b.n	80002a8 <__udivmoddi4+0xa0>
 80002ec:	b902      	cbnz	r2, 80002f0 <__udivmoddi4+0xe8>
 80002ee:	deff      	udf	#255	; 0xff
 80002f0:	fab2 f282 	clz	r2, r2
 80002f4:	2a00      	cmp	r2, #0
 80002f6:	f040 808f 	bne.w	8000418 <__udivmoddi4+0x210>
 80002fa:	1b49      	subs	r1, r1, r5
 80002fc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000300:	fa1f f885 	uxth.w	r8, r5
 8000304:	2701      	movs	r7, #1
 8000306:	fbb1 fcfe 	udiv	ip, r1, lr
 800030a:	0c23      	lsrs	r3, r4, #16
 800030c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000310:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000314:	fb08 f10c 	mul.w	r1, r8, ip
 8000318:	4299      	cmp	r1, r3
 800031a:	d907      	bls.n	800032c <__udivmoddi4+0x124>
 800031c:	18eb      	adds	r3, r5, r3
 800031e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x122>
 8000324:	4299      	cmp	r1, r3
 8000326:	f200 80cd 	bhi.w	80004c4 <__udivmoddi4+0x2bc>
 800032a:	4684      	mov	ip, r0
 800032c:	1a59      	subs	r1, r3, r1
 800032e:	b2a3      	uxth	r3, r4
 8000330:	fbb1 f0fe 	udiv	r0, r1, lr
 8000334:	fb0e 1410 	mls	r4, lr, r0, r1
 8000338:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800033c:	fb08 f800 	mul.w	r8, r8, r0
 8000340:	45a0      	cmp	r8, r4
 8000342:	d907      	bls.n	8000354 <__udivmoddi4+0x14c>
 8000344:	192c      	adds	r4, r5, r4
 8000346:	f100 33ff 	add.w	r3, r0, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x14a>
 800034c:	45a0      	cmp	r8, r4
 800034e:	f200 80b6 	bhi.w	80004be <__udivmoddi4+0x2b6>
 8000352:	4618      	mov	r0, r3
 8000354:	eba4 0408 	sub.w	r4, r4, r8
 8000358:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800035c:	e79f      	b.n	800029e <__udivmoddi4+0x96>
 800035e:	f1c7 0c20 	rsb	ip, r7, #32
 8000362:	40bb      	lsls	r3, r7
 8000364:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000368:	ea4e 0e03 	orr.w	lr, lr, r3
 800036c:	fa01 f407 	lsl.w	r4, r1, r7
 8000370:	fa20 f50c 	lsr.w	r5, r0, ip
 8000374:	fa21 f30c 	lsr.w	r3, r1, ip
 8000378:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800037c:	4325      	orrs	r5, r4
 800037e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000382:	0c2c      	lsrs	r4, r5, #16
 8000384:	fb08 3319 	mls	r3, r8, r9, r3
 8000388:	fa1f fa8e 	uxth.w	sl, lr
 800038c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000390:	fb09 f40a 	mul.w	r4, r9, sl
 8000394:	429c      	cmp	r4, r3
 8000396:	fa02 f207 	lsl.w	r2, r2, r7
 800039a:	fa00 f107 	lsl.w	r1, r0, r7
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b0>
 80003a0:	eb1e 0303 	adds.w	r3, lr, r3
 80003a4:	f109 30ff 	add.w	r0, r9, #4294967295
 80003a8:	f080 8087 	bcs.w	80004ba <__udivmoddi4+0x2b2>
 80003ac:	429c      	cmp	r4, r3
 80003ae:	f240 8084 	bls.w	80004ba <__udivmoddi4+0x2b2>
 80003b2:	f1a9 0902 	sub.w	r9, r9, #2
 80003b6:	4473      	add	r3, lr
 80003b8:	1b1b      	subs	r3, r3, r4
 80003ba:	b2ad      	uxth	r5, r5
 80003bc:	fbb3 f0f8 	udiv	r0, r3, r8
 80003c0:	fb08 3310 	mls	r3, r8, r0, r3
 80003c4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003c8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003cc:	45a2      	cmp	sl, r4
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1da>
 80003d0:	eb1e 0404 	adds.w	r4, lr, r4
 80003d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d8:	d26b      	bcs.n	80004b2 <__udivmoddi4+0x2aa>
 80003da:	45a2      	cmp	sl, r4
 80003dc:	d969      	bls.n	80004b2 <__udivmoddi4+0x2aa>
 80003de:	3802      	subs	r0, #2
 80003e0:	4474      	add	r4, lr
 80003e2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003e6:	fba0 8902 	umull	r8, r9, r0, r2
 80003ea:	eba4 040a 	sub.w	r4, r4, sl
 80003ee:	454c      	cmp	r4, r9
 80003f0:	46c2      	mov	sl, r8
 80003f2:	464b      	mov	r3, r9
 80003f4:	d354      	bcc.n	80004a0 <__udivmoddi4+0x298>
 80003f6:	d051      	beq.n	800049c <__udivmoddi4+0x294>
 80003f8:	2e00      	cmp	r6, #0
 80003fa:	d069      	beq.n	80004d0 <__udivmoddi4+0x2c8>
 80003fc:	ebb1 050a 	subs.w	r5, r1, sl
 8000400:	eb64 0403 	sbc.w	r4, r4, r3
 8000404:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000408:	40fd      	lsrs	r5, r7
 800040a:	40fc      	lsrs	r4, r7
 800040c:	ea4c 0505 	orr.w	r5, ip, r5
 8000410:	e9c6 5400 	strd	r5, r4, [r6]
 8000414:	2700      	movs	r7, #0
 8000416:	e747      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000418:	f1c2 0320 	rsb	r3, r2, #32
 800041c:	fa20 f703 	lsr.w	r7, r0, r3
 8000420:	4095      	lsls	r5, r2
 8000422:	fa01 f002 	lsl.w	r0, r1, r2
 8000426:	fa21 f303 	lsr.w	r3, r1, r3
 800042a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800042e:	4338      	orrs	r0, r7
 8000430:	0c01      	lsrs	r1, r0, #16
 8000432:	fbb3 f7fe 	udiv	r7, r3, lr
 8000436:	fa1f f885 	uxth.w	r8, r5
 800043a:	fb0e 3317 	mls	r3, lr, r7, r3
 800043e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000442:	fb07 f308 	mul.w	r3, r7, r8
 8000446:	428b      	cmp	r3, r1
 8000448:	fa04 f402 	lsl.w	r4, r4, r2
 800044c:	d907      	bls.n	800045e <__udivmoddi4+0x256>
 800044e:	1869      	adds	r1, r5, r1
 8000450:	f107 3cff 	add.w	ip, r7, #4294967295
 8000454:	d22f      	bcs.n	80004b6 <__udivmoddi4+0x2ae>
 8000456:	428b      	cmp	r3, r1
 8000458:	d92d      	bls.n	80004b6 <__udivmoddi4+0x2ae>
 800045a:	3f02      	subs	r7, #2
 800045c:	4429      	add	r1, r5
 800045e:	1acb      	subs	r3, r1, r3
 8000460:	b281      	uxth	r1, r0
 8000462:	fbb3 f0fe 	udiv	r0, r3, lr
 8000466:	fb0e 3310 	mls	r3, lr, r0, r3
 800046a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046e:	fb00 f308 	mul.w	r3, r0, r8
 8000472:	428b      	cmp	r3, r1
 8000474:	d907      	bls.n	8000486 <__udivmoddi4+0x27e>
 8000476:	1869      	adds	r1, r5, r1
 8000478:	f100 3cff 	add.w	ip, r0, #4294967295
 800047c:	d217      	bcs.n	80004ae <__udivmoddi4+0x2a6>
 800047e:	428b      	cmp	r3, r1
 8000480:	d915      	bls.n	80004ae <__udivmoddi4+0x2a6>
 8000482:	3802      	subs	r0, #2
 8000484:	4429      	add	r1, r5
 8000486:	1ac9      	subs	r1, r1, r3
 8000488:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800048c:	e73b      	b.n	8000306 <__udivmoddi4+0xfe>
 800048e:	4637      	mov	r7, r6
 8000490:	4630      	mov	r0, r6
 8000492:	e709      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000494:	4607      	mov	r7, r0
 8000496:	e6e7      	b.n	8000268 <__udivmoddi4+0x60>
 8000498:	4618      	mov	r0, r3
 800049a:	e6fb      	b.n	8000294 <__udivmoddi4+0x8c>
 800049c:	4541      	cmp	r1, r8
 800049e:	d2ab      	bcs.n	80003f8 <__udivmoddi4+0x1f0>
 80004a0:	ebb8 0a02 	subs.w	sl, r8, r2
 80004a4:	eb69 020e 	sbc.w	r2, r9, lr
 80004a8:	3801      	subs	r0, #1
 80004aa:	4613      	mov	r3, r2
 80004ac:	e7a4      	b.n	80003f8 <__udivmoddi4+0x1f0>
 80004ae:	4660      	mov	r0, ip
 80004b0:	e7e9      	b.n	8000486 <__udivmoddi4+0x27e>
 80004b2:	4618      	mov	r0, r3
 80004b4:	e795      	b.n	80003e2 <__udivmoddi4+0x1da>
 80004b6:	4667      	mov	r7, ip
 80004b8:	e7d1      	b.n	800045e <__udivmoddi4+0x256>
 80004ba:	4681      	mov	r9, r0
 80004bc:	e77c      	b.n	80003b8 <__udivmoddi4+0x1b0>
 80004be:	3802      	subs	r0, #2
 80004c0:	442c      	add	r4, r5
 80004c2:	e747      	b.n	8000354 <__udivmoddi4+0x14c>
 80004c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c8:	442b      	add	r3, r5
 80004ca:	e72f      	b.n	800032c <__udivmoddi4+0x124>
 80004cc:	4638      	mov	r0, r7
 80004ce:	e708      	b.n	80002e2 <__udivmoddi4+0xda>
 80004d0:	4637      	mov	r7, r6
 80004d2:	e6e9      	b.n	80002a8 <__udivmoddi4+0xa0>

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004dc:	f000 fcd2 	bl	8000e84 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004e0:	f000 f812 	bl	8000508 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004e4:	f000 f9e6 	bl	80008b4 <MX_GPIO_Init>
  MX_DMA_Init();
 80004e8:	f000 f9c4 	bl	8000874 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80004ec:	f000 f998 	bl	8000820 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 80004f0:	f000 f872 	bl	80005d8 <MX_ADC1_Init>
  MX_TIM3_Init();
 80004f4:	f000 f8fa 	bl	80006ec <MX_TIM3_Init>
  MX_SPI3_Init();
 80004f8:	f000 f8c0 	bl	800067c <MX_SPI3_Init>
  MX_TIM11_Init();
 80004fc:	f000 f942 	bl	8000784 <MX_TIM11_Init>
  MX_USART1_UART_Init();
 8000500:	f000 f964 	bl	80007cc <MX_USART1_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000504:	e7fe      	b.n	8000504 <main+0x2c>
	...

08000508 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b094      	sub	sp, #80	; 0x50
 800050c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800050e:	f107 0320 	add.w	r3, r7, #32
 8000512:	2230      	movs	r2, #48	; 0x30
 8000514:	2100      	movs	r1, #0
 8000516:	4618      	mov	r0, r3
 8000518:	f003 fd64 	bl	8003fe4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800051c:	f107 030c 	add.w	r3, r7, #12
 8000520:	2200      	movs	r2, #0
 8000522:	601a      	str	r2, [r3, #0]
 8000524:	605a      	str	r2, [r3, #4]
 8000526:	609a      	str	r2, [r3, #8]
 8000528:	60da      	str	r2, [r3, #12]
 800052a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800052c:	2300      	movs	r3, #0
 800052e:	60bb      	str	r3, [r7, #8]
 8000530:	4b27      	ldr	r3, [pc, #156]	; (80005d0 <SystemClock_Config+0xc8>)
 8000532:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000534:	4a26      	ldr	r2, [pc, #152]	; (80005d0 <SystemClock_Config+0xc8>)
 8000536:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800053a:	6413      	str	r3, [r2, #64]	; 0x40
 800053c:	4b24      	ldr	r3, [pc, #144]	; (80005d0 <SystemClock_Config+0xc8>)
 800053e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000540:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000544:	60bb      	str	r3, [r7, #8]
 8000546:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000548:	2300      	movs	r3, #0
 800054a:	607b      	str	r3, [r7, #4]
 800054c:	4b21      	ldr	r3, [pc, #132]	; (80005d4 <SystemClock_Config+0xcc>)
 800054e:	681b      	ldr	r3, [r3, #0]
 8000550:	4a20      	ldr	r2, [pc, #128]	; (80005d4 <SystemClock_Config+0xcc>)
 8000552:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000556:	6013      	str	r3, [r2, #0]
 8000558:	4b1e      	ldr	r3, [pc, #120]	; (80005d4 <SystemClock_Config+0xcc>)
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000560:	607b      	str	r3, [r7, #4]
 8000562:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000564:	2302      	movs	r3, #2
 8000566:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000568:	2301      	movs	r3, #1
 800056a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800056c:	2310      	movs	r3, #16
 800056e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000570:	2302      	movs	r3, #2
 8000572:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000574:	2300      	movs	r3, #0
 8000576:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000578:	2308      	movs	r3, #8
 800057a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 800057c:	2364      	movs	r3, #100	; 0x64
 800057e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000580:	2302      	movs	r3, #2
 8000582:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000584:	2304      	movs	r3, #4
 8000586:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000588:	f107 0320 	add.w	r3, r7, #32
 800058c:	4618      	mov	r0, r3
 800058e:	f001 fe7d 	bl	800228c <HAL_RCC_OscConfig>
 8000592:	4603      	mov	r3, r0
 8000594:	2b00      	cmp	r3, #0
 8000596:	d001      	beq.n	800059c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000598:	f000 fa2c 	bl	80009f4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800059c:	230f      	movs	r3, #15
 800059e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005a0:	2302      	movs	r3, #2
 80005a2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005a4:	2300      	movs	r3, #0
 80005a6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005ac:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005ae:	2300      	movs	r3, #0
 80005b0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80005b2:	f107 030c 	add.w	r3, r7, #12
 80005b6:	2103      	movs	r1, #3
 80005b8:	4618      	mov	r0, r3
 80005ba:	f002 f8d7 	bl	800276c <HAL_RCC_ClockConfig>
 80005be:	4603      	mov	r3, r0
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d001      	beq.n	80005c8 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80005c4:	f000 fa16 	bl	80009f4 <Error_Handler>
  }
}
 80005c8:	bf00      	nop
 80005ca:	3750      	adds	r7, #80	; 0x50
 80005cc:	46bd      	mov	sp, r7
 80005ce:	bd80      	pop	{r7, pc}
 80005d0:	40023800 	.word	0x40023800
 80005d4:	40007000 	.word	0x40007000

080005d8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b084      	sub	sp, #16
 80005dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80005de:	463b      	mov	r3, r7
 80005e0:	2200      	movs	r2, #0
 80005e2:	601a      	str	r2, [r3, #0]
 80005e4:	605a      	str	r2, [r3, #4]
 80005e6:	609a      	str	r2, [r3, #8]
 80005e8:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80005ea:	4b22      	ldr	r3, [pc, #136]	; (8000674 <MX_ADC1_Init+0x9c>)
 80005ec:	4a22      	ldr	r2, [pc, #136]	; (8000678 <MX_ADC1_Init+0xa0>)
 80005ee:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80005f0:	4b20      	ldr	r3, [pc, #128]	; (8000674 <MX_ADC1_Init+0x9c>)
 80005f2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80005f6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80005f8:	4b1e      	ldr	r3, [pc, #120]	; (8000674 <MX_ADC1_Init+0x9c>)
 80005fa:	2200      	movs	r2, #0
 80005fc:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80005fe:	4b1d      	ldr	r3, [pc, #116]	; (8000674 <MX_ADC1_Init+0x9c>)
 8000600:	2201      	movs	r2, #1
 8000602:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000604:	4b1b      	ldr	r3, [pc, #108]	; (8000674 <MX_ADC1_Init+0x9c>)
 8000606:	2200      	movs	r2, #0
 8000608:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800060a:	4b1a      	ldr	r3, [pc, #104]	; (8000674 <MX_ADC1_Init+0x9c>)
 800060c:	2200      	movs	r2, #0
 800060e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000612:	4b18      	ldr	r3, [pc, #96]	; (8000674 <MX_ADC1_Init+0x9c>)
 8000614:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000618:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 800061a:	4b16      	ldr	r3, [pc, #88]	; (8000674 <MX_ADC1_Init+0x9c>)
 800061c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000620:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000622:	4b14      	ldr	r3, [pc, #80]	; (8000674 <MX_ADC1_Init+0x9c>)
 8000624:	2200      	movs	r2, #0
 8000626:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000628:	4b12      	ldr	r3, [pc, #72]	; (8000674 <MX_ADC1_Init+0x9c>)
 800062a:	2201      	movs	r2, #1
 800062c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800062e:	4b11      	ldr	r3, [pc, #68]	; (8000674 <MX_ADC1_Init+0x9c>)
 8000630:	2200      	movs	r2, #0
 8000632:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000636:	4b0f      	ldr	r3, [pc, #60]	; (8000674 <MX_ADC1_Init+0x9c>)
 8000638:	2201      	movs	r2, #1
 800063a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800063c:	480d      	ldr	r0, [pc, #52]	; (8000674 <MX_ADC1_Init+0x9c>)
 800063e:	f000 fc93 	bl	8000f68 <HAL_ADC_Init>
 8000642:	4603      	mov	r3, r0
 8000644:	2b00      	cmp	r3, #0
 8000646:	d001      	beq.n	800064c <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 8000648:	f000 f9d4 	bl	80009f4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800064c:	2300      	movs	r3, #0
 800064e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000650:	2301      	movs	r3, #1
 8000652:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000654:	2300      	movs	r3, #0
 8000656:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000658:	463b      	mov	r3, r7
 800065a:	4619      	mov	r1, r3
 800065c:	4805      	ldr	r0, [pc, #20]	; (8000674 <MX_ADC1_Init+0x9c>)
 800065e:	f000 fe25 	bl	80012ac <HAL_ADC_ConfigChannel>
 8000662:	4603      	mov	r3, r0
 8000664:	2b00      	cmp	r3, #0
 8000666:	d001      	beq.n	800066c <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8000668:	f000 f9c4 	bl	80009f4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800066c:	bf00      	nop
 800066e:	3710      	adds	r7, #16
 8000670:	46bd      	mov	sp, r7
 8000672:	bd80      	pop	{r7, pc}
 8000674:	200000c0 	.word	0x200000c0
 8000678:	40012000 	.word	0x40012000

0800067c <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000680:	4b18      	ldr	r3, [pc, #96]	; (80006e4 <MX_SPI3_Init+0x68>)
 8000682:	4a19      	ldr	r2, [pc, #100]	; (80006e8 <MX_SPI3_Init+0x6c>)
 8000684:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000686:	4b17      	ldr	r3, [pc, #92]	; (80006e4 <MX_SPI3_Init+0x68>)
 8000688:	f44f 7282 	mov.w	r2, #260	; 0x104
 800068c:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800068e:	4b15      	ldr	r3, [pc, #84]	; (80006e4 <MX_SPI3_Init+0x68>)
 8000690:	2200      	movs	r2, #0
 8000692:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_16BIT;
 8000694:	4b13      	ldr	r3, [pc, #76]	; (80006e4 <MX_SPI3_Init+0x68>)
 8000696:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800069a:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800069c:	4b11      	ldr	r3, [pc, #68]	; (80006e4 <MX_SPI3_Init+0x68>)
 800069e:	2200      	movs	r2, #0
 80006a0:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80006a2:	4b10      	ldr	r3, [pc, #64]	; (80006e4 <MX_SPI3_Init+0x68>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80006a8:	4b0e      	ldr	r3, [pc, #56]	; (80006e4 <MX_SPI3_Init+0x68>)
 80006aa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80006ae:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80006b0:	4b0c      	ldr	r3, [pc, #48]	; (80006e4 <MX_SPI3_Init+0x68>)
 80006b2:	2208      	movs	r2, #8
 80006b4:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80006b6:	4b0b      	ldr	r3, [pc, #44]	; (80006e4 <MX_SPI3_Init+0x68>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80006bc:	4b09      	ldr	r3, [pc, #36]	; (80006e4 <MX_SPI3_Init+0x68>)
 80006be:	2200      	movs	r2, #0
 80006c0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80006c2:	4b08      	ldr	r3, [pc, #32]	; (80006e4 <MX_SPI3_Init+0x68>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 80006c8:	4b06      	ldr	r3, [pc, #24]	; (80006e4 <MX_SPI3_Init+0x68>)
 80006ca:	220a      	movs	r2, #10
 80006cc:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80006ce:	4805      	ldr	r0, [pc, #20]	; (80006e4 <MX_SPI3_Init+0x68>)
 80006d0:	f002 fa3e 	bl	8002b50 <HAL_SPI_Init>
 80006d4:	4603      	mov	r3, r0
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d001      	beq.n	80006de <MX_SPI3_Init+0x62>
  {
    Error_Handler();
 80006da:	f000 f98b 	bl	80009f4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80006de:	bf00      	nop
 80006e0:	bd80      	pop	{r7, pc}
 80006e2:	bf00      	nop
 80006e4:	20000068 	.word	0x20000068
 80006e8:	40003c00 	.word	0x40003c00

080006ec <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b086      	sub	sp, #24
 80006f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80006f2:	f107 0308 	add.w	r3, r7, #8
 80006f6:	2200      	movs	r2, #0
 80006f8:	601a      	str	r2, [r3, #0]
 80006fa:	605a      	str	r2, [r3, #4]
 80006fc:	609a      	str	r2, [r3, #8]
 80006fe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000700:	463b      	mov	r3, r7
 8000702:	2200      	movs	r2, #0
 8000704:	601a      	str	r2, [r3, #0]
 8000706:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000708:	4b1c      	ldr	r3, [pc, #112]	; (800077c <MX_TIM3_Init+0x90>)
 800070a:	4a1d      	ldr	r2, [pc, #116]	; (8000780 <MX_TIM3_Init+0x94>)
 800070c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 99;
 800070e:	4b1b      	ldr	r3, [pc, #108]	; (800077c <MX_TIM3_Init+0x90>)
 8000710:	2263      	movs	r2, #99	; 0x63
 8000712:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000714:	4b19      	ldr	r3, [pc, #100]	; (800077c <MX_TIM3_Init+0x90>)
 8000716:	2200      	movs	r2, #0
 8000718:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100;
 800071a:	4b18      	ldr	r3, [pc, #96]	; (800077c <MX_TIM3_Init+0x90>)
 800071c:	2264      	movs	r2, #100	; 0x64
 800071e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000720:	4b16      	ldr	r3, [pc, #88]	; (800077c <MX_TIM3_Init+0x90>)
 8000722:	2200      	movs	r2, #0
 8000724:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000726:	4b15      	ldr	r3, [pc, #84]	; (800077c <MX_TIM3_Init+0x90>)
 8000728:	2200      	movs	r2, #0
 800072a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800072c:	4813      	ldr	r0, [pc, #76]	; (800077c <MX_TIM3_Init+0x90>)
 800072e:	f002 fa73 	bl	8002c18 <HAL_TIM_Base_Init>
 8000732:	4603      	mov	r3, r0
 8000734:	2b00      	cmp	r3, #0
 8000736:	d001      	beq.n	800073c <MX_TIM3_Init+0x50>
  {
    Error_Handler();
 8000738:	f000 f95c 	bl	80009f4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800073c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000740:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000742:	f107 0308 	add.w	r3, r7, #8
 8000746:	4619      	mov	r1, r3
 8000748:	480c      	ldr	r0, [pc, #48]	; (800077c <MX_TIM3_Init+0x90>)
 800074a:	f002 fb98 	bl	8002e7e <HAL_TIM_ConfigClockSource>
 800074e:	4603      	mov	r3, r0
 8000750:	2b00      	cmp	r3, #0
 8000752:	d001      	beq.n	8000758 <MX_TIM3_Init+0x6c>
  {
    Error_Handler();
 8000754:	f000 f94e 	bl	80009f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000758:	2300      	movs	r3, #0
 800075a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800075c:	2300      	movs	r3, #0
 800075e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000760:	463b      	mov	r3, r7
 8000762:	4619      	mov	r1, r3
 8000764:	4805      	ldr	r0, [pc, #20]	; (800077c <MX_TIM3_Init+0x90>)
 8000766:	f002 fd8d 	bl	8003284 <HAL_TIMEx_MasterConfigSynchronization>
 800076a:	4603      	mov	r3, r0
 800076c:	2b00      	cmp	r3, #0
 800076e:	d001      	beq.n	8000774 <MX_TIM3_Init+0x88>
  {
    Error_Handler();
 8000770:	f000 f940 	bl	80009f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000774:	bf00      	nop
 8000776:	3718      	adds	r7, #24
 8000778:	46bd      	mov	sp, r7
 800077a:	bd80      	pop	{r7, pc}
 800077c:	20000028 	.word	0x20000028
 8000780:	40000400 	.word	0x40000400

08000784 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8000788:	4b0e      	ldr	r3, [pc, #56]	; (80007c4 <MX_TIM11_Init+0x40>)
 800078a:	4a0f      	ldr	r2, [pc, #60]	; (80007c8 <MX_TIM11_Init+0x44>)
 800078c:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 99;
 800078e:	4b0d      	ldr	r3, [pc, #52]	; (80007c4 <MX_TIM11_Init+0x40>)
 8000790:	2263      	movs	r2, #99	; 0x63
 8000792:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000794:	4b0b      	ldr	r3, [pc, #44]	; (80007c4 <MX_TIM11_Init+0x40>)
 8000796:	2200      	movs	r2, #0
 8000798:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 800079a:	4b0a      	ldr	r3, [pc, #40]	; (80007c4 <MX_TIM11_Init+0x40>)
 800079c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80007a0:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007a2:	4b08      	ldr	r3, [pc, #32]	; (80007c4 <MX_TIM11_Init+0x40>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007a8:	4b06      	ldr	r3, [pc, #24]	; (80007c4 <MX_TIM11_Init+0x40>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 80007ae:	4805      	ldr	r0, [pc, #20]	; (80007c4 <MX_TIM11_Init+0x40>)
 80007b0:	f002 fa32 	bl	8002c18 <HAL_TIM_Base_Init>
 80007b4:	4603      	mov	r3, r0
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d001      	beq.n	80007be <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 80007ba:	f000 f91b 	bl	80009f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 80007be:	bf00      	nop
 80007c0:	bd80      	pop	{r7, pc}
 80007c2:	bf00      	nop
 80007c4:	20000148 	.word	0x20000148
 80007c8:	40014800 	.word	0x40014800

080007cc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80007d0:	4b11      	ldr	r3, [pc, #68]	; (8000818 <MX_USART1_UART_Init+0x4c>)
 80007d2:	4a12      	ldr	r2, [pc, #72]	; (800081c <MX_USART1_UART_Init+0x50>)
 80007d4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80007d6:	4b10      	ldr	r3, [pc, #64]	; (8000818 <MX_USART1_UART_Init+0x4c>)
 80007d8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007dc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80007de:	4b0e      	ldr	r3, [pc, #56]	; (8000818 <MX_USART1_UART_Init+0x4c>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80007e4:	4b0c      	ldr	r3, [pc, #48]	; (8000818 <MX_USART1_UART_Init+0x4c>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80007ea:	4b0b      	ldr	r3, [pc, #44]	; (8000818 <MX_USART1_UART_Init+0x4c>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80007f0:	4b09      	ldr	r3, [pc, #36]	; (8000818 <MX_USART1_UART_Init+0x4c>)
 80007f2:	220c      	movs	r2, #12
 80007f4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007f6:	4b08      	ldr	r3, [pc, #32]	; (8000818 <MX_USART1_UART_Init+0x4c>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80007fc:	4b06      	ldr	r3, [pc, #24]	; (8000818 <MX_USART1_UART_Init+0x4c>)
 80007fe:	2200      	movs	r2, #0
 8000800:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000802:	4805      	ldr	r0, [pc, #20]	; (8000818 <MX_USART1_UART_Init+0x4c>)
 8000804:	f002 fdc0 	bl	8003388 <HAL_UART_Init>
 8000808:	4603      	mov	r3, r0
 800080a:	2b00      	cmp	r3, #0
 800080c:	d001      	beq.n	8000812 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800080e:	f000 f8f1 	bl	80009f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000812:	bf00      	nop
 8000814:	bd80      	pop	{r7, pc}
 8000816:	bf00      	nop
 8000818:	20000108 	.word	0x20000108
 800081c:	40011000 	.word	0x40011000

08000820 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000824:	4b11      	ldr	r3, [pc, #68]	; (800086c <MX_USART2_UART_Init+0x4c>)
 8000826:	4a12      	ldr	r2, [pc, #72]	; (8000870 <MX_USART2_UART_Init+0x50>)
 8000828:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800082a:	4b10      	ldr	r3, [pc, #64]	; (800086c <MX_USART2_UART_Init+0x4c>)
 800082c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000830:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000832:	4b0e      	ldr	r3, [pc, #56]	; (800086c <MX_USART2_UART_Init+0x4c>)
 8000834:	2200      	movs	r2, #0
 8000836:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000838:	4b0c      	ldr	r3, [pc, #48]	; (800086c <MX_USART2_UART_Init+0x4c>)
 800083a:	2200      	movs	r2, #0
 800083c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800083e:	4b0b      	ldr	r3, [pc, #44]	; (800086c <MX_USART2_UART_Init+0x4c>)
 8000840:	2200      	movs	r2, #0
 8000842:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000844:	4b09      	ldr	r3, [pc, #36]	; (800086c <MX_USART2_UART_Init+0x4c>)
 8000846:	220c      	movs	r2, #12
 8000848:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800084a:	4b08      	ldr	r3, [pc, #32]	; (800086c <MX_USART2_UART_Init+0x4c>)
 800084c:	2200      	movs	r2, #0
 800084e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000850:	4b06      	ldr	r3, [pc, #24]	; (800086c <MX_USART2_UART_Init+0x4c>)
 8000852:	2200      	movs	r2, #0
 8000854:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000856:	4805      	ldr	r0, [pc, #20]	; (800086c <MX_USART2_UART_Init+0x4c>)
 8000858:	f002 fd96 	bl	8003388 <HAL_UART_Init>
 800085c:	4603      	mov	r3, r0
 800085e:	2b00      	cmp	r3, #0
 8000860:	d001      	beq.n	8000866 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000862:	f000 f8c7 	bl	80009f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000866:	bf00      	nop
 8000868:	bd80      	pop	{r7, pc}
 800086a:	bf00      	nop
 800086c:	200001e8 	.word	0x200001e8
 8000870:	40004400 	.word	0x40004400

08000874 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b082      	sub	sp, #8
 8000878:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800087a:	2300      	movs	r3, #0
 800087c:	607b      	str	r3, [r7, #4]
 800087e:	4b0c      	ldr	r3, [pc, #48]	; (80008b0 <MX_DMA_Init+0x3c>)
 8000880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000882:	4a0b      	ldr	r2, [pc, #44]	; (80008b0 <MX_DMA_Init+0x3c>)
 8000884:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000888:	6313      	str	r3, [r2, #48]	; 0x30
 800088a:	4b09      	ldr	r3, [pc, #36]	; (80008b0 <MX_DMA_Init+0x3c>)
 800088c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000892:	607b      	str	r3, [r7, #4]
 8000894:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000896:	2200      	movs	r2, #0
 8000898:	2100      	movs	r1, #0
 800089a:	2038      	movs	r0, #56	; 0x38
 800089c:	f001 f819 	bl	80018d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80008a0:	2038      	movs	r0, #56	; 0x38
 80008a2:	f001 f832 	bl	800190a <HAL_NVIC_EnableIRQ>

}
 80008a6:	bf00      	nop
 80008a8:	3708      	adds	r7, #8
 80008aa:	46bd      	mov	sp, r7
 80008ac:	bd80      	pop	{r7, pc}
 80008ae:	bf00      	nop
 80008b0:	40023800 	.word	0x40023800

080008b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b08a      	sub	sp, #40	; 0x28
 80008b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008ba:	f107 0314 	add.w	r3, r7, #20
 80008be:	2200      	movs	r2, #0
 80008c0:	601a      	str	r2, [r3, #0]
 80008c2:	605a      	str	r2, [r3, #4]
 80008c4:	609a      	str	r2, [r3, #8]
 80008c6:	60da      	str	r2, [r3, #12]
 80008c8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008ca:	2300      	movs	r3, #0
 80008cc:	613b      	str	r3, [r7, #16]
 80008ce:	4b44      	ldr	r3, [pc, #272]	; (80009e0 <MX_GPIO_Init+0x12c>)
 80008d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d2:	4a43      	ldr	r2, [pc, #268]	; (80009e0 <MX_GPIO_Init+0x12c>)
 80008d4:	f043 0304 	orr.w	r3, r3, #4
 80008d8:	6313      	str	r3, [r2, #48]	; 0x30
 80008da:	4b41      	ldr	r3, [pc, #260]	; (80009e0 <MX_GPIO_Init+0x12c>)
 80008dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008de:	f003 0304 	and.w	r3, r3, #4
 80008e2:	613b      	str	r3, [r7, #16]
 80008e4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008e6:	2300      	movs	r3, #0
 80008e8:	60fb      	str	r3, [r7, #12]
 80008ea:	4b3d      	ldr	r3, [pc, #244]	; (80009e0 <MX_GPIO_Init+0x12c>)
 80008ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ee:	4a3c      	ldr	r2, [pc, #240]	; (80009e0 <MX_GPIO_Init+0x12c>)
 80008f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008f4:	6313      	str	r3, [r2, #48]	; 0x30
 80008f6:	4b3a      	ldr	r3, [pc, #232]	; (80009e0 <MX_GPIO_Init+0x12c>)
 80008f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008fe:	60fb      	str	r3, [r7, #12]
 8000900:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000902:	2300      	movs	r3, #0
 8000904:	60bb      	str	r3, [r7, #8]
 8000906:	4b36      	ldr	r3, [pc, #216]	; (80009e0 <MX_GPIO_Init+0x12c>)
 8000908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090a:	4a35      	ldr	r2, [pc, #212]	; (80009e0 <MX_GPIO_Init+0x12c>)
 800090c:	f043 0301 	orr.w	r3, r3, #1
 8000910:	6313      	str	r3, [r2, #48]	; 0x30
 8000912:	4b33      	ldr	r3, [pc, #204]	; (80009e0 <MX_GPIO_Init+0x12c>)
 8000914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000916:	f003 0301 	and.w	r3, r3, #1
 800091a:	60bb      	str	r3, [r7, #8]
 800091c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800091e:	2300      	movs	r3, #0
 8000920:	607b      	str	r3, [r7, #4]
 8000922:	4b2f      	ldr	r3, [pc, #188]	; (80009e0 <MX_GPIO_Init+0x12c>)
 8000924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000926:	4a2e      	ldr	r2, [pc, #184]	; (80009e0 <MX_GPIO_Init+0x12c>)
 8000928:	f043 0302 	orr.w	r3, r3, #2
 800092c:	6313      	str	r3, [r2, #48]	; 0x30
 800092e:	4b2c      	ldr	r3, [pc, #176]	; (80009e0 <MX_GPIO_Init+0x12c>)
 8000930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000932:	f003 0302 	and.w	r3, r3, #2
 8000936:	607b      	str	r3, [r7, #4]
 8000938:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800093a:	2200      	movs	r2, #0
 800093c:	2120      	movs	r1, #32
 800093e:	4829      	ldr	r0, [pc, #164]	; (80009e4 <MX_GPIO_Init+0x130>)
 8000940:	f001 fc8a 	bl	8002258 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI_SS_GPIO_Port, SPI_SS_Pin, GPIO_PIN_SET);
 8000944:	2201      	movs	r2, #1
 8000946:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800094a:	4827      	ldr	r0, [pc, #156]	; (80009e8 <MX_GPIO_Init+0x134>)
 800094c:	f001 fc84 	bl	8002258 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SHDN_GPIO_Port, SHDN_Pin, GPIO_PIN_SET);
 8000950:	2201      	movs	r2, #1
 8000952:	2180      	movs	r1, #128	; 0x80
 8000954:	4825      	ldr	r0, [pc, #148]	; (80009ec <MX_GPIO_Init+0x138>)
 8000956:	f001 fc7f 	bl	8002258 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LOAD_GPIO_Port, LOAD_Pin, GPIO_PIN_SET);
 800095a:	2201      	movs	r2, #1
 800095c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000960:	4820      	ldr	r0, [pc, #128]	; (80009e4 <MX_GPIO_Init+0x130>)
 8000962:	f001 fc79 	bl	8002258 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000966:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800096a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800096c:	4b20      	ldr	r3, [pc, #128]	; (80009f0 <MX_GPIO_Init+0x13c>)
 800096e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000970:	2300      	movs	r3, #0
 8000972:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000974:	f107 0314 	add.w	r3, r7, #20
 8000978:	4619      	mov	r1, r3
 800097a:	481c      	ldr	r0, [pc, #112]	; (80009ec <MX_GPIO_Init+0x138>)
 800097c:	f001 faea 	bl	8001f54 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LOAD_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LOAD_Pin;
 8000980:	f44f 7308 	mov.w	r3, #544	; 0x220
 8000984:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000986:	2301      	movs	r3, #1
 8000988:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098a:	2300      	movs	r3, #0
 800098c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800098e:	2300      	movs	r3, #0
 8000990:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000992:	f107 0314 	add.w	r3, r7, #20
 8000996:	4619      	mov	r1, r3
 8000998:	4812      	ldr	r0, [pc, #72]	; (80009e4 <MX_GPIO_Init+0x130>)
 800099a:	f001 fadb 	bl	8001f54 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI_SS_Pin */
  GPIO_InitStruct.Pin = SPI_SS_Pin;
 800099e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80009a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009a4:	2301      	movs	r3, #1
 80009a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a8:	2300      	movs	r3, #0
 80009aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ac:	2300      	movs	r3, #0
 80009ae:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI_SS_GPIO_Port, &GPIO_InitStruct);
 80009b0:	f107 0314 	add.w	r3, r7, #20
 80009b4:	4619      	mov	r1, r3
 80009b6:	480c      	ldr	r0, [pc, #48]	; (80009e8 <MX_GPIO_Init+0x134>)
 80009b8:	f001 facc 	bl	8001f54 <HAL_GPIO_Init>

  /*Configure GPIO pin : SHDN_Pin */
  GPIO_InitStruct.Pin = SHDN_Pin;
 80009bc:	2380      	movs	r3, #128	; 0x80
 80009be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009c0:	2301      	movs	r3, #1
 80009c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c4:	2300      	movs	r3, #0
 80009c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009c8:	2300      	movs	r3, #0
 80009ca:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SHDN_GPIO_Port, &GPIO_InitStruct);
 80009cc:	f107 0314 	add.w	r3, r7, #20
 80009d0:	4619      	mov	r1, r3
 80009d2:	4806      	ldr	r0, [pc, #24]	; (80009ec <MX_GPIO_Init+0x138>)
 80009d4:	f001 fabe 	bl	8001f54 <HAL_GPIO_Init>

}
 80009d8:	bf00      	nop
 80009da:	3728      	adds	r7, #40	; 0x28
 80009dc:	46bd      	mov	sp, r7
 80009de:	bd80      	pop	{r7, pc}
 80009e0:	40023800 	.word	0x40023800
 80009e4:	40020000 	.word	0x40020000
 80009e8:	40020400 	.word	0x40020400
 80009ec:	40020800 	.word	0x40020800
 80009f0:	10210000 	.word	0x10210000

080009f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009f4:	b480      	push	{r7}
 80009f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009f8:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009fa:	e7fe      	b.n	80009fa <Error_Handler+0x6>

080009fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b082      	sub	sp, #8
 8000a00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a02:	2300      	movs	r3, #0
 8000a04:	607b      	str	r3, [r7, #4]
 8000a06:	4b10      	ldr	r3, [pc, #64]	; (8000a48 <HAL_MspInit+0x4c>)
 8000a08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a0a:	4a0f      	ldr	r2, [pc, #60]	; (8000a48 <HAL_MspInit+0x4c>)
 8000a0c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a10:	6453      	str	r3, [r2, #68]	; 0x44
 8000a12:	4b0d      	ldr	r3, [pc, #52]	; (8000a48 <HAL_MspInit+0x4c>)
 8000a14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a16:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a1a:	607b      	str	r3, [r7, #4]
 8000a1c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a1e:	2300      	movs	r3, #0
 8000a20:	603b      	str	r3, [r7, #0]
 8000a22:	4b09      	ldr	r3, [pc, #36]	; (8000a48 <HAL_MspInit+0x4c>)
 8000a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a26:	4a08      	ldr	r2, [pc, #32]	; (8000a48 <HAL_MspInit+0x4c>)
 8000a28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a2c:	6413      	str	r3, [r2, #64]	; 0x40
 8000a2e:	4b06      	ldr	r3, [pc, #24]	; (8000a48 <HAL_MspInit+0x4c>)
 8000a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a36:	603b      	str	r3, [r7, #0]
 8000a38:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000a3a:	2007      	movs	r0, #7
 8000a3c:	f000 ff3e 	bl	80018bc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a40:	bf00      	nop
 8000a42:	3708      	adds	r7, #8
 8000a44:	46bd      	mov	sp, r7
 8000a46:	bd80      	pop	{r7, pc}
 8000a48:	40023800 	.word	0x40023800

08000a4c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b08a      	sub	sp, #40	; 0x28
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a54:	f107 0314 	add.w	r3, r7, #20
 8000a58:	2200      	movs	r2, #0
 8000a5a:	601a      	str	r2, [r3, #0]
 8000a5c:	605a      	str	r2, [r3, #4]
 8000a5e:	609a      	str	r2, [r3, #8]
 8000a60:	60da      	str	r2, [r3, #12]
 8000a62:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	4a33      	ldr	r2, [pc, #204]	; (8000b38 <HAL_ADC_MspInit+0xec>)
 8000a6a:	4293      	cmp	r3, r2
 8000a6c:	d15f      	bne.n	8000b2e <HAL_ADC_MspInit+0xe2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000a6e:	2300      	movs	r3, #0
 8000a70:	613b      	str	r3, [r7, #16]
 8000a72:	4b32      	ldr	r3, [pc, #200]	; (8000b3c <HAL_ADC_MspInit+0xf0>)
 8000a74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a76:	4a31      	ldr	r2, [pc, #196]	; (8000b3c <HAL_ADC_MspInit+0xf0>)
 8000a78:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a7c:	6453      	str	r3, [r2, #68]	; 0x44
 8000a7e:	4b2f      	ldr	r3, [pc, #188]	; (8000b3c <HAL_ADC_MspInit+0xf0>)
 8000a80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000a86:	613b      	str	r3, [r7, #16]
 8000a88:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	60fb      	str	r3, [r7, #12]
 8000a8e:	4b2b      	ldr	r3, [pc, #172]	; (8000b3c <HAL_ADC_MspInit+0xf0>)
 8000a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a92:	4a2a      	ldr	r2, [pc, #168]	; (8000b3c <HAL_ADC_MspInit+0xf0>)
 8000a94:	f043 0301 	orr.w	r3, r3, #1
 8000a98:	6313      	str	r3, [r2, #48]	; 0x30
 8000a9a:	4b28      	ldr	r3, [pc, #160]	; (8000b3c <HAL_ADC_MspInit+0xf0>)
 8000a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a9e:	f003 0301 	and.w	r3, r3, #1
 8000aa2:	60fb      	str	r3, [r7, #12]
 8000aa4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000aa6:	2301      	movs	r3, #1
 8000aa8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000aaa:	2303      	movs	r3, #3
 8000aac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ab2:	f107 0314 	add.w	r3, r7, #20
 8000ab6:	4619      	mov	r1, r3
 8000ab8:	4821      	ldr	r0, [pc, #132]	; (8000b40 <HAL_ADC_MspInit+0xf4>)
 8000aba:	f001 fa4b 	bl	8001f54 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000abe:	4b21      	ldr	r3, [pc, #132]	; (8000b44 <HAL_ADC_MspInit+0xf8>)
 8000ac0:	4a21      	ldr	r2, [pc, #132]	; (8000b48 <HAL_ADC_MspInit+0xfc>)
 8000ac2:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000ac4:	4b1f      	ldr	r3, [pc, #124]	; (8000b44 <HAL_ADC_MspInit+0xf8>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000aca:	4b1e      	ldr	r3, [pc, #120]	; (8000b44 <HAL_ADC_MspInit+0xf8>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ad0:	4b1c      	ldr	r3, [pc, #112]	; (8000b44 <HAL_ADC_MspInit+0xf8>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000ad6:	4b1b      	ldr	r3, [pc, #108]	; (8000b44 <HAL_ADC_MspInit+0xf8>)
 8000ad8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000adc:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000ade:	4b19      	ldr	r3, [pc, #100]	; (8000b44 <HAL_ADC_MspInit+0xf8>)
 8000ae0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000ae4:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000ae6:	4b17      	ldr	r3, [pc, #92]	; (8000b44 <HAL_ADC_MspInit+0xf8>)
 8000ae8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000aec:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000aee:	4b15      	ldr	r3, [pc, #84]	; (8000b44 <HAL_ADC_MspInit+0xf8>)
 8000af0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000af4:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000af6:	4b13      	ldr	r3, [pc, #76]	; (8000b44 <HAL_ADC_MspInit+0xf8>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000afc:	4b11      	ldr	r3, [pc, #68]	; (8000b44 <HAL_ADC_MspInit+0xf8>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000b02:	4810      	ldr	r0, [pc, #64]	; (8000b44 <HAL_ADC_MspInit+0xf8>)
 8000b04:	f000 ff1c 	bl	8001940 <HAL_DMA_Init>
 8000b08:	4603      	mov	r3, r0
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d001      	beq.n	8000b12 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8000b0e:	f7ff ff71 	bl	80009f4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	4a0b      	ldr	r2, [pc, #44]	; (8000b44 <HAL_ADC_MspInit+0xf8>)
 8000b16:	639a      	str	r2, [r3, #56]	; 0x38
 8000b18:	4a0a      	ldr	r2, [pc, #40]	; (8000b44 <HAL_ADC_MspInit+0xf8>)
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8000b1e:	2200      	movs	r2, #0
 8000b20:	2100      	movs	r1, #0
 8000b22:	2012      	movs	r0, #18
 8000b24:	f000 fed5 	bl	80018d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8000b28:	2012      	movs	r0, #18
 8000b2a:	f000 feee 	bl	800190a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000b2e:	bf00      	nop
 8000b30:	3728      	adds	r7, #40	; 0x28
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bd80      	pop	{r7, pc}
 8000b36:	bf00      	nop
 8000b38:	40012000 	.word	0x40012000
 8000b3c:	40023800 	.word	0x40023800
 8000b40:	40020000 	.word	0x40020000
 8000b44:	20000188 	.word	0x20000188
 8000b48:	40026410 	.word	0x40026410

08000b4c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b08a      	sub	sp, #40	; 0x28
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b54:	f107 0314 	add.w	r3, r7, #20
 8000b58:	2200      	movs	r2, #0
 8000b5a:	601a      	str	r2, [r3, #0]
 8000b5c:	605a      	str	r2, [r3, #4]
 8000b5e:	609a      	str	r2, [r3, #8]
 8000b60:	60da      	str	r2, [r3, #12]
 8000b62:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	4a19      	ldr	r2, [pc, #100]	; (8000bd0 <HAL_SPI_MspInit+0x84>)
 8000b6a:	4293      	cmp	r3, r2
 8000b6c:	d12b      	bne.n	8000bc6 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000b6e:	2300      	movs	r3, #0
 8000b70:	613b      	str	r3, [r7, #16]
 8000b72:	4b18      	ldr	r3, [pc, #96]	; (8000bd4 <HAL_SPI_MspInit+0x88>)
 8000b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b76:	4a17      	ldr	r2, [pc, #92]	; (8000bd4 <HAL_SPI_MspInit+0x88>)
 8000b78:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000b7c:	6413      	str	r3, [r2, #64]	; 0x40
 8000b7e:	4b15      	ldr	r3, [pc, #84]	; (8000bd4 <HAL_SPI_MspInit+0x88>)
 8000b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b82:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000b86:	613b      	str	r3, [r7, #16]
 8000b88:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	60fb      	str	r3, [r7, #12]
 8000b8e:	4b11      	ldr	r3, [pc, #68]	; (8000bd4 <HAL_SPI_MspInit+0x88>)
 8000b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b92:	4a10      	ldr	r2, [pc, #64]	; (8000bd4 <HAL_SPI_MspInit+0x88>)
 8000b94:	f043 0302 	orr.w	r3, r3, #2
 8000b98:	6313      	str	r3, [r2, #48]	; 0x30
 8000b9a:	4b0e      	ldr	r3, [pc, #56]	; (8000bd4 <HAL_SPI_MspInit+0x88>)
 8000b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b9e:	f003 0302 	and.w	r3, r3, #2
 8000ba2:	60fb      	str	r3, [r7, #12]
 8000ba4:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PB3     ------> SPI3_SCK
    PB4     ------> SPI3_MISO
    PB5     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8000ba6:	2338      	movs	r3, #56	; 0x38
 8000ba8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000baa:	2302      	movs	r3, #2
 8000bac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bb2:	2303      	movs	r3, #3
 8000bb4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000bb6:	2306      	movs	r3, #6
 8000bb8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bba:	f107 0314 	add.w	r3, r7, #20
 8000bbe:	4619      	mov	r1, r3
 8000bc0:	4805      	ldr	r0, [pc, #20]	; (8000bd8 <HAL_SPI_MspInit+0x8c>)
 8000bc2:	f001 f9c7 	bl	8001f54 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000bc6:	bf00      	nop
 8000bc8:	3728      	adds	r7, #40	; 0x28
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	bd80      	pop	{r7, pc}
 8000bce:	bf00      	nop
 8000bd0:	40003c00 	.word	0x40003c00
 8000bd4:	40023800 	.word	0x40023800
 8000bd8:	40020400 	.word	0x40020400

08000bdc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b084      	sub	sp, #16
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	4a18      	ldr	r2, [pc, #96]	; (8000c4c <HAL_TIM_Base_MspInit+0x70>)
 8000bea:	4293      	cmp	r3, r2
 8000bec:	d10e      	bne.n	8000c0c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000bee:	2300      	movs	r3, #0
 8000bf0:	60fb      	str	r3, [r7, #12]
 8000bf2:	4b17      	ldr	r3, [pc, #92]	; (8000c50 <HAL_TIM_Base_MspInit+0x74>)
 8000bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bf6:	4a16      	ldr	r2, [pc, #88]	; (8000c50 <HAL_TIM_Base_MspInit+0x74>)
 8000bf8:	f043 0302 	orr.w	r3, r3, #2
 8000bfc:	6413      	str	r3, [r2, #64]	; 0x40
 8000bfe:	4b14      	ldr	r3, [pc, #80]	; (8000c50 <HAL_TIM_Base_MspInit+0x74>)
 8000c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c02:	f003 0302 	and.w	r3, r3, #2
 8000c06:	60fb      	str	r3, [r7, #12]
 8000c08:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 8000c0a:	e01a      	b.n	8000c42 <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM11)
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	4a10      	ldr	r2, [pc, #64]	; (8000c54 <HAL_TIM_Base_MspInit+0x78>)
 8000c12:	4293      	cmp	r3, r2
 8000c14:	d115      	bne.n	8000c42 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8000c16:	2300      	movs	r3, #0
 8000c18:	60bb      	str	r3, [r7, #8]
 8000c1a:	4b0d      	ldr	r3, [pc, #52]	; (8000c50 <HAL_TIM_Base_MspInit+0x74>)
 8000c1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c1e:	4a0c      	ldr	r2, [pc, #48]	; (8000c50 <HAL_TIM_Base_MspInit+0x74>)
 8000c20:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c24:	6453      	str	r3, [r2, #68]	; 0x44
 8000c26:	4b0a      	ldr	r3, [pc, #40]	; (8000c50 <HAL_TIM_Base_MspInit+0x74>)
 8000c28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c2a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000c2e:	60bb      	str	r3, [r7, #8]
 8000c30:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8000c32:	2200      	movs	r2, #0
 8000c34:	2100      	movs	r1, #0
 8000c36:	201a      	movs	r0, #26
 8000c38:	f000 fe4b 	bl	80018d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8000c3c:	201a      	movs	r0, #26
 8000c3e:	f000 fe64 	bl	800190a <HAL_NVIC_EnableIRQ>
}
 8000c42:	bf00      	nop
 8000c44:	3710      	adds	r7, #16
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bd80      	pop	{r7, pc}
 8000c4a:	bf00      	nop
 8000c4c:	40000400 	.word	0x40000400
 8000c50:	40023800 	.word	0x40023800
 8000c54:	40014800 	.word	0x40014800

08000c58 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b08c      	sub	sp, #48	; 0x30
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c60:	f107 031c 	add.w	r3, r7, #28
 8000c64:	2200      	movs	r2, #0
 8000c66:	601a      	str	r2, [r3, #0]
 8000c68:	605a      	str	r2, [r3, #4]
 8000c6a:	609a      	str	r2, [r3, #8]
 8000c6c:	60da      	str	r2, [r3, #12]
 8000c6e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	4a36      	ldr	r2, [pc, #216]	; (8000d50 <HAL_UART_MspInit+0xf8>)
 8000c76:	4293      	cmp	r3, r2
 8000c78:	d135      	bne.n	8000ce6 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	61bb      	str	r3, [r7, #24]
 8000c7e:	4b35      	ldr	r3, [pc, #212]	; (8000d54 <HAL_UART_MspInit+0xfc>)
 8000c80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c82:	4a34      	ldr	r2, [pc, #208]	; (8000d54 <HAL_UART_MspInit+0xfc>)
 8000c84:	f043 0310 	orr.w	r3, r3, #16
 8000c88:	6453      	str	r3, [r2, #68]	; 0x44
 8000c8a:	4b32      	ldr	r3, [pc, #200]	; (8000d54 <HAL_UART_MspInit+0xfc>)
 8000c8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c8e:	f003 0310 	and.w	r3, r3, #16
 8000c92:	61bb      	str	r3, [r7, #24]
 8000c94:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c96:	2300      	movs	r3, #0
 8000c98:	617b      	str	r3, [r7, #20]
 8000c9a:	4b2e      	ldr	r3, [pc, #184]	; (8000d54 <HAL_UART_MspInit+0xfc>)
 8000c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c9e:	4a2d      	ldr	r2, [pc, #180]	; (8000d54 <HAL_UART_MspInit+0xfc>)
 8000ca0:	f043 0301 	orr.w	r3, r3, #1
 8000ca4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ca6:	4b2b      	ldr	r3, [pc, #172]	; (8000d54 <HAL_UART_MspInit+0xfc>)
 8000ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000caa:	f003 0301 	and.w	r3, r3, #1
 8000cae:	617b      	str	r3, [r7, #20]
 8000cb0:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PA15     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_15;
 8000cb2:	f44f 4304 	mov.w	r3, #33792	; 0x8400
 8000cb6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cb8:	2302      	movs	r3, #2
 8000cba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cc0:	2303      	movs	r3, #3
 8000cc2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000cc4:	2307      	movs	r3, #7
 8000cc6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cc8:	f107 031c 	add.w	r3, r7, #28
 8000ccc:	4619      	mov	r1, r3
 8000cce:	4822      	ldr	r0, [pc, #136]	; (8000d58 <HAL_UART_MspInit+0x100>)
 8000cd0:	f001 f940 	bl	8001f54 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	2100      	movs	r1, #0
 8000cd8:	2025      	movs	r0, #37	; 0x25
 8000cda:	f000 fdfa 	bl	80018d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000cde:	2025      	movs	r0, #37	; 0x25
 8000ce0:	f000 fe13 	bl	800190a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000ce4:	e030      	b.n	8000d48 <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART2)
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	4a1c      	ldr	r2, [pc, #112]	; (8000d5c <HAL_UART_MspInit+0x104>)
 8000cec:	4293      	cmp	r3, r2
 8000cee:	d12b      	bne.n	8000d48 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	613b      	str	r3, [r7, #16]
 8000cf4:	4b17      	ldr	r3, [pc, #92]	; (8000d54 <HAL_UART_MspInit+0xfc>)
 8000cf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cf8:	4a16      	ldr	r2, [pc, #88]	; (8000d54 <HAL_UART_MspInit+0xfc>)
 8000cfa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cfe:	6413      	str	r3, [r2, #64]	; 0x40
 8000d00:	4b14      	ldr	r3, [pc, #80]	; (8000d54 <HAL_UART_MspInit+0xfc>)
 8000d02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d08:	613b      	str	r3, [r7, #16]
 8000d0a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	60fb      	str	r3, [r7, #12]
 8000d10:	4b10      	ldr	r3, [pc, #64]	; (8000d54 <HAL_UART_MspInit+0xfc>)
 8000d12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d14:	4a0f      	ldr	r2, [pc, #60]	; (8000d54 <HAL_UART_MspInit+0xfc>)
 8000d16:	f043 0301 	orr.w	r3, r3, #1
 8000d1a:	6313      	str	r3, [r2, #48]	; 0x30
 8000d1c:	4b0d      	ldr	r3, [pc, #52]	; (8000d54 <HAL_UART_MspInit+0xfc>)
 8000d1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d20:	f003 0301 	and.w	r3, r3, #1
 8000d24:	60fb      	str	r3, [r7, #12]
 8000d26:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000d28:	230c      	movs	r3, #12
 8000d2a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d2c:	2302      	movs	r3, #2
 8000d2e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d30:	2300      	movs	r3, #0
 8000d32:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d34:	2303      	movs	r3, #3
 8000d36:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000d38:	2307      	movs	r3, #7
 8000d3a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d3c:	f107 031c 	add.w	r3, r7, #28
 8000d40:	4619      	mov	r1, r3
 8000d42:	4805      	ldr	r0, [pc, #20]	; (8000d58 <HAL_UART_MspInit+0x100>)
 8000d44:	f001 f906 	bl	8001f54 <HAL_GPIO_Init>
}
 8000d48:	bf00      	nop
 8000d4a:	3730      	adds	r7, #48	; 0x30
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	bd80      	pop	{r7, pc}
 8000d50:	40011000 	.word	0x40011000
 8000d54:	40023800 	.word	0x40023800
 8000d58:	40020000 	.word	0x40020000
 8000d5c:	40004400 	.word	0x40004400

08000d60 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d60:	b480      	push	{r7}
 8000d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d64:	e7fe      	b.n	8000d64 <NMI_Handler+0x4>

08000d66 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d66:	b480      	push	{r7}
 8000d68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d6a:	e7fe      	b.n	8000d6a <HardFault_Handler+0x4>

08000d6c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d70:	e7fe      	b.n	8000d70 <MemManage_Handler+0x4>

08000d72 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d72:	b480      	push	{r7}
 8000d74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d76:	e7fe      	b.n	8000d76 <BusFault_Handler+0x4>

08000d78 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d7c:	e7fe      	b.n	8000d7c <UsageFault_Handler+0x4>

08000d7e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d7e:	b480      	push	{r7}
 8000d80:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d82:	bf00      	nop
 8000d84:	46bd      	mov	sp, r7
 8000d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8a:	4770      	bx	lr

08000d8c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d90:	bf00      	nop
 8000d92:	46bd      	mov	sp, r7
 8000d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d98:	4770      	bx	lr

08000d9a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d9a:	b480      	push	{r7}
 8000d9c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d9e:	bf00      	nop
 8000da0:	46bd      	mov	sp, r7
 8000da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da6:	4770      	bx	lr

08000da8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000dac:	f000 f8bc 	bl	8000f28 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000db0:	bf00      	nop
 8000db2:	bd80      	pop	{r7, pc}

08000db4 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000db8:	4802      	ldr	r0, [pc, #8]	; (8000dc4 <ADC_IRQHandler+0x10>)
 8000dba:	f000 f918 	bl	8000fee <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8000dbe:	bf00      	nop
 8000dc0:	bd80      	pop	{r7, pc}
 8000dc2:	bf00      	nop
 8000dc4:	200000c0 	.word	0x200000c0

08000dc8 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8000dcc:	4802      	ldr	r0, [pc, #8]	; (8000dd8 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8000dce:	f001 ff4e 	bl	8002c6e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8000dd2:	bf00      	nop
 8000dd4:	bd80      	pop	{r7, pc}
 8000dd6:	bf00      	nop
 8000dd8:	20000148 	.word	0x20000148

08000ddc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000de0:	4802      	ldr	r0, [pc, #8]	; (8000dec <USART1_IRQHandler+0x10>)
 8000de2:	f002 fb1f 	bl	8003424 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000de6:	bf00      	nop
 8000de8:	bd80      	pop	{r7, pc}
 8000dea:	bf00      	nop
 8000dec:	20000108 	.word	0x20000108

08000df0 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000df4:	4802      	ldr	r0, [pc, #8]	; (8000e00 <DMA2_Stream0_IRQHandler+0x10>)
 8000df6:	f000 fe73 	bl	8001ae0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8000dfa:	bf00      	nop
 8000dfc:	bd80      	pop	{r7, pc}
 8000dfe:	bf00      	nop
 8000e00:	20000188 	.word	0x20000188

08000e04 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e04:	b480      	push	{r7}
 8000e06:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e08:	4b08      	ldr	r3, [pc, #32]	; (8000e2c <SystemInit+0x28>)
 8000e0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e0e:	4a07      	ldr	r2, [pc, #28]	; (8000e2c <SystemInit+0x28>)
 8000e10:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e14:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000e18:	4b04      	ldr	r3, [pc, #16]	; (8000e2c <SystemInit+0x28>)
 8000e1a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000e1e:	609a      	str	r2, [r3, #8]
#endif
}
 8000e20:	bf00      	nop
 8000e22:	46bd      	mov	sp, r7
 8000e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e28:	4770      	bx	lr
 8000e2a:	bf00      	nop
 8000e2c:	e000ed00 	.word	0xe000ed00

08000e30 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000e30:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e68 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000e34:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000e36:	e003      	b.n	8000e40 <LoopCopyDataInit>

08000e38 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000e38:	4b0c      	ldr	r3, [pc, #48]	; (8000e6c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000e3a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000e3c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000e3e:	3104      	adds	r1, #4

08000e40 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000e40:	480b      	ldr	r0, [pc, #44]	; (8000e70 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000e42:	4b0c      	ldr	r3, [pc, #48]	; (8000e74 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000e44:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000e46:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000e48:	d3f6      	bcc.n	8000e38 <CopyDataInit>
  ldr  r2, =_sbss
 8000e4a:	4a0b      	ldr	r2, [pc, #44]	; (8000e78 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000e4c:	e002      	b.n	8000e54 <LoopFillZerobss>

08000e4e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000e4e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000e50:	f842 3b04 	str.w	r3, [r2], #4

08000e54 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000e54:	4b09      	ldr	r3, [pc, #36]	; (8000e7c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000e56:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000e58:	d3f9      	bcc.n	8000e4e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000e5a:	f7ff ffd3 	bl	8000e04 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e5e:	f003 f89d 	bl	8003f9c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e62:	f7ff fb39 	bl	80004d8 <main>
  bx  lr    
 8000e66:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000e68:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000e6c:	0800403c 	.word	0x0800403c
  ldr  r0, =_sdata
 8000e70:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000e74:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8000e78:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 8000e7c:	2000022c 	.word	0x2000022c

08000e80 <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e80:	e7fe      	b.n	8000e80 <DMA1_Stream0_IRQHandler>
	...

08000e84 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e88:	4b0e      	ldr	r3, [pc, #56]	; (8000ec4 <HAL_Init+0x40>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	4a0d      	ldr	r2, [pc, #52]	; (8000ec4 <HAL_Init+0x40>)
 8000e8e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e92:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e94:	4b0b      	ldr	r3, [pc, #44]	; (8000ec4 <HAL_Init+0x40>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	4a0a      	ldr	r2, [pc, #40]	; (8000ec4 <HAL_Init+0x40>)
 8000e9a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e9e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ea0:	4b08      	ldr	r3, [pc, #32]	; (8000ec4 <HAL_Init+0x40>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	4a07      	ldr	r2, [pc, #28]	; (8000ec4 <HAL_Init+0x40>)
 8000ea6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000eaa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000eac:	2003      	movs	r0, #3
 8000eae:	f000 fd05 	bl	80018bc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000eb2:	2000      	movs	r0, #0
 8000eb4:	f000 f808 	bl	8000ec8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000eb8:	f7ff fda0 	bl	80009fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ebc:	2300      	movs	r3, #0
}
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	bf00      	nop
 8000ec4:	40023c00 	.word	0x40023c00

08000ec8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b082      	sub	sp, #8
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ed0:	4b12      	ldr	r3, [pc, #72]	; (8000f1c <HAL_InitTick+0x54>)
 8000ed2:	681a      	ldr	r2, [r3, #0]
 8000ed4:	4b12      	ldr	r3, [pc, #72]	; (8000f20 <HAL_InitTick+0x58>)
 8000ed6:	781b      	ldrb	r3, [r3, #0]
 8000ed8:	4619      	mov	r1, r3
 8000eda:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ede:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ee2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	f000 fd1d 	bl	8001926 <HAL_SYSTICK_Config>
 8000eec:	4603      	mov	r3, r0
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d001      	beq.n	8000ef6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ef2:	2301      	movs	r3, #1
 8000ef4:	e00e      	b.n	8000f14 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	2b0f      	cmp	r3, #15
 8000efa:	d80a      	bhi.n	8000f12 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000efc:	2200      	movs	r2, #0
 8000efe:	6879      	ldr	r1, [r7, #4]
 8000f00:	f04f 30ff 	mov.w	r0, #4294967295
 8000f04:	f000 fce5 	bl	80018d2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f08:	4a06      	ldr	r2, [pc, #24]	; (8000f24 <HAL_InitTick+0x5c>)
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	e000      	b.n	8000f14 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f12:	2301      	movs	r3, #1
}
 8000f14:	4618      	mov	r0, r3
 8000f16:	3708      	adds	r7, #8
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bd80      	pop	{r7, pc}
 8000f1c:	20000000 	.word	0x20000000
 8000f20:	20000008 	.word	0x20000008
 8000f24:	20000004 	.word	0x20000004

08000f28 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f2c:	4b06      	ldr	r3, [pc, #24]	; (8000f48 <HAL_IncTick+0x20>)
 8000f2e:	781b      	ldrb	r3, [r3, #0]
 8000f30:	461a      	mov	r2, r3
 8000f32:	4b06      	ldr	r3, [pc, #24]	; (8000f4c <HAL_IncTick+0x24>)
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	4413      	add	r3, r2
 8000f38:	4a04      	ldr	r2, [pc, #16]	; (8000f4c <HAL_IncTick+0x24>)
 8000f3a:	6013      	str	r3, [r2, #0]
}
 8000f3c:	bf00      	nop
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f44:	4770      	bx	lr
 8000f46:	bf00      	nop
 8000f48:	20000008 	.word	0x20000008
 8000f4c:	20000228 	.word	0x20000228

08000f50 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f50:	b480      	push	{r7}
 8000f52:	af00      	add	r7, sp, #0
  return uwTick;
 8000f54:	4b03      	ldr	r3, [pc, #12]	; (8000f64 <HAL_GetTick+0x14>)
 8000f56:	681b      	ldr	r3, [r3, #0]
}
 8000f58:	4618      	mov	r0, r3
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f60:	4770      	bx	lr
 8000f62:	bf00      	nop
 8000f64:	20000228 	.word	0x20000228

08000f68 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b084      	sub	sp, #16
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000f70:	2300      	movs	r3, #0
 8000f72:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d101      	bne.n	8000f7e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000f7a:	2301      	movs	r3, #1
 8000f7c:	e033      	b.n	8000fe6 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d109      	bne.n	8000f9a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000f86:	6878      	ldr	r0, [r7, #4]
 8000f88:	f7ff fd60 	bl	8000a4c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	2200      	movs	r2, #0
 8000f90:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	2200      	movs	r2, #0
 8000f96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f9e:	f003 0310 	and.w	r3, r3, #16
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d118      	bne.n	8000fd8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000faa:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000fae:	f023 0302 	bic.w	r3, r3, #2
 8000fb2:	f043 0202 	orr.w	r2, r3, #2
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8000fba:	6878      	ldr	r0, [r7, #4]
 8000fbc:	f000 faa8 	bl	8001510 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fca:	f023 0303 	bic.w	r3, r3, #3
 8000fce:	f043 0201 	orr.w	r2, r3, #1
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	641a      	str	r2, [r3, #64]	; 0x40
 8000fd6:	e001      	b.n	8000fdc <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000fd8:	2301      	movs	r3, #1
 8000fda:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	2200      	movs	r2, #0
 8000fe0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000fe4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	3710      	adds	r7, #16
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bd80      	pop	{r7, pc}

08000fee <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8000fee:	b580      	push	{r7, lr}
 8000ff0:	b084      	sub	sp, #16
 8000ff2:	af00      	add	r7, sp, #0
 8000ff4:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	60fb      	str	r3, [r7, #12]
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	f003 0302 	and.w	r3, r3, #2
 8001008:	2b02      	cmp	r3, #2
 800100a:	bf0c      	ite	eq
 800100c:	2301      	moveq	r3, #1
 800100e:	2300      	movne	r3, #0
 8001010:	b2db      	uxtb	r3, r3
 8001012:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	685b      	ldr	r3, [r3, #4]
 800101a:	f003 0320 	and.w	r3, r3, #32
 800101e:	2b20      	cmp	r3, #32
 8001020:	bf0c      	ite	eq
 8001022:	2301      	moveq	r3, #1
 8001024:	2300      	movne	r3, #0
 8001026:	b2db      	uxtb	r3, r3
 8001028:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 800102a:	68fb      	ldr	r3, [r7, #12]
 800102c:	2b00      	cmp	r3, #0
 800102e:	d049      	beq.n	80010c4 <HAL_ADC_IRQHandler+0xd6>
 8001030:	68bb      	ldr	r3, [r7, #8]
 8001032:	2b00      	cmp	r3, #0
 8001034:	d046      	beq.n	80010c4 <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800103a:	f003 0310 	and.w	r3, r3, #16
 800103e:	2b00      	cmp	r3, #0
 8001040:	d105      	bne.n	800104e <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001046:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	689b      	ldr	r3, [r3, #8]
 8001054:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001058:	2b00      	cmp	r3, #0
 800105a:	d12b      	bne.n	80010b4 <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001060:	2b00      	cmp	r3, #0
 8001062:	d127      	bne.n	80010b4 <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800106a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800106e:	2b00      	cmp	r3, #0
 8001070:	d006      	beq.n	8001080 <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	689b      	ldr	r3, [r3, #8]
 8001078:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800107c:	2b00      	cmp	r3, #0
 800107e:	d119      	bne.n	80010b4 <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	685a      	ldr	r2, [r3, #4]
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	f022 0220 	bic.w	r2, r2, #32
 800108e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001094:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010a0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d105      	bne.n	80010b4 <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ac:	f043 0201 	orr.w	r2, r3, #1
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80010b4:	6878      	ldr	r0, [r7, #4]
 80010b6:	f000 f8db 	bl	8001270 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	f06f 0212 	mvn.w	r2, #18
 80010c2:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	f003 0304 	and.w	r3, r3, #4
 80010ce:	2b04      	cmp	r3, #4
 80010d0:	bf0c      	ite	eq
 80010d2:	2301      	moveq	r3, #1
 80010d4:	2300      	movne	r3, #0
 80010d6:	b2db      	uxtb	r3, r3
 80010d8:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	685b      	ldr	r3, [r3, #4]
 80010e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80010e4:	2b80      	cmp	r3, #128	; 0x80
 80010e6:	bf0c      	ite	eq
 80010e8:	2301      	moveq	r3, #1
 80010ea:	2300      	movne	r3, #0
 80010ec:	b2db      	uxtb	r3, r3
 80010ee:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d057      	beq.n	80011a6 <HAL_ADC_IRQHandler+0x1b8>
 80010f6:	68bb      	ldr	r3, [r7, #8]
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d054      	beq.n	80011a6 <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001100:	f003 0310 	and.w	r3, r3, #16
 8001104:	2b00      	cmp	r3, #0
 8001106:	d105      	bne.n	8001114 <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800110c:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	689b      	ldr	r3, [r3, #8]
 800111a:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800111e:	2b00      	cmp	r3, #0
 8001120:	d139      	bne.n	8001196 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001128:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800112c:	2b00      	cmp	r3, #0
 800112e:	d006      	beq.n	800113e <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	689b      	ldr	r3, [r3, #8]
 8001136:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800113a:	2b00      	cmp	r3, #0
 800113c:	d12b      	bne.n	8001196 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	685b      	ldr	r3, [r3, #4]
 8001144:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8001148:	2b00      	cmp	r3, #0
 800114a:	d124      	bne.n	8001196 <HAL_ADC_IRQHandler+0x1a8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	689b      	ldr	r3, [r3, #8]
 8001152:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001156:	2b00      	cmp	r3, #0
 8001158:	d11d      	bne.n	8001196 <HAL_ADC_IRQHandler+0x1a8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800115e:	2b00      	cmp	r3, #0
 8001160:	d119      	bne.n	8001196 <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	685a      	ldr	r2, [r3, #4]
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001170:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001176:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001182:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001186:	2b00      	cmp	r3, #0
 8001188:	d105      	bne.n	8001196 <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800118e:	f043 0201 	orr.w	r2, r3, #1
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001196:	6878      	ldr	r0, [r7, #4]
 8001198:	f000 fab6 	bl	8001708 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	f06f 020c 	mvn.w	r2, #12
 80011a4:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	f003 0301 	and.w	r3, r3, #1
 80011b0:	2b01      	cmp	r3, #1
 80011b2:	bf0c      	ite	eq
 80011b4:	2301      	moveq	r3, #1
 80011b6:	2300      	movne	r3, #0
 80011b8:	b2db      	uxtb	r3, r3
 80011ba:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	685b      	ldr	r3, [r3, #4]
 80011c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80011c6:	2b40      	cmp	r3, #64	; 0x40
 80011c8:	bf0c      	ite	eq
 80011ca:	2301      	moveq	r3, #1
 80011cc:	2300      	movne	r3, #0
 80011ce:	b2db      	uxtb	r3, r3
 80011d0:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d017      	beq.n	8001208 <HAL_ADC_IRQHandler+0x21a>
 80011d8:	68bb      	ldr	r3, [r7, #8]
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d014      	beq.n	8001208 <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	f003 0301 	and.w	r3, r3, #1
 80011e8:	2b01      	cmp	r3, #1
 80011ea:	d10d      	bne.n	8001208 <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011f0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80011f8:	6878      	ldr	r0, [r7, #4]
 80011fa:	f000 f843 	bl	8001284 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	f06f 0201 	mvn.w	r2, #1
 8001206:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	f003 0320 	and.w	r3, r3, #32
 8001212:	2b20      	cmp	r3, #32
 8001214:	bf0c      	ite	eq
 8001216:	2301      	moveq	r3, #1
 8001218:	2300      	movne	r3, #0
 800121a:	b2db      	uxtb	r3, r3
 800121c:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	685b      	ldr	r3, [r3, #4]
 8001224:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001228:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800122c:	bf0c      	ite	eq
 800122e:	2301      	moveq	r3, #1
 8001230:	2300      	movne	r3, #0
 8001232:	b2db      	uxtb	r3, r3
 8001234:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	2b00      	cmp	r3, #0
 800123a:	d015      	beq.n	8001268 <HAL_ADC_IRQHandler+0x27a>
 800123c:	68bb      	ldr	r3, [r7, #8]
 800123e:	2b00      	cmp	r3, #0
 8001240:	d012      	beq.n	8001268 <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001246:	f043 0202 	orr.w	r2, r3, #2
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	f06f 0220 	mvn.w	r2, #32
 8001256:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001258:	6878      	ldr	r0, [r7, #4]
 800125a:	f000 f81d 	bl	8001298 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	f06f 0220 	mvn.w	r2, #32
 8001266:	601a      	str	r2, [r3, #0]
  }
}
 8001268:	bf00      	nop
 800126a:	3710      	adds	r7, #16
 800126c:	46bd      	mov	sp, r7
 800126e:	bd80      	pop	{r7, pc}

08001270 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001270:	b480      	push	{r7}
 8001272:	b083      	sub	sp, #12
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8001278:	bf00      	nop
 800127a:	370c      	adds	r7, #12
 800127c:	46bd      	mov	sp, r7
 800127e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001282:	4770      	bx	lr

08001284 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001284:	b480      	push	{r7}
 8001286:	b083      	sub	sp, #12
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 800128c:	bf00      	nop
 800128e:	370c      	adds	r7, #12
 8001290:	46bd      	mov	sp, r7
 8001292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001296:	4770      	bx	lr

08001298 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001298:	b480      	push	{r7}
 800129a:	b083      	sub	sp, #12
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80012a0:	bf00      	nop
 80012a2:	370c      	adds	r7, #12
 80012a4:	46bd      	mov	sp, r7
 80012a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012aa:	4770      	bx	lr

080012ac <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80012ac:	b480      	push	{r7}
 80012ae:	b085      	sub	sp, #20
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
 80012b4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80012b6:	2300      	movs	r3, #0
 80012b8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80012c0:	2b01      	cmp	r3, #1
 80012c2:	d101      	bne.n	80012c8 <HAL_ADC_ConfigChannel+0x1c>
 80012c4:	2302      	movs	r3, #2
 80012c6:	e113      	b.n	80014f0 <HAL_ADC_ConfigChannel+0x244>
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	2201      	movs	r2, #1
 80012cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80012d0:	683b      	ldr	r3, [r7, #0]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	2b09      	cmp	r3, #9
 80012d6:	d925      	bls.n	8001324 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	68d9      	ldr	r1, [r3, #12]
 80012de:	683b      	ldr	r3, [r7, #0]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	b29b      	uxth	r3, r3
 80012e4:	461a      	mov	r2, r3
 80012e6:	4613      	mov	r3, r2
 80012e8:	005b      	lsls	r3, r3, #1
 80012ea:	4413      	add	r3, r2
 80012ec:	3b1e      	subs	r3, #30
 80012ee:	2207      	movs	r2, #7
 80012f0:	fa02 f303 	lsl.w	r3, r2, r3
 80012f4:	43da      	mvns	r2, r3
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	400a      	ands	r2, r1
 80012fc:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	68d9      	ldr	r1, [r3, #12]
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	689a      	ldr	r2, [r3, #8]
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	b29b      	uxth	r3, r3
 800130e:	4618      	mov	r0, r3
 8001310:	4603      	mov	r3, r0
 8001312:	005b      	lsls	r3, r3, #1
 8001314:	4403      	add	r3, r0
 8001316:	3b1e      	subs	r3, #30
 8001318:	409a      	lsls	r2, r3
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	430a      	orrs	r2, r1
 8001320:	60da      	str	r2, [r3, #12]
 8001322:	e022      	b.n	800136a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	6919      	ldr	r1, [r3, #16]
 800132a:	683b      	ldr	r3, [r7, #0]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	b29b      	uxth	r3, r3
 8001330:	461a      	mov	r2, r3
 8001332:	4613      	mov	r3, r2
 8001334:	005b      	lsls	r3, r3, #1
 8001336:	4413      	add	r3, r2
 8001338:	2207      	movs	r2, #7
 800133a:	fa02 f303 	lsl.w	r3, r2, r3
 800133e:	43da      	mvns	r2, r3
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	400a      	ands	r2, r1
 8001346:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	6919      	ldr	r1, [r3, #16]
 800134e:	683b      	ldr	r3, [r7, #0]
 8001350:	689a      	ldr	r2, [r3, #8]
 8001352:	683b      	ldr	r3, [r7, #0]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	b29b      	uxth	r3, r3
 8001358:	4618      	mov	r0, r3
 800135a:	4603      	mov	r3, r0
 800135c:	005b      	lsls	r3, r3, #1
 800135e:	4403      	add	r3, r0
 8001360:	409a      	lsls	r2, r3
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	430a      	orrs	r2, r1
 8001368:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800136a:	683b      	ldr	r3, [r7, #0]
 800136c:	685b      	ldr	r3, [r3, #4]
 800136e:	2b06      	cmp	r3, #6
 8001370:	d824      	bhi.n	80013bc <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001378:	683b      	ldr	r3, [r7, #0]
 800137a:	685a      	ldr	r2, [r3, #4]
 800137c:	4613      	mov	r3, r2
 800137e:	009b      	lsls	r3, r3, #2
 8001380:	4413      	add	r3, r2
 8001382:	3b05      	subs	r3, #5
 8001384:	221f      	movs	r2, #31
 8001386:	fa02 f303 	lsl.w	r3, r2, r3
 800138a:	43da      	mvns	r2, r3
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	400a      	ands	r2, r1
 8001392:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800139a:	683b      	ldr	r3, [r7, #0]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	b29b      	uxth	r3, r3
 80013a0:	4618      	mov	r0, r3
 80013a2:	683b      	ldr	r3, [r7, #0]
 80013a4:	685a      	ldr	r2, [r3, #4]
 80013a6:	4613      	mov	r3, r2
 80013a8:	009b      	lsls	r3, r3, #2
 80013aa:	4413      	add	r3, r2
 80013ac:	3b05      	subs	r3, #5
 80013ae:	fa00 f203 	lsl.w	r2, r0, r3
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	430a      	orrs	r2, r1
 80013b8:	635a      	str	r2, [r3, #52]	; 0x34
 80013ba:	e04c      	b.n	8001456 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80013bc:	683b      	ldr	r3, [r7, #0]
 80013be:	685b      	ldr	r3, [r3, #4]
 80013c0:	2b0c      	cmp	r3, #12
 80013c2:	d824      	bhi.n	800140e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80013ca:	683b      	ldr	r3, [r7, #0]
 80013cc:	685a      	ldr	r2, [r3, #4]
 80013ce:	4613      	mov	r3, r2
 80013d0:	009b      	lsls	r3, r3, #2
 80013d2:	4413      	add	r3, r2
 80013d4:	3b23      	subs	r3, #35	; 0x23
 80013d6:	221f      	movs	r2, #31
 80013d8:	fa02 f303 	lsl.w	r3, r2, r3
 80013dc:	43da      	mvns	r2, r3
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	400a      	ands	r2, r1
 80013e4:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	b29b      	uxth	r3, r3
 80013f2:	4618      	mov	r0, r3
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	685a      	ldr	r2, [r3, #4]
 80013f8:	4613      	mov	r3, r2
 80013fa:	009b      	lsls	r3, r3, #2
 80013fc:	4413      	add	r3, r2
 80013fe:	3b23      	subs	r3, #35	; 0x23
 8001400:	fa00 f203 	lsl.w	r2, r0, r3
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	430a      	orrs	r2, r1
 800140a:	631a      	str	r2, [r3, #48]	; 0x30
 800140c:	e023      	b.n	8001456 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001414:	683b      	ldr	r3, [r7, #0]
 8001416:	685a      	ldr	r2, [r3, #4]
 8001418:	4613      	mov	r3, r2
 800141a:	009b      	lsls	r3, r3, #2
 800141c:	4413      	add	r3, r2
 800141e:	3b41      	subs	r3, #65	; 0x41
 8001420:	221f      	movs	r2, #31
 8001422:	fa02 f303 	lsl.w	r3, r2, r3
 8001426:	43da      	mvns	r2, r3
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	400a      	ands	r2, r1
 800142e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001436:	683b      	ldr	r3, [r7, #0]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	b29b      	uxth	r3, r3
 800143c:	4618      	mov	r0, r3
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	685a      	ldr	r2, [r3, #4]
 8001442:	4613      	mov	r3, r2
 8001444:	009b      	lsls	r3, r3, #2
 8001446:	4413      	add	r3, r2
 8001448:	3b41      	subs	r3, #65	; 0x41
 800144a:	fa00 f203 	lsl.w	r2, r0, r3
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	430a      	orrs	r2, r1
 8001454:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001456:	4b29      	ldr	r3, [pc, #164]	; (80014fc <HAL_ADC_ConfigChannel+0x250>)
 8001458:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	4a28      	ldr	r2, [pc, #160]	; (8001500 <HAL_ADC_ConfigChannel+0x254>)
 8001460:	4293      	cmp	r3, r2
 8001462:	d10f      	bne.n	8001484 <HAL_ADC_ConfigChannel+0x1d8>
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	2b12      	cmp	r3, #18
 800146a:	d10b      	bne.n	8001484 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	685b      	ldr	r3, [r3, #4]
 8001470:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	685b      	ldr	r3, [r3, #4]
 800147c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	4a1d      	ldr	r2, [pc, #116]	; (8001500 <HAL_ADC_ConfigChannel+0x254>)
 800148a:	4293      	cmp	r3, r2
 800148c:	d12b      	bne.n	80014e6 <HAL_ADC_ConfigChannel+0x23a>
 800148e:	683b      	ldr	r3, [r7, #0]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	4a1c      	ldr	r2, [pc, #112]	; (8001504 <HAL_ADC_ConfigChannel+0x258>)
 8001494:	4293      	cmp	r3, r2
 8001496:	d003      	beq.n	80014a0 <HAL_ADC_ConfigChannel+0x1f4>
 8001498:	683b      	ldr	r3, [r7, #0]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	2b11      	cmp	r3, #17
 800149e:	d122      	bne.n	80014e6 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	685b      	ldr	r3, [r3, #4]
 80014a4:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	685b      	ldr	r3, [r3, #4]
 80014b0:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80014b8:	683b      	ldr	r3, [r7, #0]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	4a11      	ldr	r2, [pc, #68]	; (8001504 <HAL_ADC_ConfigChannel+0x258>)
 80014be:	4293      	cmp	r3, r2
 80014c0:	d111      	bne.n	80014e6 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80014c2:	4b11      	ldr	r3, [pc, #68]	; (8001508 <HAL_ADC_ConfigChannel+0x25c>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	4a11      	ldr	r2, [pc, #68]	; (800150c <HAL_ADC_ConfigChannel+0x260>)
 80014c8:	fba2 2303 	umull	r2, r3, r2, r3
 80014cc:	0c9a      	lsrs	r2, r3, #18
 80014ce:	4613      	mov	r3, r2
 80014d0:	009b      	lsls	r3, r3, #2
 80014d2:	4413      	add	r3, r2
 80014d4:	005b      	lsls	r3, r3, #1
 80014d6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80014d8:	e002      	b.n	80014e0 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80014da:	68bb      	ldr	r3, [r7, #8]
 80014dc:	3b01      	subs	r3, #1
 80014de:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80014e0:	68bb      	ldr	r3, [r7, #8]
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d1f9      	bne.n	80014da <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	2200      	movs	r2, #0
 80014ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80014ee:	2300      	movs	r3, #0
}
 80014f0:	4618      	mov	r0, r3
 80014f2:	3714      	adds	r7, #20
 80014f4:	46bd      	mov	sp, r7
 80014f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fa:	4770      	bx	lr
 80014fc:	40012300 	.word	0x40012300
 8001500:	40012000 	.word	0x40012000
 8001504:	10000012 	.word	0x10000012
 8001508:	20000000 	.word	0x20000000
 800150c:	431bde83 	.word	0x431bde83

08001510 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001510:	b480      	push	{r7}
 8001512:	b085      	sub	sp, #20
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001518:	4b79      	ldr	r3, [pc, #484]	; (8001700 <ADC_Init+0x1f0>)
 800151a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	685b      	ldr	r3, [r3, #4]
 8001520:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	685a      	ldr	r2, [r3, #4]
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	685b      	ldr	r3, [r3, #4]
 8001530:	431a      	orrs	r2, r3
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	685a      	ldr	r2, [r3, #4]
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001544:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	6859      	ldr	r1, [r3, #4]
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	691b      	ldr	r3, [r3, #16]
 8001550:	021a      	lsls	r2, r3, #8
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	430a      	orrs	r2, r1
 8001558:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	685a      	ldr	r2, [r3, #4]
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001568:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	6859      	ldr	r1, [r3, #4]
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	689a      	ldr	r2, [r3, #8]
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	430a      	orrs	r2, r1
 800157a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	689a      	ldr	r2, [r3, #8]
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800158a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	6899      	ldr	r1, [r3, #8]
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	68da      	ldr	r2, [r3, #12]
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	430a      	orrs	r2, r1
 800159c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015a2:	4a58      	ldr	r2, [pc, #352]	; (8001704 <ADC_Init+0x1f4>)
 80015a4:	4293      	cmp	r3, r2
 80015a6:	d022      	beq.n	80015ee <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	689a      	ldr	r2, [r3, #8]
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80015b6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	6899      	ldr	r1, [r3, #8]
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	430a      	orrs	r2, r1
 80015c8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	689a      	ldr	r2, [r3, #8]
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80015d8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	6899      	ldr	r1, [r3, #8]
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	430a      	orrs	r2, r1
 80015ea:	609a      	str	r2, [r3, #8]
 80015ec:	e00f      	b.n	800160e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	689a      	ldr	r2, [r3, #8]
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80015fc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	689a      	ldr	r2, [r3, #8]
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800160c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	689a      	ldr	r2, [r3, #8]
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	f022 0202 	bic.w	r2, r2, #2
 800161c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	6899      	ldr	r1, [r3, #8]
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	7e1b      	ldrb	r3, [r3, #24]
 8001628:	005a      	lsls	r2, r3, #1
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	430a      	orrs	r2, r1
 8001630:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001638:	2b00      	cmp	r3, #0
 800163a:	d01b      	beq.n	8001674 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	685a      	ldr	r2, [r3, #4]
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800164a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	685a      	ldr	r2, [r3, #4]
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800165a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	6859      	ldr	r1, [r3, #4]
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001666:	3b01      	subs	r3, #1
 8001668:	035a      	lsls	r2, r3, #13
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	430a      	orrs	r2, r1
 8001670:	605a      	str	r2, [r3, #4]
 8001672:	e007      	b.n	8001684 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	685a      	ldr	r2, [r3, #4]
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001682:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001692:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	69db      	ldr	r3, [r3, #28]
 800169e:	3b01      	subs	r3, #1
 80016a0:	051a      	lsls	r2, r3, #20
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	430a      	orrs	r2, r1
 80016a8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	689a      	ldr	r2, [r3, #8]
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80016b8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	6899      	ldr	r1, [r3, #8]
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80016c6:	025a      	lsls	r2, r3, #9
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	430a      	orrs	r2, r1
 80016ce:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	689a      	ldr	r2, [r3, #8]
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80016de:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	6899      	ldr	r1, [r3, #8]
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	695b      	ldr	r3, [r3, #20]
 80016ea:	029a      	lsls	r2, r3, #10
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	430a      	orrs	r2, r1
 80016f2:	609a      	str	r2, [r3, #8]
}
 80016f4:	bf00      	nop
 80016f6:	3714      	adds	r7, #20
 80016f8:	46bd      	mov	sp, r7
 80016fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fe:	4770      	bx	lr
 8001700:	40012300 	.word	0x40012300
 8001704:	0f000001 	.word	0x0f000001

08001708 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001708:	b480      	push	{r7}
 800170a:	b083      	sub	sp, #12
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8001710:	bf00      	nop
 8001712:	370c      	adds	r7, #12
 8001714:	46bd      	mov	sp, r7
 8001716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171a:	4770      	bx	lr

0800171c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800171c:	b480      	push	{r7}
 800171e:	b085      	sub	sp, #20
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	f003 0307 	and.w	r3, r3, #7
 800172a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800172c:	4b0c      	ldr	r3, [pc, #48]	; (8001760 <__NVIC_SetPriorityGrouping+0x44>)
 800172e:	68db      	ldr	r3, [r3, #12]
 8001730:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001732:	68ba      	ldr	r2, [r7, #8]
 8001734:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001738:	4013      	ands	r3, r2
 800173a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001740:	68bb      	ldr	r3, [r7, #8]
 8001742:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001744:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001748:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800174c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800174e:	4a04      	ldr	r2, [pc, #16]	; (8001760 <__NVIC_SetPriorityGrouping+0x44>)
 8001750:	68bb      	ldr	r3, [r7, #8]
 8001752:	60d3      	str	r3, [r2, #12]
}
 8001754:	bf00      	nop
 8001756:	3714      	adds	r7, #20
 8001758:	46bd      	mov	sp, r7
 800175a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175e:	4770      	bx	lr
 8001760:	e000ed00 	.word	0xe000ed00

08001764 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001764:	b480      	push	{r7}
 8001766:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001768:	4b04      	ldr	r3, [pc, #16]	; (800177c <__NVIC_GetPriorityGrouping+0x18>)
 800176a:	68db      	ldr	r3, [r3, #12]
 800176c:	0a1b      	lsrs	r3, r3, #8
 800176e:	f003 0307 	and.w	r3, r3, #7
}
 8001772:	4618      	mov	r0, r3
 8001774:	46bd      	mov	sp, r7
 8001776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177a:	4770      	bx	lr
 800177c:	e000ed00 	.word	0xe000ed00

08001780 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001780:	b480      	push	{r7}
 8001782:	b083      	sub	sp, #12
 8001784:	af00      	add	r7, sp, #0
 8001786:	4603      	mov	r3, r0
 8001788:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800178a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800178e:	2b00      	cmp	r3, #0
 8001790:	db0b      	blt.n	80017aa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001792:	79fb      	ldrb	r3, [r7, #7]
 8001794:	f003 021f 	and.w	r2, r3, #31
 8001798:	4907      	ldr	r1, [pc, #28]	; (80017b8 <__NVIC_EnableIRQ+0x38>)
 800179a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800179e:	095b      	lsrs	r3, r3, #5
 80017a0:	2001      	movs	r0, #1
 80017a2:	fa00 f202 	lsl.w	r2, r0, r2
 80017a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80017aa:	bf00      	nop
 80017ac:	370c      	adds	r7, #12
 80017ae:	46bd      	mov	sp, r7
 80017b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b4:	4770      	bx	lr
 80017b6:	bf00      	nop
 80017b8:	e000e100 	.word	0xe000e100

080017bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017bc:	b480      	push	{r7}
 80017be:	b083      	sub	sp, #12
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	4603      	mov	r3, r0
 80017c4:	6039      	str	r1, [r7, #0]
 80017c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	db0a      	blt.n	80017e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017d0:	683b      	ldr	r3, [r7, #0]
 80017d2:	b2da      	uxtb	r2, r3
 80017d4:	490c      	ldr	r1, [pc, #48]	; (8001808 <__NVIC_SetPriority+0x4c>)
 80017d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017da:	0112      	lsls	r2, r2, #4
 80017dc:	b2d2      	uxtb	r2, r2
 80017de:	440b      	add	r3, r1
 80017e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80017e4:	e00a      	b.n	80017fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017e6:	683b      	ldr	r3, [r7, #0]
 80017e8:	b2da      	uxtb	r2, r3
 80017ea:	4908      	ldr	r1, [pc, #32]	; (800180c <__NVIC_SetPriority+0x50>)
 80017ec:	79fb      	ldrb	r3, [r7, #7]
 80017ee:	f003 030f 	and.w	r3, r3, #15
 80017f2:	3b04      	subs	r3, #4
 80017f4:	0112      	lsls	r2, r2, #4
 80017f6:	b2d2      	uxtb	r2, r2
 80017f8:	440b      	add	r3, r1
 80017fa:	761a      	strb	r2, [r3, #24]
}
 80017fc:	bf00      	nop
 80017fe:	370c      	adds	r7, #12
 8001800:	46bd      	mov	sp, r7
 8001802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001806:	4770      	bx	lr
 8001808:	e000e100 	.word	0xe000e100
 800180c:	e000ed00 	.word	0xe000ed00

08001810 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001810:	b480      	push	{r7}
 8001812:	b089      	sub	sp, #36	; 0x24
 8001814:	af00      	add	r7, sp, #0
 8001816:	60f8      	str	r0, [r7, #12]
 8001818:	60b9      	str	r1, [r7, #8]
 800181a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	f003 0307 	and.w	r3, r3, #7
 8001822:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001824:	69fb      	ldr	r3, [r7, #28]
 8001826:	f1c3 0307 	rsb	r3, r3, #7
 800182a:	2b04      	cmp	r3, #4
 800182c:	bf28      	it	cs
 800182e:	2304      	movcs	r3, #4
 8001830:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001832:	69fb      	ldr	r3, [r7, #28]
 8001834:	3304      	adds	r3, #4
 8001836:	2b06      	cmp	r3, #6
 8001838:	d902      	bls.n	8001840 <NVIC_EncodePriority+0x30>
 800183a:	69fb      	ldr	r3, [r7, #28]
 800183c:	3b03      	subs	r3, #3
 800183e:	e000      	b.n	8001842 <NVIC_EncodePriority+0x32>
 8001840:	2300      	movs	r3, #0
 8001842:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001844:	f04f 32ff 	mov.w	r2, #4294967295
 8001848:	69bb      	ldr	r3, [r7, #24]
 800184a:	fa02 f303 	lsl.w	r3, r2, r3
 800184e:	43da      	mvns	r2, r3
 8001850:	68bb      	ldr	r3, [r7, #8]
 8001852:	401a      	ands	r2, r3
 8001854:	697b      	ldr	r3, [r7, #20]
 8001856:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001858:	f04f 31ff 	mov.w	r1, #4294967295
 800185c:	697b      	ldr	r3, [r7, #20]
 800185e:	fa01 f303 	lsl.w	r3, r1, r3
 8001862:	43d9      	mvns	r1, r3
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001868:	4313      	orrs	r3, r2
         );
}
 800186a:	4618      	mov	r0, r3
 800186c:	3724      	adds	r7, #36	; 0x24
 800186e:	46bd      	mov	sp, r7
 8001870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001874:	4770      	bx	lr
	...

08001878 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b082      	sub	sp, #8
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	3b01      	subs	r3, #1
 8001884:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001888:	d301      	bcc.n	800188e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800188a:	2301      	movs	r3, #1
 800188c:	e00f      	b.n	80018ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800188e:	4a0a      	ldr	r2, [pc, #40]	; (80018b8 <SysTick_Config+0x40>)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	3b01      	subs	r3, #1
 8001894:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001896:	210f      	movs	r1, #15
 8001898:	f04f 30ff 	mov.w	r0, #4294967295
 800189c:	f7ff ff8e 	bl	80017bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018a0:	4b05      	ldr	r3, [pc, #20]	; (80018b8 <SysTick_Config+0x40>)
 80018a2:	2200      	movs	r2, #0
 80018a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018a6:	4b04      	ldr	r3, [pc, #16]	; (80018b8 <SysTick_Config+0x40>)
 80018a8:	2207      	movs	r2, #7
 80018aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80018ac:	2300      	movs	r3, #0
}
 80018ae:	4618      	mov	r0, r3
 80018b0:	3708      	adds	r7, #8
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bd80      	pop	{r7, pc}
 80018b6:	bf00      	nop
 80018b8:	e000e010 	.word	0xe000e010

080018bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b082      	sub	sp, #8
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80018c4:	6878      	ldr	r0, [r7, #4]
 80018c6:	f7ff ff29 	bl	800171c <__NVIC_SetPriorityGrouping>
}
 80018ca:	bf00      	nop
 80018cc:	3708      	adds	r7, #8
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bd80      	pop	{r7, pc}

080018d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80018d2:	b580      	push	{r7, lr}
 80018d4:	b086      	sub	sp, #24
 80018d6:	af00      	add	r7, sp, #0
 80018d8:	4603      	mov	r3, r0
 80018da:	60b9      	str	r1, [r7, #8]
 80018dc:	607a      	str	r2, [r7, #4]
 80018de:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80018e0:	2300      	movs	r3, #0
 80018e2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80018e4:	f7ff ff3e 	bl	8001764 <__NVIC_GetPriorityGrouping>
 80018e8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80018ea:	687a      	ldr	r2, [r7, #4]
 80018ec:	68b9      	ldr	r1, [r7, #8]
 80018ee:	6978      	ldr	r0, [r7, #20]
 80018f0:	f7ff ff8e 	bl	8001810 <NVIC_EncodePriority>
 80018f4:	4602      	mov	r2, r0
 80018f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018fa:	4611      	mov	r1, r2
 80018fc:	4618      	mov	r0, r3
 80018fe:	f7ff ff5d 	bl	80017bc <__NVIC_SetPriority>
}
 8001902:	bf00      	nop
 8001904:	3718      	adds	r7, #24
 8001906:	46bd      	mov	sp, r7
 8001908:	bd80      	pop	{r7, pc}

0800190a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800190a:	b580      	push	{r7, lr}
 800190c:	b082      	sub	sp, #8
 800190e:	af00      	add	r7, sp, #0
 8001910:	4603      	mov	r3, r0
 8001912:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001914:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001918:	4618      	mov	r0, r3
 800191a:	f7ff ff31 	bl	8001780 <__NVIC_EnableIRQ>
}
 800191e:	bf00      	nop
 8001920:	3708      	adds	r7, #8
 8001922:	46bd      	mov	sp, r7
 8001924:	bd80      	pop	{r7, pc}

08001926 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001926:	b580      	push	{r7, lr}
 8001928:	b082      	sub	sp, #8
 800192a:	af00      	add	r7, sp, #0
 800192c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800192e:	6878      	ldr	r0, [r7, #4]
 8001930:	f7ff ffa2 	bl	8001878 <SysTick_Config>
 8001934:	4603      	mov	r3, r0
}
 8001936:	4618      	mov	r0, r3
 8001938:	3708      	adds	r7, #8
 800193a:	46bd      	mov	sp, r7
 800193c:	bd80      	pop	{r7, pc}
	...

08001940 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b086      	sub	sp, #24
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001948:	2300      	movs	r3, #0
 800194a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800194c:	f7ff fb00 	bl	8000f50 <HAL_GetTick>
 8001950:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	2b00      	cmp	r3, #0
 8001956:	d101      	bne.n	800195c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001958:	2301      	movs	r3, #1
 800195a:	e099      	b.n	8001a90 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	2200      	movs	r2, #0
 8001960:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	2202      	movs	r2, #2
 8001968:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	681a      	ldr	r2, [r3, #0]
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f022 0201 	bic.w	r2, r2, #1
 800197a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800197c:	e00f      	b.n	800199e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800197e:	f7ff fae7 	bl	8000f50 <HAL_GetTick>
 8001982:	4602      	mov	r2, r0
 8001984:	693b      	ldr	r3, [r7, #16]
 8001986:	1ad3      	subs	r3, r2, r3
 8001988:	2b05      	cmp	r3, #5
 800198a:	d908      	bls.n	800199e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	2220      	movs	r2, #32
 8001990:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	2203      	movs	r2, #3
 8001996:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800199a:	2303      	movs	r3, #3
 800199c:	e078      	b.n	8001a90 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f003 0301 	and.w	r3, r3, #1
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d1e8      	bne.n	800197e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80019b4:	697a      	ldr	r2, [r7, #20]
 80019b6:	4b38      	ldr	r3, [pc, #224]	; (8001a98 <HAL_DMA_Init+0x158>)
 80019b8:	4013      	ands	r3, r2
 80019ba:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	685a      	ldr	r2, [r3, #4]
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	689b      	ldr	r3, [r3, #8]
 80019c4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80019ca:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	691b      	ldr	r3, [r3, #16]
 80019d0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80019d6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	699b      	ldr	r3, [r3, #24]
 80019dc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80019e2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	6a1b      	ldr	r3, [r3, #32]
 80019e8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80019ea:	697a      	ldr	r2, [r7, #20]
 80019ec:	4313      	orrs	r3, r2
 80019ee:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019f4:	2b04      	cmp	r3, #4
 80019f6:	d107      	bne.n	8001a08 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a00:	4313      	orrs	r3, r2
 8001a02:	697a      	ldr	r2, [r7, #20]
 8001a04:	4313      	orrs	r3, r2
 8001a06:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	697a      	ldr	r2, [r7, #20]
 8001a0e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	695b      	ldr	r3, [r3, #20]
 8001a16:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001a18:	697b      	ldr	r3, [r7, #20]
 8001a1a:	f023 0307 	bic.w	r3, r3, #7
 8001a1e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a24:	697a      	ldr	r2, [r7, #20]
 8001a26:	4313      	orrs	r3, r2
 8001a28:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a2e:	2b04      	cmp	r3, #4
 8001a30:	d117      	bne.n	8001a62 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a36:	697a      	ldr	r2, [r7, #20]
 8001a38:	4313      	orrs	r3, r2
 8001a3a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d00e      	beq.n	8001a62 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001a44:	6878      	ldr	r0, [r7, #4]
 8001a46:	f000 fa0b 	bl	8001e60 <DMA_CheckFifoParam>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d008      	beq.n	8001a62 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	2240      	movs	r2, #64	; 0x40
 8001a54:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	2201      	movs	r2, #1
 8001a5a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001a5e:	2301      	movs	r3, #1
 8001a60:	e016      	b.n	8001a90 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	697a      	ldr	r2, [r7, #20]
 8001a68:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001a6a:	6878      	ldr	r0, [r7, #4]
 8001a6c:	f000 f9c2 	bl	8001df4 <DMA_CalcBaseAndBitshift>
 8001a70:	4603      	mov	r3, r0
 8001a72:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a78:	223f      	movs	r2, #63	; 0x3f
 8001a7a:	409a      	lsls	r2, r3
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	2200      	movs	r2, #0
 8001a84:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	2201      	movs	r2, #1
 8001a8a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001a8e:	2300      	movs	r3, #0
}
 8001a90:	4618      	mov	r0, r3
 8001a92:	3718      	adds	r7, #24
 8001a94:	46bd      	mov	sp, r7
 8001a96:	bd80      	pop	{r7, pc}
 8001a98:	f010803f 	.word	0xf010803f

08001a9c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	b083      	sub	sp, #12
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001aaa:	b2db      	uxtb	r3, r3
 8001aac:	2b02      	cmp	r3, #2
 8001aae:	d004      	beq.n	8001aba <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	2280      	movs	r2, #128	; 0x80
 8001ab4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001ab6:	2301      	movs	r3, #1
 8001ab8:	e00c      	b.n	8001ad4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	2205      	movs	r2, #5
 8001abe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	681a      	ldr	r2, [r3, #0]
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f022 0201 	bic.w	r2, r2, #1
 8001ad0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001ad2:	2300      	movs	r3, #0
}
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	370c      	adds	r7, #12
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ade:	4770      	bx	lr

08001ae0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b086      	sub	sp, #24
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001aec:	4b92      	ldr	r3, [pc, #584]	; (8001d38 <HAL_DMA_IRQHandler+0x258>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	4a92      	ldr	r2, [pc, #584]	; (8001d3c <HAL_DMA_IRQHandler+0x25c>)
 8001af2:	fba2 2303 	umull	r2, r3, r2, r3
 8001af6:	0a9b      	lsrs	r3, r3, #10
 8001af8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001afe:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001b00:	693b      	ldr	r3, [r7, #16]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b0a:	2208      	movs	r2, #8
 8001b0c:	409a      	lsls	r2, r3
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	4013      	ands	r3, r2
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d01a      	beq.n	8001b4c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f003 0304 	and.w	r3, r3, #4
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d013      	beq.n	8001b4c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	681a      	ldr	r2, [r3, #0]
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f022 0204 	bic.w	r2, r2, #4
 8001b32:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b38:	2208      	movs	r2, #8
 8001b3a:	409a      	lsls	r2, r3
 8001b3c:	693b      	ldr	r3, [r7, #16]
 8001b3e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b44:	f043 0201 	orr.w	r2, r3, #1
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b50:	2201      	movs	r2, #1
 8001b52:	409a      	lsls	r2, r3
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	4013      	ands	r3, r2
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d012      	beq.n	8001b82 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	695b      	ldr	r3, [r3, #20]
 8001b62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d00b      	beq.n	8001b82 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b6e:	2201      	movs	r2, #1
 8001b70:	409a      	lsls	r2, r3
 8001b72:	693b      	ldr	r3, [r7, #16]
 8001b74:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b7a:	f043 0202 	orr.w	r2, r3, #2
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b86:	2204      	movs	r2, #4
 8001b88:	409a      	lsls	r2, r3
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	4013      	ands	r3, r2
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d012      	beq.n	8001bb8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f003 0302 	and.w	r3, r3, #2
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d00b      	beq.n	8001bb8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ba4:	2204      	movs	r2, #4
 8001ba6:	409a      	lsls	r2, r3
 8001ba8:	693b      	ldr	r3, [r7, #16]
 8001baa:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bb0:	f043 0204 	orr.w	r2, r3, #4
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bbc:	2210      	movs	r2, #16
 8001bbe:	409a      	lsls	r2, r3
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	4013      	ands	r3, r2
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d043      	beq.n	8001c50 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f003 0308 	and.w	r3, r3, #8
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d03c      	beq.n	8001c50 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bda:	2210      	movs	r2, #16
 8001bdc:	409a      	lsls	r2, r3
 8001bde:	693b      	ldr	r3, [r7, #16]
 8001be0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d018      	beq.n	8001c22 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d108      	bne.n	8001c10 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d024      	beq.n	8001c50 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c0a:	6878      	ldr	r0, [r7, #4]
 8001c0c:	4798      	blx	r3
 8001c0e:	e01f      	b.n	8001c50 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d01b      	beq.n	8001c50 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c1c:	6878      	ldr	r0, [r7, #4]
 8001c1e:	4798      	blx	r3
 8001c20:	e016      	b.n	8001c50 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d107      	bne.n	8001c40 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	681a      	ldr	r2, [r3, #0]
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f022 0208 	bic.w	r2, r2, #8
 8001c3e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d003      	beq.n	8001c50 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c4c:	6878      	ldr	r0, [r7, #4]
 8001c4e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c54:	2220      	movs	r2, #32
 8001c56:	409a      	lsls	r2, r3
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	4013      	ands	r3, r2
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	f000 808e 	beq.w	8001d7e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f003 0310 	and.w	r3, r3, #16
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	f000 8086 	beq.w	8001d7e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c76:	2220      	movs	r2, #32
 8001c78:	409a      	lsls	r2, r3
 8001c7a:	693b      	ldr	r3, [r7, #16]
 8001c7c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001c84:	b2db      	uxtb	r3, r3
 8001c86:	2b05      	cmp	r3, #5
 8001c88:	d136      	bne.n	8001cf8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	681a      	ldr	r2, [r3, #0]
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f022 0216 	bic.w	r2, r2, #22
 8001c98:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	695a      	ldr	r2, [r3, #20]
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001ca8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d103      	bne.n	8001cba <HAL_DMA_IRQHandler+0x1da>
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d007      	beq.n	8001cca <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	681a      	ldr	r2, [r3, #0]
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f022 0208 	bic.w	r2, r2, #8
 8001cc8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cce:	223f      	movs	r2, #63	; 0x3f
 8001cd0:	409a      	lsls	r2, r3
 8001cd2:	693b      	ldr	r3, [r7, #16]
 8001cd4:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	2200      	movs	r2, #0
 8001cda:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	2201      	movs	r2, #1
 8001ce2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d07d      	beq.n	8001dea <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001cf2:	6878      	ldr	r0, [r7, #4]
 8001cf4:	4798      	blx	r3
        }
        return;
 8001cf6:	e078      	b.n	8001dea <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d01c      	beq.n	8001d40 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d108      	bne.n	8001d26 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d030      	beq.n	8001d7e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d20:	6878      	ldr	r0, [r7, #4]
 8001d22:	4798      	blx	r3
 8001d24:	e02b      	b.n	8001d7e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d027      	beq.n	8001d7e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d32:	6878      	ldr	r0, [r7, #4]
 8001d34:	4798      	blx	r3
 8001d36:	e022      	b.n	8001d7e <HAL_DMA_IRQHandler+0x29e>
 8001d38:	20000000 	.word	0x20000000
 8001d3c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d10f      	bne.n	8001d6e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	681a      	ldr	r2, [r3, #0]
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f022 0210 	bic.w	r2, r2, #16
 8001d5c:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	2200      	movs	r2, #0
 8001d62:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	2201      	movs	r2, #1
 8001d6a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d003      	beq.n	8001d7e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d7a:	6878      	ldr	r0, [r7, #4]
 8001d7c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d032      	beq.n	8001dec <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d8a:	f003 0301 	and.w	r3, r3, #1
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d022      	beq.n	8001dd8 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	2205      	movs	r2, #5
 8001d96:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	681a      	ldr	r2, [r3, #0]
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f022 0201 	bic.w	r2, r2, #1
 8001da8:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001daa:	68bb      	ldr	r3, [r7, #8]
 8001dac:	3301      	adds	r3, #1
 8001dae:	60bb      	str	r3, [r7, #8]
 8001db0:	697a      	ldr	r2, [r7, #20]
 8001db2:	429a      	cmp	r2, r3
 8001db4:	d307      	bcc.n	8001dc6 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f003 0301 	and.w	r3, r3, #1
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d1f2      	bne.n	8001daa <HAL_DMA_IRQHandler+0x2ca>
 8001dc4:	e000      	b.n	8001dc8 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8001dc6:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	2200      	movs	r2, #0
 8001dcc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	2201      	movs	r2, #1
 8001dd4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d005      	beq.n	8001dec <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001de4:	6878      	ldr	r0, [r7, #4]
 8001de6:	4798      	blx	r3
 8001de8:	e000      	b.n	8001dec <HAL_DMA_IRQHandler+0x30c>
        return;
 8001dea:	bf00      	nop
    }
  }
}
 8001dec:	3718      	adds	r7, #24
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bd80      	pop	{r7, pc}
 8001df2:	bf00      	nop

08001df4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001df4:	b480      	push	{r7}
 8001df6:	b085      	sub	sp, #20
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	b2db      	uxtb	r3, r3
 8001e02:	3b10      	subs	r3, #16
 8001e04:	4a14      	ldr	r2, [pc, #80]	; (8001e58 <DMA_CalcBaseAndBitshift+0x64>)
 8001e06:	fba2 2303 	umull	r2, r3, r2, r3
 8001e0a:	091b      	lsrs	r3, r3, #4
 8001e0c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001e0e:	4a13      	ldr	r2, [pc, #76]	; (8001e5c <DMA_CalcBaseAndBitshift+0x68>)
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	4413      	add	r3, r2
 8001e14:	781b      	ldrb	r3, [r3, #0]
 8001e16:	461a      	mov	r2, r3
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	2b03      	cmp	r3, #3
 8001e20:	d909      	bls.n	8001e36 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001e2a:	f023 0303 	bic.w	r3, r3, #3
 8001e2e:	1d1a      	adds	r2, r3, #4
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	659a      	str	r2, [r3, #88]	; 0x58
 8001e34:	e007      	b.n	8001e46 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001e3e:	f023 0303 	bic.w	r3, r3, #3
 8001e42:	687a      	ldr	r2, [r7, #4]
 8001e44:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	3714      	adds	r7, #20
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e54:	4770      	bx	lr
 8001e56:	bf00      	nop
 8001e58:	aaaaaaab 	.word	0xaaaaaaab
 8001e5c:	08004024 	.word	0x08004024

08001e60 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001e60:	b480      	push	{r7}
 8001e62:	b085      	sub	sp, #20
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001e68:	2300      	movs	r3, #0
 8001e6a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e70:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	699b      	ldr	r3, [r3, #24]
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d11f      	bne.n	8001eba <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001e7a:	68bb      	ldr	r3, [r7, #8]
 8001e7c:	2b03      	cmp	r3, #3
 8001e7e:	d855      	bhi.n	8001f2c <DMA_CheckFifoParam+0xcc>
 8001e80:	a201      	add	r2, pc, #4	; (adr r2, 8001e88 <DMA_CheckFifoParam+0x28>)
 8001e82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e86:	bf00      	nop
 8001e88:	08001e99 	.word	0x08001e99
 8001e8c:	08001eab 	.word	0x08001eab
 8001e90:	08001e99 	.word	0x08001e99
 8001e94:	08001f2d 	.word	0x08001f2d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e9c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d045      	beq.n	8001f30 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8001ea4:	2301      	movs	r3, #1
 8001ea6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001ea8:	e042      	b.n	8001f30 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001eae:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001eb2:	d13f      	bne.n	8001f34 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8001eb4:	2301      	movs	r3, #1
 8001eb6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001eb8:	e03c      	b.n	8001f34 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	699b      	ldr	r3, [r3, #24]
 8001ebe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001ec2:	d121      	bne.n	8001f08 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001ec4:	68bb      	ldr	r3, [r7, #8]
 8001ec6:	2b03      	cmp	r3, #3
 8001ec8:	d836      	bhi.n	8001f38 <DMA_CheckFifoParam+0xd8>
 8001eca:	a201      	add	r2, pc, #4	; (adr r2, 8001ed0 <DMA_CheckFifoParam+0x70>)
 8001ecc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ed0:	08001ee1 	.word	0x08001ee1
 8001ed4:	08001ee7 	.word	0x08001ee7
 8001ed8:	08001ee1 	.word	0x08001ee1
 8001edc:	08001ef9 	.word	0x08001ef9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001ee0:	2301      	movs	r3, #1
 8001ee2:	73fb      	strb	r3, [r7, #15]
      break;
 8001ee4:	e02f      	b.n	8001f46 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001eea:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d024      	beq.n	8001f3c <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8001ef2:	2301      	movs	r3, #1
 8001ef4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001ef6:	e021      	b.n	8001f3c <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001efc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001f00:	d11e      	bne.n	8001f40 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8001f02:	2301      	movs	r3, #1
 8001f04:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001f06:	e01b      	b.n	8001f40 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001f08:	68bb      	ldr	r3, [r7, #8]
 8001f0a:	2b02      	cmp	r3, #2
 8001f0c:	d902      	bls.n	8001f14 <DMA_CheckFifoParam+0xb4>
 8001f0e:	2b03      	cmp	r3, #3
 8001f10:	d003      	beq.n	8001f1a <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001f12:	e018      	b.n	8001f46 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8001f14:	2301      	movs	r3, #1
 8001f16:	73fb      	strb	r3, [r7, #15]
      break;
 8001f18:	e015      	b.n	8001f46 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f1e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d00e      	beq.n	8001f44 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8001f26:	2301      	movs	r3, #1
 8001f28:	73fb      	strb	r3, [r7, #15]
      break;
 8001f2a:	e00b      	b.n	8001f44 <DMA_CheckFifoParam+0xe4>
      break;
 8001f2c:	bf00      	nop
 8001f2e:	e00a      	b.n	8001f46 <DMA_CheckFifoParam+0xe6>
      break;
 8001f30:	bf00      	nop
 8001f32:	e008      	b.n	8001f46 <DMA_CheckFifoParam+0xe6>
      break;
 8001f34:	bf00      	nop
 8001f36:	e006      	b.n	8001f46 <DMA_CheckFifoParam+0xe6>
      break;
 8001f38:	bf00      	nop
 8001f3a:	e004      	b.n	8001f46 <DMA_CheckFifoParam+0xe6>
      break;
 8001f3c:	bf00      	nop
 8001f3e:	e002      	b.n	8001f46 <DMA_CheckFifoParam+0xe6>
      break;   
 8001f40:	bf00      	nop
 8001f42:	e000      	b.n	8001f46 <DMA_CheckFifoParam+0xe6>
      break;
 8001f44:	bf00      	nop
    }
  } 
  
  return status; 
 8001f46:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f48:	4618      	mov	r0, r3
 8001f4a:	3714      	adds	r7, #20
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f52:	4770      	bx	lr

08001f54 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f54:	b480      	push	{r7}
 8001f56:	b089      	sub	sp, #36	; 0x24
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
 8001f5c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001f5e:	2300      	movs	r3, #0
 8001f60:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001f62:	2300      	movs	r3, #0
 8001f64:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001f66:	2300      	movs	r3, #0
 8001f68:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	61fb      	str	r3, [r7, #28]
 8001f6e:	e159      	b.n	8002224 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001f70:	2201      	movs	r2, #1
 8001f72:	69fb      	ldr	r3, [r7, #28]
 8001f74:	fa02 f303 	lsl.w	r3, r2, r3
 8001f78:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f7a:	683b      	ldr	r3, [r7, #0]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	697a      	ldr	r2, [r7, #20]
 8001f80:	4013      	ands	r3, r2
 8001f82:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001f84:	693a      	ldr	r2, [r7, #16]
 8001f86:	697b      	ldr	r3, [r7, #20]
 8001f88:	429a      	cmp	r2, r3
 8001f8a:	f040 8148 	bne.w	800221e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	685b      	ldr	r3, [r3, #4]
 8001f92:	2b01      	cmp	r3, #1
 8001f94:	d00b      	beq.n	8001fae <HAL_GPIO_Init+0x5a>
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	685b      	ldr	r3, [r3, #4]
 8001f9a:	2b02      	cmp	r3, #2
 8001f9c:	d007      	beq.n	8001fae <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001f9e:	683b      	ldr	r3, [r7, #0]
 8001fa0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001fa2:	2b11      	cmp	r3, #17
 8001fa4:	d003      	beq.n	8001fae <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001fa6:	683b      	ldr	r3, [r7, #0]
 8001fa8:	685b      	ldr	r3, [r3, #4]
 8001faa:	2b12      	cmp	r3, #18
 8001fac:	d130      	bne.n	8002010 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	689b      	ldr	r3, [r3, #8]
 8001fb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001fb4:	69fb      	ldr	r3, [r7, #28]
 8001fb6:	005b      	lsls	r3, r3, #1
 8001fb8:	2203      	movs	r2, #3
 8001fba:	fa02 f303 	lsl.w	r3, r2, r3
 8001fbe:	43db      	mvns	r3, r3
 8001fc0:	69ba      	ldr	r2, [r7, #24]
 8001fc2:	4013      	ands	r3, r2
 8001fc4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001fc6:	683b      	ldr	r3, [r7, #0]
 8001fc8:	68da      	ldr	r2, [r3, #12]
 8001fca:	69fb      	ldr	r3, [r7, #28]
 8001fcc:	005b      	lsls	r3, r3, #1
 8001fce:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd2:	69ba      	ldr	r2, [r7, #24]
 8001fd4:	4313      	orrs	r3, r2
 8001fd6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	69ba      	ldr	r2, [r7, #24]
 8001fdc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	685b      	ldr	r3, [r3, #4]
 8001fe2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001fe4:	2201      	movs	r2, #1
 8001fe6:	69fb      	ldr	r3, [r7, #28]
 8001fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fec:	43db      	mvns	r3, r3
 8001fee:	69ba      	ldr	r2, [r7, #24]
 8001ff0:	4013      	ands	r3, r2
 8001ff2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	685b      	ldr	r3, [r3, #4]
 8001ff8:	091b      	lsrs	r3, r3, #4
 8001ffa:	f003 0201 	and.w	r2, r3, #1
 8001ffe:	69fb      	ldr	r3, [r7, #28]
 8002000:	fa02 f303 	lsl.w	r3, r2, r3
 8002004:	69ba      	ldr	r2, [r7, #24]
 8002006:	4313      	orrs	r3, r2
 8002008:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	69ba      	ldr	r2, [r7, #24]
 800200e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	68db      	ldr	r3, [r3, #12]
 8002014:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002016:	69fb      	ldr	r3, [r7, #28]
 8002018:	005b      	lsls	r3, r3, #1
 800201a:	2203      	movs	r2, #3
 800201c:	fa02 f303 	lsl.w	r3, r2, r3
 8002020:	43db      	mvns	r3, r3
 8002022:	69ba      	ldr	r2, [r7, #24]
 8002024:	4013      	ands	r3, r2
 8002026:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	689a      	ldr	r2, [r3, #8]
 800202c:	69fb      	ldr	r3, [r7, #28]
 800202e:	005b      	lsls	r3, r3, #1
 8002030:	fa02 f303 	lsl.w	r3, r2, r3
 8002034:	69ba      	ldr	r2, [r7, #24]
 8002036:	4313      	orrs	r3, r2
 8002038:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	69ba      	ldr	r2, [r7, #24]
 800203e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	685b      	ldr	r3, [r3, #4]
 8002044:	2b02      	cmp	r3, #2
 8002046:	d003      	beq.n	8002050 <HAL_GPIO_Init+0xfc>
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	685b      	ldr	r3, [r3, #4]
 800204c:	2b12      	cmp	r3, #18
 800204e:	d123      	bne.n	8002098 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002050:	69fb      	ldr	r3, [r7, #28]
 8002052:	08da      	lsrs	r2, r3, #3
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	3208      	adds	r2, #8
 8002058:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800205c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800205e:	69fb      	ldr	r3, [r7, #28]
 8002060:	f003 0307 	and.w	r3, r3, #7
 8002064:	009b      	lsls	r3, r3, #2
 8002066:	220f      	movs	r2, #15
 8002068:	fa02 f303 	lsl.w	r3, r2, r3
 800206c:	43db      	mvns	r3, r3
 800206e:	69ba      	ldr	r2, [r7, #24]
 8002070:	4013      	ands	r3, r2
 8002072:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	691a      	ldr	r2, [r3, #16]
 8002078:	69fb      	ldr	r3, [r7, #28]
 800207a:	f003 0307 	and.w	r3, r3, #7
 800207e:	009b      	lsls	r3, r3, #2
 8002080:	fa02 f303 	lsl.w	r3, r2, r3
 8002084:	69ba      	ldr	r2, [r7, #24]
 8002086:	4313      	orrs	r3, r2
 8002088:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800208a:	69fb      	ldr	r3, [r7, #28]
 800208c:	08da      	lsrs	r2, r3, #3
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	3208      	adds	r2, #8
 8002092:	69b9      	ldr	r1, [r7, #24]
 8002094:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800209e:	69fb      	ldr	r3, [r7, #28]
 80020a0:	005b      	lsls	r3, r3, #1
 80020a2:	2203      	movs	r2, #3
 80020a4:	fa02 f303 	lsl.w	r3, r2, r3
 80020a8:	43db      	mvns	r3, r3
 80020aa:	69ba      	ldr	r2, [r7, #24]
 80020ac:	4013      	ands	r3, r2
 80020ae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	685b      	ldr	r3, [r3, #4]
 80020b4:	f003 0203 	and.w	r2, r3, #3
 80020b8:	69fb      	ldr	r3, [r7, #28]
 80020ba:	005b      	lsls	r3, r3, #1
 80020bc:	fa02 f303 	lsl.w	r3, r2, r3
 80020c0:	69ba      	ldr	r2, [r7, #24]
 80020c2:	4313      	orrs	r3, r2
 80020c4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	69ba      	ldr	r2, [r7, #24]
 80020ca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	685b      	ldr	r3, [r3, #4]
 80020d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	f000 80a2 	beq.w	800221e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020da:	2300      	movs	r3, #0
 80020dc:	60fb      	str	r3, [r7, #12]
 80020de:	4b56      	ldr	r3, [pc, #344]	; (8002238 <HAL_GPIO_Init+0x2e4>)
 80020e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020e2:	4a55      	ldr	r2, [pc, #340]	; (8002238 <HAL_GPIO_Init+0x2e4>)
 80020e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80020e8:	6453      	str	r3, [r2, #68]	; 0x44
 80020ea:	4b53      	ldr	r3, [pc, #332]	; (8002238 <HAL_GPIO_Init+0x2e4>)
 80020ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020f2:	60fb      	str	r3, [r7, #12]
 80020f4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80020f6:	4a51      	ldr	r2, [pc, #324]	; (800223c <HAL_GPIO_Init+0x2e8>)
 80020f8:	69fb      	ldr	r3, [r7, #28]
 80020fa:	089b      	lsrs	r3, r3, #2
 80020fc:	3302      	adds	r3, #2
 80020fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002102:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002104:	69fb      	ldr	r3, [r7, #28]
 8002106:	f003 0303 	and.w	r3, r3, #3
 800210a:	009b      	lsls	r3, r3, #2
 800210c:	220f      	movs	r2, #15
 800210e:	fa02 f303 	lsl.w	r3, r2, r3
 8002112:	43db      	mvns	r3, r3
 8002114:	69ba      	ldr	r2, [r7, #24]
 8002116:	4013      	ands	r3, r2
 8002118:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	4a48      	ldr	r2, [pc, #288]	; (8002240 <HAL_GPIO_Init+0x2ec>)
 800211e:	4293      	cmp	r3, r2
 8002120:	d019      	beq.n	8002156 <HAL_GPIO_Init+0x202>
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	4a47      	ldr	r2, [pc, #284]	; (8002244 <HAL_GPIO_Init+0x2f0>)
 8002126:	4293      	cmp	r3, r2
 8002128:	d013      	beq.n	8002152 <HAL_GPIO_Init+0x1fe>
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	4a46      	ldr	r2, [pc, #280]	; (8002248 <HAL_GPIO_Init+0x2f4>)
 800212e:	4293      	cmp	r3, r2
 8002130:	d00d      	beq.n	800214e <HAL_GPIO_Init+0x1fa>
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	4a45      	ldr	r2, [pc, #276]	; (800224c <HAL_GPIO_Init+0x2f8>)
 8002136:	4293      	cmp	r3, r2
 8002138:	d007      	beq.n	800214a <HAL_GPIO_Init+0x1f6>
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	4a44      	ldr	r2, [pc, #272]	; (8002250 <HAL_GPIO_Init+0x2fc>)
 800213e:	4293      	cmp	r3, r2
 8002140:	d101      	bne.n	8002146 <HAL_GPIO_Init+0x1f2>
 8002142:	2304      	movs	r3, #4
 8002144:	e008      	b.n	8002158 <HAL_GPIO_Init+0x204>
 8002146:	2307      	movs	r3, #7
 8002148:	e006      	b.n	8002158 <HAL_GPIO_Init+0x204>
 800214a:	2303      	movs	r3, #3
 800214c:	e004      	b.n	8002158 <HAL_GPIO_Init+0x204>
 800214e:	2302      	movs	r3, #2
 8002150:	e002      	b.n	8002158 <HAL_GPIO_Init+0x204>
 8002152:	2301      	movs	r3, #1
 8002154:	e000      	b.n	8002158 <HAL_GPIO_Init+0x204>
 8002156:	2300      	movs	r3, #0
 8002158:	69fa      	ldr	r2, [r7, #28]
 800215a:	f002 0203 	and.w	r2, r2, #3
 800215e:	0092      	lsls	r2, r2, #2
 8002160:	4093      	lsls	r3, r2
 8002162:	69ba      	ldr	r2, [r7, #24]
 8002164:	4313      	orrs	r3, r2
 8002166:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002168:	4934      	ldr	r1, [pc, #208]	; (800223c <HAL_GPIO_Init+0x2e8>)
 800216a:	69fb      	ldr	r3, [r7, #28]
 800216c:	089b      	lsrs	r3, r3, #2
 800216e:	3302      	adds	r3, #2
 8002170:	69ba      	ldr	r2, [r7, #24]
 8002172:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002176:	4b37      	ldr	r3, [pc, #220]	; (8002254 <HAL_GPIO_Init+0x300>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800217c:	693b      	ldr	r3, [r7, #16]
 800217e:	43db      	mvns	r3, r3
 8002180:	69ba      	ldr	r2, [r7, #24]
 8002182:	4013      	ands	r3, r2
 8002184:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	685b      	ldr	r3, [r3, #4]
 800218a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800218e:	2b00      	cmp	r3, #0
 8002190:	d003      	beq.n	800219a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002192:	69ba      	ldr	r2, [r7, #24]
 8002194:	693b      	ldr	r3, [r7, #16]
 8002196:	4313      	orrs	r3, r2
 8002198:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800219a:	4a2e      	ldr	r2, [pc, #184]	; (8002254 <HAL_GPIO_Init+0x300>)
 800219c:	69bb      	ldr	r3, [r7, #24]
 800219e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80021a0:	4b2c      	ldr	r3, [pc, #176]	; (8002254 <HAL_GPIO_Init+0x300>)
 80021a2:	685b      	ldr	r3, [r3, #4]
 80021a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021a6:	693b      	ldr	r3, [r7, #16]
 80021a8:	43db      	mvns	r3, r3
 80021aa:	69ba      	ldr	r2, [r7, #24]
 80021ac:	4013      	ands	r3, r2
 80021ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	685b      	ldr	r3, [r3, #4]
 80021b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d003      	beq.n	80021c4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80021bc:	69ba      	ldr	r2, [r7, #24]
 80021be:	693b      	ldr	r3, [r7, #16]
 80021c0:	4313      	orrs	r3, r2
 80021c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80021c4:	4a23      	ldr	r2, [pc, #140]	; (8002254 <HAL_GPIO_Init+0x300>)
 80021c6:	69bb      	ldr	r3, [r7, #24]
 80021c8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80021ca:	4b22      	ldr	r3, [pc, #136]	; (8002254 <HAL_GPIO_Init+0x300>)
 80021cc:	689b      	ldr	r3, [r3, #8]
 80021ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021d0:	693b      	ldr	r3, [r7, #16]
 80021d2:	43db      	mvns	r3, r3
 80021d4:	69ba      	ldr	r2, [r7, #24]
 80021d6:	4013      	ands	r3, r2
 80021d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	685b      	ldr	r3, [r3, #4]
 80021de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d003      	beq.n	80021ee <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80021e6:	69ba      	ldr	r2, [r7, #24]
 80021e8:	693b      	ldr	r3, [r7, #16]
 80021ea:	4313      	orrs	r3, r2
 80021ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80021ee:	4a19      	ldr	r2, [pc, #100]	; (8002254 <HAL_GPIO_Init+0x300>)
 80021f0:	69bb      	ldr	r3, [r7, #24]
 80021f2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80021f4:	4b17      	ldr	r3, [pc, #92]	; (8002254 <HAL_GPIO_Init+0x300>)
 80021f6:	68db      	ldr	r3, [r3, #12]
 80021f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021fa:	693b      	ldr	r3, [r7, #16]
 80021fc:	43db      	mvns	r3, r3
 80021fe:	69ba      	ldr	r2, [r7, #24]
 8002200:	4013      	ands	r3, r2
 8002202:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	685b      	ldr	r3, [r3, #4]
 8002208:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800220c:	2b00      	cmp	r3, #0
 800220e:	d003      	beq.n	8002218 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002210:	69ba      	ldr	r2, [r7, #24]
 8002212:	693b      	ldr	r3, [r7, #16]
 8002214:	4313      	orrs	r3, r2
 8002216:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002218:	4a0e      	ldr	r2, [pc, #56]	; (8002254 <HAL_GPIO_Init+0x300>)
 800221a:	69bb      	ldr	r3, [r7, #24]
 800221c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800221e:	69fb      	ldr	r3, [r7, #28]
 8002220:	3301      	adds	r3, #1
 8002222:	61fb      	str	r3, [r7, #28]
 8002224:	69fb      	ldr	r3, [r7, #28]
 8002226:	2b0f      	cmp	r3, #15
 8002228:	f67f aea2 	bls.w	8001f70 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800222c:	bf00      	nop
 800222e:	3724      	adds	r7, #36	; 0x24
 8002230:	46bd      	mov	sp, r7
 8002232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002236:	4770      	bx	lr
 8002238:	40023800 	.word	0x40023800
 800223c:	40013800 	.word	0x40013800
 8002240:	40020000 	.word	0x40020000
 8002244:	40020400 	.word	0x40020400
 8002248:	40020800 	.word	0x40020800
 800224c:	40020c00 	.word	0x40020c00
 8002250:	40021000 	.word	0x40021000
 8002254:	40013c00 	.word	0x40013c00

08002258 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002258:	b480      	push	{r7}
 800225a:	b083      	sub	sp, #12
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
 8002260:	460b      	mov	r3, r1
 8002262:	807b      	strh	r3, [r7, #2]
 8002264:	4613      	mov	r3, r2
 8002266:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002268:	787b      	ldrb	r3, [r7, #1]
 800226a:	2b00      	cmp	r3, #0
 800226c:	d003      	beq.n	8002276 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800226e:	887a      	ldrh	r2, [r7, #2]
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002274:	e003      	b.n	800227e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002276:	887b      	ldrh	r3, [r7, #2]
 8002278:	041a      	lsls	r2, r3, #16
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	619a      	str	r2, [r3, #24]
}
 800227e:	bf00      	nop
 8002280:	370c      	adds	r7, #12
 8002282:	46bd      	mov	sp, r7
 8002284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002288:	4770      	bx	lr
	...

0800228c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b086      	sub	sp, #24
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	2b00      	cmp	r3, #0
 8002298:	d101      	bne.n	800229e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800229a:	2301      	movs	r3, #1
 800229c:	e25b      	b.n	8002756 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f003 0301 	and.w	r3, r3, #1
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d075      	beq.n	8002396 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80022aa:	4ba3      	ldr	r3, [pc, #652]	; (8002538 <HAL_RCC_OscConfig+0x2ac>)
 80022ac:	689b      	ldr	r3, [r3, #8]
 80022ae:	f003 030c 	and.w	r3, r3, #12
 80022b2:	2b04      	cmp	r3, #4
 80022b4:	d00c      	beq.n	80022d0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80022b6:	4ba0      	ldr	r3, [pc, #640]	; (8002538 <HAL_RCC_OscConfig+0x2ac>)
 80022b8:	689b      	ldr	r3, [r3, #8]
 80022ba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80022be:	2b08      	cmp	r3, #8
 80022c0:	d112      	bne.n	80022e8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80022c2:	4b9d      	ldr	r3, [pc, #628]	; (8002538 <HAL_RCC_OscConfig+0x2ac>)
 80022c4:	685b      	ldr	r3, [r3, #4]
 80022c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80022ca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80022ce:	d10b      	bne.n	80022e8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022d0:	4b99      	ldr	r3, [pc, #612]	; (8002538 <HAL_RCC_OscConfig+0x2ac>)
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d05b      	beq.n	8002394 <HAL_RCC_OscConfig+0x108>
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	685b      	ldr	r3, [r3, #4]
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d157      	bne.n	8002394 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80022e4:	2301      	movs	r3, #1
 80022e6:	e236      	b.n	8002756 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	685b      	ldr	r3, [r3, #4]
 80022ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022f0:	d106      	bne.n	8002300 <HAL_RCC_OscConfig+0x74>
 80022f2:	4b91      	ldr	r3, [pc, #580]	; (8002538 <HAL_RCC_OscConfig+0x2ac>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	4a90      	ldr	r2, [pc, #576]	; (8002538 <HAL_RCC_OscConfig+0x2ac>)
 80022f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022fc:	6013      	str	r3, [r2, #0]
 80022fe:	e01d      	b.n	800233c <HAL_RCC_OscConfig+0xb0>
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	685b      	ldr	r3, [r3, #4]
 8002304:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002308:	d10c      	bne.n	8002324 <HAL_RCC_OscConfig+0x98>
 800230a:	4b8b      	ldr	r3, [pc, #556]	; (8002538 <HAL_RCC_OscConfig+0x2ac>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	4a8a      	ldr	r2, [pc, #552]	; (8002538 <HAL_RCC_OscConfig+0x2ac>)
 8002310:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002314:	6013      	str	r3, [r2, #0]
 8002316:	4b88      	ldr	r3, [pc, #544]	; (8002538 <HAL_RCC_OscConfig+0x2ac>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	4a87      	ldr	r2, [pc, #540]	; (8002538 <HAL_RCC_OscConfig+0x2ac>)
 800231c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002320:	6013      	str	r3, [r2, #0]
 8002322:	e00b      	b.n	800233c <HAL_RCC_OscConfig+0xb0>
 8002324:	4b84      	ldr	r3, [pc, #528]	; (8002538 <HAL_RCC_OscConfig+0x2ac>)
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	4a83      	ldr	r2, [pc, #524]	; (8002538 <HAL_RCC_OscConfig+0x2ac>)
 800232a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800232e:	6013      	str	r3, [r2, #0]
 8002330:	4b81      	ldr	r3, [pc, #516]	; (8002538 <HAL_RCC_OscConfig+0x2ac>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	4a80      	ldr	r2, [pc, #512]	; (8002538 <HAL_RCC_OscConfig+0x2ac>)
 8002336:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800233a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	685b      	ldr	r3, [r3, #4]
 8002340:	2b00      	cmp	r3, #0
 8002342:	d013      	beq.n	800236c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002344:	f7fe fe04 	bl	8000f50 <HAL_GetTick>
 8002348:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800234a:	e008      	b.n	800235e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800234c:	f7fe fe00 	bl	8000f50 <HAL_GetTick>
 8002350:	4602      	mov	r2, r0
 8002352:	693b      	ldr	r3, [r7, #16]
 8002354:	1ad3      	subs	r3, r2, r3
 8002356:	2b64      	cmp	r3, #100	; 0x64
 8002358:	d901      	bls.n	800235e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800235a:	2303      	movs	r3, #3
 800235c:	e1fb      	b.n	8002756 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800235e:	4b76      	ldr	r3, [pc, #472]	; (8002538 <HAL_RCC_OscConfig+0x2ac>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002366:	2b00      	cmp	r3, #0
 8002368:	d0f0      	beq.n	800234c <HAL_RCC_OscConfig+0xc0>
 800236a:	e014      	b.n	8002396 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800236c:	f7fe fdf0 	bl	8000f50 <HAL_GetTick>
 8002370:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002372:	e008      	b.n	8002386 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002374:	f7fe fdec 	bl	8000f50 <HAL_GetTick>
 8002378:	4602      	mov	r2, r0
 800237a:	693b      	ldr	r3, [r7, #16]
 800237c:	1ad3      	subs	r3, r2, r3
 800237e:	2b64      	cmp	r3, #100	; 0x64
 8002380:	d901      	bls.n	8002386 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002382:	2303      	movs	r3, #3
 8002384:	e1e7      	b.n	8002756 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002386:	4b6c      	ldr	r3, [pc, #432]	; (8002538 <HAL_RCC_OscConfig+0x2ac>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800238e:	2b00      	cmp	r3, #0
 8002390:	d1f0      	bne.n	8002374 <HAL_RCC_OscConfig+0xe8>
 8002392:	e000      	b.n	8002396 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002394:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f003 0302 	and.w	r3, r3, #2
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d063      	beq.n	800246a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80023a2:	4b65      	ldr	r3, [pc, #404]	; (8002538 <HAL_RCC_OscConfig+0x2ac>)
 80023a4:	689b      	ldr	r3, [r3, #8]
 80023a6:	f003 030c 	and.w	r3, r3, #12
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d00b      	beq.n	80023c6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80023ae:	4b62      	ldr	r3, [pc, #392]	; (8002538 <HAL_RCC_OscConfig+0x2ac>)
 80023b0:	689b      	ldr	r3, [r3, #8]
 80023b2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80023b6:	2b08      	cmp	r3, #8
 80023b8:	d11c      	bne.n	80023f4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80023ba:	4b5f      	ldr	r3, [pc, #380]	; (8002538 <HAL_RCC_OscConfig+0x2ac>)
 80023bc:	685b      	ldr	r3, [r3, #4]
 80023be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d116      	bne.n	80023f4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023c6:	4b5c      	ldr	r3, [pc, #368]	; (8002538 <HAL_RCC_OscConfig+0x2ac>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f003 0302 	and.w	r3, r3, #2
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d005      	beq.n	80023de <HAL_RCC_OscConfig+0x152>
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	68db      	ldr	r3, [r3, #12]
 80023d6:	2b01      	cmp	r3, #1
 80023d8:	d001      	beq.n	80023de <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80023da:	2301      	movs	r3, #1
 80023dc:	e1bb      	b.n	8002756 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023de:	4b56      	ldr	r3, [pc, #344]	; (8002538 <HAL_RCC_OscConfig+0x2ac>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	691b      	ldr	r3, [r3, #16]
 80023ea:	00db      	lsls	r3, r3, #3
 80023ec:	4952      	ldr	r1, [pc, #328]	; (8002538 <HAL_RCC_OscConfig+0x2ac>)
 80023ee:	4313      	orrs	r3, r2
 80023f0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023f2:	e03a      	b.n	800246a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	68db      	ldr	r3, [r3, #12]
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d020      	beq.n	800243e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80023fc:	4b4f      	ldr	r3, [pc, #316]	; (800253c <HAL_RCC_OscConfig+0x2b0>)
 80023fe:	2201      	movs	r2, #1
 8002400:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002402:	f7fe fda5 	bl	8000f50 <HAL_GetTick>
 8002406:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002408:	e008      	b.n	800241c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800240a:	f7fe fda1 	bl	8000f50 <HAL_GetTick>
 800240e:	4602      	mov	r2, r0
 8002410:	693b      	ldr	r3, [r7, #16]
 8002412:	1ad3      	subs	r3, r2, r3
 8002414:	2b02      	cmp	r3, #2
 8002416:	d901      	bls.n	800241c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002418:	2303      	movs	r3, #3
 800241a:	e19c      	b.n	8002756 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800241c:	4b46      	ldr	r3, [pc, #280]	; (8002538 <HAL_RCC_OscConfig+0x2ac>)
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f003 0302 	and.w	r3, r3, #2
 8002424:	2b00      	cmp	r3, #0
 8002426:	d0f0      	beq.n	800240a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002428:	4b43      	ldr	r3, [pc, #268]	; (8002538 <HAL_RCC_OscConfig+0x2ac>)
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	691b      	ldr	r3, [r3, #16]
 8002434:	00db      	lsls	r3, r3, #3
 8002436:	4940      	ldr	r1, [pc, #256]	; (8002538 <HAL_RCC_OscConfig+0x2ac>)
 8002438:	4313      	orrs	r3, r2
 800243a:	600b      	str	r3, [r1, #0]
 800243c:	e015      	b.n	800246a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800243e:	4b3f      	ldr	r3, [pc, #252]	; (800253c <HAL_RCC_OscConfig+0x2b0>)
 8002440:	2200      	movs	r2, #0
 8002442:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002444:	f7fe fd84 	bl	8000f50 <HAL_GetTick>
 8002448:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800244a:	e008      	b.n	800245e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800244c:	f7fe fd80 	bl	8000f50 <HAL_GetTick>
 8002450:	4602      	mov	r2, r0
 8002452:	693b      	ldr	r3, [r7, #16]
 8002454:	1ad3      	subs	r3, r2, r3
 8002456:	2b02      	cmp	r3, #2
 8002458:	d901      	bls.n	800245e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800245a:	2303      	movs	r3, #3
 800245c:	e17b      	b.n	8002756 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800245e:	4b36      	ldr	r3, [pc, #216]	; (8002538 <HAL_RCC_OscConfig+0x2ac>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f003 0302 	and.w	r3, r3, #2
 8002466:	2b00      	cmp	r3, #0
 8002468:	d1f0      	bne.n	800244c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f003 0308 	and.w	r3, r3, #8
 8002472:	2b00      	cmp	r3, #0
 8002474:	d030      	beq.n	80024d8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	695b      	ldr	r3, [r3, #20]
 800247a:	2b00      	cmp	r3, #0
 800247c:	d016      	beq.n	80024ac <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800247e:	4b30      	ldr	r3, [pc, #192]	; (8002540 <HAL_RCC_OscConfig+0x2b4>)
 8002480:	2201      	movs	r2, #1
 8002482:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002484:	f7fe fd64 	bl	8000f50 <HAL_GetTick>
 8002488:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800248a:	e008      	b.n	800249e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800248c:	f7fe fd60 	bl	8000f50 <HAL_GetTick>
 8002490:	4602      	mov	r2, r0
 8002492:	693b      	ldr	r3, [r7, #16]
 8002494:	1ad3      	subs	r3, r2, r3
 8002496:	2b02      	cmp	r3, #2
 8002498:	d901      	bls.n	800249e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800249a:	2303      	movs	r3, #3
 800249c:	e15b      	b.n	8002756 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800249e:	4b26      	ldr	r3, [pc, #152]	; (8002538 <HAL_RCC_OscConfig+0x2ac>)
 80024a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80024a2:	f003 0302 	and.w	r3, r3, #2
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d0f0      	beq.n	800248c <HAL_RCC_OscConfig+0x200>
 80024aa:	e015      	b.n	80024d8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80024ac:	4b24      	ldr	r3, [pc, #144]	; (8002540 <HAL_RCC_OscConfig+0x2b4>)
 80024ae:	2200      	movs	r2, #0
 80024b0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024b2:	f7fe fd4d 	bl	8000f50 <HAL_GetTick>
 80024b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024b8:	e008      	b.n	80024cc <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80024ba:	f7fe fd49 	bl	8000f50 <HAL_GetTick>
 80024be:	4602      	mov	r2, r0
 80024c0:	693b      	ldr	r3, [r7, #16]
 80024c2:	1ad3      	subs	r3, r2, r3
 80024c4:	2b02      	cmp	r3, #2
 80024c6:	d901      	bls.n	80024cc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80024c8:	2303      	movs	r3, #3
 80024ca:	e144      	b.n	8002756 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024cc:	4b1a      	ldr	r3, [pc, #104]	; (8002538 <HAL_RCC_OscConfig+0x2ac>)
 80024ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80024d0:	f003 0302 	and.w	r3, r3, #2
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d1f0      	bne.n	80024ba <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f003 0304 	and.w	r3, r3, #4
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	f000 80a0 	beq.w	8002626 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80024e6:	2300      	movs	r3, #0
 80024e8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80024ea:	4b13      	ldr	r3, [pc, #76]	; (8002538 <HAL_RCC_OscConfig+0x2ac>)
 80024ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d10f      	bne.n	8002516 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80024f6:	2300      	movs	r3, #0
 80024f8:	60bb      	str	r3, [r7, #8]
 80024fa:	4b0f      	ldr	r3, [pc, #60]	; (8002538 <HAL_RCC_OscConfig+0x2ac>)
 80024fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024fe:	4a0e      	ldr	r2, [pc, #56]	; (8002538 <HAL_RCC_OscConfig+0x2ac>)
 8002500:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002504:	6413      	str	r3, [r2, #64]	; 0x40
 8002506:	4b0c      	ldr	r3, [pc, #48]	; (8002538 <HAL_RCC_OscConfig+0x2ac>)
 8002508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800250a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800250e:	60bb      	str	r3, [r7, #8]
 8002510:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002512:	2301      	movs	r3, #1
 8002514:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002516:	4b0b      	ldr	r3, [pc, #44]	; (8002544 <HAL_RCC_OscConfig+0x2b8>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800251e:	2b00      	cmp	r3, #0
 8002520:	d121      	bne.n	8002566 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002522:	4b08      	ldr	r3, [pc, #32]	; (8002544 <HAL_RCC_OscConfig+0x2b8>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	4a07      	ldr	r2, [pc, #28]	; (8002544 <HAL_RCC_OscConfig+0x2b8>)
 8002528:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800252c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800252e:	f7fe fd0f 	bl	8000f50 <HAL_GetTick>
 8002532:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002534:	e011      	b.n	800255a <HAL_RCC_OscConfig+0x2ce>
 8002536:	bf00      	nop
 8002538:	40023800 	.word	0x40023800
 800253c:	42470000 	.word	0x42470000
 8002540:	42470e80 	.word	0x42470e80
 8002544:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002548:	f7fe fd02 	bl	8000f50 <HAL_GetTick>
 800254c:	4602      	mov	r2, r0
 800254e:	693b      	ldr	r3, [r7, #16]
 8002550:	1ad3      	subs	r3, r2, r3
 8002552:	2b02      	cmp	r3, #2
 8002554:	d901      	bls.n	800255a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002556:	2303      	movs	r3, #3
 8002558:	e0fd      	b.n	8002756 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800255a:	4b81      	ldr	r3, [pc, #516]	; (8002760 <HAL_RCC_OscConfig+0x4d4>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002562:	2b00      	cmp	r3, #0
 8002564:	d0f0      	beq.n	8002548 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	689b      	ldr	r3, [r3, #8]
 800256a:	2b01      	cmp	r3, #1
 800256c:	d106      	bne.n	800257c <HAL_RCC_OscConfig+0x2f0>
 800256e:	4b7d      	ldr	r3, [pc, #500]	; (8002764 <HAL_RCC_OscConfig+0x4d8>)
 8002570:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002572:	4a7c      	ldr	r2, [pc, #496]	; (8002764 <HAL_RCC_OscConfig+0x4d8>)
 8002574:	f043 0301 	orr.w	r3, r3, #1
 8002578:	6713      	str	r3, [r2, #112]	; 0x70
 800257a:	e01c      	b.n	80025b6 <HAL_RCC_OscConfig+0x32a>
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	689b      	ldr	r3, [r3, #8]
 8002580:	2b05      	cmp	r3, #5
 8002582:	d10c      	bne.n	800259e <HAL_RCC_OscConfig+0x312>
 8002584:	4b77      	ldr	r3, [pc, #476]	; (8002764 <HAL_RCC_OscConfig+0x4d8>)
 8002586:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002588:	4a76      	ldr	r2, [pc, #472]	; (8002764 <HAL_RCC_OscConfig+0x4d8>)
 800258a:	f043 0304 	orr.w	r3, r3, #4
 800258e:	6713      	str	r3, [r2, #112]	; 0x70
 8002590:	4b74      	ldr	r3, [pc, #464]	; (8002764 <HAL_RCC_OscConfig+0x4d8>)
 8002592:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002594:	4a73      	ldr	r2, [pc, #460]	; (8002764 <HAL_RCC_OscConfig+0x4d8>)
 8002596:	f043 0301 	orr.w	r3, r3, #1
 800259a:	6713      	str	r3, [r2, #112]	; 0x70
 800259c:	e00b      	b.n	80025b6 <HAL_RCC_OscConfig+0x32a>
 800259e:	4b71      	ldr	r3, [pc, #452]	; (8002764 <HAL_RCC_OscConfig+0x4d8>)
 80025a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025a2:	4a70      	ldr	r2, [pc, #448]	; (8002764 <HAL_RCC_OscConfig+0x4d8>)
 80025a4:	f023 0301 	bic.w	r3, r3, #1
 80025a8:	6713      	str	r3, [r2, #112]	; 0x70
 80025aa:	4b6e      	ldr	r3, [pc, #440]	; (8002764 <HAL_RCC_OscConfig+0x4d8>)
 80025ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025ae:	4a6d      	ldr	r2, [pc, #436]	; (8002764 <HAL_RCC_OscConfig+0x4d8>)
 80025b0:	f023 0304 	bic.w	r3, r3, #4
 80025b4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	689b      	ldr	r3, [r3, #8]
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d015      	beq.n	80025ea <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025be:	f7fe fcc7 	bl	8000f50 <HAL_GetTick>
 80025c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025c4:	e00a      	b.n	80025dc <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80025c6:	f7fe fcc3 	bl	8000f50 <HAL_GetTick>
 80025ca:	4602      	mov	r2, r0
 80025cc:	693b      	ldr	r3, [r7, #16]
 80025ce:	1ad3      	subs	r3, r2, r3
 80025d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80025d4:	4293      	cmp	r3, r2
 80025d6:	d901      	bls.n	80025dc <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80025d8:	2303      	movs	r3, #3
 80025da:	e0bc      	b.n	8002756 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025dc:	4b61      	ldr	r3, [pc, #388]	; (8002764 <HAL_RCC_OscConfig+0x4d8>)
 80025de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025e0:	f003 0302 	and.w	r3, r3, #2
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d0ee      	beq.n	80025c6 <HAL_RCC_OscConfig+0x33a>
 80025e8:	e014      	b.n	8002614 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025ea:	f7fe fcb1 	bl	8000f50 <HAL_GetTick>
 80025ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025f0:	e00a      	b.n	8002608 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80025f2:	f7fe fcad 	bl	8000f50 <HAL_GetTick>
 80025f6:	4602      	mov	r2, r0
 80025f8:	693b      	ldr	r3, [r7, #16]
 80025fa:	1ad3      	subs	r3, r2, r3
 80025fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002600:	4293      	cmp	r3, r2
 8002602:	d901      	bls.n	8002608 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002604:	2303      	movs	r3, #3
 8002606:	e0a6      	b.n	8002756 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002608:	4b56      	ldr	r3, [pc, #344]	; (8002764 <HAL_RCC_OscConfig+0x4d8>)
 800260a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800260c:	f003 0302 	and.w	r3, r3, #2
 8002610:	2b00      	cmp	r3, #0
 8002612:	d1ee      	bne.n	80025f2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002614:	7dfb      	ldrb	r3, [r7, #23]
 8002616:	2b01      	cmp	r3, #1
 8002618:	d105      	bne.n	8002626 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800261a:	4b52      	ldr	r3, [pc, #328]	; (8002764 <HAL_RCC_OscConfig+0x4d8>)
 800261c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800261e:	4a51      	ldr	r2, [pc, #324]	; (8002764 <HAL_RCC_OscConfig+0x4d8>)
 8002620:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002624:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	699b      	ldr	r3, [r3, #24]
 800262a:	2b00      	cmp	r3, #0
 800262c:	f000 8092 	beq.w	8002754 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002630:	4b4c      	ldr	r3, [pc, #304]	; (8002764 <HAL_RCC_OscConfig+0x4d8>)
 8002632:	689b      	ldr	r3, [r3, #8]
 8002634:	f003 030c 	and.w	r3, r3, #12
 8002638:	2b08      	cmp	r3, #8
 800263a:	d05c      	beq.n	80026f6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	699b      	ldr	r3, [r3, #24]
 8002640:	2b02      	cmp	r3, #2
 8002642:	d141      	bne.n	80026c8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002644:	4b48      	ldr	r3, [pc, #288]	; (8002768 <HAL_RCC_OscConfig+0x4dc>)
 8002646:	2200      	movs	r2, #0
 8002648:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800264a:	f7fe fc81 	bl	8000f50 <HAL_GetTick>
 800264e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002650:	e008      	b.n	8002664 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002652:	f7fe fc7d 	bl	8000f50 <HAL_GetTick>
 8002656:	4602      	mov	r2, r0
 8002658:	693b      	ldr	r3, [r7, #16]
 800265a:	1ad3      	subs	r3, r2, r3
 800265c:	2b02      	cmp	r3, #2
 800265e:	d901      	bls.n	8002664 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002660:	2303      	movs	r3, #3
 8002662:	e078      	b.n	8002756 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002664:	4b3f      	ldr	r3, [pc, #252]	; (8002764 <HAL_RCC_OscConfig+0x4d8>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800266c:	2b00      	cmp	r3, #0
 800266e:	d1f0      	bne.n	8002652 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	69da      	ldr	r2, [r3, #28]
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	6a1b      	ldr	r3, [r3, #32]
 8002678:	431a      	orrs	r2, r3
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800267e:	019b      	lsls	r3, r3, #6
 8002680:	431a      	orrs	r2, r3
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002686:	085b      	lsrs	r3, r3, #1
 8002688:	3b01      	subs	r3, #1
 800268a:	041b      	lsls	r3, r3, #16
 800268c:	431a      	orrs	r2, r3
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002692:	061b      	lsls	r3, r3, #24
 8002694:	4933      	ldr	r1, [pc, #204]	; (8002764 <HAL_RCC_OscConfig+0x4d8>)
 8002696:	4313      	orrs	r3, r2
 8002698:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800269a:	4b33      	ldr	r3, [pc, #204]	; (8002768 <HAL_RCC_OscConfig+0x4dc>)
 800269c:	2201      	movs	r2, #1
 800269e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026a0:	f7fe fc56 	bl	8000f50 <HAL_GetTick>
 80026a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026a6:	e008      	b.n	80026ba <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026a8:	f7fe fc52 	bl	8000f50 <HAL_GetTick>
 80026ac:	4602      	mov	r2, r0
 80026ae:	693b      	ldr	r3, [r7, #16]
 80026b0:	1ad3      	subs	r3, r2, r3
 80026b2:	2b02      	cmp	r3, #2
 80026b4:	d901      	bls.n	80026ba <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80026b6:	2303      	movs	r3, #3
 80026b8:	e04d      	b.n	8002756 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026ba:	4b2a      	ldr	r3, [pc, #168]	; (8002764 <HAL_RCC_OscConfig+0x4d8>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d0f0      	beq.n	80026a8 <HAL_RCC_OscConfig+0x41c>
 80026c6:	e045      	b.n	8002754 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026c8:	4b27      	ldr	r3, [pc, #156]	; (8002768 <HAL_RCC_OscConfig+0x4dc>)
 80026ca:	2200      	movs	r2, #0
 80026cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026ce:	f7fe fc3f 	bl	8000f50 <HAL_GetTick>
 80026d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026d4:	e008      	b.n	80026e8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026d6:	f7fe fc3b 	bl	8000f50 <HAL_GetTick>
 80026da:	4602      	mov	r2, r0
 80026dc:	693b      	ldr	r3, [r7, #16]
 80026de:	1ad3      	subs	r3, r2, r3
 80026e0:	2b02      	cmp	r3, #2
 80026e2:	d901      	bls.n	80026e8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80026e4:	2303      	movs	r3, #3
 80026e6:	e036      	b.n	8002756 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026e8:	4b1e      	ldr	r3, [pc, #120]	; (8002764 <HAL_RCC_OscConfig+0x4d8>)
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d1f0      	bne.n	80026d6 <HAL_RCC_OscConfig+0x44a>
 80026f4:	e02e      	b.n	8002754 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	699b      	ldr	r3, [r3, #24]
 80026fa:	2b01      	cmp	r3, #1
 80026fc:	d101      	bne.n	8002702 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80026fe:	2301      	movs	r3, #1
 8002700:	e029      	b.n	8002756 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002702:	4b18      	ldr	r3, [pc, #96]	; (8002764 <HAL_RCC_OscConfig+0x4d8>)
 8002704:	685b      	ldr	r3, [r3, #4]
 8002706:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	69db      	ldr	r3, [r3, #28]
 8002712:	429a      	cmp	r2, r3
 8002714:	d11c      	bne.n	8002750 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002720:	429a      	cmp	r2, r3
 8002722:	d115      	bne.n	8002750 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002724:	68fa      	ldr	r2, [r7, #12]
 8002726:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800272a:	4013      	ands	r3, r2
 800272c:	687a      	ldr	r2, [r7, #4]
 800272e:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002730:	4293      	cmp	r3, r2
 8002732:	d10d      	bne.n	8002750 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800273e:	429a      	cmp	r2, r3
 8002740:	d106      	bne.n	8002750 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800274c:	429a      	cmp	r2, r3
 800274e:	d001      	beq.n	8002754 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8002750:	2301      	movs	r3, #1
 8002752:	e000      	b.n	8002756 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8002754:	2300      	movs	r3, #0
}
 8002756:	4618      	mov	r0, r3
 8002758:	3718      	adds	r7, #24
 800275a:	46bd      	mov	sp, r7
 800275c:	bd80      	pop	{r7, pc}
 800275e:	bf00      	nop
 8002760:	40007000 	.word	0x40007000
 8002764:	40023800 	.word	0x40023800
 8002768:	42470060 	.word	0x42470060

0800276c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	b084      	sub	sp, #16
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
 8002774:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	2b00      	cmp	r3, #0
 800277a:	d101      	bne.n	8002780 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800277c:	2301      	movs	r3, #1
 800277e:	e0cc      	b.n	800291a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002780:	4b68      	ldr	r3, [pc, #416]	; (8002924 <HAL_RCC_ClockConfig+0x1b8>)
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f003 030f 	and.w	r3, r3, #15
 8002788:	683a      	ldr	r2, [r7, #0]
 800278a:	429a      	cmp	r2, r3
 800278c:	d90c      	bls.n	80027a8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800278e:	4b65      	ldr	r3, [pc, #404]	; (8002924 <HAL_RCC_ClockConfig+0x1b8>)
 8002790:	683a      	ldr	r2, [r7, #0]
 8002792:	b2d2      	uxtb	r2, r2
 8002794:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002796:	4b63      	ldr	r3, [pc, #396]	; (8002924 <HAL_RCC_ClockConfig+0x1b8>)
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f003 030f 	and.w	r3, r3, #15
 800279e:	683a      	ldr	r2, [r7, #0]
 80027a0:	429a      	cmp	r2, r3
 80027a2:	d001      	beq.n	80027a8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80027a4:	2301      	movs	r3, #1
 80027a6:	e0b8      	b.n	800291a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f003 0302 	and.w	r3, r3, #2
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d020      	beq.n	80027f6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f003 0304 	and.w	r3, r3, #4
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d005      	beq.n	80027cc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80027c0:	4b59      	ldr	r3, [pc, #356]	; (8002928 <HAL_RCC_ClockConfig+0x1bc>)
 80027c2:	689b      	ldr	r3, [r3, #8]
 80027c4:	4a58      	ldr	r2, [pc, #352]	; (8002928 <HAL_RCC_ClockConfig+0x1bc>)
 80027c6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80027ca:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f003 0308 	and.w	r3, r3, #8
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d005      	beq.n	80027e4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80027d8:	4b53      	ldr	r3, [pc, #332]	; (8002928 <HAL_RCC_ClockConfig+0x1bc>)
 80027da:	689b      	ldr	r3, [r3, #8]
 80027dc:	4a52      	ldr	r2, [pc, #328]	; (8002928 <HAL_RCC_ClockConfig+0x1bc>)
 80027de:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80027e2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80027e4:	4b50      	ldr	r3, [pc, #320]	; (8002928 <HAL_RCC_ClockConfig+0x1bc>)
 80027e6:	689b      	ldr	r3, [r3, #8]
 80027e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	689b      	ldr	r3, [r3, #8]
 80027f0:	494d      	ldr	r1, [pc, #308]	; (8002928 <HAL_RCC_ClockConfig+0x1bc>)
 80027f2:	4313      	orrs	r3, r2
 80027f4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f003 0301 	and.w	r3, r3, #1
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d044      	beq.n	800288c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	685b      	ldr	r3, [r3, #4]
 8002806:	2b01      	cmp	r3, #1
 8002808:	d107      	bne.n	800281a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800280a:	4b47      	ldr	r3, [pc, #284]	; (8002928 <HAL_RCC_ClockConfig+0x1bc>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002812:	2b00      	cmp	r3, #0
 8002814:	d119      	bne.n	800284a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002816:	2301      	movs	r3, #1
 8002818:	e07f      	b.n	800291a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	685b      	ldr	r3, [r3, #4]
 800281e:	2b02      	cmp	r3, #2
 8002820:	d003      	beq.n	800282a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002826:	2b03      	cmp	r3, #3
 8002828:	d107      	bne.n	800283a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800282a:	4b3f      	ldr	r3, [pc, #252]	; (8002928 <HAL_RCC_ClockConfig+0x1bc>)
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002832:	2b00      	cmp	r3, #0
 8002834:	d109      	bne.n	800284a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002836:	2301      	movs	r3, #1
 8002838:	e06f      	b.n	800291a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800283a:	4b3b      	ldr	r3, [pc, #236]	; (8002928 <HAL_RCC_ClockConfig+0x1bc>)
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f003 0302 	and.w	r3, r3, #2
 8002842:	2b00      	cmp	r3, #0
 8002844:	d101      	bne.n	800284a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002846:	2301      	movs	r3, #1
 8002848:	e067      	b.n	800291a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800284a:	4b37      	ldr	r3, [pc, #220]	; (8002928 <HAL_RCC_ClockConfig+0x1bc>)
 800284c:	689b      	ldr	r3, [r3, #8]
 800284e:	f023 0203 	bic.w	r2, r3, #3
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	685b      	ldr	r3, [r3, #4]
 8002856:	4934      	ldr	r1, [pc, #208]	; (8002928 <HAL_RCC_ClockConfig+0x1bc>)
 8002858:	4313      	orrs	r3, r2
 800285a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800285c:	f7fe fb78 	bl	8000f50 <HAL_GetTick>
 8002860:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002862:	e00a      	b.n	800287a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002864:	f7fe fb74 	bl	8000f50 <HAL_GetTick>
 8002868:	4602      	mov	r2, r0
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	1ad3      	subs	r3, r2, r3
 800286e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002872:	4293      	cmp	r3, r2
 8002874:	d901      	bls.n	800287a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002876:	2303      	movs	r3, #3
 8002878:	e04f      	b.n	800291a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800287a:	4b2b      	ldr	r3, [pc, #172]	; (8002928 <HAL_RCC_ClockConfig+0x1bc>)
 800287c:	689b      	ldr	r3, [r3, #8]
 800287e:	f003 020c 	and.w	r2, r3, #12
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	685b      	ldr	r3, [r3, #4]
 8002886:	009b      	lsls	r3, r3, #2
 8002888:	429a      	cmp	r2, r3
 800288a:	d1eb      	bne.n	8002864 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800288c:	4b25      	ldr	r3, [pc, #148]	; (8002924 <HAL_RCC_ClockConfig+0x1b8>)
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f003 030f 	and.w	r3, r3, #15
 8002894:	683a      	ldr	r2, [r7, #0]
 8002896:	429a      	cmp	r2, r3
 8002898:	d20c      	bcs.n	80028b4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800289a:	4b22      	ldr	r3, [pc, #136]	; (8002924 <HAL_RCC_ClockConfig+0x1b8>)
 800289c:	683a      	ldr	r2, [r7, #0]
 800289e:	b2d2      	uxtb	r2, r2
 80028a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80028a2:	4b20      	ldr	r3, [pc, #128]	; (8002924 <HAL_RCC_ClockConfig+0x1b8>)
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f003 030f 	and.w	r3, r3, #15
 80028aa:	683a      	ldr	r2, [r7, #0]
 80028ac:	429a      	cmp	r2, r3
 80028ae:	d001      	beq.n	80028b4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80028b0:	2301      	movs	r3, #1
 80028b2:	e032      	b.n	800291a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f003 0304 	and.w	r3, r3, #4
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d008      	beq.n	80028d2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80028c0:	4b19      	ldr	r3, [pc, #100]	; (8002928 <HAL_RCC_ClockConfig+0x1bc>)
 80028c2:	689b      	ldr	r3, [r3, #8]
 80028c4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	68db      	ldr	r3, [r3, #12]
 80028cc:	4916      	ldr	r1, [pc, #88]	; (8002928 <HAL_RCC_ClockConfig+0x1bc>)
 80028ce:	4313      	orrs	r3, r2
 80028d0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f003 0308 	and.w	r3, r3, #8
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d009      	beq.n	80028f2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80028de:	4b12      	ldr	r3, [pc, #72]	; (8002928 <HAL_RCC_ClockConfig+0x1bc>)
 80028e0:	689b      	ldr	r3, [r3, #8]
 80028e2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	691b      	ldr	r3, [r3, #16]
 80028ea:	00db      	lsls	r3, r3, #3
 80028ec:	490e      	ldr	r1, [pc, #56]	; (8002928 <HAL_RCC_ClockConfig+0x1bc>)
 80028ee:	4313      	orrs	r3, r2
 80028f0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80028f2:	f000 f821 	bl	8002938 <HAL_RCC_GetSysClockFreq>
 80028f6:	4601      	mov	r1, r0
 80028f8:	4b0b      	ldr	r3, [pc, #44]	; (8002928 <HAL_RCC_ClockConfig+0x1bc>)
 80028fa:	689b      	ldr	r3, [r3, #8]
 80028fc:	091b      	lsrs	r3, r3, #4
 80028fe:	f003 030f 	and.w	r3, r3, #15
 8002902:	4a0a      	ldr	r2, [pc, #40]	; (800292c <HAL_RCC_ClockConfig+0x1c0>)
 8002904:	5cd3      	ldrb	r3, [r2, r3]
 8002906:	fa21 f303 	lsr.w	r3, r1, r3
 800290a:	4a09      	ldr	r2, [pc, #36]	; (8002930 <HAL_RCC_ClockConfig+0x1c4>)
 800290c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800290e:	4b09      	ldr	r3, [pc, #36]	; (8002934 <HAL_RCC_ClockConfig+0x1c8>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	4618      	mov	r0, r3
 8002914:	f7fe fad8 	bl	8000ec8 <HAL_InitTick>

  return HAL_OK;
 8002918:	2300      	movs	r3, #0
}
 800291a:	4618      	mov	r0, r3
 800291c:	3710      	adds	r7, #16
 800291e:	46bd      	mov	sp, r7
 8002920:	bd80      	pop	{r7, pc}
 8002922:	bf00      	nop
 8002924:	40023c00 	.word	0x40023c00
 8002928:	40023800 	.word	0x40023800
 800292c:	0800400c 	.word	0x0800400c
 8002930:	20000000 	.word	0x20000000
 8002934:	20000004 	.word	0x20000004

08002938 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002938:	b5f0      	push	{r4, r5, r6, r7, lr}
 800293a:	b085      	sub	sp, #20
 800293c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800293e:	2300      	movs	r3, #0
 8002940:	607b      	str	r3, [r7, #4]
 8002942:	2300      	movs	r3, #0
 8002944:	60fb      	str	r3, [r7, #12]
 8002946:	2300      	movs	r3, #0
 8002948:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800294a:	2300      	movs	r3, #0
 800294c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800294e:	4b63      	ldr	r3, [pc, #396]	; (8002adc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002950:	689b      	ldr	r3, [r3, #8]
 8002952:	f003 030c 	and.w	r3, r3, #12
 8002956:	2b04      	cmp	r3, #4
 8002958:	d007      	beq.n	800296a <HAL_RCC_GetSysClockFreq+0x32>
 800295a:	2b08      	cmp	r3, #8
 800295c:	d008      	beq.n	8002970 <HAL_RCC_GetSysClockFreq+0x38>
 800295e:	2b00      	cmp	r3, #0
 8002960:	f040 80b4 	bne.w	8002acc <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002964:	4b5e      	ldr	r3, [pc, #376]	; (8002ae0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002966:	60bb      	str	r3, [r7, #8]
       break;
 8002968:	e0b3      	b.n	8002ad2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800296a:	4b5e      	ldr	r3, [pc, #376]	; (8002ae4 <HAL_RCC_GetSysClockFreq+0x1ac>)
 800296c:	60bb      	str	r3, [r7, #8]
      break;
 800296e:	e0b0      	b.n	8002ad2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002970:	4b5a      	ldr	r3, [pc, #360]	; (8002adc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002972:	685b      	ldr	r3, [r3, #4]
 8002974:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002978:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800297a:	4b58      	ldr	r3, [pc, #352]	; (8002adc <HAL_RCC_GetSysClockFreq+0x1a4>)
 800297c:	685b      	ldr	r3, [r3, #4]
 800297e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002982:	2b00      	cmp	r3, #0
 8002984:	d04a      	beq.n	8002a1c <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002986:	4b55      	ldr	r3, [pc, #340]	; (8002adc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002988:	685b      	ldr	r3, [r3, #4]
 800298a:	099b      	lsrs	r3, r3, #6
 800298c:	f04f 0400 	mov.w	r4, #0
 8002990:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002994:	f04f 0200 	mov.w	r2, #0
 8002998:	ea03 0501 	and.w	r5, r3, r1
 800299c:	ea04 0602 	and.w	r6, r4, r2
 80029a0:	4629      	mov	r1, r5
 80029a2:	4632      	mov	r2, r6
 80029a4:	f04f 0300 	mov.w	r3, #0
 80029a8:	f04f 0400 	mov.w	r4, #0
 80029ac:	0154      	lsls	r4, r2, #5
 80029ae:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80029b2:	014b      	lsls	r3, r1, #5
 80029b4:	4619      	mov	r1, r3
 80029b6:	4622      	mov	r2, r4
 80029b8:	1b49      	subs	r1, r1, r5
 80029ba:	eb62 0206 	sbc.w	r2, r2, r6
 80029be:	f04f 0300 	mov.w	r3, #0
 80029c2:	f04f 0400 	mov.w	r4, #0
 80029c6:	0194      	lsls	r4, r2, #6
 80029c8:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80029cc:	018b      	lsls	r3, r1, #6
 80029ce:	1a5b      	subs	r3, r3, r1
 80029d0:	eb64 0402 	sbc.w	r4, r4, r2
 80029d4:	f04f 0100 	mov.w	r1, #0
 80029d8:	f04f 0200 	mov.w	r2, #0
 80029dc:	00e2      	lsls	r2, r4, #3
 80029de:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80029e2:	00d9      	lsls	r1, r3, #3
 80029e4:	460b      	mov	r3, r1
 80029e6:	4614      	mov	r4, r2
 80029e8:	195b      	adds	r3, r3, r5
 80029ea:	eb44 0406 	adc.w	r4, r4, r6
 80029ee:	f04f 0100 	mov.w	r1, #0
 80029f2:	f04f 0200 	mov.w	r2, #0
 80029f6:	0262      	lsls	r2, r4, #9
 80029f8:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80029fc:	0259      	lsls	r1, r3, #9
 80029fe:	460b      	mov	r3, r1
 8002a00:	4614      	mov	r4, r2
 8002a02:	4618      	mov	r0, r3
 8002a04:	4621      	mov	r1, r4
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	f04f 0400 	mov.w	r4, #0
 8002a0c:	461a      	mov	r2, r3
 8002a0e:	4623      	mov	r3, r4
 8002a10:	f7fd fbe2 	bl	80001d8 <__aeabi_uldivmod>
 8002a14:	4603      	mov	r3, r0
 8002a16:	460c      	mov	r4, r1
 8002a18:	60fb      	str	r3, [r7, #12]
 8002a1a:	e049      	b.n	8002ab0 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a1c:	4b2f      	ldr	r3, [pc, #188]	; (8002adc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002a1e:	685b      	ldr	r3, [r3, #4]
 8002a20:	099b      	lsrs	r3, r3, #6
 8002a22:	f04f 0400 	mov.w	r4, #0
 8002a26:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002a2a:	f04f 0200 	mov.w	r2, #0
 8002a2e:	ea03 0501 	and.w	r5, r3, r1
 8002a32:	ea04 0602 	and.w	r6, r4, r2
 8002a36:	4629      	mov	r1, r5
 8002a38:	4632      	mov	r2, r6
 8002a3a:	f04f 0300 	mov.w	r3, #0
 8002a3e:	f04f 0400 	mov.w	r4, #0
 8002a42:	0154      	lsls	r4, r2, #5
 8002a44:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002a48:	014b      	lsls	r3, r1, #5
 8002a4a:	4619      	mov	r1, r3
 8002a4c:	4622      	mov	r2, r4
 8002a4e:	1b49      	subs	r1, r1, r5
 8002a50:	eb62 0206 	sbc.w	r2, r2, r6
 8002a54:	f04f 0300 	mov.w	r3, #0
 8002a58:	f04f 0400 	mov.w	r4, #0
 8002a5c:	0194      	lsls	r4, r2, #6
 8002a5e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002a62:	018b      	lsls	r3, r1, #6
 8002a64:	1a5b      	subs	r3, r3, r1
 8002a66:	eb64 0402 	sbc.w	r4, r4, r2
 8002a6a:	f04f 0100 	mov.w	r1, #0
 8002a6e:	f04f 0200 	mov.w	r2, #0
 8002a72:	00e2      	lsls	r2, r4, #3
 8002a74:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002a78:	00d9      	lsls	r1, r3, #3
 8002a7a:	460b      	mov	r3, r1
 8002a7c:	4614      	mov	r4, r2
 8002a7e:	195b      	adds	r3, r3, r5
 8002a80:	eb44 0406 	adc.w	r4, r4, r6
 8002a84:	f04f 0100 	mov.w	r1, #0
 8002a88:	f04f 0200 	mov.w	r2, #0
 8002a8c:	02a2      	lsls	r2, r4, #10
 8002a8e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002a92:	0299      	lsls	r1, r3, #10
 8002a94:	460b      	mov	r3, r1
 8002a96:	4614      	mov	r4, r2
 8002a98:	4618      	mov	r0, r3
 8002a9a:	4621      	mov	r1, r4
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	f04f 0400 	mov.w	r4, #0
 8002aa2:	461a      	mov	r2, r3
 8002aa4:	4623      	mov	r3, r4
 8002aa6:	f7fd fb97 	bl	80001d8 <__aeabi_uldivmod>
 8002aaa:	4603      	mov	r3, r0
 8002aac:	460c      	mov	r4, r1
 8002aae:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002ab0:	4b0a      	ldr	r3, [pc, #40]	; (8002adc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002ab2:	685b      	ldr	r3, [r3, #4]
 8002ab4:	0c1b      	lsrs	r3, r3, #16
 8002ab6:	f003 0303 	and.w	r3, r3, #3
 8002aba:	3301      	adds	r3, #1
 8002abc:	005b      	lsls	r3, r3, #1
 8002abe:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002ac0:	68fa      	ldr	r2, [r7, #12]
 8002ac2:	683b      	ldr	r3, [r7, #0]
 8002ac4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ac8:	60bb      	str	r3, [r7, #8]
      break;
 8002aca:	e002      	b.n	8002ad2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002acc:	4b04      	ldr	r3, [pc, #16]	; (8002ae0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002ace:	60bb      	str	r3, [r7, #8]
      break;
 8002ad0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002ad2:	68bb      	ldr	r3, [r7, #8]
}
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	3714      	adds	r7, #20
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002adc:	40023800 	.word	0x40023800
 8002ae0:	00f42400 	.word	0x00f42400
 8002ae4:	007a1200 	.word	0x007a1200

08002ae8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ae8:	b480      	push	{r7}
 8002aea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002aec:	4b03      	ldr	r3, [pc, #12]	; (8002afc <HAL_RCC_GetHCLKFreq+0x14>)
 8002aee:	681b      	ldr	r3, [r3, #0]
}
 8002af0:	4618      	mov	r0, r3
 8002af2:	46bd      	mov	sp, r7
 8002af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af8:	4770      	bx	lr
 8002afa:	bf00      	nop
 8002afc:	20000000 	.word	0x20000000

08002b00 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002b04:	f7ff fff0 	bl	8002ae8 <HAL_RCC_GetHCLKFreq>
 8002b08:	4601      	mov	r1, r0
 8002b0a:	4b05      	ldr	r3, [pc, #20]	; (8002b20 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002b0c:	689b      	ldr	r3, [r3, #8]
 8002b0e:	0a9b      	lsrs	r3, r3, #10
 8002b10:	f003 0307 	and.w	r3, r3, #7
 8002b14:	4a03      	ldr	r2, [pc, #12]	; (8002b24 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002b16:	5cd3      	ldrb	r3, [r2, r3]
 8002b18:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	bd80      	pop	{r7, pc}
 8002b20:	40023800 	.word	0x40023800
 8002b24:	0800401c 	.word	0x0800401c

08002b28 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002b2c:	f7ff ffdc 	bl	8002ae8 <HAL_RCC_GetHCLKFreq>
 8002b30:	4601      	mov	r1, r0
 8002b32:	4b05      	ldr	r3, [pc, #20]	; (8002b48 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002b34:	689b      	ldr	r3, [r3, #8]
 8002b36:	0b5b      	lsrs	r3, r3, #13
 8002b38:	f003 0307 	and.w	r3, r3, #7
 8002b3c:	4a03      	ldr	r2, [pc, #12]	; (8002b4c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002b3e:	5cd3      	ldrb	r3, [r2, r3]
 8002b40:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002b44:	4618      	mov	r0, r3
 8002b46:	bd80      	pop	{r7, pc}
 8002b48:	40023800 	.word	0x40023800
 8002b4c:	0800401c 	.word	0x0800401c

08002b50 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b082      	sub	sp, #8
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d101      	bne.n	8002b62 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002b5e:	2301      	movs	r3, #1
 8002b60:	e056      	b.n	8002c10 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	2200      	movs	r2, #0
 8002b66:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002b6e:	b2db      	uxtb	r3, r3
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d106      	bne.n	8002b82 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2200      	movs	r2, #0
 8002b78:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002b7c:	6878      	ldr	r0, [r7, #4]
 8002b7e:	f7fd ffe5 	bl	8000b4c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	2202      	movs	r2, #2
 8002b86:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	681a      	ldr	r2, [r3, #0]
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002b98:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	685a      	ldr	r2, [r3, #4]
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	689b      	ldr	r3, [r3, #8]
 8002ba2:	431a      	orrs	r2, r3
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	68db      	ldr	r3, [r3, #12]
 8002ba8:	431a      	orrs	r2, r3
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	691b      	ldr	r3, [r3, #16]
 8002bae:	431a      	orrs	r2, r3
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	695b      	ldr	r3, [r3, #20]
 8002bb4:	431a      	orrs	r2, r3
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	699b      	ldr	r3, [r3, #24]
 8002bba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002bbe:	431a      	orrs	r2, r3
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	69db      	ldr	r3, [r3, #28]
 8002bc4:	431a      	orrs	r2, r3
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6a1b      	ldr	r3, [r3, #32]
 8002bca:	ea42 0103 	orr.w	r1, r2, r3
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	430a      	orrs	r2, r1
 8002bd8:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	699b      	ldr	r3, [r3, #24]
 8002bde:	0c1b      	lsrs	r3, r3, #16
 8002be0:	f003 0104 	and.w	r1, r3, #4
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	430a      	orrs	r2, r1
 8002bee:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	69da      	ldr	r2, [r3, #28]
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002bfe:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	2200      	movs	r2, #0
 8002c04:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	2201      	movs	r2, #1
 8002c0a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002c0e:	2300      	movs	r3, #0
}
 8002c10:	4618      	mov	r0, r3
 8002c12:	3708      	adds	r7, #8
 8002c14:	46bd      	mov	sp, r7
 8002c16:	bd80      	pop	{r7, pc}

08002c18 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b082      	sub	sp, #8
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d101      	bne.n	8002c2a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002c26:	2301      	movs	r3, #1
 8002c28:	e01d      	b.n	8002c66 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c30:	b2db      	uxtb	r3, r3
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d106      	bne.n	8002c44 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	2200      	movs	r2, #0
 8002c3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002c3e:	6878      	ldr	r0, [r7, #4]
 8002c40:	f7fd ffcc 	bl	8000bdc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	2202      	movs	r2, #2
 8002c48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681a      	ldr	r2, [r3, #0]
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	3304      	adds	r3, #4
 8002c54:	4619      	mov	r1, r3
 8002c56:	4610      	mov	r0, r2
 8002c58:	f000 f9fa 	bl	8003050 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2201      	movs	r2, #1
 8002c60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002c64:	2300      	movs	r3, #0
}
 8002c66:	4618      	mov	r0, r3
 8002c68:	3708      	adds	r7, #8
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	bd80      	pop	{r7, pc}

08002c6e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002c6e:	b580      	push	{r7, lr}
 8002c70:	b082      	sub	sp, #8
 8002c72:	af00      	add	r7, sp, #0
 8002c74:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	691b      	ldr	r3, [r3, #16]
 8002c7c:	f003 0302 	and.w	r3, r3, #2
 8002c80:	2b02      	cmp	r3, #2
 8002c82:	d122      	bne.n	8002cca <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	68db      	ldr	r3, [r3, #12]
 8002c8a:	f003 0302 	and.w	r3, r3, #2
 8002c8e:	2b02      	cmp	r3, #2
 8002c90:	d11b      	bne.n	8002cca <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f06f 0202 	mvn.w	r2, #2
 8002c9a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2201      	movs	r2, #1
 8002ca0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	699b      	ldr	r3, [r3, #24]
 8002ca8:	f003 0303 	and.w	r3, r3, #3
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d003      	beq.n	8002cb8 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002cb0:	6878      	ldr	r0, [r7, #4]
 8002cb2:	f000 f9af 	bl	8003014 <HAL_TIM_IC_CaptureCallback>
 8002cb6:	e005      	b.n	8002cc4 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002cb8:	6878      	ldr	r0, [r7, #4]
 8002cba:	f000 f9a1 	bl	8003000 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002cbe:	6878      	ldr	r0, [r7, #4]
 8002cc0:	f000 f9b2 	bl	8003028 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	691b      	ldr	r3, [r3, #16]
 8002cd0:	f003 0304 	and.w	r3, r3, #4
 8002cd4:	2b04      	cmp	r3, #4
 8002cd6:	d122      	bne.n	8002d1e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	68db      	ldr	r3, [r3, #12]
 8002cde:	f003 0304 	and.w	r3, r3, #4
 8002ce2:	2b04      	cmp	r3, #4
 8002ce4:	d11b      	bne.n	8002d1e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f06f 0204 	mvn.w	r2, #4
 8002cee:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2202      	movs	r2, #2
 8002cf4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	699b      	ldr	r3, [r3, #24]
 8002cfc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d003      	beq.n	8002d0c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d04:	6878      	ldr	r0, [r7, #4]
 8002d06:	f000 f985 	bl	8003014 <HAL_TIM_IC_CaptureCallback>
 8002d0a:	e005      	b.n	8002d18 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d0c:	6878      	ldr	r0, [r7, #4]
 8002d0e:	f000 f977 	bl	8003000 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d12:	6878      	ldr	r0, [r7, #4]
 8002d14:	f000 f988 	bl	8003028 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	691b      	ldr	r3, [r3, #16]
 8002d24:	f003 0308 	and.w	r3, r3, #8
 8002d28:	2b08      	cmp	r3, #8
 8002d2a:	d122      	bne.n	8002d72 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	68db      	ldr	r3, [r3, #12]
 8002d32:	f003 0308 	and.w	r3, r3, #8
 8002d36:	2b08      	cmp	r3, #8
 8002d38:	d11b      	bne.n	8002d72 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f06f 0208 	mvn.w	r2, #8
 8002d42:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	2204      	movs	r2, #4
 8002d48:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	69db      	ldr	r3, [r3, #28]
 8002d50:	f003 0303 	and.w	r3, r3, #3
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d003      	beq.n	8002d60 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d58:	6878      	ldr	r0, [r7, #4]
 8002d5a:	f000 f95b 	bl	8003014 <HAL_TIM_IC_CaptureCallback>
 8002d5e:	e005      	b.n	8002d6c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d60:	6878      	ldr	r0, [r7, #4]
 8002d62:	f000 f94d 	bl	8003000 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d66:	6878      	ldr	r0, [r7, #4]
 8002d68:	f000 f95e 	bl	8003028 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2200      	movs	r2, #0
 8002d70:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	691b      	ldr	r3, [r3, #16]
 8002d78:	f003 0310 	and.w	r3, r3, #16
 8002d7c:	2b10      	cmp	r3, #16
 8002d7e:	d122      	bne.n	8002dc6 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	68db      	ldr	r3, [r3, #12]
 8002d86:	f003 0310 	and.w	r3, r3, #16
 8002d8a:	2b10      	cmp	r3, #16
 8002d8c:	d11b      	bne.n	8002dc6 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f06f 0210 	mvn.w	r2, #16
 8002d96:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2208      	movs	r2, #8
 8002d9c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	69db      	ldr	r3, [r3, #28]
 8002da4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d003      	beq.n	8002db4 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002dac:	6878      	ldr	r0, [r7, #4]
 8002dae:	f000 f931 	bl	8003014 <HAL_TIM_IC_CaptureCallback>
 8002db2:	e005      	b.n	8002dc0 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002db4:	6878      	ldr	r0, [r7, #4]
 8002db6:	f000 f923 	bl	8003000 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002dba:	6878      	ldr	r0, [r7, #4]
 8002dbc:	f000 f934 	bl	8003028 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	691b      	ldr	r3, [r3, #16]
 8002dcc:	f003 0301 	and.w	r3, r3, #1
 8002dd0:	2b01      	cmp	r3, #1
 8002dd2:	d10e      	bne.n	8002df2 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	68db      	ldr	r3, [r3, #12]
 8002dda:	f003 0301 	and.w	r3, r3, #1
 8002dde:	2b01      	cmp	r3, #1
 8002de0:	d107      	bne.n	8002df2 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f06f 0201 	mvn.w	r2, #1
 8002dea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002dec:	6878      	ldr	r0, [r7, #4]
 8002dee:	f000 f8fd 	bl	8002fec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	691b      	ldr	r3, [r3, #16]
 8002df8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002dfc:	2b80      	cmp	r3, #128	; 0x80
 8002dfe:	d10e      	bne.n	8002e1e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	68db      	ldr	r3, [r3, #12]
 8002e06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e0a:	2b80      	cmp	r3, #128	; 0x80
 8002e0c:	d107      	bne.n	8002e1e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002e16:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002e18:	6878      	ldr	r0, [r7, #4]
 8002e1a:	f000 faab 	bl	8003374 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	691b      	ldr	r3, [r3, #16]
 8002e24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e28:	2b40      	cmp	r3, #64	; 0x40
 8002e2a:	d10e      	bne.n	8002e4a <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	68db      	ldr	r3, [r3, #12]
 8002e32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e36:	2b40      	cmp	r3, #64	; 0x40
 8002e38:	d107      	bne.n	8002e4a <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002e42:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002e44:	6878      	ldr	r0, [r7, #4]
 8002e46:	f000 f8f9 	bl	800303c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	691b      	ldr	r3, [r3, #16]
 8002e50:	f003 0320 	and.w	r3, r3, #32
 8002e54:	2b20      	cmp	r3, #32
 8002e56:	d10e      	bne.n	8002e76 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	68db      	ldr	r3, [r3, #12]
 8002e5e:	f003 0320 	and.w	r3, r3, #32
 8002e62:	2b20      	cmp	r3, #32
 8002e64:	d107      	bne.n	8002e76 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f06f 0220 	mvn.w	r2, #32
 8002e6e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002e70:	6878      	ldr	r0, [r7, #4]
 8002e72:	f000 fa75 	bl	8003360 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002e76:	bf00      	nop
 8002e78:	3708      	adds	r7, #8
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	bd80      	pop	{r7, pc}

08002e7e <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002e7e:	b580      	push	{r7, lr}
 8002e80:	b084      	sub	sp, #16
 8002e82:	af00      	add	r7, sp, #0
 8002e84:	6078      	str	r0, [r7, #4]
 8002e86:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e8e:	2b01      	cmp	r3, #1
 8002e90:	d101      	bne.n	8002e96 <HAL_TIM_ConfigClockSource+0x18>
 8002e92:	2302      	movs	r3, #2
 8002e94:	e0a6      	b.n	8002fe4 <HAL_TIM_ConfigClockSource+0x166>
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	2201      	movs	r2, #1
 8002e9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	2202      	movs	r2, #2
 8002ea2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	689b      	ldr	r3, [r3, #8]
 8002eac:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002eb4:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002ebc:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	68fa      	ldr	r2, [r7, #12]
 8002ec4:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002ec6:	683b      	ldr	r3, [r7, #0]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	2b40      	cmp	r3, #64	; 0x40
 8002ecc:	d067      	beq.n	8002f9e <HAL_TIM_ConfigClockSource+0x120>
 8002ece:	2b40      	cmp	r3, #64	; 0x40
 8002ed0:	d80b      	bhi.n	8002eea <HAL_TIM_ConfigClockSource+0x6c>
 8002ed2:	2b10      	cmp	r3, #16
 8002ed4:	d073      	beq.n	8002fbe <HAL_TIM_ConfigClockSource+0x140>
 8002ed6:	2b10      	cmp	r3, #16
 8002ed8:	d802      	bhi.n	8002ee0 <HAL_TIM_ConfigClockSource+0x62>
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d06f      	beq.n	8002fbe <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8002ede:	e078      	b.n	8002fd2 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002ee0:	2b20      	cmp	r3, #32
 8002ee2:	d06c      	beq.n	8002fbe <HAL_TIM_ConfigClockSource+0x140>
 8002ee4:	2b30      	cmp	r3, #48	; 0x30
 8002ee6:	d06a      	beq.n	8002fbe <HAL_TIM_ConfigClockSource+0x140>
      break;
 8002ee8:	e073      	b.n	8002fd2 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002eea:	2b70      	cmp	r3, #112	; 0x70
 8002eec:	d00d      	beq.n	8002f0a <HAL_TIM_ConfigClockSource+0x8c>
 8002eee:	2b70      	cmp	r3, #112	; 0x70
 8002ef0:	d804      	bhi.n	8002efc <HAL_TIM_ConfigClockSource+0x7e>
 8002ef2:	2b50      	cmp	r3, #80	; 0x50
 8002ef4:	d033      	beq.n	8002f5e <HAL_TIM_ConfigClockSource+0xe0>
 8002ef6:	2b60      	cmp	r3, #96	; 0x60
 8002ef8:	d041      	beq.n	8002f7e <HAL_TIM_ConfigClockSource+0x100>
      break;
 8002efa:	e06a      	b.n	8002fd2 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002efc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f00:	d066      	beq.n	8002fd0 <HAL_TIM_ConfigClockSource+0x152>
 8002f02:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f06:	d017      	beq.n	8002f38 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8002f08:	e063      	b.n	8002fd2 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6818      	ldr	r0, [r3, #0]
 8002f0e:	683b      	ldr	r3, [r7, #0]
 8002f10:	6899      	ldr	r1, [r3, #8]
 8002f12:	683b      	ldr	r3, [r7, #0]
 8002f14:	685a      	ldr	r2, [r3, #4]
 8002f16:	683b      	ldr	r3, [r7, #0]
 8002f18:	68db      	ldr	r3, [r3, #12]
 8002f1a:	f000 f993 	bl	8003244 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	689b      	ldr	r3, [r3, #8]
 8002f24:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002f2c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	68fa      	ldr	r2, [r7, #12]
 8002f34:	609a      	str	r2, [r3, #8]
      break;
 8002f36:	e04c      	b.n	8002fd2 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	6818      	ldr	r0, [r3, #0]
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	6899      	ldr	r1, [r3, #8]
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	685a      	ldr	r2, [r3, #4]
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	68db      	ldr	r3, [r3, #12]
 8002f48:	f000 f97c 	bl	8003244 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	689a      	ldr	r2, [r3, #8]
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002f5a:	609a      	str	r2, [r3, #8]
      break;
 8002f5c:	e039      	b.n	8002fd2 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6818      	ldr	r0, [r3, #0]
 8002f62:	683b      	ldr	r3, [r7, #0]
 8002f64:	6859      	ldr	r1, [r3, #4]
 8002f66:	683b      	ldr	r3, [r7, #0]
 8002f68:	68db      	ldr	r3, [r3, #12]
 8002f6a:	461a      	mov	r2, r3
 8002f6c:	f000 f8f0 	bl	8003150 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	2150      	movs	r1, #80	; 0x50
 8002f76:	4618      	mov	r0, r3
 8002f78:	f000 f949 	bl	800320e <TIM_ITRx_SetConfig>
      break;
 8002f7c:	e029      	b.n	8002fd2 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6818      	ldr	r0, [r3, #0]
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	6859      	ldr	r1, [r3, #4]
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	68db      	ldr	r3, [r3, #12]
 8002f8a:	461a      	mov	r2, r3
 8002f8c:	f000 f90f 	bl	80031ae <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	2160      	movs	r1, #96	; 0x60
 8002f96:	4618      	mov	r0, r3
 8002f98:	f000 f939 	bl	800320e <TIM_ITRx_SetConfig>
      break;
 8002f9c:	e019      	b.n	8002fd2 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6818      	ldr	r0, [r3, #0]
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	6859      	ldr	r1, [r3, #4]
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	68db      	ldr	r3, [r3, #12]
 8002faa:	461a      	mov	r2, r3
 8002fac:	f000 f8d0 	bl	8003150 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	2140      	movs	r1, #64	; 0x40
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	f000 f929 	bl	800320e <TIM_ITRx_SetConfig>
      break;
 8002fbc:	e009      	b.n	8002fd2 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681a      	ldr	r2, [r3, #0]
 8002fc2:	683b      	ldr	r3, [r7, #0]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	4619      	mov	r1, r3
 8002fc8:	4610      	mov	r0, r2
 8002fca:	f000 f920 	bl	800320e <TIM_ITRx_SetConfig>
      break;
 8002fce:	e000      	b.n	8002fd2 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8002fd0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	2201      	movs	r2, #1
 8002fd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	2200      	movs	r2, #0
 8002fde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002fe2:	2300      	movs	r3, #0
}
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	3710      	adds	r7, #16
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	bd80      	pop	{r7, pc}

08002fec <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002fec:	b480      	push	{r7}
 8002fee:	b083      	sub	sp, #12
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002ff4:	bf00      	nop
 8002ff6:	370c      	adds	r7, #12
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffe:	4770      	bx	lr

08003000 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003000:	b480      	push	{r7}
 8003002:	b083      	sub	sp, #12
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003008:	bf00      	nop
 800300a:	370c      	adds	r7, #12
 800300c:	46bd      	mov	sp, r7
 800300e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003012:	4770      	bx	lr

08003014 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003014:	b480      	push	{r7}
 8003016:	b083      	sub	sp, #12
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800301c:	bf00      	nop
 800301e:	370c      	adds	r7, #12
 8003020:	46bd      	mov	sp, r7
 8003022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003026:	4770      	bx	lr

08003028 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003028:	b480      	push	{r7}
 800302a:	b083      	sub	sp, #12
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003030:	bf00      	nop
 8003032:	370c      	adds	r7, #12
 8003034:	46bd      	mov	sp, r7
 8003036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303a:	4770      	bx	lr

0800303c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800303c:	b480      	push	{r7}
 800303e:	b083      	sub	sp, #12
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003044:	bf00      	nop
 8003046:	370c      	adds	r7, #12
 8003048:	46bd      	mov	sp, r7
 800304a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304e:	4770      	bx	lr

08003050 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003050:	b480      	push	{r7}
 8003052:	b085      	sub	sp, #20
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
 8003058:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	4a34      	ldr	r2, [pc, #208]	; (8003134 <TIM_Base_SetConfig+0xe4>)
 8003064:	4293      	cmp	r3, r2
 8003066:	d00f      	beq.n	8003088 <TIM_Base_SetConfig+0x38>
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800306e:	d00b      	beq.n	8003088 <TIM_Base_SetConfig+0x38>
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	4a31      	ldr	r2, [pc, #196]	; (8003138 <TIM_Base_SetConfig+0xe8>)
 8003074:	4293      	cmp	r3, r2
 8003076:	d007      	beq.n	8003088 <TIM_Base_SetConfig+0x38>
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	4a30      	ldr	r2, [pc, #192]	; (800313c <TIM_Base_SetConfig+0xec>)
 800307c:	4293      	cmp	r3, r2
 800307e:	d003      	beq.n	8003088 <TIM_Base_SetConfig+0x38>
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	4a2f      	ldr	r2, [pc, #188]	; (8003140 <TIM_Base_SetConfig+0xf0>)
 8003084:	4293      	cmp	r3, r2
 8003086:	d108      	bne.n	800309a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800308e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003090:	683b      	ldr	r3, [r7, #0]
 8003092:	685b      	ldr	r3, [r3, #4]
 8003094:	68fa      	ldr	r2, [r7, #12]
 8003096:	4313      	orrs	r3, r2
 8003098:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	4a25      	ldr	r2, [pc, #148]	; (8003134 <TIM_Base_SetConfig+0xe4>)
 800309e:	4293      	cmp	r3, r2
 80030a0:	d01b      	beq.n	80030da <TIM_Base_SetConfig+0x8a>
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030a8:	d017      	beq.n	80030da <TIM_Base_SetConfig+0x8a>
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	4a22      	ldr	r2, [pc, #136]	; (8003138 <TIM_Base_SetConfig+0xe8>)
 80030ae:	4293      	cmp	r3, r2
 80030b0:	d013      	beq.n	80030da <TIM_Base_SetConfig+0x8a>
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	4a21      	ldr	r2, [pc, #132]	; (800313c <TIM_Base_SetConfig+0xec>)
 80030b6:	4293      	cmp	r3, r2
 80030b8:	d00f      	beq.n	80030da <TIM_Base_SetConfig+0x8a>
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	4a20      	ldr	r2, [pc, #128]	; (8003140 <TIM_Base_SetConfig+0xf0>)
 80030be:	4293      	cmp	r3, r2
 80030c0:	d00b      	beq.n	80030da <TIM_Base_SetConfig+0x8a>
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	4a1f      	ldr	r2, [pc, #124]	; (8003144 <TIM_Base_SetConfig+0xf4>)
 80030c6:	4293      	cmp	r3, r2
 80030c8:	d007      	beq.n	80030da <TIM_Base_SetConfig+0x8a>
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	4a1e      	ldr	r2, [pc, #120]	; (8003148 <TIM_Base_SetConfig+0xf8>)
 80030ce:	4293      	cmp	r3, r2
 80030d0:	d003      	beq.n	80030da <TIM_Base_SetConfig+0x8a>
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	4a1d      	ldr	r2, [pc, #116]	; (800314c <TIM_Base_SetConfig+0xfc>)
 80030d6:	4293      	cmp	r3, r2
 80030d8:	d108      	bne.n	80030ec <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80030e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80030e2:	683b      	ldr	r3, [r7, #0]
 80030e4:	68db      	ldr	r3, [r3, #12]
 80030e6:	68fa      	ldr	r2, [r7, #12]
 80030e8:	4313      	orrs	r3, r2
 80030ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	695b      	ldr	r3, [r3, #20]
 80030f6:	4313      	orrs	r3, r2
 80030f8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	68fa      	ldr	r2, [r7, #12]
 80030fe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	689a      	ldr	r2, [r3, #8]
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	681a      	ldr	r2, [r3, #0]
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	4a08      	ldr	r2, [pc, #32]	; (8003134 <TIM_Base_SetConfig+0xe4>)
 8003114:	4293      	cmp	r3, r2
 8003116:	d103      	bne.n	8003120 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003118:	683b      	ldr	r3, [r7, #0]
 800311a:	691a      	ldr	r2, [r3, #16]
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2201      	movs	r2, #1
 8003124:	615a      	str	r2, [r3, #20]
}
 8003126:	bf00      	nop
 8003128:	3714      	adds	r7, #20
 800312a:	46bd      	mov	sp, r7
 800312c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003130:	4770      	bx	lr
 8003132:	bf00      	nop
 8003134:	40010000 	.word	0x40010000
 8003138:	40000400 	.word	0x40000400
 800313c:	40000800 	.word	0x40000800
 8003140:	40000c00 	.word	0x40000c00
 8003144:	40014000 	.word	0x40014000
 8003148:	40014400 	.word	0x40014400
 800314c:	40014800 	.word	0x40014800

08003150 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003150:	b480      	push	{r7}
 8003152:	b087      	sub	sp, #28
 8003154:	af00      	add	r7, sp, #0
 8003156:	60f8      	str	r0, [r7, #12]
 8003158:	60b9      	str	r1, [r7, #8]
 800315a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	6a1b      	ldr	r3, [r3, #32]
 8003160:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	6a1b      	ldr	r3, [r3, #32]
 8003166:	f023 0201 	bic.w	r2, r3, #1
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	699b      	ldr	r3, [r3, #24]
 8003172:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003174:	693b      	ldr	r3, [r7, #16]
 8003176:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800317a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	011b      	lsls	r3, r3, #4
 8003180:	693a      	ldr	r2, [r7, #16]
 8003182:	4313      	orrs	r3, r2
 8003184:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003186:	697b      	ldr	r3, [r7, #20]
 8003188:	f023 030a 	bic.w	r3, r3, #10
 800318c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800318e:	697a      	ldr	r2, [r7, #20]
 8003190:	68bb      	ldr	r3, [r7, #8]
 8003192:	4313      	orrs	r3, r2
 8003194:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	693a      	ldr	r2, [r7, #16]
 800319a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	697a      	ldr	r2, [r7, #20]
 80031a0:	621a      	str	r2, [r3, #32]
}
 80031a2:	bf00      	nop
 80031a4:	371c      	adds	r7, #28
 80031a6:	46bd      	mov	sp, r7
 80031a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ac:	4770      	bx	lr

080031ae <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80031ae:	b480      	push	{r7}
 80031b0:	b087      	sub	sp, #28
 80031b2:	af00      	add	r7, sp, #0
 80031b4:	60f8      	str	r0, [r7, #12]
 80031b6:	60b9      	str	r1, [r7, #8]
 80031b8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	6a1b      	ldr	r3, [r3, #32]
 80031be:	f023 0210 	bic.w	r2, r3, #16
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	699b      	ldr	r3, [r3, #24]
 80031ca:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	6a1b      	ldr	r3, [r3, #32]
 80031d0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80031d2:	697b      	ldr	r3, [r7, #20]
 80031d4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80031d8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	031b      	lsls	r3, r3, #12
 80031de:	697a      	ldr	r2, [r7, #20]
 80031e0:	4313      	orrs	r3, r2
 80031e2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80031e4:	693b      	ldr	r3, [r7, #16]
 80031e6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80031ea:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80031ec:	68bb      	ldr	r3, [r7, #8]
 80031ee:	011b      	lsls	r3, r3, #4
 80031f0:	693a      	ldr	r2, [r7, #16]
 80031f2:	4313      	orrs	r3, r2
 80031f4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	697a      	ldr	r2, [r7, #20]
 80031fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	693a      	ldr	r2, [r7, #16]
 8003200:	621a      	str	r2, [r3, #32]
}
 8003202:	bf00      	nop
 8003204:	371c      	adds	r7, #28
 8003206:	46bd      	mov	sp, r7
 8003208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320c:	4770      	bx	lr

0800320e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800320e:	b480      	push	{r7}
 8003210:	b085      	sub	sp, #20
 8003212:	af00      	add	r7, sp, #0
 8003214:	6078      	str	r0, [r7, #4]
 8003216:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	689b      	ldr	r3, [r3, #8]
 800321c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003224:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003226:	683a      	ldr	r2, [r7, #0]
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	4313      	orrs	r3, r2
 800322c:	f043 0307 	orr.w	r3, r3, #7
 8003230:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	68fa      	ldr	r2, [r7, #12]
 8003236:	609a      	str	r2, [r3, #8]
}
 8003238:	bf00      	nop
 800323a:	3714      	adds	r7, #20
 800323c:	46bd      	mov	sp, r7
 800323e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003242:	4770      	bx	lr

08003244 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003244:	b480      	push	{r7}
 8003246:	b087      	sub	sp, #28
 8003248:	af00      	add	r7, sp, #0
 800324a:	60f8      	str	r0, [r7, #12]
 800324c:	60b9      	str	r1, [r7, #8]
 800324e:	607a      	str	r2, [r7, #4]
 8003250:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	689b      	ldr	r3, [r3, #8]
 8003256:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003258:	697b      	ldr	r3, [r7, #20]
 800325a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800325e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	021a      	lsls	r2, r3, #8
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	431a      	orrs	r2, r3
 8003268:	68bb      	ldr	r3, [r7, #8]
 800326a:	4313      	orrs	r3, r2
 800326c:	697a      	ldr	r2, [r7, #20]
 800326e:	4313      	orrs	r3, r2
 8003270:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	697a      	ldr	r2, [r7, #20]
 8003276:	609a      	str	r2, [r3, #8]
}
 8003278:	bf00      	nop
 800327a:	371c      	adds	r7, #28
 800327c:	46bd      	mov	sp, r7
 800327e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003282:	4770      	bx	lr

08003284 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003284:	b480      	push	{r7}
 8003286:	b085      	sub	sp, #20
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
 800328c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003294:	2b01      	cmp	r3, #1
 8003296:	d101      	bne.n	800329c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003298:	2302      	movs	r3, #2
 800329a:	e050      	b.n	800333e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2201      	movs	r2, #1
 80032a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2202      	movs	r2, #2
 80032a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	685b      	ldr	r3, [r3, #4]
 80032b2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	689b      	ldr	r3, [r3, #8]
 80032ba:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032c2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	68fa      	ldr	r2, [r7, #12]
 80032ca:	4313      	orrs	r3, r2
 80032cc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	68fa      	ldr	r2, [r7, #12]
 80032d4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	4a1c      	ldr	r2, [pc, #112]	; (800334c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80032dc:	4293      	cmp	r3, r2
 80032de:	d018      	beq.n	8003312 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032e8:	d013      	beq.n	8003312 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	4a18      	ldr	r2, [pc, #96]	; (8003350 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80032f0:	4293      	cmp	r3, r2
 80032f2:	d00e      	beq.n	8003312 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	4a16      	ldr	r2, [pc, #88]	; (8003354 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80032fa:	4293      	cmp	r3, r2
 80032fc:	d009      	beq.n	8003312 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	4a15      	ldr	r2, [pc, #84]	; (8003358 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003304:	4293      	cmp	r3, r2
 8003306:	d004      	beq.n	8003312 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	4a13      	ldr	r2, [pc, #76]	; (800335c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800330e:	4293      	cmp	r3, r2
 8003310:	d10c      	bne.n	800332c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003312:	68bb      	ldr	r3, [r7, #8]
 8003314:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003318:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	685b      	ldr	r3, [r3, #4]
 800331e:	68ba      	ldr	r2, [r7, #8]
 8003320:	4313      	orrs	r3, r2
 8003322:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	68ba      	ldr	r2, [r7, #8]
 800332a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2201      	movs	r2, #1
 8003330:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2200      	movs	r2, #0
 8003338:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800333c:	2300      	movs	r3, #0
}
 800333e:	4618      	mov	r0, r3
 8003340:	3714      	adds	r7, #20
 8003342:	46bd      	mov	sp, r7
 8003344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003348:	4770      	bx	lr
 800334a:	bf00      	nop
 800334c:	40010000 	.word	0x40010000
 8003350:	40000400 	.word	0x40000400
 8003354:	40000800 	.word	0x40000800
 8003358:	40000c00 	.word	0x40000c00
 800335c:	40014000 	.word	0x40014000

08003360 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003360:	b480      	push	{r7}
 8003362:	b083      	sub	sp, #12
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003368:	bf00      	nop
 800336a:	370c      	adds	r7, #12
 800336c:	46bd      	mov	sp, r7
 800336e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003372:	4770      	bx	lr

08003374 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003374:	b480      	push	{r7}
 8003376:	b083      	sub	sp, #12
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800337c:	bf00      	nop
 800337e:	370c      	adds	r7, #12
 8003380:	46bd      	mov	sp, r7
 8003382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003386:	4770      	bx	lr

08003388 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003388:	b580      	push	{r7, lr}
 800338a:	b082      	sub	sp, #8
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2b00      	cmp	r3, #0
 8003394:	d101      	bne.n	800339a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003396:	2301      	movs	r3, #1
 8003398:	e03f      	b.n	800341a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80033a0:	b2db      	uxtb	r3, r3
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d106      	bne.n	80033b4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	2200      	movs	r2, #0
 80033aa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80033ae:	6878      	ldr	r0, [r7, #4]
 80033b0:	f7fd fc52 	bl	8000c58 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	2224      	movs	r2, #36	; 0x24
 80033b8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	68da      	ldr	r2, [r3, #12]
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80033ca:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80033cc:	6878      	ldr	r0, [r7, #4]
 80033ce:	f000 fa69 	bl	80038a4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	691a      	ldr	r2, [r3, #16]
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80033e0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	695a      	ldr	r2, [r3, #20]
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80033f0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	68da      	ldr	r2, [r3, #12]
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003400:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	2200      	movs	r2, #0
 8003406:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2220      	movs	r2, #32
 800340c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2220      	movs	r2, #32
 8003414:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003418:	2300      	movs	r3, #0
}
 800341a:	4618      	mov	r0, r3
 800341c:	3708      	adds	r7, #8
 800341e:	46bd      	mov	sp, r7
 8003420:	bd80      	pop	{r7, pc}
	...

08003424 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003424:	b580      	push	{r7, lr}
 8003426:	b088      	sub	sp, #32
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	68db      	ldr	r3, [r3, #12]
 800343a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	695b      	ldr	r3, [r3, #20]
 8003442:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8003444:	2300      	movs	r3, #0
 8003446:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8003448:	2300      	movs	r3, #0
 800344a:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800344c:	69fb      	ldr	r3, [r7, #28]
 800344e:	f003 030f 	and.w	r3, r3, #15
 8003452:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8003454:	693b      	ldr	r3, [r7, #16]
 8003456:	2b00      	cmp	r3, #0
 8003458:	d10d      	bne.n	8003476 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800345a:	69fb      	ldr	r3, [r7, #28]
 800345c:	f003 0320 	and.w	r3, r3, #32
 8003460:	2b00      	cmp	r3, #0
 8003462:	d008      	beq.n	8003476 <HAL_UART_IRQHandler+0x52>
 8003464:	69bb      	ldr	r3, [r7, #24]
 8003466:	f003 0320 	and.w	r3, r3, #32
 800346a:	2b00      	cmp	r3, #0
 800346c:	d003      	beq.n	8003476 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800346e:	6878      	ldr	r0, [r7, #4]
 8003470:	f000 f996 	bl	80037a0 <UART_Receive_IT>
      return;
 8003474:	e0d1      	b.n	800361a <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003476:	693b      	ldr	r3, [r7, #16]
 8003478:	2b00      	cmp	r3, #0
 800347a:	f000 80b0 	beq.w	80035de <HAL_UART_IRQHandler+0x1ba>
 800347e:	697b      	ldr	r3, [r7, #20]
 8003480:	f003 0301 	and.w	r3, r3, #1
 8003484:	2b00      	cmp	r3, #0
 8003486:	d105      	bne.n	8003494 <HAL_UART_IRQHandler+0x70>
 8003488:	69bb      	ldr	r3, [r7, #24]
 800348a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800348e:	2b00      	cmp	r3, #0
 8003490:	f000 80a5 	beq.w	80035de <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003494:	69fb      	ldr	r3, [r7, #28]
 8003496:	f003 0301 	and.w	r3, r3, #1
 800349a:	2b00      	cmp	r3, #0
 800349c:	d00a      	beq.n	80034b4 <HAL_UART_IRQHandler+0x90>
 800349e:	69bb      	ldr	r3, [r7, #24]
 80034a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d005      	beq.n	80034b4 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034ac:	f043 0201 	orr.w	r2, r3, #1
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80034b4:	69fb      	ldr	r3, [r7, #28]
 80034b6:	f003 0304 	and.w	r3, r3, #4
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d00a      	beq.n	80034d4 <HAL_UART_IRQHandler+0xb0>
 80034be:	697b      	ldr	r3, [r7, #20]
 80034c0:	f003 0301 	and.w	r3, r3, #1
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d005      	beq.n	80034d4 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034cc:	f043 0202 	orr.w	r2, r3, #2
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80034d4:	69fb      	ldr	r3, [r7, #28]
 80034d6:	f003 0302 	and.w	r3, r3, #2
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d00a      	beq.n	80034f4 <HAL_UART_IRQHandler+0xd0>
 80034de:	697b      	ldr	r3, [r7, #20]
 80034e0:	f003 0301 	and.w	r3, r3, #1
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d005      	beq.n	80034f4 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034ec:	f043 0204 	orr.w	r2, r3, #4
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80034f4:	69fb      	ldr	r3, [r7, #28]
 80034f6:	f003 0308 	and.w	r3, r3, #8
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d00f      	beq.n	800351e <HAL_UART_IRQHandler+0xfa>
 80034fe:	69bb      	ldr	r3, [r7, #24]
 8003500:	f003 0320 	and.w	r3, r3, #32
 8003504:	2b00      	cmp	r3, #0
 8003506:	d104      	bne.n	8003512 <HAL_UART_IRQHandler+0xee>
 8003508:	697b      	ldr	r3, [r7, #20]
 800350a:	f003 0301 	and.w	r3, r3, #1
 800350e:	2b00      	cmp	r3, #0
 8003510:	d005      	beq.n	800351e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003516:	f043 0208 	orr.w	r2, r3, #8
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003522:	2b00      	cmp	r3, #0
 8003524:	d078      	beq.n	8003618 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003526:	69fb      	ldr	r3, [r7, #28]
 8003528:	f003 0320 	and.w	r3, r3, #32
 800352c:	2b00      	cmp	r3, #0
 800352e:	d007      	beq.n	8003540 <HAL_UART_IRQHandler+0x11c>
 8003530:	69bb      	ldr	r3, [r7, #24]
 8003532:	f003 0320 	and.w	r3, r3, #32
 8003536:	2b00      	cmp	r3, #0
 8003538:	d002      	beq.n	8003540 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 800353a:	6878      	ldr	r0, [r7, #4]
 800353c:	f000 f930 	bl	80037a0 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	695b      	ldr	r3, [r3, #20]
 8003546:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800354a:	2b40      	cmp	r3, #64	; 0x40
 800354c:	bf0c      	ite	eq
 800354e:	2301      	moveq	r3, #1
 8003550:	2300      	movne	r3, #0
 8003552:	b2db      	uxtb	r3, r3
 8003554:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800355a:	f003 0308 	and.w	r3, r3, #8
 800355e:	2b00      	cmp	r3, #0
 8003560:	d102      	bne.n	8003568 <HAL_UART_IRQHandler+0x144>
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	2b00      	cmp	r3, #0
 8003566:	d031      	beq.n	80035cc <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003568:	6878      	ldr	r0, [r7, #4]
 800356a:	f000 f879 	bl	8003660 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	695b      	ldr	r3, [r3, #20]
 8003574:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003578:	2b40      	cmp	r3, #64	; 0x40
 800357a:	d123      	bne.n	80035c4 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	695a      	ldr	r2, [r3, #20]
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800358a:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003590:	2b00      	cmp	r3, #0
 8003592:	d013      	beq.n	80035bc <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003598:	4a21      	ldr	r2, [pc, #132]	; (8003620 <HAL_UART_IRQHandler+0x1fc>)
 800359a:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035a0:	4618      	mov	r0, r3
 80035a2:	f7fe fa7b 	bl	8001a9c <HAL_DMA_Abort_IT>
 80035a6:	4603      	mov	r3, r0
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d016      	beq.n	80035da <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035b2:	687a      	ldr	r2, [r7, #4]
 80035b4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80035b6:	4610      	mov	r0, r2
 80035b8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80035ba:	e00e      	b.n	80035da <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80035bc:	6878      	ldr	r0, [r7, #4]
 80035be:	f000 f845 	bl	800364c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80035c2:	e00a      	b.n	80035da <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80035c4:	6878      	ldr	r0, [r7, #4]
 80035c6:	f000 f841 	bl	800364c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80035ca:	e006      	b.n	80035da <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80035cc:	6878      	ldr	r0, [r7, #4]
 80035ce:	f000 f83d 	bl	800364c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	2200      	movs	r2, #0
 80035d6:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 80035d8:	e01e      	b.n	8003618 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80035da:	bf00      	nop
    return;
 80035dc:	e01c      	b.n	8003618 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80035de:	69fb      	ldr	r3, [r7, #28]
 80035e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d008      	beq.n	80035fa <HAL_UART_IRQHandler+0x1d6>
 80035e8:	69bb      	ldr	r3, [r7, #24]
 80035ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d003      	beq.n	80035fa <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 80035f2:	6878      	ldr	r0, [r7, #4]
 80035f4:	f000 f866 	bl	80036c4 <UART_Transmit_IT>
    return;
 80035f8:	e00f      	b.n	800361a <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80035fa:	69fb      	ldr	r3, [r7, #28]
 80035fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003600:	2b00      	cmp	r3, #0
 8003602:	d00a      	beq.n	800361a <HAL_UART_IRQHandler+0x1f6>
 8003604:	69bb      	ldr	r3, [r7, #24]
 8003606:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800360a:	2b00      	cmp	r3, #0
 800360c:	d005      	beq.n	800361a <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 800360e:	6878      	ldr	r0, [r7, #4]
 8003610:	f000 f8ae 	bl	8003770 <UART_EndTransmit_IT>
    return;
 8003614:	bf00      	nop
 8003616:	e000      	b.n	800361a <HAL_UART_IRQHandler+0x1f6>
    return;
 8003618:	bf00      	nop
  }
}
 800361a:	3720      	adds	r7, #32
 800361c:	46bd      	mov	sp, r7
 800361e:	bd80      	pop	{r7, pc}
 8003620:	0800369d 	.word	0x0800369d

08003624 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003624:	b480      	push	{r7}
 8003626:	b083      	sub	sp, #12
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800362c:	bf00      	nop
 800362e:	370c      	adds	r7, #12
 8003630:	46bd      	mov	sp, r7
 8003632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003636:	4770      	bx	lr

08003638 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003638:	b480      	push	{r7}
 800363a:	b083      	sub	sp, #12
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003640:	bf00      	nop
 8003642:	370c      	adds	r7, #12
 8003644:	46bd      	mov	sp, r7
 8003646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364a:	4770      	bx	lr

0800364c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800364c:	b480      	push	{r7}
 800364e:	b083      	sub	sp, #12
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003654:	bf00      	nop
 8003656:	370c      	adds	r7, #12
 8003658:	46bd      	mov	sp, r7
 800365a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365e:	4770      	bx	lr

08003660 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003660:	b480      	push	{r7}
 8003662:	b083      	sub	sp, #12
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	68da      	ldr	r2, [r3, #12]
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003676:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	695a      	ldr	r2, [r3, #20]
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f022 0201 	bic.w	r2, r2, #1
 8003686:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2220      	movs	r2, #32
 800368c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8003690:	bf00      	nop
 8003692:	370c      	adds	r7, #12
 8003694:	46bd      	mov	sp, r7
 8003696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369a:	4770      	bx	lr

0800369c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800369c:	b580      	push	{r7, lr}
 800369e:	b084      	sub	sp, #16
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036a8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	2200      	movs	r2, #0
 80036ae:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	2200      	movs	r2, #0
 80036b4:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80036b6:	68f8      	ldr	r0, [r7, #12]
 80036b8:	f7ff ffc8 	bl	800364c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80036bc:	bf00      	nop
 80036be:	3710      	adds	r7, #16
 80036c0:	46bd      	mov	sp, r7
 80036c2:	bd80      	pop	{r7, pc}

080036c4 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80036c4:	b480      	push	{r7}
 80036c6:	b085      	sub	sp, #20
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80036d2:	b2db      	uxtb	r3, r3
 80036d4:	2b21      	cmp	r3, #33	; 0x21
 80036d6:	d144      	bne.n	8003762 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	689b      	ldr	r3, [r3, #8]
 80036dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80036e0:	d11a      	bne.n	8003718 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6a1b      	ldr	r3, [r3, #32]
 80036e6:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	881b      	ldrh	r3, [r3, #0]
 80036ec:	461a      	mov	r2, r3
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80036f6:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	691b      	ldr	r3, [r3, #16]
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d105      	bne.n	800370c <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6a1b      	ldr	r3, [r3, #32]
 8003704:	1c9a      	adds	r2, r3, #2
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	621a      	str	r2, [r3, #32]
 800370a:	e00e      	b.n	800372a <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	6a1b      	ldr	r3, [r3, #32]
 8003710:	1c5a      	adds	r2, r3, #1
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	621a      	str	r2, [r3, #32]
 8003716:	e008      	b.n	800372a <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6a1b      	ldr	r3, [r3, #32]
 800371c:	1c59      	adds	r1, r3, #1
 800371e:	687a      	ldr	r2, [r7, #4]
 8003720:	6211      	str	r1, [r2, #32]
 8003722:	781a      	ldrb	r2, [r3, #0]
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800372e:	b29b      	uxth	r3, r3
 8003730:	3b01      	subs	r3, #1
 8003732:	b29b      	uxth	r3, r3
 8003734:	687a      	ldr	r2, [r7, #4]
 8003736:	4619      	mov	r1, r3
 8003738:	84d1      	strh	r1, [r2, #38]	; 0x26
 800373a:	2b00      	cmp	r3, #0
 800373c:	d10f      	bne.n	800375e <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	68da      	ldr	r2, [r3, #12]
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800374c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	68da      	ldr	r2, [r3, #12]
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800375c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800375e:	2300      	movs	r3, #0
 8003760:	e000      	b.n	8003764 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8003762:	2302      	movs	r3, #2
  }
}
 8003764:	4618      	mov	r0, r3
 8003766:	3714      	adds	r7, #20
 8003768:	46bd      	mov	sp, r7
 800376a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376e:	4770      	bx	lr

08003770 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003770:	b580      	push	{r7, lr}
 8003772:	b082      	sub	sp, #8
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	68da      	ldr	r2, [r3, #12]
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003786:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2220      	movs	r2, #32
 800378c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003790:	6878      	ldr	r0, [r7, #4]
 8003792:	f7ff ff47 	bl	8003624 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003796:	2300      	movs	r3, #0
}
 8003798:	4618      	mov	r0, r3
 800379a:	3708      	adds	r7, #8
 800379c:	46bd      	mov	sp, r7
 800379e:	bd80      	pop	{r7, pc}

080037a0 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	b084      	sub	sp, #16
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80037ae:	b2db      	uxtb	r3, r3
 80037b0:	2b22      	cmp	r3, #34	; 0x22
 80037b2:	d171      	bne.n	8003898 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	689b      	ldr	r3, [r3, #8]
 80037b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037bc:	d123      	bne.n	8003806 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037c2:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	691b      	ldr	r3, [r3, #16]
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d10e      	bne.n	80037ea <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	685b      	ldr	r3, [r3, #4]
 80037d2:	b29b      	uxth	r3, r3
 80037d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80037d8:	b29a      	uxth	r2, r3
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037e2:	1c9a      	adds	r2, r3, #2
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	629a      	str	r2, [r3, #40]	; 0x28
 80037e8:	e029      	b.n	800383e <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	685b      	ldr	r3, [r3, #4]
 80037f0:	b29b      	uxth	r3, r3
 80037f2:	b2db      	uxtb	r3, r3
 80037f4:	b29a      	uxth	r2, r3
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037fe:	1c5a      	adds	r2, r3, #1
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	629a      	str	r2, [r3, #40]	; 0x28
 8003804:	e01b      	b.n	800383e <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	691b      	ldr	r3, [r3, #16]
 800380a:	2b00      	cmp	r3, #0
 800380c:	d10a      	bne.n	8003824 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	6858      	ldr	r0, [r3, #4]
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003818:	1c59      	adds	r1, r3, #1
 800381a:	687a      	ldr	r2, [r7, #4]
 800381c:	6291      	str	r1, [r2, #40]	; 0x28
 800381e:	b2c2      	uxtb	r2, r0
 8003820:	701a      	strb	r2, [r3, #0]
 8003822:	e00c      	b.n	800383e <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	685b      	ldr	r3, [r3, #4]
 800382a:	b2da      	uxtb	r2, r3
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003830:	1c58      	adds	r0, r3, #1
 8003832:	6879      	ldr	r1, [r7, #4]
 8003834:	6288      	str	r0, [r1, #40]	; 0x28
 8003836:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800383a:	b2d2      	uxtb	r2, r2
 800383c:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003842:	b29b      	uxth	r3, r3
 8003844:	3b01      	subs	r3, #1
 8003846:	b29b      	uxth	r3, r3
 8003848:	687a      	ldr	r2, [r7, #4]
 800384a:	4619      	mov	r1, r3
 800384c:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800384e:	2b00      	cmp	r3, #0
 8003850:	d120      	bne.n	8003894 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	68da      	ldr	r2, [r3, #12]
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f022 0220 	bic.w	r2, r2, #32
 8003860:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	68da      	ldr	r2, [r3, #12]
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003870:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	695a      	ldr	r2, [r3, #20]
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f022 0201 	bic.w	r2, r2, #1
 8003880:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	2220      	movs	r2, #32
 8003886:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800388a:	6878      	ldr	r0, [r7, #4]
 800388c:	f7ff fed4 	bl	8003638 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8003890:	2300      	movs	r3, #0
 8003892:	e002      	b.n	800389a <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8003894:	2300      	movs	r3, #0
 8003896:	e000      	b.n	800389a <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8003898:	2302      	movs	r3, #2
  }
}
 800389a:	4618      	mov	r0, r3
 800389c:	3710      	adds	r7, #16
 800389e:	46bd      	mov	sp, r7
 80038a0:	bd80      	pop	{r7, pc}
	...

080038a4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80038a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80038a8:	b085      	sub	sp, #20
 80038aa:	af00      	add	r7, sp, #0
 80038ac:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	691b      	ldr	r3, [r3, #16]
 80038b4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	68da      	ldr	r2, [r3, #12]
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	430a      	orrs	r2, r1
 80038c2:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	689a      	ldr	r2, [r3, #8]
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	691b      	ldr	r3, [r3, #16]
 80038cc:	431a      	orrs	r2, r3
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	695b      	ldr	r3, [r3, #20]
 80038d2:	431a      	orrs	r2, r3
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	69db      	ldr	r3, [r3, #28]
 80038d8:	4313      	orrs	r3, r2
 80038da:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	68db      	ldr	r3, [r3, #12]
 80038e2:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80038e6:	f023 030c 	bic.w	r3, r3, #12
 80038ea:	687a      	ldr	r2, [r7, #4]
 80038ec:	6812      	ldr	r2, [r2, #0]
 80038ee:	68f9      	ldr	r1, [r7, #12]
 80038f0:	430b      	orrs	r3, r1
 80038f2:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	695b      	ldr	r3, [r3, #20]
 80038fa:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	699a      	ldr	r2, [r3, #24]
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	430a      	orrs	r2, r1
 8003908:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	69db      	ldr	r3, [r3, #28]
 800390e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003912:	f040 818b 	bne.w	8003c2c <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	4ac1      	ldr	r2, [pc, #772]	; (8003c20 <UART_SetConfig+0x37c>)
 800391c:	4293      	cmp	r3, r2
 800391e:	d005      	beq.n	800392c <UART_SetConfig+0x88>
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	4abf      	ldr	r2, [pc, #764]	; (8003c24 <UART_SetConfig+0x380>)
 8003926:	4293      	cmp	r3, r2
 8003928:	f040 80bd 	bne.w	8003aa6 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800392c:	f7ff f8fc 	bl	8002b28 <HAL_RCC_GetPCLK2Freq>
 8003930:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003932:	68bb      	ldr	r3, [r7, #8]
 8003934:	461d      	mov	r5, r3
 8003936:	f04f 0600 	mov.w	r6, #0
 800393a:	46a8      	mov	r8, r5
 800393c:	46b1      	mov	r9, r6
 800393e:	eb18 0308 	adds.w	r3, r8, r8
 8003942:	eb49 0409 	adc.w	r4, r9, r9
 8003946:	4698      	mov	r8, r3
 8003948:	46a1      	mov	r9, r4
 800394a:	eb18 0805 	adds.w	r8, r8, r5
 800394e:	eb49 0906 	adc.w	r9, r9, r6
 8003952:	f04f 0100 	mov.w	r1, #0
 8003956:	f04f 0200 	mov.w	r2, #0
 800395a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800395e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003962:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003966:	4688      	mov	r8, r1
 8003968:	4691      	mov	r9, r2
 800396a:	eb18 0005 	adds.w	r0, r8, r5
 800396e:	eb49 0106 	adc.w	r1, r9, r6
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	685b      	ldr	r3, [r3, #4]
 8003976:	461d      	mov	r5, r3
 8003978:	f04f 0600 	mov.w	r6, #0
 800397c:	196b      	adds	r3, r5, r5
 800397e:	eb46 0406 	adc.w	r4, r6, r6
 8003982:	461a      	mov	r2, r3
 8003984:	4623      	mov	r3, r4
 8003986:	f7fc fc27 	bl	80001d8 <__aeabi_uldivmod>
 800398a:	4603      	mov	r3, r0
 800398c:	460c      	mov	r4, r1
 800398e:	461a      	mov	r2, r3
 8003990:	4ba5      	ldr	r3, [pc, #660]	; (8003c28 <UART_SetConfig+0x384>)
 8003992:	fba3 2302 	umull	r2, r3, r3, r2
 8003996:	095b      	lsrs	r3, r3, #5
 8003998:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800399c:	68bb      	ldr	r3, [r7, #8]
 800399e:	461d      	mov	r5, r3
 80039a0:	f04f 0600 	mov.w	r6, #0
 80039a4:	46a9      	mov	r9, r5
 80039a6:	46b2      	mov	sl, r6
 80039a8:	eb19 0309 	adds.w	r3, r9, r9
 80039ac:	eb4a 040a 	adc.w	r4, sl, sl
 80039b0:	4699      	mov	r9, r3
 80039b2:	46a2      	mov	sl, r4
 80039b4:	eb19 0905 	adds.w	r9, r9, r5
 80039b8:	eb4a 0a06 	adc.w	sl, sl, r6
 80039bc:	f04f 0100 	mov.w	r1, #0
 80039c0:	f04f 0200 	mov.w	r2, #0
 80039c4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80039c8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80039cc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80039d0:	4689      	mov	r9, r1
 80039d2:	4692      	mov	sl, r2
 80039d4:	eb19 0005 	adds.w	r0, r9, r5
 80039d8:	eb4a 0106 	adc.w	r1, sl, r6
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	685b      	ldr	r3, [r3, #4]
 80039e0:	461d      	mov	r5, r3
 80039e2:	f04f 0600 	mov.w	r6, #0
 80039e6:	196b      	adds	r3, r5, r5
 80039e8:	eb46 0406 	adc.w	r4, r6, r6
 80039ec:	461a      	mov	r2, r3
 80039ee:	4623      	mov	r3, r4
 80039f0:	f7fc fbf2 	bl	80001d8 <__aeabi_uldivmod>
 80039f4:	4603      	mov	r3, r0
 80039f6:	460c      	mov	r4, r1
 80039f8:	461a      	mov	r2, r3
 80039fa:	4b8b      	ldr	r3, [pc, #556]	; (8003c28 <UART_SetConfig+0x384>)
 80039fc:	fba3 1302 	umull	r1, r3, r3, r2
 8003a00:	095b      	lsrs	r3, r3, #5
 8003a02:	2164      	movs	r1, #100	; 0x64
 8003a04:	fb01 f303 	mul.w	r3, r1, r3
 8003a08:	1ad3      	subs	r3, r2, r3
 8003a0a:	00db      	lsls	r3, r3, #3
 8003a0c:	3332      	adds	r3, #50	; 0x32
 8003a0e:	4a86      	ldr	r2, [pc, #536]	; (8003c28 <UART_SetConfig+0x384>)
 8003a10:	fba2 2303 	umull	r2, r3, r2, r3
 8003a14:	095b      	lsrs	r3, r3, #5
 8003a16:	005b      	lsls	r3, r3, #1
 8003a18:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003a1c:	4498      	add	r8, r3
 8003a1e:	68bb      	ldr	r3, [r7, #8]
 8003a20:	461d      	mov	r5, r3
 8003a22:	f04f 0600 	mov.w	r6, #0
 8003a26:	46a9      	mov	r9, r5
 8003a28:	46b2      	mov	sl, r6
 8003a2a:	eb19 0309 	adds.w	r3, r9, r9
 8003a2e:	eb4a 040a 	adc.w	r4, sl, sl
 8003a32:	4699      	mov	r9, r3
 8003a34:	46a2      	mov	sl, r4
 8003a36:	eb19 0905 	adds.w	r9, r9, r5
 8003a3a:	eb4a 0a06 	adc.w	sl, sl, r6
 8003a3e:	f04f 0100 	mov.w	r1, #0
 8003a42:	f04f 0200 	mov.w	r2, #0
 8003a46:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003a4a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003a4e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003a52:	4689      	mov	r9, r1
 8003a54:	4692      	mov	sl, r2
 8003a56:	eb19 0005 	adds.w	r0, r9, r5
 8003a5a:	eb4a 0106 	adc.w	r1, sl, r6
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	685b      	ldr	r3, [r3, #4]
 8003a62:	461d      	mov	r5, r3
 8003a64:	f04f 0600 	mov.w	r6, #0
 8003a68:	196b      	adds	r3, r5, r5
 8003a6a:	eb46 0406 	adc.w	r4, r6, r6
 8003a6e:	461a      	mov	r2, r3
 8003a70:	4623      	mov	r3, r4
 8003a72:	f7fc fbb1 	bl	80001d8 <__aeabi_uldivmod>
 8003a76:	4603      	mov	r3, r0
 8003a78:	460c      	mov	r4, r1
 8003a7a:	461a      	mov	r2, r3
 8003a7c:	4b6a      	ldr	r3, [pc, #424]	; (8003c28 <UART_SetConfig+0x384>)
 8003a7e:	fba3 1302 	umull	r1, r3, r3, r2
 8003a82:	095b      	lsrs	r3, r3, #5
 8003a84:	2164      	movs	r1, #100	; 0x64
 8003a86:	fb01 f303 	mul.w	r3, r1, r3
 8003a8a:	1ad3      	subs	r3, r2, r3
 8003a8c:	00db      	lsls	r3, r3, #3
 8003a8e:	3332      	adds	r3, #50	; 0x32
 8003a90:	4a65      	ldr	r2, [pc, #404]	; (8003c28 <UART_SetConfig+0x384>)
 8003a92:	fba2 2303 	umull	r2, r3, r2, r3
 8003a96:	095b      	lsrs	r3, r3, #5
 8003a98:	f003 0207 	and.w	r2, r3, #7
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	4442      	add	r2, r8
 8003aa2:	609a      	str	r2, [r3, #8]
 8003aa4:	e26f      	b.n	8003f86 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003aa6:	f7ff f82b 	bl	8002b00 <HAL_RCC_GetPCLK1Freq>
 8003aaa:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003aac:	68bb      	ldr	r3, [r7, #8]
 8003aae:	461d      	mov	r5, r3
 8003ab0:	f04f 0600 	mov.w	r6, #0
 8003ab4:	46a8      	mov	r8, r5
 8003ab6:	46b1      	mov	r9, r6
 8003ab8:	eb18 0308 	adds.w	r3, r8, r8
 8003abc:	eb49 0409 	adc.w	r4, r9, r9
 8003ac0:	4698      	mov	r8, r3
 8003ac2:	46a1      	mov	r9, r4
 8003ac4:	eb18 0805 	adds.w	r8, r8, r5
 8003ac8:	eb49 0906 	adc.w	r9, r9, r6
 8003acc:	f04f 0100 	mov.w	r1, #0
 8003ad0:	f04f 0200 	mov.w	r2, #0
 8003ad4:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003ad8:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003adc:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003ae0:	4688      	mov	r8, r1
 8003ae2:	4691      	mov	r9, r2
 8003ae4:	eb18 0005 	adds.w	r0, r8, r5
 8003ae8:	eb49 0106 	adc.w	r1, r9, r6
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	685b      	ldr	r3, [r3, #4]
 8003af0:	461d      	mov	r5, r3
 8003af2:	f04f 0600 	mov.w	r6, #0
 8003af6:	196b      	adds	r3, r5, r5
 8003af8:	eb46 0406 	adc.w	r4, r6, r6
 8003afc:	461a      	mov	r2, r3
 8003afe:	4623      	mov	r3, r4
 8003b00:	f7fc fb6a 	bl	80001d8 <__aeabi_uldivmod>
 8003b04:	4603      	mov	r3, r0
 8003b06:	460c      	mov	r4, r1
 8003b08:	461a      	mov	r2, r3
 8003b0a:	4b47      	ldr	r3, [pc, #284]	; (8003c28 <UART_SetConfig+0x384>)
 8003b0c:	fba3 2302 	umull	r2, r3, r3, r2
 8003b10:	095b      	lsrs	r3, r3, #5
 8003b12:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003b16:	68bb      	ldr	r3, [r7, #8]
 8003b18:	461d      	mov	r5, r3
 8003b1a:	f04f 0600 	mov.w	r6, #0
 8003b1e:	46a9      	mov	r9, r5
 8003b20:	46b2      	mov	sl, r6
 8003b22:	eb19 0309 	adds.w	r3, r9, r9
 8003b26:	eb4a 040a 	adc.w	r4, sl, sl
 8003b2a:	4699      	mov	r9, r3
 8003b2c:	46a2      	mov	sl, r4
 8003b2e:	eb19 0905 	adds.w	r9, r9, r5
 8003b32:	eb4a 0a06 	adc.w	sl, sl, r6
 8003b36:	f04f 0100 	mov.w	r1, #0
 8003b3a:	f04f 0200 	mov.w	r2, #0
 8003b3e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003b42:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003b46:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003b4a:	4689      	mov	r9, r1
 8003b4c:	4692      	mov	sl, r2
 8003b4e:	eb19 0005 	adds.w	r0, r9, r5
 8003b52:	eb4a 0106 	adc.w	r1, sl, r6
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	685b      	ldr	r3, [r3, #4]
 8003b5a:	461d      	mov	r5, r3
 8003b5c:	f04f 0600 	mov.w	r6, #0
 8003b60:	196b      	adds	r3, r5, r5
 8003b62:	eb46 0406 	adc.w	r4, r6, r6
 8003b66:	461a      	mov	r2, r3
 8003b68:	4623      	mov	r3, r4
 8003b6a:	f7fc fb35 	bl	80001d8 <__aeabi_uldivmod>
 8003b6e:	4603      	mov	r3, r0
 8003b70:	460c      	mov	r4, r1
 8003b72:	461a      	mov	r2, r3
 8003b74:	4b2c      	ldr	r3, [pc, #176]	; (8003c28 <UART_SetConfig+0x384>)
 8003b76:	fba3 1302 	umull	r1, r3, r3, r2
 8003b7a:	095b      	lsrs	r3, r3, #5
 8003b7c:	2164      	movs	r1, #100	; 0x64
 8003b7e:	fb01 f303 	mul.w	r3, r1, r3
 8003b82:	1ad3      	subs	r3, r2, r3
 8003b84:	00db      	lsls	r3, r3, #3
 8003b86:	3332      	adds	r3, #50	; 0x32
 8003b88:	4a27      	ldr	r2, [pc, #156]	; (8003c28 <UART_SetConfig+0x384>)
 8003b8a:	fba2 2303 	umull	r2, r3, r2, r3
 8003b8e:	095b      	lsrs	r3, r3, #5
 8003b90:	005b      	lsls	r3, r3, #1
 8003b92:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003b96:	4498      	add	r8, r3
 8003b98:	68bb      	ldr	r3, [r7, #8]
 8003b9a:	461d      	mov	r5, r3
 8003b9c:	f04f 0600 	mov.w	r6, #0
 8003ba0:	46a9      	mov	r9, r5
 8003ba2:	46b2      	mov	sl, r6
 8003ba4:	eb19 0309 	adds.w	r3, r9, r9
 8003ba8:	eb4a 040a 	adc.w	r4, sl, sl
 8003bac:	4699      	mov	r9, r3
 8003bae:	46a2      	mov	sl, r4
 8003bb0:	eb19 0905 	adds.w	r9, r9, r5
 8003bb4:	eb4a 0a06 	adc.w	sl, sl, r6
 8003bb8:	f04f 0100 	mov.w	r1, #0
 8003bbc:	f04f 0200 	mov.w	r2, #0
 8003bc0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003bc4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003bc8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003bcc:	4689      	mov	r9, r1
 8003bce:	4692      	mov	sl, r2
 8003bd0:	eb19 0005 	adds.w	r0, r9, r5
 8003bd4:	eb4a 0106 	adc.w	r1, sl, r6
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	685b      	ldr	r3, [r3, #4]
 8003bdc:	461d      	mov	r5, r3
 8003bde:	f04f 0600 	mov.w	r6, #0
 8003be2:	196b      	adds	r3, r5, r5
 8003be4:	eb46 0406 	adc.w	r4, r6, r6
 8003be8:	461a      	mov	r2, r3
 8003bea:	4623      	mov	r3, r4
 8003bec:	f7fc faf4 	bl	80001d8 <__aeabi_uldivmod>
 8003bf0:	4603      	mov	r3, r0
 8003bf2:	460c      	mov	r4, r1
 8003bf4:	461a      	mov	r2, r3
 8003bf6:	4b0c      	ldr	r3, [pc, #48]	; (8003c28 <UART_SetConfig+0x384>)
 8003bf8:	fba3 1302 	umull	r1, r3, r3, r2
 8003bfc:	095b      	lsrs	r3, r3, #5
 8003bfe:	2164      	movs	r1, #100	; 0x64
 8003c00:	fb01 f303 	mul.w	r3, r1, r3
 8003c04:	1ad3      	subs	r3, r2, r3
 8003c06:	00db      	lsls	r3, r3, #3
 8003c08:	3332      	adds	r3, #50	; 0x32
 8003c0a:	4a07      	ldr	r2, [pc, #28]	; (8003c28 <UART_SetConfig+0x384>)
 8003c0c:	fba2 2303 	umull	r2, r3, r2, r3
 8003c10:	095b      	lsrs	r3, r3, #5
 8003c12:	f003 0207 	and.w	r2, r3, #7
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	4442      	add	r2, r8
 8003c1c:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8003c1e:	e1b2      	b.n	8003f86 <UART_SetConfig+0x6e2>
 8003c20:	40011000 	.word	0x40011000
 8003c24:	40011400 	.word	0x40011400
 8003c28:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	4ad7      	ldr	r2, [pc, #860]	; (8003f90 <UART_SetConfig+0x6ec>)
 8003c32:	4293      	cmp	r3, r2
 8003c34:	d005      	beq.n	8003c42 <UART_SetConfig+0x39e>
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	4ad6      	ldr	r2, [pc, #856]	; (8003f94 <UART_SetConfig+0x6f0>)
 8003c3c:	4293      	cmp	r3, r2
 8003c3e:	f040 80d1 	bne.w	8003de4 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8003c42:	f7fe ff71 	bl	8002b28 <HAL_RCC_GetPCLK2Freq>
 8003c46:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003c48:	68bb      	ldr	r3, [r7, #8]
 8003c4a:	469a      	mov	sl, r3
 8003c4c:	f04f 0b00 	mov.w	fp, #0
 8003c50:	46d0      	mov	r8, sl
 8003c52:	46d9      	mov	r9, fp
 8003c54:	eb18 0308 	adds.w	r3, r8, r8
 8003c58:	eb49 0409 	adc.w	r4, r9, r9
 8003c5c:	4698      	mov	r8, r3
 8003c5e:	46a1      	mov	r9, r4
 8003c60:	eb18 080a 	adds.w	r8, r8, sl
 8003c64:	eb49 090b 	adc.w	r9, r9, fp
 8003c68:	f04f 0100 	mov.w	r1, #0
 8003c6c:	f04f 0200 	mov.w	r2, #0
 8003c70:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003c74:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003c78:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003c7c:	4688      	mov	r8, r1
 8003c7e:	4691      	mov	r9, r2
 8003c80:	eb1a 0508 	adds.w	r5, sl, r8
 8003c84:	eb4b 0609 	adc.w	r6, fp, r9
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	685b      	ldr	r3, [r3, #4]
 8003c8c:	4619      	mov	r1, r3
 8003c8e:	f04f 0200 	mov.w	r2, #0
 8003c92:	f04f 0300 	mov.w	r3, #0
 8003c96:	f04f 0400 	mov.w	r4, #0
 8003c9a:	0094      	lsls	r4, r2, #2
 8003c9c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003ca0:	008b      	lsls	r3, r1, #2
 8003ca2:	461a      	mov	r2, r3
 8003ca4:	4623      	mov	r3, r4
 8003ca6:	4628      	mov	r0, r5
 8003ca8:	4631      	mov	r1, r6
 8003caa:	f7fc fa95 	bl	80001d8 <__aeabi_uldivmod>
 8003cae:	4603      	mov	r3, r0
 8003cb0:	460c      	mov	r4, r1
 8003cb2:	461a      	mov	r2, r3
 8003cb4:	4bb8      	ldr	r3, [pc, #736]	; (8003f98 <UART_SetConfig+0x6f4>)
 8003cb6:	fba3 2302 	umull	r2, r3, r3, r2
 8003cba:	095b      	lsrs	r3, r3, #5
 8003cbc:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003cc0:	68bb      	ldr	r3, [r7, #8]
 8003cc2:	469b      	mov	fp, r3
 8003cc4:	f04f 0c00 	mov.w	ip, #0
 8003cc8:	46d9      	mov	r9, fp
 8003cca:	46e2      	mov	sl, ip
 8003ccc:	eb19 0309 	adds.w	r3, r9, r9
 8003cd0:	eb4a 040a 	adc.w	r4, sl, sl
 8003cd4:	4699      	mov	r9, r3
 8003cd6:	46a2      	mov	sl, r4
 8003cd8:	eb19 090b 	adds.w	r9, r9, fp
 8003cdc:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003ce0:	f04f 0100 	mov.w	r1, #0
 8003ce4:	f04f 0200 	mov.w	r2, #0
 8003ce8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003cec:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003cf0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003cf4:	4689      	mov	r9, r1
 8003cf6:	4692      	mov	sl, r2
 8003cf8:	eb1b 0509 	adds.w	r5, fp, r9
 8003cfc:	eb4c 060a 	adc.w	r6, ip, sl
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	685b      	ldr	r3, [r3, #4]
 8003d04:	4619      	mov	r1, r3
 8003d06:	f04f 0200 	mov.w	r2, #0
 8003d0a:	f04f 0300 	mov.w	r3, #0
 8003d0e:	f04f 0400 	mov.w	r4, #0
 8003d12:	0094      	lsls	r4, r2, #2
 8003d14:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003d18:	008b      	lsls	r3, r1, #2
 8003d1a:	461a      	mov	r2, r3
 8003d1c:	4623      	mov	r3, r4
 8003d1e:	4628      	mov	r0, r5
 8003d20:	4631      	mov	r1, r6
 8003d22:	f7fc fa59 	bl	80001d8 <__aeabi_uldivmod>
 8003d26:	4603      	mov	r3, r0
 8003d28:	460c      	mov	r4, r1
 8003d2a:	461a      	mov	r2, r3
 8003d2c:	4b9a      	ldr	r3, [pc, #616]	; (8003f98 <UART_SetConfig+0x6f4>)
 8003d2e:	fba3 1302 	umull	r1, r3, r3, r2
 8003d32:	095b      	lsrs	r3, r3, #5
 8003d34:	2164      	movs	r1, #100	; 0x64
 8003d36:	fb01 f303 	mul.w	r3, r1, r3
 8003d3a:	1ad3      	subs	r3, r2, r3
 8003d3c:	011b      	lsls	r3, r3, #4
 8003d3e:	3332      	adds	r3, #50	; 0x32
 8003d40:	4a95      	ldr	r2, [pc, #596]	; (8003f98 <UART_SetConfig+0x6f4>)
 8003d42:	fba2 2303 	umull	r2, r3, r2, r3
 8003d46:	095b      	lsrs	r3, r3, #5
 8003d48:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003d4c:	4498      	add	r8, r3
 8003d4e:	68bb      	ldr	r3, [r7, #8]
 8003d50:	469b      	mov	fp, r3
 8003d52:	f04f 0c00 	mov.w	ip, #0
 8003d56:	46d9      	mov	r9, fp
 8003d58:	46e2      	mov	sl, ip
 8003d5a:	eb19 0309 	adds.w	r3, r9, r9
 8003d5e:	eb4a 040a 	adc.w	r4, sl, sl
 8003d62:	4699      	mov	r9, r3
 8003d64:	46a2      	mov	sl, r4
 8003d66:	eb19 090b 	adds.w	r9, r9, fp
 8003d6a:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003d6e:	f04f 0100 	mov.w	r1, #0
 8003d72:	f04f 0200 	mov.w	r2, #0
 8003d76:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003d7a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003d7e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003d82:	4689      	mov	r9, r1
 8003d84:	4692      	mov	sl, r2
 8003d86:	eb1b 0509 	adds.w	r5, fp, r9
 8003d8a:	eb4c 060a 	adc.w	r6, ip, sl
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	685b      	ldr	r3, [r3, #4]
 8003d92:	4619      	mov	r1, r3
 8003d94:	f04f 0200 	mov.w	r2, #0
 8003d98:	f04f 0300 	mov.w	r3, #0
 8003d9c:	f04f 0400 	mov.w	r4, #0
 8003da0:	0094      	lsls	r4, r2, #2
 8003da2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003da6:	008b      	lsls	r3, r1, #2
 8003da8:	461a      	mov	r2, r3
 8003daa:	4623      	mov	r3, r4
 8003dac:	4628      	mov	r0, r5
 8003dae:	4631      	mov	r1, r6
 8003db0:	f7fc fa12 	bl	80001d8 <__aeabi_uldivmod>
 8003db4:	4603      	mov	r3, r0
 8003db6:	460c      	mov	r4, r1
 8003db8:	461a      	mov	r2, r3
 8003dba:	4b77      	ldr	r3, [pc, #476]	; (8003f98 <UART_SetConfig+0x6f4>)
 8003dbc:	fba3 1302 	umull	r1, r3, r3, r2
 8003dc0:	095b      	lsrs	r3, r3, #5
 8003dc2:	2164      	movs	r1, #100	; 0x64
 8003dc4:	fb01 f303 	mul.w	r3, r1, r3
 8003dc8:	1ad3      	subs	r3, r2, r3
 8003dca:	011b      	lsls	r3, r3, #4
 8003dcc:	3332      	adds	r3, #50	; 0x32
 8003dce:	4a72      	ldr	r2, [pc, #456]	; (8003f98 <UART_SetConfig+0x6f4>)
 8003dd0:	fba2 2303 	umull	r2, r3, r2, r3
 8003dd4:	095b      	lsrs	r3, r3, #5
 8003dd6:	f003 020f 	and.w	r2, r3, #15
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	4442      	add	r2, r8
 8003de0:	609a      	str	r2, [r3, #8]
 8003de2:	e0d0      	b.n	8003f86 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8003de4:	f7fe fe8c 	bl	8002b00 <HAL_RCC_GetPCLK1Freq>
 8003de8:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003dea:	68bb      	ldr	r3, [r7, #8]
 8003dec:	469a      	mov	sl, r3
 8003dee:	f04f 0b00 	mov.w	fp, #0
 8003df2:	46d0      	mov	r8, sl
 8003df4:	46d9      	mov	r9, fp
 8003df6:	eb18 0308 	adds.w	r3, r8, r8
 8003dfa:	eb49 0409 	adc.w	r4, r9, r9
 8003dfe:	4698      	mov	r8, r3
 8003e00:	46a1      	mov	r9, r4
 8003e02:	eb18 080a 	adds.w	r8, r8, sl
 8003e06:	eb49 090b 	adc.w	r9, r9, fp
 8003e0a:	f04f 0100 	mov.w	r1, #0
 8003e0e:	f04f 0200 	mov.w	r2, #0
 8003e12:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003e16:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003e1a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003e1e:	4688      	mov	r8, r1
 8003e20:	4691      	mov	r9, r2
 8003e22:	eb1a 0508 	adds.w	r5, sl, r8
 8003e26:	eb4b 0609 	adc.w	r6, fp, r9
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	685b      	ldr	r3, [r3, #4]
 8003e2e:	4619      	mov	r1, r3
 8003e30:	f04f 0200 	mov.w	r2, #0
 8003e34:	f04f 0300 	mov.w	r3, #0
 8003e38:	f04f 0400 	mov.w	r4, #0
 8003e3c:	0094      	lsls	r4, r2, #2
 8003e3e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003e42:	008b      	lsls	r3, r1, #2
 8003e44:	461a      	mov	r2, r3
 8003e46:	4623      	mov	r3, r4
 8003e48:	4628      	mov	r0, r5
 8003e4a:	4631      	mov	r1, r6
 8003e4c:	f7fc f9c4 	bl	80001d8 <__aeabi_uldivmod>
 8003e50:	4603      	mov	r3, r0
 8003e52:	460c      	mov	r4, r1
 8003e54:	461a      	mov	r2, r3
 8003e56:	4b50      	ldr	r3, [pc, #320]	; (8003f98 <UART_SetConfig+0x6f4>)
 8003e58:	fba3 2302 	umull	r2, r3, r3, r2
 8003e5c:	095b      	lsrs	r3, r3, #5
 8003e5e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003e62:	68bb      	ldr	r3, [r7, #8]
 8003e64:	469b      	mov	fp, r3
 8003e66:	f04f 0c00 	mov.w	ip, #0
 8003e6a:	46d9      	mov	r9, fp
 8003e6c:	46e2      	mov	sl, ip
 8003e6e:	eb19 0309 	adds.w	r3, r9, r9
 8003e72:	eb4a 040a 	adc.w	r4, sl, sl
 8003e76:	4699      	mov	r9, r3
 8003e78:	46a2      	mov	sl, r4
 8003e7a:	eb19 090b 	adds.w	r9, r9, fp
 8003e7e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003e82:	f04f 0100 	mov.w	r1, #0
 8003e86:	f04f 0200 	mov.w	r2, #0
 8003e8a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003e8e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003e92:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003e96:	4689      	mov	r9, r1
 8003e98:	4692      	mov	sl, r2
 8003e9a:	eb1b 0509 	adds.w	r5, fp, r9
 8003e9e:	eb4c 060a 	adc.w	r6, ip, sl
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	685b      	ldr	r3, [r3, #4]
 8003ea6:	4619      	mov	r1, r3
 8003ea8:	f04f 0200 	mov.w	r2, #0
 8003eac:	f04f 0300 	mov.w	r3, #0
 8003eb0:	f04f 0400 	mov.w	r4, #0
 8003eb4:	0094      	lsls	r4, r2, #2
 8003eb6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003eba:	008b      	lsls	r3, r1, #2
 8003ebc:	461a      	mov	r2, r3
 8003ebe:	4623      	mov	r3, r4
 8003ec0:	4628      	mov	r0, r5
 8003ec2:	4631      	mov	r1, r6
 8003ec4:	f7fc f988 	bl	80001d8 <__aeabi_uldivmod>
 8003ec8:	4603      	mov	r3, r0
 8003eca:	460c      	mov	r4, r1
 8003ecc:	461a      	mov	r2, r3
 8003ece:	4b32      	ldr	r3, [pc, #200]	; (8003f98 <UART_SetConfig+0x6f4>)
 8003ed0:	fba3 1302 	umull	r1, r3, r3, r2
 8003ed4:	095b      	lsrs	r3, r3, #5
 8003ed6:	2164      	movs	r1, #100	; 0x64
 8003ed8:	fb01 f303 	mul.w	r3, r1, r3
 8003edc:	1ad3      	subs	r3, r2, r3
 8003ede:	011b      	lsls	r3, r3, #4
 8003ee0:	3332      	adds	r3, #50	; 0x32
 8003ee2:	4a2d      	ldr	r2, [pc, #180]	; (8003f98 <UART_SetConfig+0x6f4>)
 8003ee4:	fba2 2303 	umull	r2, r3, r2, r3
 8003ee8:	095b      	lsrs	r3, r3, #5
 8003eea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003eee:	4498      	add	r8, r3
 8003ef0:	68bb      	ldr	r3, [r7, #8]
 8003ef2:	469b      	mov	fp, r3
 8003ef4:	f04f 0c00 	mov.w	ip, #0
 8003ef8:	46d9      	mov	r9, fp
 8003efa:	46e2      	mov	sl, ip
 8003efc:	eb19 0309 	adds.w	r3, r9, r9
 8003f00:	eb4a 040a 	adc.w	r4, sl, sl
 8003f04:	4699      	mov	r9, r3
 8003f06:	46a2      	mov	sl, r4
 8003f08:	eb19 090b 	adds.w	r9, r9, fp
 8003f0c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003f10:	f04f 0100 	mov.w	r1, #0
 8003f14:	f04f 0200 	mov.w	r2, #0
 8003f18:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003f1c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003f20:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003f24:	4689      	mov	r9, r1
 8003f26:	4692      	mov	sl, r2
 8003f28:	eb1b 0509 	adds.w	r5, fp, r9
 8003f2c:	eb4c 060a 	adc.w	r6, ip, sl
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	685b      	ldr	r3, [r3, #4]
 8003f34:	4619      	mov	r1, r3
 8003f36:	f04f 0200 	mov.w	r2, #0
 8003f3a:	f04f 0300 	mov.w	r3, #0
 8003f3e:	f04f 0400 	mov.w	r4, #0
 8003f42:	0094      	lsls	r4, r2, #2
 8003f44:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003f48:	008b      	lsls	r3, r1, #2
 8003f4a:	461a      	mov	r2, r3
 8003f4c:	4623      	mov	r3, r4
 8003f4e:	4628      	mov	r0, r5
 8003f50:	4631      	mov	r1, r6
 8003f52:	f7fc f941 	bl	80001d8 <__aeabi_uldivmod>
 8003f56:	4603      	mov	r3, r0
 8003f58:	460c      	mov	r4, r1
 8003f5a:	461a      	mov	r2, r3
 8003f5c:	4b0e      	ldr	r3, [pc, #56]	; (8003f98 <UART_SetConfig+0x6f4>)
 8003f5e:	fba3 1302 	umull	r1, r3, r3, r2
 8003f62:	095b      	lsrs	r3, r3, #5
 8003f64:	2164      	movs	r1, #100	; 0x64
 8003f66:	fb01 f303 	mul.w	r3, r1, r3
 8003f6a:	1ad3      	subs	r3, r2, r3
 8003f6c:	011b      	lsls	r3, r3, #4
 8003f6e:	3332      	adds	r3, #50	; 0x32
 8003f70:	4a09      	ldr	r2, [pc, #36]	; (8003f98 <UART_SetConfig+0x6f4>)
 8003f72:	fba2 2303 	umull	r2, r3, r2, r3
 8003f76:	095b      	lsrs	r3, r3, #5
 8003f78:	f003 020f 	and.w	r2, r3, #15
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	4442      	add	r2, r8
 8003f82:	609a      	str	r2, [r3, #8]
}
 8003f84:	e7ff      	b.n	8003f86 <UART_SetConfig+0x6e2>
 8003f86:	bf00      	nop
 8003f88:	3714      	adds	r7, #20
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003f90:	40011000 	.word	0x40011000
 8003f94:	40011400 	.word	0x40011400
 8003f98:	51eb851f 	.word	0x51eb851f

08003f9c <__libc_init_array>:
 8003f9c:	b570      	push	{r4, r5, r6, lr}
 8003f9e:	4e0d      	ldr	r6, [pc, #52]	; (8003fd4 <__libc_init_array+0x38>)
 8003fa0:	4c0d      	ldr	r4, [pc, #52]	; (8003fd8 <__libc_init_array+0x3c>)
 8003fa2:	1ba4      	subs	r4, r4, r6
 8003fa4:	10a4      	asrs	r4, r4, #2
 8003fa6:	2500      	movs	r5, #0
 8003fa8:	42a5      	cmp	r5, r4
 8003faa:	d109      	bne.n	8003fc0 <__libc_init_array+0x24>
 8003fac:	4e0b      	ldr	r6, [pc, #44]	; (8003fdc <__libc_init_array+0x40>)
 8003fae:	4c0c      	ldr	r4, [pc, #48]	; (8003fe0 <__libc_init_array+0x44>)
 8003fb0:	f000 f820 	bl	8003ff4 <_init>
 8003fb4:	1ba4      	subs	r4, r4, r6
 8003fb6:	10a4      	asrs	r4, r4, #2
 8003fb8:	2500      	movs	r5, #0
 8003fba:	42a5      	cmp	r5, r4
 8003fbc:	d105      	bne.n	8003fca <__libc_init_array+0x2e>
 8003fbe:	bd70      	pop	{r4, r5, r6, pc}
 8003fc0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003fc4:	4798      	blx	r3
 8003fc6:	3501      	adds	r5, #1
 8003fc8:	e7ee      	b.n	8003fa8 <__libc_init_array+0xc>
 8003fca:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003fce:	4798      	blx	r3
 8003fd0:	3501      	adds	r5, #1
 8003fd2:	e7f2      	b.n	8003fba <__libc_init_array+0x1e>
 8003fd4:	08004034 	.word	0x08004034
 8003fd8:	08004034 	.word	0x08004034
 8003fdc:	08004034 	.word	0x08004034
 8003fe0:	08004038 	.word	0x08004038

08003fe4 <memset>:
 8003fe4:	4402      	add	r2, r0
 8003fe6:	4603      	mov	r3, r0
 8003fe8:	4293      	cmp	r3, r2
 8003fea:	d100      	bne.n	8003fee <memset+0xa>
 8003fec:	4770      	bx	lr
 8003fee:	f803 1b01 	strb.w	r1, [r3], #1
 8003ff2:	e7f9      	b.n	8003fe8 <memset+0x4>

08003ff4 <_init>:
 8003ff4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ff6:	bf00      	nop
 8003ff8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003ffa:	bc08      	pop	{r3}
 8003ffc:	469e      	mov	lr, r3
 8003ffe:	4770      	bx	lr

08004000 <_fini>:
 8004000:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004002:	bf00      	nop
 8004004:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004006:	bc08      	pop	{r3}
 8004008:	469e      	mov	lr, r3
 800400a:	4770      	bx	lr
